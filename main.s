; Small-C HuC6280 (1997-Nov-08)
; became HuC      (2000-Feb-22)
; became HuCC     (2024-May-01)
;
; This file generated by HuCC (v4.10.456.g3939dac, 2025-09-24)
; on Sun Oct 12 19:30:12 2025
;

HUC		=	1
HUCC		=	1

_SGX		=	1

		include	"hucc.asm"
		.data
		.bank	DATA_BANK

	.code

	.dbg	line,	"..\..\..\include\hucc\globals.h", 1; // **************************************************************************
	.dbg	line,	"..\..\..\include\hucc\globals.h", 2; // **************************************************************************
	.dbg	line,	"..\..\..\include\hucc\globals.h", 3; //
	.dbg	line,	"..\..\..\include\hucc\globals.h", 4; // globals.h
	.dbg	line,	"..\..\..\include\hucc\globals.h", 5; //
	.dbg	line,	"..\..\..\include\hucc\globals.h", 6; // **************************************************************************
	.dbg	line,	"..\..\..\include\hucc\globals.h", 7; // **************************************************************************
	.dbg	line,	"..\..\..\include\hucc\globals.h", 8; //
	.dbg	line,	"..\..\..\include\hucc\globals.h", 9; // The idea is that you, a PCE developer, copy this file from the ../include/
	.dbg	line,	"..\..\..\include\hucc\globals.h", 10; // directory and into your project's directory, and then define the variables
	.dbg	line,	"..\..\..\include\hucc\globals.h", 11; // that you want to have shared access to in all overlay programs on your CD.
	.dbg	line,	"..\..\..\include\hucc\globals.h", 12; //
	.dbg	line,	"..\..\..\include\hucc\globals.h", 13; // Because PCEAS searches the current (i.e. project) directory for an include
	.dbg	line,	"..\..\..\include\hucc\globals.h", 14; // file first, then it will find your customized copy of the file rather than
	.dbg	line,	"..\..\..\include\hucc\globals.h", 15; // the original copy in the ../include/ directory.
	.dbg	line,	"..\..\..\include\hucc\globals.h", 16; //
	.dbg	line,	"..\..\..\include\hucc\globals.h", 17; // **************************************************************************
	.dbg	line,	"..\..\..\include\hucc\globals.h", 18; // **************************************************************************
	.dbg	clear
	.bss
huc_globals:

huc_globals_end:
	.code
	.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
	.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
	.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
	.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
	.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 1; #ifndef _hucc_systemcard_h
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 2; #define _hucc_systemcard_h
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 7; ; hucc-systemcard.h
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 9; ; Macros and library functions for using the System Card.
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 11; ; Copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 20; ; Because these are mainly macros, and so must be included before being used
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 21; ; in compiled code, the actual functions here are written to avoid using any
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 22; ; BSS memory so that HuCC's overlay global-shared-variables are not effected.
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 23; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 24; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 25; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 27; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 28; // Backup RAM defines ...
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 29; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 31; #define  BM_OK             0
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 32; #define  BM_NOT_FOUND      1
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 33; #define  BM_BAD_CHECKSUM   2
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 34; #define  BM_DIR_CORRUPTED  3
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 35; #define  BM_FILE_EMPTY     4
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 36; #define  BM_FULL           5
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 37; #define  BM_NOT_FORMATED   0xFF			// HuC incorrect spelling.
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 38; #define  BM_NOT_FORMATTED  0xFF			// HuCC can use a dictionary!
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 40; #define  BRAM_STARTPTR     0x8010
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 42; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 43; // CD defines ...
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 44; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 46; #define	CDPLAY_MUTE		0
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 47; #define	CDPLAY_REPEAT		1
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 48; #define	CDPLAY_NORMAL		2
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 49; #define	CDPLAY_ENDOFDISC	0
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 51; #define	CDFADE_CANCEL	0
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 52; #define	CDFADE_PCM6	8
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 53; #define	CDFADE_ADPCM6	10
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 54; #define	CDFADE_PCM2	12
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 55; #define	CDFADE_ADPCM2	14
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 57; #define CDTRK_AUDIO	0
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 58; #define CDTRK_DATA	4
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 60; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 61; // ADPCM defines ...
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 62; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 64; #define	ADPLAY_AUTOSTOP		0
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 65; #define	ADPLAY_REPEAT		0x80
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 67; #define ADPLAY_FREQ_16KHZ	0xE
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 68; #define ADPLAY_FREQ_10KHZ	0xD
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 69; #define ADPLAY_FREQ_8KHZ	0xC
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 70; #define ADPLAY_FREQ_6KHZ	0xB
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 71; #define ADPLAY_FREQ_5KHZ	0xA
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 73; #define ADREAD_RAM	0
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 74; #define ADREAD_VRAM	0xFF
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 76; #define ADWRITE_RAM	0
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 77; #define ADWRITE_VRAM	0xFF
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 79; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 80; // Functions in hucc-systemcard.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 81; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 83; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 85; #asmdef	HUCC_USES_SYSTEMCARD 1
HUCC_USES_SYSTEMCARD = 1
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 87; extern void __fastcall __macro cd_boot( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 88; extern unsigned int __fastcall __macro cd_getver( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 89; extern void __fastcall __macro cd_reset( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 90; extern unsigned char __fastcall __macro cd_pause( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 91; extern unsigned char __fastcall cd_unpause( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 92; extern void __fastcall __macro cd_fade( unsigned char type<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 93; extern unsigned char __fastcall cd_playtrk( unsigned char start_track<_bx>, unsigned char end_track<_cx>, unsigned char mode<_dh> );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 94; extern unsigned char __fastcall cd_playmsf( unsigned char start_minute<_al>,  unsigned char start_second<_ah>,  unsigned char start_frame<_bl>, unsigned char end_minute<_cl>,  unsigned char end_second<_ch>,  unsigned char end_frame<_dl>,  unsigned char mode<_dh> );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 95; extern unsigned char __fastcall cd_fastvram( unsigned char ovl_index<_cl>, unsigned int sect_offset<_si>, unsigned int vramaddr<_bx>, unsigned int sectors<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 96; extern unsigned char __fastcall cd_loadvram( unsigned char ovl_index<_cl>, unsigned int sect_offset<_si>, unsigned int vramaddr<_bx>, unsigned int bytes<_ax> );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 97; extern unsigned char __fastcall cd_loaddata( unsigned char ovl_index<_cl>, unsigned int sect_offset<_si>, unsigned char __far *buffer<_bp_bank:_bp>, unsigned int bytes<__ptr> );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 98; extern unsigned char __fastcall cd_loadbank( unsigned char ovl_index<_cl>, unsigned int sect_offset<_si>, unsigned char bank<_bl>, unsigned int sectors<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 99; extern unsigned char __fastcall __macro cd_status( unsigned char mode<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 101; extern void __fastcall __macro ad_reset( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 102; extern unsigned char __fastcall __macro ad_trans( unsigned char ovl_index<_cl>, unsigned int sect_offset<_si>, unsigned char nb_sectors<_dh>, unsigned int ad_addr<_bx> );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 103; extern void __fastcall __macro ad_read( unsigned int ad_addr<_cx>, unsigned char mode<_dh>, unsigned int buf<_bx>, unsigned int bytes<_ax> );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 104; extern void __fastcall __macro ad_write( unsigned int ad_addr<_cx>, unsigned char mode<_dh>, unsigned int buf<_bx>, unsigned int bytes<_ax> );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 105; extern unsigned char __fastcall __macro ad_play( unsigned int ad_addr<_bx>, unsigned int bytes<_ax>, unsigned char freq<_dh>, unsigned char mode<_dl> );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 106; extern unsigned char __fastcall __macro ad_cplay( unsigned char ovl_index<_cl>, unsigned int sect_offset<_si>, unsigned int nb_sectors<_bx>, unsigned char freq<_dh> );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 107; extern void __fastcall __macro ad_stop( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 108; extern unsigned char __fastcall __macro ad_stat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 110; extern unsigned char __fastcall bm_check( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 111; extern unsigned char __fastcall bm_format( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 112; extern unsigned int __fastcall __macro bm_free( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 113; extern unsigned char __fastcall __macro bm_read( unsigned char *buffer<_bx>, unsigned char *name<_ax>, unsigned int offset<_dx>, unsigned int length<_cx> );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 114; extern unsigned char __fastcall __macro bm_write( unsigned char *buffer<_bx>, unsigned char *name<_ax>, unsigned int offset<_dx>, unsigned int length<_cx> );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 115; extern unsigned char __fastcall __macro bm_delete( unsigned char *name<_ax> );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 117; // Deprecated functions ...
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 119; extern unsigned char __fastcall __macro bm_exist( unsigned char *name<_ax> );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 120; extern unsigned char __fastcall __macro bm_create( unsigned char *name<_ax>, unsigned int length<_cx> );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 122; // void __fastcall _xsafe add_sectors( unsigned int sector_offset<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 124; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 126; #endif // _hucc_systemcard_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 1; #ifndef _hucc_baselib_h
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 2; #define _hucc_baselib_h
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 7; ; hucc-baselib.h
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 9; ; Basic library functions provided as macros.
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 11; ; Copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 18; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 20; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 21; // Joypad defines ...
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 22; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 24; #define	JOY_A		0x01
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 25; #define	JOY_I		0x01
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 26; #define	JOY_B		0x02
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 27; #define	JOY_II		0x02
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 28; #define	JOY_SLCT	0x04
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 29; #define	JOY_SEL		0x04
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 30; #define	JOY_STRT	0x08
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 31; #define	JOY_RUN		0x08
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 32; #define	JOY_UP		0x10
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 33; #define	JOY_RGHT	0x20
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 34; #define	JOY_RIGHT	0x20
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 35; #define	JOY_DOWN	0x40
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 36; #define	JOY_LEFT	0x80
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 38; #define	JOY_C		0x0100
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 39; #define	JOY_III		0x0100
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 40; #define	JOY_D		0x0200
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 41; #define	JOY_IV		0x0200
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 42; #define	JOY_E		0x0400
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 43; #define	JOY_V		0x0400
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 44; #define	JOY_F		0x0800
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 45; #define	JOY_VI		0x0800
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 47; #define JOY_SIXBUT	0x8000
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 48; #define JOY_TYPE6	0x8000
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 50; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 51; // SuperGRAFX VPC settings for set_vpc_ctl() ...
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 52; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 54; #define VPC_SPR1_BKG1_SPR2_BKG2	0x3000 // same as SGX_PARALLAX=0
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 55; #define VPC_SPR1_SPR2_BKG1_BKG2	0x7000 // same as SGX_PARALLAX=1
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 56; #define VPC_BKG1_BKG2_SPR1_SPR2	0xB000
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 58; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 59; // System Card variables ...
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 60; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 62; extern unsigned int si;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 63; extern unsigned int di;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 64; extern unsigned int bp;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 66; extern unsigned int ax;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 67; extern unsigned int bx;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 68; extern unsigned int cx;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 69; extern unsigned int dx;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 71; extern unsigned char al;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 72; extern unsigned char ah;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 73; extern unsigned char bl;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 74; extern unsigned char bh;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 75; extern unsigned char cl;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 76; extern unsigned char ch;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 77; extern unsigned char dl;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 78; extern unsigned char dh;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 80; extern unsigned char irq_cnt;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 81; extern unsigned char joynow[5];
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 82; extern unsigned char joytrg[5];
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 83; extern unsigned char joy6now[5];
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 84; extern unsigned char joy6trg[5];
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 85; extern unsigned int  bg_x1;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 86; extern unsigned int  bg_y1;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 87; extern unsigned int  bg_x2;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 88; extern unsigned int  bg_y2;
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 90; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 91; // Special macros to get information from PCEAS ...
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 92; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 94; #define BANK( datasym ) ((unsigned) (&__bank__ ## datasym))
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 95; #define SIZEOF( datasym ) ((unsigned) (&__sizeof__ ## datasym))
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 96; #define COUNTOF( datasym ) ((unsigned) (&__countof__ ## datasym))
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 97; #define OVERLAY( datasym ) ((unsigned) (&__overlay__ ## datasym))
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 100; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 101; // Functions in hucc-baselib.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 102; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 104; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 106; #asmdef	HUCC_USES_BASELIB 1
HUCC_USES_BASELIB = 1
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 108; #define	_OPTIMIZE 1
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 111; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 112; // Hardware Detection
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 113; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 115; extern unsigned char __fastcall __macro sgx_detect( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 116; extern unsigned char __fastcall __macro ac_exists( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 119; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 120; // Memory Access
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 121; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 123; extern unsigned char __fastcall __macro peek( unsigned int addr<__ptr> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 124; extern unsigned int  __fastcall __macro peekw( unsigned int addr<__ptr> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 126; extern void __fastcall __macro poke( unsigned int addr<__poke>, unsigned char with<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 127; extern void __fastcall __macro pokew( unsigned int addr<__poke>, unsigned int with<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 129; extern unsigned char __fastcall farpeek( void __far *addr<_bp_bank:_bp> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 130; extern unsigned int  __fastcall farpeekw( void __far *addr<_bp_bank:_bp> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 132; extern void __fastcall __nop set_far_base( unsigned char data_bank<_bp_bank>, unsigned char *data_addr<_bp> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 133; extern void __fastcall set_far_offset( unsigned int offset<_bp>, unsigned char data_bank<_bp_bank>, unsigned char *data_addr<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 135; extern unsigned char __fastcall far_peek( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 136; extern unsigned int  __fastcall far_peekw( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 138; extern void __fastcall __macro reset_mpr2( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 139; extern void __fastcall __macro reset_mpr34( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 141; extern void * __fastcall __macro farset_mpr2( void __far *addr<_bp_bank:_bp> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 142; extern void * __fastcall __macro farset_mpr34( void __far *addr<_bp_bank:_bp> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 144; extern void * __fastcall __macro far_set_mpr2( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 145; extern void * __fastcall __macro far_set_mpr34( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 148; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 149; // Clock Functions
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 150; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 152; extern unsigned char __fastcall __macro clock_hh( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 153; extern unsigned char __fastcall __macro clock_mm( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 154; extern unsigned char __fastcall __macro clock_ss( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 155; extern unsigned char __fastcall __macro clock_tt( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 156; extern void __fastcall __macro clock_reset( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 159; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 160; // Joypad Functions
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 161; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 163; extern unsigned int __fastcall __macro joy( unsigned char which<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 164; extern unsigned int __fastcall __macro joytrg( unsigned char which<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 167; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 168; // Number Functions
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 169; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 171; extern int __fastcall abs( int value<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 173; extern void __fastcall __macro srand( unsigned char seed<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 174; extern unsigned int __fastcall rand( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 175; extern unsigned char __fastcall rand8( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 177; // Note: "limit" is 0..255.
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 178; extern unsigned char __fastcall random8( unsigned char limit<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 180; // Note: "limit" is 0..128, 129..255 are treated as 128!
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 181; extern unsigned char __fastcall random( unsigned char limit<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 184; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 185; // Overlay Execution
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 186; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 188; extern unsigned char __fastcall __macro cd_execoverlay( unsigned char ovl_index<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 191; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 192; // Functions that are only optionally available if configured in your hucc-config.inc
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 193; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 195; extern unsigned int __fastcall __macro joybuf( unsigned char which<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 196; extern unsigned int __fastcall __macro get_joy_events( unsigned char which<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 197; extern void __fastcall __macro clear_joy_events( unsigned char mask<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 200; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 201; // Functions that are only implemented in the TGEMU emulator for unit-testing
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 202; // the compiler, and which should never be used in normal HuCC projects ...
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 203; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 205; extern void __fastcall dump_screen( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 206; extern void __fastcall abort( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 207; extern void __fastcall exit( int value<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 209; extern unsigned char __fastcall __builtin_ffs( unsigned int value<__temp> );
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 211; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 213; #endif // _hucc_baselib_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 1; #ifndef _hucc_gfx_h
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 2; #define _hucc_gfx_h
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 7; ; huc-gfx.h
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 9; ; Based on the original HuC and MagicKit functions by David Michel and the
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 10; ; other original HuC developers.
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 11; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 12; ; Modifications copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 13; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 14; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 15; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 16; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 17; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 19; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 21; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 22; // Screen defines ...
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 23; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 25; #define	SCR_SIZE_32x32	0
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 26; #define	SCR_SIZE_64x32	1
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 27; #define	SCR_SIZE_128x32	2
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 28; #define	SCR_SIZE_32x64	4
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 29; #define	SCR_SIZE_64x64	5
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 30; #define	SCR_SIZE_128x64	6
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 32; #define	XRES_SHARP	0
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 33; #define	XRES_SOFT	4
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 34; #define	XRES_KEEP	128
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 36; #define VPC_WIN_A	0x00
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 37; #define VPC_WIN_B	0x01
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 38; #define	VPC_WIN_AB	0x02
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 39; #define	VPC_WIN_NONE	0x03
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 40; #define	VPC_NORM	0x00
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 41; #define	VPC_SPR		0x04
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 42; #define	VPC_INV_SPR	0x08
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 43; #define VDC1_ON		0x01
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 44; #define	VDC1_OFF	0x00
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 45; #define VDC2_ON		0x02
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 46; #define	VDC2_OFF	0x00
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 47; #define VDC_ON		0x03
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 48; #define	VDC_OFF		0x00
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 50; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 51; // Functions in hucc-gfx.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 52; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 54; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 56; #asmdef	HUCC_USES_GFX 1
HUCC_USES_GFX = 1
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 58; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 59; // Color and Palette Functions
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 60; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 62; extern void __fastcall clear_palette( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 64; extern void __fastcall __nop set_color( unsigned int index<VCE_CTA>, unsigned int value<VCE_CTW> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 65; extern void __fastcall set_color_rgb( unsigned int index<VCE_CTA>, unsigned char r<_al>, unsigned char g<_ah>, unsigned char b<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 66; extern unsigned int __fastcall __macro get_color( unsigned int index<VCE_CTA> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 68; extern void __fastcall load_palette( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp>, unsigned char num_palettes<_ah> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 69; extern void __fastcall far_load_palette( unsigned char palette<_al>, unsigned char num_palettes<_ah> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 71; extern void __fastcall read_palette( unsigned char palette<_al>, unsigned char num_palettes<_ah>, unsigned int *destination<_di> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 73; extern void __fastcall __macro fade_to_black( unsigned int __far *from<_bp_bank:_bp>, unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_sub<_ah> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 74; extern void __fastcall __macro fade_to_white( unsigned int __far *from<_bp_bank:_bp>, unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_add<_ah> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 75; extern void __fastcall __macro cross_fade_to( unsigned int __far *from<_bp_bank:_bp>, unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char which_component<_ah> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 77; extern void __fastcall __macro far_fade_to_black( unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_sub<_ah> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 78; extern void __fastcall __macro far_fade_to_white( unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_add<_ah> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 79; extern void __fastcall __macro far_cross_fade_to( unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char which_component<_ah> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 83; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 84; // Video Functions
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 85; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 87; extern void __fastcall init_240x208( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 88; extern void __fastcall init_256x224( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 90; extern void __fastcall vsync( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 91; extern void __fastcall vsync( unsigned char count<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 93; extern void __fastcall disp_on( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 94; extern void __fastcall disp_off( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 96; extern void __fastcall set_screen_size( unsigned char value<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 98; extern void __fastcall set_xres( unsigned int x_pixels<_ax>, unsigned char blur_flag<_bl> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 100; extern void __fastcall cls( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 101; extern void __fastcall cls( unsigned int tile<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 103; extern unsigned int __fastcall __macro vram_addr( unsigned char bat_x<_al>, unsigned char bat_y<_ah> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 104; extern unsigned int __fastcall __macro get_vram( unsigned int address<_di> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 105; extern void __fastcall __macro put_vram( unsigned int address<_di>, unsigned int data<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 107; extern void __fastcall __macro load_vram( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_words<_ax> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 108; extern void __fastcall __macro far_load_vram( unsigned int vram<_di>,  unsigned int num_words<_ax> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 110; extern void __fastcall load_bat( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 111; extern void __fastcall far_load_bat( unsigned int vram<_di>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 113; extern void __fastcall __macro load_sprites( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_groups<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 114; extern void __fastcall __macro far_load_sprites( unsigned int vram<_di>, unsigned int num_groups<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 116; extern void __fastcall vram2vram( unsigned int vram_dst<_ax>, unsigned int vram_src<_bx>, unsigned int word_len<_cx> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 119; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 120; // SuperGRAFX Video Functions
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 121; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 123; extern void __fastcall __nop vpc_set_ctl( unsigned int bits<VPC_CR> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 124; extern void __fastcall __nop vpc_set_win1( unsigned int width<VPC_WINDOW1> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 125; extern void __fastcall __nop vpc_set_win2( unsigned int width<VPC_WINDOW2> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 127; extern void __fastcall sgx_set_screen_size( unsigned char value<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 129; extern void __fastcall sgx_set_xres( unsigned int x_pixels<_ax>, unsigned char blur_flag<_bl> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 131; extern void __fastcall sgx_cls( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 132; extern void __fastcall sgx_cls( unsigned int tile<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 134; extern unsigned int __fastcall __macro sgx_vram_addr( unsigned char bat_x<_al>, unsigned char bat_y<_ah> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 135; extern unsigned int __fastcall __macro sgx_get_vram( unsigned int address<_di> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 136; extern void __fastcall __macro sgx_put_vram( unsigned int address<_di>, unsigned int data<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 138; extern void __fastcall __macro sgx_load_vram( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_words<_ax> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 139; extern void __fastcall __macro sgx_far_load_vram( unsigned int vram<_di>, unsigned int num_words<_ax> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 141; extern void __fastcall sgx_load_bat( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 142; extern void __fastcall sgx_far_load_bat( unsigned int vram<_di>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 144; extern void __fastcall __macro sgx_load_sprites( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_groups<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 145; extern void __fastcall __macro sgx_far_load_sprites( unsigned int vram<_di>, unsigned int num_groups<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 147; extern void __fastcall sgx_vram2vram( unsigned int vram_dst<_ax>, unsigned int vram_src<_bx>, unsigned int word_len<_cx> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 150; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 151; // Font Functions
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 152; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 154; extern void __fastcall set_font_addr( unsigned int vram<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 155; extern void __fastcall set_font_pal( unsigned char palette<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 157; extern void __fastcall load_font( unsigned char __far *font<_bp_bank:_bp>, unsigned char count<_al>, unsigned int vram<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 158; extern void __fastcall far_load_font( unsigned char count<_al>, unsigned int vram<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 160; extern void __fastcall __nop set_font_color( unsigned char foreground<monofont_fg>, unsigned char background<monofont_bg> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 161; extern void __fastcall __macro load_default_font( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 164; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 165; // SuperGRAFX Font Functions
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 166; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 168; extern void __fastcall sgx_set_font_addr( unsigned int vram<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 169; extern void __fastcall sgx_set_font_pal( unsigned char palette<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 171; extern void __fastcall sgx_load_font( char __far *font<_bp_bank:_bp>, unsigned char count<_al>, unsigned int vram<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 172; extern void __fastcall sgx_far_load_font( unsigned char count<_al>, unsigned int vram<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 174; extern void __fastcall __macro sgx_load_default_font( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 177; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 178; // Deprecated functions ...
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 179; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 181; extern void __fastcall __macro set_xres( unsigned int x_pixels<_ax> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 182; extern void __fastcall __macro sgx_set_xres( unsigned int x_pixels<_ax> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 184; extern void __fastcall load_background( unsigned char __far *tiles<_bp_bank:_bp>, unsigned char __far *palettes<__fbank:__fptr>, unsigned char __far *bat<_cl:_bx>, unsigned char w<_dl>, unsigned char h<_dh> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 186; extern void __fastcall __macro set_bgpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 187; extern void __fastcall __macro set_bgpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_palettes<_ah> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 188; extern void __fastcall __macro set_sprpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 189; extern void __fastcall __macro set_sprpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_palettes<_ah> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 191; extern void __fastcall load_font( char __far *font<_bp_bank:_bp>, unsigned char count<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 193; extern void __fastcall put_string( unsigned char *string<_bp>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 195; extern void __fastcall put_char( unsigned char digit<_bl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 196; extern void __fastcall put_digit( unsigned char digit<_bl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 197; extern void __fastcall put_hex( unsigned int number<_bx>, unsigned char length<_cl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 198; extern void __fastcall put_number( unsigned int number<_bx>, unsigned char length<_cl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 199; extern void __fastcall put_raw( unsigned int data<_bx>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 201; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 203; #endif // _hucc_gfx_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 1; #ifndef _hucc_string_h
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 2; #define _hucc_string_h
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 7; ; hucc-string.h
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 9; ; Not-quite-standard, but fast, replacements for <string.h>.
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 11; ; Copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 20; ; !!! WARNING : non-standard return values !!!
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 21; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 22; ; Strings are limited to a maximum of 255 characters (+ the terminator)!
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 23; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 24; ; The memcpy(), strcpy() and strcat() functions do NOT return the destination
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 25; ; address, and they are declared "void" to check that the value is not used.
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 26; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 27; ; mempcpy() is provided which returns the end address instead of the starting
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 28; ; address, because this is typically more useful.
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 29; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 30; ; Please note that both memcpy() and memset() are implemented using a TII for
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 31; ; speed, and so the length should be < 16 bytes if used in time-critical bits
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 32; ; of code (such as when using a split screen) because they delay interrupts.
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 33; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 34; ; strncpy() and strncat() are not provided, because strncpy() was not created
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 35; ; for the purpose of avoiding string overruns, and strncat() is just a poorly
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 36; ; designed function IMHO.
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 37; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 38; ; POSIX strlcpy() and strlcat() are provided instead, but once again they are
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 39; ; slightly non-standard in that the return value when there is an overflow is
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 40; ; the buffer size (so that the overflow can be detected), instead of the full
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 41; ; size of the destination string that was too big to fit in the buffer.
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 42; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 43; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 44; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 46; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 47; // Functions in hucc-string.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 48; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 50; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 52; #asmdef	HUCC_USES_STRING 1
HUCC_USES_STRING = 1
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 54; extern void __fastcall strcpy( char *destination<_di>, char *source<_bp> );
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 55; extern void __fastcall strcat( char *destination<_di>, char *source<_bp> );
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 57; extern unsigned int __fastcall strlen( char *source<_bp> );
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 59; extern unsigned int __fastcall strlcpy( char *destination<_di>, char *source<_bp>, unsigned char size<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 60; extern unsigned int __fastcall strlcat( char *destination<_di>, char *source<_bp>, unsigned char size<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 62; extern void __fastcall memcpy( unsigned char *destination<ram_tii_dst>, unsigned char *source<ram_tii_src>, unsigned int count<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 63; extern void __fastcall farmemcpy( unsigned char *destination<ram_tii_dst>, unsigned char __far *source<_bp_bank:ram_tii_src>, unsigned int count<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 64; extern void __fastcall far_memcpy( unsigned char *destination<ram_tii_dst>, unsigned int count<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 66; extern unsigned char * __fastcall mempcpy( unsigned char *destination<ram_tii_dst>, unsigned char *source<ram_tii_src>, unsigned int count<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 67; extern unsigned char * __fastcall farmempcpy( unsigned char *destination<ram_tii_dst>, unsigned char __far *source<_bp_bank:ram_tii_src>, unsigned int count<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 68; extern unsigned char * __fastcall far_mempcpy( unsigned char *destination<ram_tii_dst>, unsigned int count<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 70; extern void __fastcall memset( unsigned char *destination<ram_tii_src>, unsigned char value<_al>, unsigned int count<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 72; //  0 	if strings are equal
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 73; //  1 	if the first non-matching character in string1 > string2 (in ASCII).
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 74; // -1 	if the first non-matching character in string1 < string2 (in ASCII).
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 76; extern int __fastcall strcmp( char *string1<_di>, char *string2<_bp> );
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 77; extern int __fastcall strncmp( char *string1<_di>, char *string2<_bp>, unsigned int count<_ax> );
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 79; extern int __fastcall __macro memcmp( unsigned char *string1<_di>, unsigned char *string2<_bp>, unsigned int count<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 80; extern int __fastcall farmemcmp( unsigned char *string1<_di>, unsigned char __far *string2<_bp_bank:_bp>, unsigned int count<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 81; extern int __fastcall far_memcmp( unsigned char *string1<_di>, unsigned int count<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 83; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 85; #endif // _hucc_string_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 1; #ifndef _hucc_old_scroll_h
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 2; #define _hucc_old_scroll_h
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 7; ; hucc-old-scroll.h
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 9; ; Based on the original HuC and MagicKit functions by David Michel and the
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 10; ; other original HuC developers.
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 11; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 12; ; Modifications copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 13; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 14; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 15; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 16; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 17; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 19; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 20; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 21; ; HuC's old scrolling library is provided for use with existing HuC projects,
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 22; ; but it should preferably be avoided in new projects because it is slow and
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 23; ; forever limited by its choice to handle gaps between areas, and sorting.
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 24; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 25; ; HuCC's new scrolling library puts the responibility for defining both gaps
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 26; ; and the display order into the project's hands, but in return it runs much
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 27; ; faster, using less than 1/6 of the processing time in VBLANK, and far less
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 28; ; time in the RCR interrputs themselves. It also supports the 2nd SuperGRAFX
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 29; ; screen layer, which HuC's old scrolling library ignores.
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 30; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 31; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 32; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 34; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 35; // Functions in hucc-old-scroll.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 36; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 38; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 40; #asmdef	HUCC_USES_OLD_SCROLL 1
HUCC_USES_OLD_SCROLL = 1
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 42; extern void __fastcall scroll( unsigned char num<_al>, unsigned int x<_cx>, unsigned int y<_dx>, unsigned char top<_ah>, unsigned char bottom<_bl>, unsigned char disp<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 43; extern void __fastcall scroll_disable( unsigned char num<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 45; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 47; #endif // _hucc_old_scroll_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 1; #ifndef _hucc_old_spr_h
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 2; #define _hucc_old_spr_h
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 7; ; hucc-old-spr.h
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 9; ; Based on the original HuC and MagicKit functions by David Michel and the
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 10; ; other original HuC developers.
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 11; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 12; ; Modifications copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 13; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 14; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 15; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 16; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 17; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 19; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 21; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 22; // Sprite defines ...
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 23; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 25; #define FLIP_X_MASK 0x08
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 26; #define FLIP_Y_MASK 0x80
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 27; #define FLIP_MAS    0x88
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 28; #define SIZE_MAS    0x31
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 30; #define NO_FLIP     0x00
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 31; #define NO_FLIP_X   0x00
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 32; #define NO_FLIP_Y   0x00
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 33; #define FLIP_X      0x08
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 34; #define FLIP_Y      0x80
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 35; #define SZ_16x16    0x00
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 36; #define SZ_16x32    0x10
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 37; #define SZ_16x64    0x30
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 38; #define SZ_32x16    0x01
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 39; #define SZ_32x32    0x11
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 40; #define	SZ_32x64    0x31
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 42; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 43; // Functions in hucc-old-spr.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 44; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 46; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 48; #asmdef	HUCC_USES_OLD_SPR 1
HUCC_USES_OLD_SPR = 1
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 50; extern void __fastcall init_satb( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 51; extern void __fastcall reset_satb( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 52; extern void __fastcall satb_update( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 53; extern void __fastcall spr_set( unsigned char num<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 54; extern void __fastcall spr_hide( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 55; extern void __fastcall spr_show( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 56; extern void __fastcall spr_x( unsigned int value<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 57; extern void __fastcall spr_y( unsigned int value<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 58; extern void __fastcall spr_pattern( unsigned int vaddr<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 59; extern void __fastcall spr_ctrl( unsigned char mask<_al>, unsigned char value<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 60; extern void __fastcall spr_pal( unsigned char palette<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 61; extern void __fastcall spr_pri( unsigned char priority<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 63; extern unsigned int __fastcall spr_get_x( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 64; extern unsigned int __fastcall spr_get_y( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 66; extern void __fastcall sgx_init_satb( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 67; extern void __fastcall sgx_reset_satb( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 68; extern void __fastcall sgx_satb_update( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 69; extern void __fastcall sgx_spr_set( unsigned char num<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 70; extern void __fastcall sgx_spr_hide( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 71; extern void __fastcall sgx_spr_show( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 72; extern void __fastcall sgx_spr_x( unsigned int value<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 73; extern void __fastcall sgx_spr_y( unsigned int value<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 74; extern void __fastcall sgx_spr_pattern( unsigned int vaddr<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 75; extern void __fastcall sgx_spr_ctrl( unsigned char mask<_al>, unsigned char value<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 76; extern void __fastcall sgx_spr_pal( unsigned char palette<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 77; extern void __fastcall sgx_spr_pri( unsigned char priority<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 79; extern unsigned int __fastcall sgx_spr_get_x( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 80; extern unsigned int __fastcall sgx_spr_get_y( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 82; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 84; #endif // _hucc_old_spr_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 1; #ifndef _hucc_old_map_h
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 2; #define _hucc_old_map_h
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 7; ; hucc-old-map.h
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 9; ; Based on the original HuC and MagicKit functions by David Michel and the
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 10; ; other original HuC developers.
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 11; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 12; ; Modifications copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 13; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 14; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 15; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 16; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 17; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 19; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 21; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 22; // Functions in hucc-old-map.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 23; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 25; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 27; #asmdef	HUCC_USES_OLD_MAP 1
HUCC_USES_OLD_MAP = 1
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 29; extern void __fastcall set_tile_address( unsigned int vram<_di> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 30; extern void __fastcall sgx_set_tile_address( unsigned int vram<_di> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 32; extern void __fastcall __nop set_tile_data( unsigned char __far *tiles<vdc_tile_bank:vdc_tile_addr>, unsigned char num_tiles<vdc_num_tiles>, unsigned char __far *palette_table<vdc_attr_bank:vdc_attr_addr>, unsigned char tile_type<vdc_tile_type> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 33; extern void __fastcall __nop sgx_set_tile_data( unsigned char __far *tiles<sgx_tile_bank:sgx_tile_addr>, unsigned char num_tiles<sgx_num_tiles>, unsigned char __far *palette_table<sgx_attr_bank:sgx_attr_addr>, unsigned char tile_type<sgx_tile_type> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 35; extern void __fastcall __nop set_far_tile_data( unsigned char tile_bank<vdc_tile_bank>, unsigned char *tile_addr<vdc_tile_addr>, unsigned char num_tiles<vdc_num_tiles>, unsigned char palette_table_bank<vdc_attr_bank>, unsigned char *palette_table_addr<vdc_attr_addr>, unsigned char tile_type<vdc_tile_type> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 36; extern void __fastcall __nop sgx_set_far_tile_data( unsigned char tile_bank<sgx_tile_bank>, unsigned char *tile_addr<sgx_tile_addr>, unsigned char num_tiles<sgx_num_tiles>, unsigned char palette_table_bank<sgx_attr_bank>, unsigned char *palette_table_addr<sgx_attr_addr>, unsigned char tile_type<sgx_tile_type> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 38; extern void __fastcall __nop set_map_data( unsigned char __far *map<vdc_map_bank:vdc_map_addr>, unsigned char w<vdc_map_width>, unsigned char h<vdc_map_height> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 39; extern void __fastcall __nop sgx_set_map_data( unsigned char __far *map<sgx_map_bank:sgx_map_addr>, unsigned char w<sgx_map_width>, unsigned char h<sgx_map_height> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 41; extern void __fastcall __nop set_far_map_data( unsigned char map_bank<vdc_map_bank>, unsigned char *map_addr<vdc_map_addr>, unsigned char w<vdc_map_width>, unsigned char h<vdc_map_height> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 42; extern void __fastcall __nop sgx_set_far_map_data( unsigned char map_bank<vdc_map_bank>, unsigned char *map_addr<vdc_map_addr>, unsigned char w<sgx_map_width>, unsigned char h<sgx_map_height> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 44; extern void __fastcall load_tile( unsigned int vram<_di> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 45; extern void __fastcall sgx_load_tile( unsigned int vram<_di> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 47; extern void __fastcall load_map( unsigned char bat_x<_al>, unsigned char bat_y<_ah>, int map_x<_bx>, int map_y<_dx>, unsigned char tiles_w<_cl>, unsigned char tiles_h<_ch> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 48; extern void __fastcall sgx_load_map( unsigned char bat_x<_al>, unsigned char bat_y<_ah>, int map_x<_bx>, int map_y<_dx>, unsigned char tiles_w<_cl>, unsigned char tiles_h<_ch> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 50; extern unsigned char __fastcall map_get_tile( unsigned char map_x<_bl>, unsigned char map_y<_bh> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 51; extern unsigned char __fastcall sgx_map_get_tile( unsigned char map_x<_bl>, unsigned char map_y<_bh> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 53; extern void __fastcall map_put_tile( unsigned char map_x<_bl>, unsigned char map_y<_bh>, unsigned char tile<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 54; extern void __fastcall sgx_map_put_tile( unsigned char map_x<_bl>, unsigned char map_y<_bh>, unsigned char tile<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 56; extern void __fastcall put_tile( unsigned char tile<_bl>, unsigned char bat_x<_al>, unsigned char bat_y<_ah> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 57; extern void __fastcall sgx_put_tile( unsigned char tile<_bl>, unsigned char bat_x<_al>, unsigned char bat_y<_ah> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 59; // Deprecated functions ...
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 61; extern void __fastcall set_tile_data( unsigned char *tile_ex<_di> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 63; extern void __fastcall __nop set_map_pals( unsigned char __far *palette_table<vdc_attr_bank:vdc_attr_addr> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 64; extern void __fastcall __nop set_map_tile_type( unsigned char tile_type<vdc_tile_type> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 66; extern void __fastcall __nop sgx_set_map_pals( unsigned char __far *palette_table<sgx_attr_bank:sgx_attr_addr> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 67; extern void __fastcall __nop sgx_set_map_tile_type( unsigned char tile_type<sgx_tile_type> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 69; extern void __fastcall set_map_tile_base( unsigned int vram<_di> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 70; extern void __fastcall sgx_set_map_tile_base( unsigned int vram<_di> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 72; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 74; #endif // _hucc_old_map_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 1; #ifndef _hucc_old_line_h
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 2; #define _hucc_old_line_h
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 7; ; hucc-old-line.h
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 9; ; Based on the original HuC and MagicKit functions by David Michel and the
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 10; ; other original HuC developers.
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 11; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 12; ; Modifications copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 13; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 14; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 15; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 16; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 17; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 19; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 21; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 22; // Functions in hucc-old-line.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 23; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 25; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 27; #asmdef	HUCC_USES_OLD_LINE 1
HUCC_USES_OLD_LINE = 1
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 29; extern void __fastcall gfx_init( unsigned int start_vram_addr<_ax> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 30; extern void __fastcall gfx_clear( unsigned int start_vram_addr<_di> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 31; extern void __fastcall gfx_plot( unsigned int x<_gfx_x1>, unsigned int y<_gfx_y1>, char color<_gfx_color> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 32; extern void __fastcall gfx_line( unsigned int x1<_gfx_x1>, unsigned int y1<_gfx_y1>, unsigned int x2<_gfx_x2>, unsigned int y2<_gfx_y2>, unsigned char color<_gfx_color> );
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 34; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 36; #endif // _hucc_old_line_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
	.dbg	line,	"main.c", 1; #include "huc.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
	.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
	.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
	.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
	.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
	.dbg	line,	"main.c", 2; #include "hucc-scroll.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 1; #ifndef _hucc_scroll_h
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 2; #define _hucc_scroll_h
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 7; ; hucc-scroll.h
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 9; ; Routines for a fast split-screen scrolling system.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 11; ; Copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 20; ; The maximum number of splits for each screen layer is set in your project's
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 21; ; "hucc-config.inc" file, with the library having a limit of 128-per-layer.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 22; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 23; ; Your first active split must be defined to start at screen line 0, and then
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 24; ; the rest of the active splits must be in increasing line order to match the
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 25; ; way that the PC Engine displays the output image.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 26; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 27; ; You can have disabled splits interleaved with your active splits.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 28; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 29; ; Splits that are normally disabled can be used to create full screen effects
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 30; ; such as bouncing the screen up and down by adding blank areas at the top or
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 31; ; bottom of the screen, and then rapidly changing the height of those areas.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 32; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 33; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 34; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 36; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 37; // VDC bits for display_flags ...
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 38; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 40; #ifndef BKG_OFF
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 41; #define BKG_OFF 0x00
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 42; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 44; #ifndef SPR_OFF
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 45; #define SPR_OFF 0x00
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 46; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 48; #ifndef BKG_ON
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 49; #define BKG_ON 0x80
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 50; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 52; #ifndef SPR_ON
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 53; #define SPR_ON 0x40
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 54; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 56; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 57; // Functions in hucc-scroll.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 58; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 60; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 62; #asmdef	HUCC_USES_NEW_SCROLL 1
HUCC_USES_NEW_SCROLL = 1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 64; extern void __fastcall scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 65; extern void __fastcall sgx_scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 67; extern void __fastcall disable_split( unsigned char index<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 68; extern void __fastcall sgx_disable_split( unsigned char index<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 70; extern void __fastcall __macro disable_all_splits( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 71; extern void __fastcall __macro sgx_disable_all_splits( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 73; #asm
	.dbg	clear
		.macro	_disable_all_splits
		ldy	#HUCC_PCE_SPLITS - 1
!loop:		tya
		call	_disable_split.1
		dey
		bpl	!loop-
		.endm
		.macro	_sgx_disable_all_splits
		ldy	#HUCC_SGX_SPLITS - 1
!loop:		tya
		call	_sgx_disable_split.1
		dey
		bpl	!loop-
		.endm

	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 89; #endasm
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 91; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 93; #endif // _hucc_scroll_h
	.dbg	line,	"main.c", 3; #include "hucc-chrmap.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 1; #ifndef _hucc_chrmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 2; #define _hucc_chrmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 7; ; hucc-chrmap.h
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 9; ; A simple map system based on 8x8 characters (aka "tiles") in BAT format.
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 11; ; Copyright John Brandwood 2025.
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 20; ; The maximum X and Y size for chrmaps is 256 characters (2048 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 21; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 22; ; The maximum total size for a chrmap is 16KBytes, which allows for maps up
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 23; ; to 256x32 tiles (2048x256 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 24; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 25; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 26; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 28; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 29; // This code extends the blkmap library ...
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 30; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 32; #include "hucc-blkmap.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 1; #ifndef _hucc_blkmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 2; #define _hucc_blkmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 7; ; hucc-blkmap.h
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 9; ; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 11; ; Copyright John Brandwood 2025.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 20; ; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 21; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 22; ; The maximum total size for a blkmap is 16KBytes, which allows for maps up
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 23; ; to 128x128 blocks (2048x2048 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 24; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 25; ; Huge multi-screen blkmaps are also supported (optionally).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 26; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 27; ; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 28; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 29; ; The maximum total size for a multi-screen map is 8KBytes, which allows for
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 30; ; a total of 1024 screens.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 31; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 32; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 33; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 35; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 36; // Functions in blkmap.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 37; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 39; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 41; #asmdef	HUCC_USES_BLKMAP 1
HUCC_USES_BLKMAP = 1
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 43; // Current top-left of drawn map in pixels.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 44; extern unsigned int   vdc_map_pxl_x;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 45; extern unsigned int   vdc_map_pxl_y;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 47; // Width and height to draw/scroll in characters (not tiles).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 48; extern unsigned char  vdc_map_draw_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 49; extern unsigned char  vdc_map_draw_h;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 51; // Width of map (or multi-screen BAT) in tiles.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 52; extern unsigned char  vdc_map_line_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 54; // Width of map in screens (if multi-screen map).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 55; extern unsigned char  vdc_map_scrn_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 57; // Extra information returned by get_map_block() and sgx_get_map_block(),
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 58; // which are the collision flags and the mask/overlay sprite for the BLK.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 59; extern unsigned char  map_blk_flag;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 60; extern unsigned char  map_blk_mask;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 62; extern unsigned char  vdc_scr_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 63; extern unsigned char *vdc_scr_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 65; extern unsigned char  vdc_map_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 66; extern unsigned char *vdc_map_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 68; extern unsigned char  vdc_blk_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 69; extern unsigned char *vdc_blk_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 71; extern unsigned char  vdc_tbl_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 72; extern unsigned char *vdc_tbl_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 74; extern void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blocks<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 75; extern void __fastcall __macro set_blkmap( unsigned char __far *blk_map<vdc_map_bank:vdc_map_addr>, unsigned char blocks_w<vdc_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 76; extern void __fastcall __macro set_multimap( unsigned char __far *multi_map<vdc_scr_bank:vdc_scr_addr>, unsigned char screens_w<vdc_map_scrn_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 78; extern void __fastcall draw_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 79; extern void __fastcall scroll_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 81; extern void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 83; extern unsigned char __fastcall get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 85; #asm
	.dbg	clear
		.macro	_set_blkmap.2
		stz	vdc_scr_bank
		.endm
		.macro	_set_multimap.2
		lda	vdc_bat_width
		lsr	a
		sta	vdc_map_line_w
		.endm
		.macro	SCREEN
		db	(((\1) & $1FFF) | $6000) >> 8, bank(\1)
		db	(((\2) & $1FFF) | $4000) >> 8, bank(\2)
		db	(((\3) & $1FFF) | $6000) >> 8, bank(\3)
		dw	(\4)
		.endm

	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 102; #endasm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 104; #ifdef _SGX
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 106; // Current top-left of drawn map in pixels.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 107; extern unsigned int   sgx_map_pxl_x;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 108; extern unsigned int   sgx_map_pxl_y;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 110; // Width and height to draw/scroll in characters (not tiles).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 111; extern unsigned char  sgx_map_draw_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 112; extern unsigned char  sgx_map_draw_h;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 114; // Width of map (or multi-screen BAT) in tiles.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 115; extern unsigned char  sgx_map_line_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 117; // Width of map in screens (if multi-screen map).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 118; extern unsigned char  sgx_map_scrn_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 120; extern unsigned char  sgx_scr_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 121; extern unsigned char *sgx_scr_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 123; extern unsigned char  sgx_map_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 124; extern unsigned char *sgx_map_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 126; extern unsigned char  sgx_blk_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 127; extern unsigned char *sgx_blk_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 129; extern unsigned char  sgx_tbl_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 130; extern unsigned char *sgx_tbl_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 132; extern void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blocks<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 133; extern void __fastcall __macro sgx_set_blkmap( unsigned char __far *blk_map<sgx_map_bank:sgx_map_addr>, unsigned char blocks_w<sgx_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 134; extern void __fastcall __macro sgx_set_multimap( unsigned char __far *multi_map<sgx_scr_bank:sgx_scr_addr>, unsigned char screens_w<sgx_map_scrn_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 136; extern void __fastcall sgx_draw_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 137; extern void __fastcall sgx_scroll_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 139; extern void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 141; extern unsigned char __fastcall sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 143; #asm
	.dbg	clear
		.macro	_sgx_set_blkmap.2
		stz	sgx_scr_bank
		.endm
		.macro	_sgx_set_multimap.2
		lda	sgx_bat_width
		lsr	a
		sta	sgx_map_line_w
		.endm

	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 153; #endasm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 155; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 157; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 159; #endif // _hucc_blkmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 34; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 35; // Functions in chrmap.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 36; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 38; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 40; #asmdef	HUCC_USES_CHRMAP 1
HUCC_USES_CHRMAP = 1
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 42; extern void __fastcall __nop set_chrmap( unsigned char __far *chrmap<vdc_map_bank:vdc_map_addr>, unsigned char tiles_w<vdc_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 44; extern void __fastcall draw_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 45; extern void __fastcall scroll_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 47; extern void __fastcall blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 49; #ifdef _SGX
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 51; extern void __fastcall __nop sgx_set_chrmap( unsigned char __far *chrmap<sgx_map_bank:sgx_map_addr>, unsigned char tiles_w<sgx_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 53; extern void __fastcall sgx_draw_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 54; extern void __fastcall sgx_scroll_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 56; extern void __fastcall sgx_blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 58; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 60; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 62; #endif // _hucc_chrmap_h
	.dbg	line,	"main.c", 4; #include "hucc-blkmap.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 1; #ifndef _hucc_blkmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 2; #define _hucc_blkmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 7; ; hucc-blkmap.h
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 9; ; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 11; ; Copyright John Brandwood 2025.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 20; ; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 21; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 22; ; The maximum total size for a blkmap is 16KBytes, which allows for maps up
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 23; ; to 128x128 blocks (2048x2048 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 24; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 25; ; Huge multi-screen blkmaps are also supported (optionally).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 26; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 27; ; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 28; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 29; ; The maximum total size for a multi-screen map is 8KBytes, which allows for
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 30; ; a total of 1024 screens.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 31; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 32; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 33; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 35; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 36; // Functions in blkmap.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 37; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 39; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 41; #asmdef	HUCC_USES_BLKMAP 1
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 43; // Current top-left of drawn map in pixels.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 44; extern unsigned int   vdc_map_pxl_x;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 45; extern unsigned int   vdc_map_pxl_y;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 47; // Width and height to draw/scroll in characters (not tiles).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 48; extern unsigned char  vdc_map_draw_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 49; extern unsigned char  vdc_map_draw_h;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 51; // Width of map (or multi-screen BAT) in tiles.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 52; extern unsigned char  vdc_map_line_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 54; // Width of map in screens (if multi-screen map).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 55; extern unsigned char  vdc_map_scrn_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 57; // Extra information returned by get_map_block() and sgx_get_map_block(),
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 58; // which are the collision flags and the mask/overlay sprite for the BLK.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 59; extern unsigned char  map_blk_flag;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 60; extern unsigned char  map_blk_mask;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 62; extern unsigned char  vdc_scr_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 63; extern unsigned char *vdc_scr_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 65; extern unsigned char  vdc_map_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 66; extern unsigned char *vdc_map_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 68; extern unsigned char  vdc_blk_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 69; extern unsigned char *vdc_blk_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 71; extern unsigned char  vdc_tbl_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 72; extern unsigned char *vdc_tbl_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 74; extern void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blocks<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 75; extern void __fastcall __macro set_blkmap( unsigned char __far *blk_map<vdc_map_bank:vdc_map_addr>, unsigned char blocks_w<vdc_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 76; extern void __fastcall __macro set_multimap( unsigned char __far *multi_map<vdc_scr_bank:vdc_scr_addr>, unsigned char screens_w<vdc_map_scrn_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 78; extern void __fastcall draw_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 79; extern void __fastcall scroll_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 81; extern void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 83; extern unsigned char __fastcall get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 85; #asm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 86; .macro	_set_blkmap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 87; stz	vdc_scr_bank
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 88; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 90; .macro	_set_multimap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 91; lda	vdc_bat_width
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 92; lsr	a
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 93; sta	vdc_map_line_w
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 94; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 96; .macro	SCREEN
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 97; db	(((\1) & $1FFF) | $6000) >> 8, bank(\1)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 98; db	(((\2) & $1FFF) | $4000) >> 8, bank(\2)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 99; db	(((\3) & $1FFF) | $6000) >> 8, bank(\3)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 100; dw	(\4)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 101; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 102; #endasm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 104; #ifdef _SGX
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 106; // Current top-left of drawn map in pixels.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 107; extern unsigned int   sgx_map_pxl_x;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 108; extern unsigned int   sgx_map_pxl_y;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 110; // Width and height to draw/scroll in characters (not tiles).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 111; extern unsigned char  sgx_map_draw_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 112; extern unsigned char  sgx_map_draw_h;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 114; // Width of map (or multi-screen BAT) in tiles.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 115; extern unsigned char  sgx_map_line_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 117; // Width of map in screens (if multi-screen map).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 118; extern unsigned char  sgx_map_scrn_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 120; extern unsigned char  sgx_scr_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 121; extern unsigned char *sgx_scr_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 123; extern unsigned char  sgx_map_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 124; extern unsigned char *sgx_map_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 126; extern unsigned char  sgx_blk_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 127; extern unsigned char *sgx_blk_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 129; extern unsigned char  sgx_tbl_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 130; extern unsigned char *sgx_tbl_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 132; extern void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blocks<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 133; extern void __fastcall __macro sgx_set_blkmap( unsigned char __far *blk_map<sgx_map_bank:sgx_map_addr>, unsigned char blocks_w<sgx_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 134; extern void __fastcall __macro sgx_set_multimap( unsigned char __far *multi_map<sgx_scr_bank:sgx_scr_addr>, unsigned char screens_w<sgx_map_scrn_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 136; extern void __fastcall sgx_draw_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 137; extern void __fastcall sgx_scroll_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 139; extern void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 141; extern unsigned char __fastcall sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 143; #asm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 144; .macro	_sgx_set_blkmap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 145; stz	sgx_scr_bank
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 146; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 148; .macro	_sgx_set_multimap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 149; lda	sgx_bat_width
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 150; lsr	a
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 151; sta	sgx_map_line_w
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 152; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 153; #endasm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 155; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 157; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 159; #endif // _hucc_blkmap_h
	.dbg	line,	"main.c", 9; #include "include/constants.c"
	.dbg	line,	"include\constants.c", 1; //*****************************************************************************//
	.dbg	line,	"include\constants.c", 2; //                                                                             //
	.dbg	line,	"include\constants.c", 3; //                                SYSTEM CONSTANTS                             //
	.dbg	line,	"include\constants.c", 4; //                                                                             //
	.dbg	line,	"include\constants.c", 5; //*****************************************************************************//
	.dbg	line,	"include\constants.c", 7; #define FALSE 0
	.dbg	line,	"include\constants.c", 8; #define TRUE  1
	.dbg	line,	"include\constants.c", 10; #define YES   1
	.dbg	line,	"include\constants.c", 11; #define NO    2
	.dbg	line,	"include\constants.c", 13; #define JOYPAD_1 0
	.dbg	line,	"include\constants.c", 14; #define JOYPAD_2 1
	.dbg	line,	"include\constants.c", 16; #define BAT_SIZE_W 2048 // IN PIXELS
	.dbg	line,	"include\constants.c", 17; #define BAT_SIZE_H 256  // IN PIXELS
	.dbg	line,	"include\constants.c", 19; #define JOY_DIR_PRESSED (JOY_DOWN | JOY_UP | JOY_RIGHT | JOY_LEFT)
	.dbg	line,	"include\constants.c", 22; #define TILES_1   16
	.dbg	line,	"include\constants.c", 23; #define TILES_2   32
	.dbg	line,	"include\constants.c", 24; #define TILES_3   48
	.dbg	line,	"include\constants.c", 25; #define TILES_4   64
	.dbg	line,	"include\constants.c", 26; #define TILES_8   128
	.dbg	line,	"include\constants.c", 27; #define TILES_16  256
	.dbg	line,	"include\constants.c", 28; #define TILES_32  512
	.dbg	line,	"include\constants.c", 29; #define TILES_48  768
	.dbg	line,	"include\constants.c", 30; #define TILES_64  1024
	.dbg	line,	"include\constants.c", 31; #define TILES_80  1280
	.dbg	line,	"include\constants.c", 32; #define TILES_96  1536
	.dbg	line,	"include\constants.c", 33; #define TILES_112 1792
	.dbg	line,	"include\constants.c", 34; #define TILES_128 2048
	.dbg	line,	"include\constants.c", 41; #define SEQUENCE_TITLE      0
	.dbg	line,	"include\constants.c", 42; #define SEQUENCE_INTRO      1
	.dbg	line,	"include\constants.c", 43; #define SEQUENCE_GAME       2
	.dbg	line,	"include\constants.c", 48; //-----------------------------------------------------------------------------//
	.dbg	line,	"include\constants.c", 49; //                                                                             //
	.dbg	line,	"include\constants.c", 50; //                                   PLAYER                                    //
	.dbg	line,	"include\constants.c", 51; //                                                                             //
	.dbg	line,	"include\constants.c", 52; //-----------------------------------------------------------------------------//
	.dbg	line,	"include\constants.c", 54; #define AXIS_RIGHT          0
	.dbg	line,	"include\constants.c", 55; #define AXIS_LEFT           1
	.dbg	line,	"include\constants.c", 56; #define AXIS_UP             2
	.dbg	line,	"include\constants.c", 57; #define AXIS_DOWN           3
	.dbg	line,	"include\constants.c", 61; #define STATE_IDLE          0
	.dbg	line,	"include\constants.c", 62; #define STATE_WALK          1
	.dbg	line,	"include\constants.c", 63; #define STATE_PUNCH         2
	.dbg	line,	"include\constants.c", 64; #define STATE_JUMP          4
	.dbg	line,	"include\constants.c", 65; #define STATE_JUMP_RIGHT    5
	.dbg	line,	"include\constants.c", 66; #define STATE_JUMP_LEFT     6
	.dbg	line,	"include\constants.c", 67; #define STATE_CROUCH        7
	.dbg	line,	"include\constants.c", 68; #define STATE_CROUCH_PUNCH  8
	.dbg	line,	"include\constants.c", 69; #define STATE_FALL          9
	.dbg	line,	"include\constants.c", 73; #define PLAYER_VRAM_ADR     0x4800
	.dbg	line,	"include\constants.c", 78; //-----------------------------------------------------------------------------//
	.dbg	line,	"include\constants.c", 79; //                                                                             //
	.dbg	line,	"include\constants.c", 80; //                                  COLLISIONS                                 //
	.dbg	line,	"include\constants.c", 81; //                                                                             //
	.dbg	line,	"include\constants.c", 82; //-----------------------------------------------------------------------------//
	.dbg	line,	"include\constants.c", 84; #define TILE_EMPTY          0
	.dbg	line,	"include\constants.c", 85; #define TILE_BG             1
	.dbg	line,	"include\constants.c", 90; //-----------------------------------------------------------------------------//
	.dbg	line,	"include\constants.c", 91; //                                                                             //
	.dbg	line,	"include\constants.c", 92; //                                     HUD                                     //
	.dbg	line,	"include\constants.c", 93; //                                                                             //
	.dbg	line,	"include\constants.c", 94; //-----------------------------------------------------------------------------//
	.dbg	line,	"include\constants.c", 96; #define LIFEBAR_1_VRAM_ADR      0x1000
	.dbg	line,	"include\constants.c", 97; #define LIFEBAR_2_VRAM_ADR      LIFEBAR_1_VRAM_ADR+TILES_2
	.dbg	line,	"include\constants.c", 98; #define LIFEBAR_3_VRAM_ADR      LIFEBAR_2_VRAM_ADR+TILES_2
	.dbg	line,	"include\constants.c", 99; #define LIFEBAR_4_VRAM_ADR      LIFEBAR_3_VRAM_ADR+TILES_2
	.dbg	line,	"include\constants.c", 100; #define LIFEBAR_5_VRAM_ADR      LIFEBAR_4_VRAM_ADR+TILES_2
	.dbg	line,	"include\constants.c", 102; #define WEAPON_VRAM_ADR         LIFEBAR_5_VRAM_ADR+TILES_2
	.dbg	line,	"include\constants.c", 103; #define ARMOR_VRAM_ADR          WEAPON_VRAM_ADR+TILES_4
	.dbg	line,	"include\constants.c", 108; //-----------------------------------------------------------------------------//
	.dbg	line,	"include\constants.c", 109; //                                                                             //
	.dbg	line,	"include\constants.c", 110; //                                    LEVELS                                   //
	.dbg	line,	"include\constants.c", 111; //                                                                             //
	.dbg	line,	"include\constants.c", 112; //-----------------------------------------------------------------------------//
	.dbg	line,	"include\constants.c", 114; #define LV1_WALL_VRAM_ADR       0x1000
	.dbg	line,	"include\constants.c", 115; #define LV1_DOOR_VRAM_ADR       LV1_WALL_VRAM_ADR+256
	.dbg	line,	"main.c", 10; #include "include/variables.c"
	.dbg	line,	"include\variables.c", 1; #include "huc.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
	.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
	.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
	.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
	.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
	.dbg	line,	"include\variables.c", 2; #include "hucc-scroll.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 1; #ifndef _hucc_scroll_h
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 2; #define _hucc_scroll_h
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 7; ; hucc-scroll.h
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 9; ; Routines for a fast split-screen scrolling system.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 11; ; Copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 20; ; The maximum number of splits for each screen layer is set in your project's
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 21; ; "hucc-config.inc" file, with the library having a limit of 128-per-layer.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 22; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 23; ; Your first active split must be defined to start at screen line 0, and then
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 24; ; the rest of the active splits must be in increasing line order to match the
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 25; ; way that the PC Engine displays the output image.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 26; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 27; ; You can have disabled splits interleaved with your active splits.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 28; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 29; ; Splits that are normally disabled can be used to create full screen effects
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 30; ; such as bouncing the screen up and down by adding blank areas at the top or
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 31; ; bottom of the screen, and then rapidly changing the height of those areas.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 32; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 33; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 34; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 36; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 37; // VDC bits for display_flags ...
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 38; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 40; #ifndef BKG_OFF
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 41; #define BKG_OFF 0x00
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 42; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 44; #ifndef SPR_OFF
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 45; #define SPR_OFF 0x00
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 46; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 48; #ifndef BKG_ON
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 49; #define BKG_ON 0x80
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 50; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 52; #ifndef SPR_ON
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 53; #define SPR_ON 0x40
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 54; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 56; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 57; // Functions in hucc-scroll.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 58; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 60; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 62; #asmdef	HUCC_USES_NEW_SCROLL 1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 64; extern void __fastcall scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 65; extern void __fastcall sgx_scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 67; extern void __fastcall disable_split( unsigned char index<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 68; extern void __fastcall sgx_disable_split( unsigned char index<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 70; extern void __fastcall __macro disable_all_splits( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 71; extern void __fastcall __macro sgx_disable_all_splits( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 73; #asm
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 74; .macro	_disable_all_splits
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 75; ldy	#HUCC_PCE_SPLITS - 1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 76; !loop:		tya
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 77; call	_disable_split.1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 78; dey
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 79; bpl	!loop-
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 80; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 82; .macro	_sgx_disable_all_splits
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 83; ldy	#HUCC_SGX_SPLITS - 1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 84; !loop:		tya
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 85; call	_sgx_disable_split.1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 86; dey
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 87; bpl	!loop-
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 88; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 89; #endasm
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 91; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 93; #endif // _hucc_scroll_h
	.dbg	line,	"include\variables.c", 3; #include "hucc-chrmap.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 1; #ifndef _hucc_chrmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 2; #define _hucc_chrmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 7; ; hucc-chrmap.h
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 9; ; A simple map system based on 8x8 characters (aka "tiles") in BAT format.
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 11; ; Copyright John Brandwood 2025.
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 20; ; The maximum X and Y size for chrmaps is 256 characters (2048 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 21; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 22; ; The maximum total size for a chrmap is 16KBytes, which allows for maps up
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 23; ; to 256x32 tiles (2048x256 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 24; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 25; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 26; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 28; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 29; // This code extends the blkmap library ...
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 30; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 32; #include "hucc-blkmap.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 34; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 35; // Functions in chrmap.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 36; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 38; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 40; #asmdef	HUCC_USES_CHRMAP 1
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 42; extern void __fastcall __nop set_chrmap( unsigned char __far *chrmap<vdc_map_bank:vdc_map_addr>, unsigned char tiles_w<vdc_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 44; extern void __fastcall draw_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 45; extern void __fastcall scroll_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 47; extern void __fastcall blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 49; #ifdef _SGX
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 51; extern void __fastcall __nop sgx_set_chrmap( unsigned char __far *chrmap<sgx_map_bank:sgx_map_addr>, unsigned char tiles_w<sgx_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 53; extern void __fastcall sgx_draw_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 54; extern void __fastcall sgx_scroll_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 56; extern void __fastcall sgx_blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 58; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 60; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 62; #endif // _hucc_chrmap_h
	.dbg	line,	"include\variables.c", 4; #include "hucc-blkmap.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 1; #ifndef _hucc_blkmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 2; #define _hucc_blkmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 7; ; hucc-blkmap.h
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 9; ; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 11; ; Copyright John Brandwood 2025.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 20; ; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 21; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 22; ; The maximum total size for a blkmap is 16KBytes, which allows for maps up
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 23; ; to 128x128 blocks (2048x2048 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 24; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 25; ; Huge multi-screen blkmaps are also supported (optionally).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 26; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 27; ; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 28; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 29; ; The maximum total size for a multi-screen map is 8KBytes, which allows for
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 30; ; a total of 1024 screens.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 31; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 32; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 33; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 35; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 36; // Functions in blkmap.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 37; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 39; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 41; #asmdef	HUCC_USES_BLKMAP 1
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 43; // Current top-left of drawn map in pixels.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 44; extern unsigned int   vdc_map_pxl_x;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 45; extern unsigned int   vdc_map_pxl_y;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 47; // Width and height to draw/scroll in characters (not tiles).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 48; extern unsigned char  vdc_map_draw_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 49; extern unsigned char  vdc_map_draw_h;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 51; // Width of map (or multi-screen BAT) in tiles.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 52; extern unsigned char  vdc_map_line_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 54; // Width of map in screens (if multi-screen map).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 55; extern unsigned char  vdc_map_scrn_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 57; // Extra information returned by get_map_block() and sgx_get_map_block(),
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 58; // which are the collision flags and the mask/overlay sprite for the BLK.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 59; extern unsigned char  map_blk_flag;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 60; extern unsigned char  map_blk_mask;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 62; extern unsigned char  vdc_scr_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 63; extern unsigned char *vdc_scr_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 65; extern unsigned char  vdc_map_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 66; extern unsigned char *vdc_map_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 68; extern unsigned char  vdc_blk_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 69; extern unsigned char *vdc_blk_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 71; extern unsigned char  vdc_tbl_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 72; extern unsigned char *vdc_tbl_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 74; extern void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blocks<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 75; extern void __fastcall __macro set_blkmap( unsigned char __far *blk_map<vdc_map_bank:vdc_map_addr>, unsigned char blocks_w<vdc_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 76; extern void __fastcall __macro set_multimap( unsigned char __far *multi_map<vdc_scr_bank:vdc_scr_addr>, unsigned char screens_w<vdc_map_scrn_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 78; extern void __fastcall draw_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 79; extern void __fastcall scroll_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 81; extern void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 83; extern unsigned char __fastcall get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 85; #asm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 86; .macro	_set_blkmap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 87; stz	vdc_scr_bank
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 88; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 90; .macro	_set_multimap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 91; lda	vdc_bat_width
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 92; lsr	a
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 93; sta	vdc_map_line_w
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 94; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 96; .macro	SCREEN
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 97; db	(((\1) & $1FFF) | $6000) >> 8, bank(\1)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 98; db	(((\2) & $1FFF) | $4000) >> 8, bank(\2)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 99; db	(((\3) & $1FFF) | $6000) >> 8, bank(\3)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 100; dw	(\4)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 101; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 102; #endasm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 104; #ifdef _SGX
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 106; // Current top-left of drawn map in pixels.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 107; extern unsigned int   sgx_map_pxl_x;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 108; extern unsigned int   sgx_map_pxl_y;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 110; // Width and height to draw/scroll in characters (not tiles).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 111; extern unsigned char  sgx_map_draw_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 112; extern unsigned char  sgx_map_draw_h;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 114; // Width of map (or multi-screen BAT) in tiles.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 115; extern unsigned char  sgx_map_line_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 117; // Width of map in screens (if multi-screen map).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 118; extern unsigned char  sgx_map_scrn_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 120; extern unsigned char  sgx_scr_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 121; extern unsigned char *sgx_scr_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 123; extern unsigned char  sgx_map_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 124; extern unsigned char *sgx_map_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 126; extern unsigned char  sgx_blk_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 127; extern unsigned char *sgx_blk_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 129; extern unsigned char  sgx_tbl_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 130; extern unsigned char *sgx_tbl_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 132; extern void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blocks<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 133; extern void __fastcall __macro sgx_set_blkmap( unsigned char __far *blk_map<sgx_map_bank:sgx_map_addr>, unsigned char blocks_w<sgx_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 134; extern void __fastcall __macro sgx_set_multimap( unsigned char __far *multi_map<sgx_scr_bank:sgx_scr_addr>, unsigned char screens_w<sgx_map_scrn_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 136; extern void __fastcall sgx_draw_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 137; extern void __fastcall sgx_scroll_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 139; extern void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 141; extern unsigned char __fastcall sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 143; #asm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 144; .macro	_sgx_set_blkmap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 145; stz	sgx_scr_bank
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 146; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 148; .macro	_sgx_set_multimap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 149; lda	sgx_bat_width
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 150; lsr	a
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 151; sta	sgx_map_line_w
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 152; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 153; #endasm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 155; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 157; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 159; #endif // _hucc_blkmap_h
	.dbg	line,	"include\variables.c", 13; unsigned char   sequence_id,
	.dbg	line,	"include\variables.c", 14; sequence_loaded,
	.dbg	line,	"include\variables.c", 16; level_id,
	.dbg	line,	"include\variables.c", 18; player_id,
	.dbg	line,	"include\variables.c", 19; player_state,
	.dbg	line,	"include\variables.c", 20; player_axis,
	.dbg	line,	"include\variables.c", 21; player_previous_axis,
	.dbg	line,	"include\variables.c", 22; player_counter_anim,
	.dbg	line,	"include\variables.c", 23; player_index_jump;
	.dbg	line,	"include\variables.c", 28; signed int      player_pos_x,
	.dbg	line,	"include\variables.c", 29; player_pos_y;
	.dbg	line,	"include\variables.c", 34; extern unsigned char tileset_LV1_BG_B[];
	.dbg	line,	"include\variables.c", 35; extern unsigned char multimap_LV1_BG_B[];
	.dbg	line,	"include\variables.c", 37; extern unsigned char tileset_LV1_BG_A[];
	.dbg	line,	"include\variables.c", 38; extern unsigned char multimap_LV1_BG_A[];
	.dbg	line,	"main.c", 15; #include "include/gfx_BG.c"
	.dbg	line,	"include\gfx_BG.c", 1; #include "huc.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
	.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
	.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
	.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
	.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
	.dbg	line,	"include\gfx_BG.c", 2; #include "hucc-scroll.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 1; #ifndef _hucc_scroll_h
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 2; #define _hucc_scroll_h
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 7; ; hucc-scroll.h
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 9; ; Routines for a fast split-screen scrolling system.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 11; ; Copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 20; ; The maximum number of splits for each screen layer is set in your project's
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 21; ; "hucc-config.inc" file, with the library having a limit of 128-per-layer.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 22; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 23; ; Your first active split must be defined to start at screen line 0, and then
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 24; ; the rest of the active splits must be in increasing line order to match the
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 25; ; way that the PC Engine displays the output image.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 26; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 27; ; You can have disabled splits interleaved with your active splits.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 28; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 29; ; Splits that are normally disabled can be used to create full screen effects
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 30; ; such as bouncing the screen up and down by adding blank areas at the top or
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 31; ; bottom of the screen, and then rapidly changing the height of those areas.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 32; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 33; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 34; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 36; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 37; // VDC bits for display_flags ...
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 38; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 40; #ifndef BKG_OFF
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 41; #define BKG_OFF 0x00
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 42; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 44; #ifndef SPR_OFF
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 45; #define SPR_OFF 0x00
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 46; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 48; #ifndef BKG_ON
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 49; #define BKG_ON 0x80
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 50; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 52; #ifndef SPR_ON
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 53; #define SPR_ON 0x40
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 54; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 56; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 57; // Functions in hucc-scroll.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 58; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 60; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 62; #asmdef	HUCC_USES_NEW_SCROLL 1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 64; extern void __fastcall scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 65; extern void __fastcall sgx_scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 67; extern void __fastcall disable_split( unsigned char index<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 68; extern void __fastcall sgx_disable_split( unsigned char index<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 70; extern void __fastcall __macro disable_all_splits( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 71; extern void __fastcall __macro sgx_disable_all_splits( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 73; #asm
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 74; .macro	_disable_all_splits
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 75; ldy	#HUCC_PCE_SPLITS - 1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 76; !loop:		tya
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 77; call	_disable_split.1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 78; dey
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 79; bpl	!loop-
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 80; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 82; .macro	_sgx_disable_all_splits
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 83; ldy	#HUCC_SGX_SPLITS - 1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 84; !loop:		tya
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 85; call	_sgx_disable_split.1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 86; dey
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 87; bpl	!loop-
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 88; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 89; #endasm
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 91; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 93; #endif // _hucc_scroll_h
	.dbg	line,	"include\gfx_BG.c", 3; #include "hucc-chrmap.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 1; #ifndef _hucc_chrmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 2; #define _hucc_chrmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 7; ; hucc-chrmap.h
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 9; ; A simple map system based on 8x8 characters (aka "tiles") in BAT format.
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 11; ; Copyright John Brandwood 2025.
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 20; ; The maximum X and Y size for chrmaps is 256 characters (2048 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 21; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 22; ; The maximum total size for a chrmap is 16KBytes, which allows for maps up
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 23; ; to 256x32 tiles (2048x256 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 24; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 25; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 26; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 28; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 29; // This code extends the blkmap library ...
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 30; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 32; #include "hucc-blkmap.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 34; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 35; // Functions in chrmap.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 36; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 38; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 40; #asmdef	HUCC_USES_CHRMAP 1
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 42; extern void __fastcall __nop set_chrmap( unsigned char __far *chrmap<vdc_map_bank:vdc_map_addr>, unsigned char tiles_w<vdc_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 44; extern void __fastcall draw_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 45; extern void __fastcall scroll_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 47; extern void __fastcall blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 49; #ifdef _SGX
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 51; extern void __fastcall __nop sgx_set_chrmap( unsigned char __far *chrmap<sgx_map_bank:sgx_map_addr>, unsigned char tiles_w<sgx_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 53; extern void __fastcall sgx_draw_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 54; extern void __fastcall sgx_scroll_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 56; extern void __fastcall sgx_blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 58; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 60; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 62; #endif // _hucc_chrmap_h
	.dbg	line,	"include\gfx_BG.c", 4; #include "hucc-blkmap.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 1; #ifndef _hucc_blkmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 2; #define _hucc_blkmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 7; ; hucc-blkmap.h
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 9; ; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 11; ; Copyright John Brandwood 2025.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 20; ; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 21; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 22; ; The maximum total size for a blkmap is 16KBytes, which allows for maps up
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 23; ; to 128x128 blocks (2048x2048 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 24; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 25; ; Huge multi-screen blkmaps are also supported (optionally).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 26; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 27; ; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 28; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 29; ; The maximum total size for a multi-screen map is 8KBytes, which allows for
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 30; ; a total of 1024 screens.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 31; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 32; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 33; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 35; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 36; // Functions in blkmap.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 37; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 39; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 41; #asmdef	HUCC_USES_BLKMAP 1
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 43; // Current top-left of drawn map in pixels.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 44; extern unsigned int   vdc_map_pxl_x;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 45; extern unsigned int   vdc_map_pxl_y;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 47; // Width and height to draw/scroll in characters (not tiles).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 48; extern unsigned char  vdc_map_draw_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 49; extern unsigned char  vdc_map_draw_h;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 51; // Width of map (or multi-screen BAT) in tiles.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 52; extern unsigned char  vdc_map_line_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 54; // Width of map in screens (if multi-screen map).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 55; extern unsigned char  vdc_map_scrn_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 57; // Extra information returned by get_map_block() and sgx_get_map_block(),
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 58; // which are the collision flags and the mask/overlay sprite for the BLK.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 59; extern unsigned char  map_blk_flag;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 60; extern unsigned char  map_blk_mask;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 62; extern unsigned char  vdc_scr_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 63; extern unsigned char *vdc_scr_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 65; extern unsigned char  vdc_map_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 66; extern unsigned char *vdc_map_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 68; extern unsigned char  vdc_blk_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 69; extern unsigned char *vdc_blk_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 71; extern unsigned char  vdc_tbl_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 72; extern unsigned char *vdc_tbl_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 74; extern void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blocks<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 75; extern void __fastcall __macro set_blkmap( unsigned char __far *blk_map<vdc_map_bank:vdc_map_addr>, unsigned char blocks_w<vdc_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 76; extern void __fastcall __macro set_multimap( unsigned char __far *multi_map<vdc_scr_bank:vdc_scr_addr>, unsigned char screens_w<vdc_map_scrn_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 78; extern void __fastcall draw_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 79; extern void __fastcall scroll_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 81; extern void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 83; extern unsigned char __fastcall get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 85; #asm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 86; .macro	_set_blkmap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 87; stz	vdc_scr_bank
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 88; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 90; .macro	_set_multimap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 91; lda	vdc_bat_width
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 92; lsr	a
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 93; sta	vdc_map_line_w
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 94; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 96; .macro	SCREEN
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 97; db	(((\1) & $1FFF) | $6000) >> 8, bank(\1)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 98; db	(((\2) & $1FFF) | $4000) >> 8, bank(\2)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 99; db	(((\3) & $1FFF) | $6000) >> 8, bank(\3)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 100; dw	(\4)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 101; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 102; #endasm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 104; #ifdef _SGX
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 106; // Current top-left of drawn map in pixels.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 107; extern unsigned int   sgx_map_pxl_x;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 108; extern unsigned int   sgx_map_pxl_y;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 110; // Width and height to draw/scroll in characters (not tiles).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 111; extern unsigned char  sgx_map_draw_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 112; extern unsigned char  sgx_map_draw_h;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 114; // Width of map (or multi-screen BAT) in tiles.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 115; extern unsigned char  sgx_map_line_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 117; // Width of map in screens (if multi-screen map).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 118; extern unsigned char  sgx_map_scrn_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 120; extern unsigned char  sgx_scr_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 121; extern unsigned char *sgx_scr_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 123; extern unsigned char  sgx_map_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 124; extern unsigned char *sgx_map_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 126; extern unsigned char  sgx_blk_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 127; extern unsigned char *sgx_blk_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 129; extern unsigned char  sgx_tbl_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 130; extern unsigned char *sgx_tbl_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 132; extern void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blocks<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 133; extern void __fastcall __macro sgx_set_blkmap( unsigned char __far *blk_map<sgx_map_bank:sgx_map_addr>, unsigned char blocks_w<sgx_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 134; extern void __fastcall __macro sgx_set_multimap( unsigned char __far *multi_map<sgx_scr_bank:sgx_scr_addr>, unsigned char screens_w<sgx_map_scrn_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 136; extern void __fastcall sgx_draw_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 137; extern void __fastcall sgx_scroll_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 139; extern void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 141; extern unsigned char __fastcall sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 143; #asm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 144; .macro	_sgx_set_blkmap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 145; stz	sgx_scr_bank
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 146; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 148; .macro	_sgx_set_multimap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 149; lda	sgx_bat_width
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 150; lsr	a
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 151; sta	sgx_map_line_w
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 152; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 153; #endasm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 155; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 157; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 159; #endif // _hucc_blkmap_h
	.dbg	line,	"include\gfx_BG.c", 13; //**************************************************************************************//
	.dbg	line,	"include\gfx_BG.c", 14; //                                                                                      //
	.dbg	line,	"include\gfx_BG.c", 15; //                                       LEVEL 1                                        //
	.dbg	line,	"include\gfx_BG.c", 16; //                                                                                      //
	.dbg	line,	"include\gfx_BG.c", 17; //**************************************************************************************//
	.dbg	line,	"include\gfx_BG.c", 19; #incchr(tileset_LV1_WALL,"res/maps/tiles_LV1_WALL.png", 4 , 4);
	.data
_tileset_LV1_WALL: 	.incchr		"res/maps/tiles_LV1_WALL.png", 4, 4
	.code
	.dbg	line,	"include\gfx_BG.c", 20; #incchr(tileset_LV1_DOOR_OPEN,"res/maps/tiles_LV1_DOOR_OPEN.png", 4 , 6);
	.data
_tileset_LV1_DOOR_OPEN: 	.incchr		"res/maps/tiles_LV1_DOOR_OPEN.png", 4, 6
	.code
	.dbg	line,	"include\gfx_BG.c", 21; #incchr(tileset_LV1_DOOR_CLOSED,"res/maps/tiles_LV1_DOOR_CLOSED.png", 4 , 6);
	.data
_tileset_LV1_DOOR_CLOSED: 	.incchr		"res/maps/tiles_LV1_DOOR_CLOSED.png", 4, 6
	.code
	.dbg	line,	"include\gfx_BG.c", 23; #incchr(tileset_LIFE_RED,"res/maps/tileset_LIFE_RED.png", 2 , 1);
	.data
_tileset_LIFE_RED: 	.incchr		"res/maps/tileset_LIFE_RED.png", 2, 1
	.code
	.dbg	line,	"include\gfx_BG.c", 24; #incchr(tileset_LIFE_ORANGE,"res/maps/tileset_LIFE_ORANGE.png", 2 , 1);
	.data
_tileset_LIFE_ORANGE: 	.incchr		"res/maps/tileset_LIFE_ORANGE.png", 2, 1
	.code
	.dbg	line,	"include\gfx_BG.c", 25; #incchr(tileset_LIFE_YELLOW,"res/maps/tileset_LIFE_YELLOW.png", 2 , 1);
	.data
_tileset_LIFE_YELLOW: 	.incchr		"res/maps/tileset_LIFE_YELLOW.png", 2, 1
	.code
	.dbg	line,	"include\gfx_BG.c", 26; #incchr(tileset_LIFE_EMPTY,"res/maps/tileset_LIFE_EMPTY.png", 2 , 1);
	.data
_tileset_LIFE_EMPTY: 	.incchr		"res/maps/tileset_LIFE_EMPTY.png", 2, 1
	.code
	.dbg	line,	"include\gfx_BG.c", 28; #incchr(tileset_ARMOR_1,"res/maps/tileset_ARMOR_1.png", 2 , 2);
	.data
_tileset_ARMOR_1: 	.incchr		"res/maps/tileset_ARMOR_1.png", 2, 2
	.code
	.dbg	line,	"include\gfx_BG.c", 29; #incchr(tileset_ARMOR_2,"res/maps/tileset_ARMOR_2.png", 2 , 2);
	.data
_tileset_ARMOR_2: 	.incchr		"res/maps/tileset_ARMOR_2.png", 2, 2
	.code
	.dbg	line,	"include\gfx_BG.c", 30; #incchr(tileset_ARMOR_4,"res/maps/tileset_ARMOR_4.png", 2 , 2);
	.data
_tileset_ARMOR_4: 	.incchr		"res/maps/tileset_ARMOR_4.png", 2, 2
	.code
	.dbg	line,	"include\gfx_BG.c", 31; #incchr(tileset_ARMOR_8,"res/maps/tileset_ARMOR_8.png", 2 , 2);
	.data
_tileset_ARMOR_8: 	.incchr		"res/maps/tileset_ARMOR_8.png", 2, 2
	.code
	.dbg	line,	"include\gfx_BG.c", 33; #incchr(tileset_WEAPON_1,"res/maps/tileset_WEAPON_1.png", 2 , 2);
	.data
_tileset_WEAPON_1: 	.incchr		"res/maps/tileset_WEAPON_1.png", 2, 2
	.code
	.dbg	line,	"include\gfx_BG.c", 34; #incchr(tileset_WEAPON_2,"res/maps/tileset_WEAPON_2.png", 2 , 2);
	.data
_tileset_WEAPON_2: 	.incchr		"res/maps/tileset_WEAPON_2.png", 2, 2
	.code
	.dbg	line,	"include\gfx_BG.c", 35; #incchr(tileset_WEAPON_4,"res/maps/tileset_WEAPON_4.png", 2 , 2);
	.data
_tileset_WEAPON_4: 	.incchr		"res/maps/tileset_WEAPON_4.png", 2, 2
	.code
	.dbg	line,	"include\gfx_BG.c", 36; #incchr(tileset_WEAPON_5,"res/maps/tileset_WEAPON_5.png", 2 , 2);
	.data
_tileset_WEAPON_5: 	.incchr		"res/maps/tileset_WEAPON_5.png", 2, 2
	.code
	.dbg	line,	"include\gfx_BG.c", 37; #incchr(tileset_WEAPON_8,"res/maps/tileset_WEAPON_8.png", 2 , 2);
	.data
_tileset_WEAPON_8: 	.incchr		"res/maps/tileset_WEAPON_8.png", 2, 2
	.code
	.dbg	line,	"include\gfx_BG.c", 40; //--------------------------------------------------------------------------------------//
	.dbg	line,	"include\gfx_BG.c", 41; //                                        VDC 2                                         //
	.dbg	line,	"include\gfx_BG.c", 42; //--------------------------------------------------------------------------------------//
	.dbg	line,	"include\gfx_BG.c", 44; #asm
	.dbg	clear
OPTIMIZE	=	1
		.data
; EXTRACT TILESET
;----------------
_tileset_LV1_BG_B:  incchr	"res/maps/template_LV1_WALL.png"
		incchr	"res/maps/template_LV1_DOOR.png"
		incchr	"res/maps/tilemap_LV1_BG_B.png", OPTIMIZE
; EXTRACT BLOCKS
;--------------
blocks_LV1_BG_B1:	incblk	"res/maps/tilemap_LV1_BG_B.png" , 0x1000 ,    0 ,   0 ,  96 , 32 , _tileset_LV1_BG_B ; // 96x16 = 1536 | 32x16 =  512
blocks_LV1_BG_B2:	incblk	"res/maps/tilemap_LV1_BG_B.png" , 0x1000 , 1536 ,   0 ,  64 , 32 , _tileset_LV1_BG_B ; // 64x16 = 1024 | 32x16 =  512
blocks_LV1_BG_B3:	incblk	"res/maps/tilemap_LV1_BG_B.png" , 0x1000 ,    0 , 512 ,  96 , 16 , _tileset_LV1_BG_B ; // 96x16 = 1536 | 16x16 =  256
blocks_LV1_BG_B4:	incblk	"res/maps/tilemap_LV1_BG_B.png" , 0x1000 , 1536 , 512 ,  64 , 16 , _tileset_LV1_BG_B ; // 64x16 = 1024 | 16x16 =  256
; EXTRACT MAPS
;------------
		align	256
MAP_LV1_BG_B1:		incmap	"res/maps/tilemap_LV1_BG_B.png",    0 ,   0 ,  96 , 32 , blocks_LV1_BG_B1 ; // 96x16 = 1536 | 32x16 =  512
		align	256
MAP_LV1_BG_B2:		incmap	"res/maps/tilemap_LV1_BG_B.png", 1536 ,   0 ,  64 , 32 , blocks_LV1_BG_B2 ; // 64x16 = 1024 | 32x16 =  512
		align	256
MAP_LV1_BG_B3:		incmap	"res/maps/tilemap_LV1_BG_B.png",    0 , 512 ,  96 , 16 , blocks_LV1_BG_B3 ; // 96x16 = 1536 | 16x16 =  256
		align	256
MAP_LV1_BG_B4:		incmap	"res/maps/tilemap_LV1_BG_B.png", 1536 , 512 ,  64 , 16 , blocks_LV1_BG_B4 ; // 64x16 = 1024 | 16x16 =  256
; MASK (EMPTY)
;----------------
dummy_tbl:	ds	256
; SWIZZLE MAPS
;-------------
swizzle	MAP_LV1_BG_B1,  32, 16 ;
swizzle	MAP_LV1_BG_B2,  32, 16 ;
swizzle	MAP_LV1_BG_B3,  32, 16 ;
swizzle	MAP_LV1_BG_B4,  32, 16 ;
; BUILD MULTIMAP
;---------------
_multimap_LV1_BG_B:
		; 1st line of 5 screens (512x256)
		SCREEN MAP_LV1_BG_B1 + 0x0000, blocks_LV1_BG_B1, dummy_tbl, 0
		SCREEN MAP_LV1_BG_B1 + 0x0200, blocks_LV1_BG_B1, dummy_tbl, 0
		SCREEN MAP_LV1_BG_B1 + 0x0400, blocks_LV1_BG_B1, dummy_tbl, 0
		SCREEN MAP_LV1_BG_B2 + 0x0000, blocks_LV1_BG_B2, dummy_tbl, 0
		SCREEN MAP_LV1_BG_B2 + 0x0200, blocks_LV1_BG_B2, dummy_tbl, 0
		; 2nd line of 5 screens (512x256)
		SCREEN MAP_LV1_BG_B1 + 0x0600, blocks_LV1_BG_B1, dummy_tbl, 0
		SCREEN MAP_LV1_BG_B1 + 0x0800, blocks_LV1_BG_B1, dummy_tbl, 0
		SCREEN MAP_LV1_BG_B1 + 0x0A00, blocks_LV1_BG_B1, dummy_tbl, 0
		SCREEN MAP_LV1_BG_B2 + 0x0400, blocks_LV1_BG_B2, dummy_tbl, 0
		SCREEN MAP_LV1_BG_B2 + 0x0600, blocks_LV1_BG_B2, dummy_tbl, 0
		; 3rd line of 5 screens (512x256)
		SCREEN MAP_LV1_BG_B3 + 0x0000, blocks_LV1_BG_B3, dummy_tbl, 0
		SCREEN MAP_LV1_BG_B3 + 0x0200, blocks_LV1_BG_B3, dummy_tbl, 0
		SCREEN MAP_LV1_BG_B3 + 0x0400, blocks_LV1_BG_B3, dummy_tbl, 0
		SCREEN MAP_LV1_BG_B4 + 0x0000, blocks_LV1_BG_B4, dummy_tbl, 0
		SCREEN MAP_LV1_BG_B4 + 0x0200, blocks_LV1_BG_B4, dummy_tbl, 0
;//--------------------------------------------------------------------------------------//
;//                                        VDC 1                                         //
;//--------------------------------------------------------------------------------------//
; EXTRACT TILESET
;----------------
_tileset_LV1_BG_A:	incchr	"res/maps/template_LIFEBAR_1.png"
		incchr	"res/maps/template_LIFEBAR_2.png"
		incchr	"res/maps/template_LIFEBAR_3.png"
		incchr	"res/maps/template_LIFEBAR_4.png"
		incchr	"res/maps/template_LIFEBAR_5.png"
		incchr	"res/maps/tileset_WEAPON_1.png"
		incchr	"res/maps/tileset_ARMOR_1.png"
		incchr	"res/maps/tilemap_LV1_BG_A.png", OPTIMIZE
; EXTRACT BLOCKS
;--------------
blocks_LV1_BG_A1:	incblk	"res/maps/tilemap_LV1_BG_A.png" , 0x1000 ,    0 ,   0 , 128 , 48 , _tileset_LV1_BG_A ; // 128x16 = 2048 | 64x16 = 1024
blocks_LV1_BG_A2:	incblk	"res/maps/tilemap_LV1_BG_A.png" , 0x1000 , 2048 ,   0 ,  32 , 48 , _tileset_LV1_BG_A ; //  32x16 =  512 | 64x16 = 1024
; EXTRACT MAPS
;------------
		align	256
MAP_LV1_BG_A1:		incmap	"res/maps/tilemap_LV1_BG_A.png",    0 ,   0 , 128 , 48 , blocks_LV1_BG_A1 ; // 128x16 = 2048 | 64x16 = 1024
		flagmap "res/maps/collision_LV1.png",       0 ,   0 , 128 , 48 , MAP_LV1_BG_A1
		align	256
MAP_LV1_BG_A2:		incmap	"res/maps/tilemap_LV1_BG_A.png", 2048 ,   0 ,  32 , 48 , blocks_LV1_BG_A2 ; //  32x16 =  512 | 64x16 = 1024
		flagmap "res/maps/collision_LV1.png",    2048 ,   0 ,  32 , 48 , MAP_LV1_BG_A2
; SWIZZLE MAPS
;-------------
swizzle	MAP_LV1_BG_A1,  32, 16 ;
swizzle	MAP_LV1_BG_A2,  32, 16 ;
; BUILD MULTIMAP
;---------------
_multimap_LV1_BG_A:
		; 1st line of 5 screens (512x256)
		SCREEN MAP_LV1_BG_A1 + 0x0000, blocks_LV1_BG_A1, dummy_tbl, 0
		SCREEN MAP_LV1_BG_A1 + 0x0200, blocks_LV1_BG_A1, dummy_tbl, 0
		SCREEN MAP_LV1_BG_A1 + 0x0400, blocks_LV1_BG_A1, dummy_tbl, 0
		SCREEN MAP_LV1_BG_A1 + 0x0600, blocks_LV1_BG_A1, dummy_tbl, 0
		SCREEN MAP_LV1_BG_A2 + 0x0000, blocks_LV1_BG_A2, dummy_tbl, 0
		; 2nd line of 5 screens (512x256)
		SCREEN MAP_LV1_BG_A1 + 0x0800, blocks_LV1_BG_A1, dummy_tbl, 0
		SCREEN MAP_LV1_BG_A1 + 0x0A00, blocks_LV1_BG_A1, dummy_tbl, 0
		SCREEN MAP_LV1_BG_A1 + 0x0C00, blocks_LV1_BG_A1, dummy_tbl, 0
		SCREEN MAP_LV1_BG_A1 + 0x0E00, blocks_LV1_BG_A1, dummy_tbl, 0
		SCREEN MAP_LV1_BG_A2 + 0x0200, blocks_LV1_BG_A2, dummy_tbl, 0
		; 3rd line of 5 screens (512x256)
		SCREEN MAP_LV1_BG_A1 + 0x1000, blocks_LV1_BG_A1, dummy_tbl, 0
		SCREEN MAP_LV1_BG_A1 + 0x1200, blocks_LV1_BG_A1, dummy_tbl, 0
		SCREEN MAP_LV1_BG_A1 + 0x1400, blocks_LV1_BG_A1, dummy_tbl, 0
		SCREEN MAP_LV1_BG_A1 + 0x1600, blocks_LV1_BG_A1, dummy_tbl, 0
		SCREEN MAP_LV1_BG_A2 + 0x0400, blocks_LV1_BG_A2, dummy_tbl, 0
		.code

	.dbg	line,	"include\gfx_BG.c", 188; #endasm
	.dbg	line,	"include\gfx_BG.c", 192; //--------------------------------------------------------------------------------------//
	.dbg	line,	"include\gfx_BG.c", 193; //                                   EXTRACT PALETTES                                   //
	.dbg	line,	"include\gfx_BG.c", 194; //--------------------------------------------------------------------------------------//
	.dbg	line,	"include\gfx_BG.c", 196; // EXTRACT PALETTE //
	.dbg	line,	"include\gfx_BG.c", 197; #incpal(palette_LV1,"res/maps/tilemap_LV1_BG_B.png");
	.data
_palette_LV1:	.incpal		"res/maps/tilemap_LV1_BG_B.png"
	.code
	.dbg	line,	"main.c", 16; #include "include/gfx_SPRITES.c"
	.dbg	line,	"include\gfx_SPRITES.c", 1; #include "huc.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
	.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
	.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
	.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
	.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
	.dbg	line,	"include\gfx_SPRITES.c", 10; // EXTRACT PLAYER TILES //
	.dbg	line,	"include\gfx_SPRITES.c", 11; #incspr(tiles_SPR_PLAYER,"res/sprites/tiles_SPR_PLAYER.png")
	.data
_tiles_SPR_PLAYER:	.incspr		"res/sprites/tiles_SPR_PLAYER.png"
	.code
	.dbg	line,	"include\gfx_SPRITES.c", 13; // EXTRACT PLAYER PALETTE //
	.dbg	line,	"main.c", 16; #incpal(palette_PLAYER,"res/palettes/palette_PLAYER.png");
	.data
_palette_PLAYER:	.incpal		"res/palettes/palette_PLAYER.png"
	.code
	.dbg	line,	"main.c", 20; #include "include/tables_player.c"
	.dbg	line,	"include\tables_player.c", 3; const signed char       TABLE_PLAYER_JUMP_V[35]     =   {
	.dbg	line,	"include\tables_player.c", 4; // UPWARD
	.dbg	line,	"include\tables_player.c", 5; -4,
	.dbg	line,	"include\tables_player.c", 6; -5,
	.dbg	line,	"include\tables_player.c", 7; -10,
	.dbg	line,	"include\tables_player.c", 8; -4,
	.dbg	line,	"include\tables_player.c", 9; -4,
	.dbg	line,	"include\tables_player.c", 10; -7,
	.dbg	line,	"include\tables_player.c", 11; -6,
	.dbg	line,	"include\tables_player.c", 12; -3,
	.dbg	line,	"include\tables_player.c", 13; -5,
	.dbg	line,	"include\tables_player.c", 14; -2,
	.dbg	line,	"include\tables_player.c", 15; -4,
	.dbg	line,	"include\tables_player.c", 16; -1,
	.dbg	line,	"include\tables_player.c", 17; -1,
	.dbg	line,	"include\tables_player.c", 18; -1,
	.dbg	line,	"include\tables_player.c", 19; -1,
	.dbg	line,	"include\tables_player.c", 20; 0,
	.dbg	line,	"include\tables_player.c", 21; 0,
	.dbg	line,	"include\tables_player.c", 22; 0,
	.dbg	line,	"include\tables_player.c", 23; 0,
	.dbg	line,	"include\tables_player.c", 24; // DOWNWARD
	.dbg	line,	"include\tables_player.c", 25; 1,
	.dbg	line,	"include\tables_player.c", 26; 1,
	.dbg	line,	"include\tables_player.c", 27; 1,
	.dbg	line,	"include\tables_player.c", 28; 1,
	.dbg	line,	"include\tables_player.c", 29; 4,
	.dbg	line,	"include\tables_player.c", 30; 2,
	.dbg	line,	"include\tables_player.c", 31; 5,
	.dbg	line,	"include\tables_player.c", 32; 3,
	.dbg	line,	"include\tables_player.c", 33; 6,
	.dbg	line,	"include\tables_player.c", 34; 7,
	.dbg	line,	"include\tables_player.c", 35; 4,
	.dbg	line,	"include\tables_player.c", 36; 4,
	.dbg	line,	"include\tables_player.c", 37; 10,
	.dbg	line,	"include\tables_player.c", 38; 4,
	.dbg	line,	"include\tables_player.c", 39; 4,
	.dbg	line,	"include\tables_player.c", 40; 5
	.dbg	line,	"main.c", 20; };
	.dbg	line,	"main.c", 21; #include "include/routines_LEVELS.c"
	.dbg	line,	"include\routines_LEVELS.c", 1; #include "huc.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
	.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
	.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
	.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
	.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
	.dbg	line,	"include\routines_LEVELS.c", 2; #include "hucc-scroll.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 1; #ifndef _hucc_scroll_h
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 2; #define _hucc_scroll_h
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 7; ; hucc-scroll.h
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 9; ; Routines for a fast split-screen scrolling system.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 11; ; Copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 20; ; The maximum number of splits for each screen layer is set in your project's
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 21; ; "hucc-config.inc" file, with the library having a limit of 128-per-layer.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 22; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 23; ; Your first active split must be defined to start at screen line 0, and then
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 24; ; the rest of the active splits must be in increasing line order to match the
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 25; ; way that the PC Engine displays the output image.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 26; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 27; ; You can have disabled splits interleaved with your active splits.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 28; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 29; ; Splits that are normally disabled can be used to create full screen effects
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 30; ; such as bouncing the screen up and down by adding blank areas at the top or
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 31; ; bottom of the screen, and then rapidly changing the height of those areas.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 32; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 33; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 34; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 36; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 37; // VDC bits for display_flags ...
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 38; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 40; #ifndef BKG_OFF
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 41; #define BKG_OFF 0x00
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 42; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 44; #ifndef SPR_OFF
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 45; #define SPR_OFF 0x00
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 46; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 48; #ifndef BKG_ON
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 49; #define BKG_ON 0x80
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 50; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 52; #ifndef SPR_ON
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 53; #define SPR_ON 0x40
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 54; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 56; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 57; // Functions in hucc-scroll.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 58; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 60; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 62; #asmdef	HUCC_USES_NEW_SCROLL 1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 64; extern void __fastcall scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 65; extern void __fastcall sgx_scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 67; extern void __fastcall disable_split( unsigned char index<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 68; extern void __fastcall sgx_disable_split( unsigned char index<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 70; extern void __fastcall __macro disable_all_splits( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 71; extern void __fastcall __macro sgx_disable_all_splits( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 73; #asm
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 74; .macro	_disable_all_splits
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 75; ldy	#HUCC_PCE_SPLITS - 1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 76; !loop:		tya
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 77; call	_disable_split.1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 78; dey
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 79; bpl	!loop-
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 80; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 82; .macro	_sgx_disable_all_splits
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 83; ldy	#HUCC_SGX_SPLITS - 1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 84; !loop:		tya
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 85; call	_sgx_disable_split.1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 86; dey
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 87; bpl	!loop-
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 88; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 89; #endasm
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 91; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 93; #endif // _hucc_scroll_h
	.dbg	line,	"include\routines_LEVELS.c", 3; #include "hucc-chrmap.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 1; #ifndef _hucc_chrmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 2; #define _hucc_chrmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 7; ; hucc-chrmap.h
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 9; ; A simple map system based on 8x8 characters (aka "tiles") in BAT format.
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 11; ; Copyright John Brandwood 2025.
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 20; ; The maximum X and Y size for chrmaps is 256 characters (2048 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 21; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 22; ; The maximum total size for a chrmap is 16KBytes, which allows for maps up
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 23; ; to 256x32 tiles (2048x256 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 24; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 25; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 26; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 28; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 29; // This code extends the blkmap library ...
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 30; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 32; #include "hucc-blkmap.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 34; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 35; // Functions in chrmap.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 36; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 38; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 40; #asmdef	HUCC_USES_CHRMAP 1
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 42; extern void __fastcall __nop set_chrmap( unsigned char __far *chrmap<vdc_map_bank:vdc_map_addr>, unsigned char tiles_w<vdc_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 44; extern void __fastcall draw_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 45; extern void __fastcall scroll_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 47; extern void __fastcall blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 49; #ifdef _SGX
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 51; extern void __fastcall __nop sgx_set_chrmap( unsigned char __far *chrmap<sgx_map_bank:sgx_map_addr>, unsigned char tiles_w<sgx_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 53; extern void __fastcall sgx_draw_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 54; extern void __fastcall sgx_scroll_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 56; extern void __fastcall sgx_blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 58; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 60; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 62; #endif // _hucc_chrmap_h
	.dbg	line,	"include\routines_LEVELS.c", 4; #include "hucc-blkmap.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 1; #ifndef _hucc_blkmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 2; #define _hucc_blkmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 7; ; hucc-blkmap.h
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 9; ; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 11; ; Copyright John Brandwood 2025.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 20; ; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 21; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 22; ; The maximum total size for a blkmap is 16KBytes, which allows for maps up
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 23; ; to 128x128 blocks (2048x2048 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 24; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 25; ; Huge multi-screen blkmaps are also supported (optionally).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 26; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 27; ; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 28; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 29; ; The maximum total size for a multi-screen map is 8KBytes, which allows for
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 30; ; a total of 1024 screens.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 31; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 32; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 33; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 35; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 36; // Functions in blkmap.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 37; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 39; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 41; #asmdef	HUCC_USES_BLKMAP 1
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 43; // Current top-left of drawn map in pixels.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 44; extern unsigned int   vdc_map_pxl_x;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 45; extern unsigned int   vdc_map_pxl_y;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 47; // Width and height to draw/scroll in characters (not tiles).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 48; extern unsigned char  vdc_map_draw_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 49; extern unsigned char  vdc_map_draw_h;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 51; // Width of map (or multi-screen BAT) in tiles.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 52; extern unsigned char  vdc_map_line_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 54; // Width of map in screens (if multi-screen map).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 55; extern unsigned char  vdc_map_scrn_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 57; // Extra information returned by get_map_block() and sgx_get_map_block(),
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 58; // which are the collision flags and the mask/overlay sprite for the BLK.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 59; extern unsigned char  map_blk_flag;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 60; extern unsigned char  map_blk_mask;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 62; extern unsigned char  vdc_scr_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 63; extern unsigned char *vdc_scr_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 65; extern unsigned char  vdc_map_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 66; extern unsigned char *vdc_map_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 68; extern unsigned char  vdc_blk_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 69; extern unsigned char *vdc_blk_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 71; extern unsigned char  vdc_tbl_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 72; extern unsigned char *vdc_tbl_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 74; extern void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blocks<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 75; extern void __fastcall __macro set_blkmap( unsigned char __far *blk_map<vdc_map_bank:vdc_map_addr>, unsigned char blocks_w<vdc_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 76; extern void __fastcall __macro set_multimap( unsigned char __far *multi_map<vdc_scr_bank:vdc_scr_addr>, unsigned char screens_w<vdc_map_scrn_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 78; extern void __fastcall draw_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 79; extern void __fastcall scroll_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 81; extern void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 83; extern unsigned char __fastcall get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 85; #asm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 86; .macro	_set_blkmap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 87; stz	vdc_scr_bank
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 88; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 90; .macro	_set_multimap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 91; lda	vdc_bat_width
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 92; lsr	a
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 93; sta	vdc_map_line_w
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 94; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 96; .macro	SCREEN
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 97; db	(((\1) & $1FFF) | $6000) >> 8, bank(\1)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 98; db	(((\2) & $1FFF) | $4000) >> 8, bank(\2)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 99; db	(((\3) & $1FFF) | $6000) >> 8, bank(\3)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 100; dw	(\4)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 101; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 102; #endasm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 104; #ifdef _SGX
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 106; // Current top-left of drawn map in pixels.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 107; extern unsigned int   sgx_map_pxl_x;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 108; extern unsigned int   sgx_map_pxl_y;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 110; // Width and height to draw/scroll in characters (not tiles).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 111; extern unsigned char  sgx_map_draw_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 112; extern unsigned char  sgx_map_draw_h;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 114; // Width of map (or multi-screen BAT) in tiles.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 115; extern unsigned char  sgx_map_line_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 117; // Width of map in screens (if multi-screen map).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 118; extern unsigned char  sgx_map_scrn_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 120; extern unsigned char  sgx_scr_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 121; extern unsigned char *sgx_scr_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 123; extern unsigned char  sgx_map_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 124; extern unsigned char *sgx_map_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 126; extern unsigned char  sgx_blk_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 127; extern unsigned char *sgx_blk_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 129; extern unsigned char  sgx_tbl_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 130; extern unsigned char *sgx_tbl_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 132; extern void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blocks<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 133; extern void __fastcall __macro sgx_set_blkmap( unsigned char __far *blk_map<sgx_map_bank:sgx_map_addr>, unsigned char blocks_w<sgx_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 134; extern void __fastcall __macro sgx_set_multimap( unsigned char __far *multi_map<sgx_scr_bank:sgx_scr_addr>, unsigned char screens_w<sgx_map_scrn_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 136; extern void __fastcall sgx_draw_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 137; extern void __fastcall sgx_scroll_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 139; extern void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 141; extern unsigned char __fastcall sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 143; #asm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 144; .macro	_sgx_set_blkmap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 145; stz	sgx_scr_bank
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 146; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 148; .macro	_sgx_set_multimap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 149; lda	sgx_bat_width
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 150; lsr	a
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 151; sta	sgx_map_line_w
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 152; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 153; #endasm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 155; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 157; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 159; #endif // _hucc_blkmap_h
	.dbg	line,	"include\routines_LEVELS.c", 13; int calculate_COLLISION_DEEP(unsigned char x , unsigned char y)
	.dbg	line,	"include\routines_LEVELS.c", 14; {
;***********************
;***********************

	.hucc
	.proc		_calculate_COLLISION_DEEP
	__enter		_calculate_COLLISION_DEEP

	.dbg	line,	"include\routines_LEVELS.c", 15; int player_COLL_X;

	.dbg	line,	"include\routines_LEVELS.c", 16; int player_COLL_Y;

	.dbg	line,	"include\routines_LEVELS.c", 19; player_COLL_X = player_pos_x + x;
	__ld.wm		_player_pos_x
	__add.us	2  /* x */
	__st.wmq	__calculate_COLLISION_DEEP_end - 2  /* player_COLL_X */

	.dbg	line,	"include\routines_LEVELS.c", 20; player_COLL_Y = player_pos_y + 32 - y;
	__ld.wm		_player_pos_y
	__add.wi	32
	__sub.us	0  /* y */
	__st.wmq	__calculate_COLLISION_DEEP_end - 4  /* player_COLL_Y */

	.dbg	line,	"include\routines_LEVELS.c", 23; get_map_block(player_COLL_X + sgx_map_pxl_y, player_COLL_Y + sgx_map_pxl_y);
	__ld.wm		__calculate_COLLISION_DEEP_end - 2  /* player_COLL_X */
	__add.wm	_sgx_map_pxl_y
	__st.wmq	map_pxl_x
	__ld.wm		__calculate_COLLISION_DEEP_end - 4  /* player_COLL_Y */
	__add.wm	_sgx_map_pxl_y
	__st.wmq	map_pxl_y
	__call		_get_map_block.2

	.dbg	line,	"include\routines_LEVELS.c", 24; }
.LL2:
	__modsp		4
	__return	1
	.dbg	clear
	.endp
	.pceas

	.dbg	line,	"include\routines_LEVELS.c", 27; int check_WALL_R()
	.dbg	line,	"include\routines_LEVELS.c", 28; {
;***********************
;***********************

	.hucc
	.proc		_check_WALL_R
	__enter		_check_WALL_R

	.dbg	line,	"include\routines_LEVELS.c", 29; int player_COLL_X;

	.dbg	line,	"include\routines_LEVELS.c", 30; int player_COLL_Y;

	.dbg	line,	"include\routines_LEVELS.c", 33; player_COLL_X = player_pos_x + 23;
	__ld.wm		_player_pos_x
	__add.wi	23
	__st.wmq	__check_WALL_R_end - 2  /* player_COLL_X */

	.dbg	line,	"include\routines_LEVELS.c", 34; player_COLL_Y = player_pos_y + 31;
	__ld.wm		_player_pos_y
	__add.wi	31
	__st.wmq	__check_WALL_R_end - 4  /* player_COLL_Y */

	.dbg	line,	"include\routines_LEVELS.c", 37; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
	__ld.wm		__check_WALL_R_end - 2  /* player_COLL_X */
	__add.wm	_sgx_map_pxl_x
	__st.wmq	map_pxl_x
	__ld.wm		__check_WALL_R_end - 4  /* player_COLL_Y */
	__add.wm	_sgx_map_pxl_y
	__st.wmq	map_pxl_y
	__call		_get_map_block.2

	.dbg	line,	"include\routines_LEVELS.c", 38; }
.LL3:
	__return	1
	.dbg	clear
	.endp
	.pceas

	.dbg	line,	"include\routines_LEVELS.c", 41; int check_WALL_L()
	.dbg	line,	"include\routines_LEVELS.c", 42; {
;***********************
;***********************

	.hucc
	.proc		_check_WALL_L
	__enter		_check_WALL_L

	.dbg	line,	"include\routines_LEVELS.c", 43; int player_COLL_X;

	.dbg	line,	"include\routines_LEVELS.c", 44; int player_COLL_Y;

	.dbg	line,	"include\routines_LEVELS.c", 47; player_COLL_X = player_pos_x + 8;
	__ld.wm		_player_pos_x
	__add.wi	8
	__st.wmq	__check_WALL_L_end - 2  /* player_COLL_X */

	.dbg	line,	"include\routines_LEVELS.c", 48; player_COLL_Y = player_pos_y + 31;
	__ld.wm		_player_pos_y
	__add.wi	31
	__st.wmq	__check_WALL_L_end - 4  /* player_COLL_Y */

	.dbg	line,	"include\routines_LEVELS.c", 51; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
	__ld.wm		__check_WALL_L_end - 2  /* player_COLL_X */
	__add.wm	_sgx_map_pxl_x
	__st.wmq	map_pxl_x
	__ld.wm		__check_WALL_L_end - 4  /* player_COLL_Y */
	__add.wm	_sgx_map_pxl_y
	__st.wmq	map_pxl_y
	__call		_get_map_block.2

	.dbg	line,	"include\routines_LEVELS.c", 52; }
.LL4:
	__return	1
	.dbg	clear
	.endp
	.pceas

	.dbg	line,	"include\routines_LEVELS.c", 55; int check_FLOOR_R()
	.dbg	line,	"include\routines_LEVELS.c", 56; {
;***********************
;***********************

	.hucc
	.proc		_check_FLOOR_R
	__enter		_check_FLOOR_R

	.dbg	line,	"include\routines_LEVELS.c", 57; int player_COLL_X;

	.dbg	line,	"include\routines_LEVELS.c", 58; int player_COLL_Y;

	.dbg	line,	"include\routines_LEVELS.c", 61; player_COLL_X = player_pos_x + 11;
	__ld.wm		_player_pos_x
	__add.wi	11
	__st.wmq	__check_FLOOR_R_end - 2  /* player_COLL_X */

	.dbg	line,	"include\routines_LEVELS.c", 62; player_COLL_Y = player_pos_y + 32;
	__ld.wm		_player_pos_y
	__add.wi	32
	__st.wmq	__check_FLOOR_R_end - 4  /* player_COLL_Y */

	.dbg	line,	"include\routines_LEVELS.c", 65; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
	__ld.wm		__check_FLOOR_R_end - 2  /* player_COLL_X */
	__add.wm	_sgx_map_pxl_x
	__st.wmq	map_pxl_x
	__ld.wm		__check_FLOOR_R_end - 4  /* player_COLL_Y */
	__add.wm	_sgx_map_pxl_y
	__st.wmq	map_pxl_y
	__call		_get_map_block.2

	.dbg	line,	"include\routines_LEVELS.c", 66; }
.LL5:
	__return	1
	.dbg	clear
	.endp
	.pceas

	.dbg	line,	"include\routines_LEVELS.c", 69; int check_FLOOR_L()
	.dbg	line,	"include\routines_LEVELS.c", 70; {
;***********************
;***********************

	.hucc
	.proc		_check_FLOOR_L
	__enter		_check_FLOOR_L

	.dbg	line,	"include\routines_LEVELS.c", 71; int player_COLL_X;

	.dbg	line,	"include\routines_LEVELS.c", 72; int player_COLL_Y;

	.dbg	line,	"include\routines_LEVELS.c", 75; player_COLL_X = player_pos_x + 10;
	__ld.wm		_player_pos_x
	__add.wi	10
	__st.wmq	__check_FLOOR_L_end - 2  /* player_COLL_X */

	.dbg	line,	"include\routines_LEVELS.c", 76; player_COLL_Y = player_pos_y + 32;
	__ld.wm		_player_pos_y
	__add.wi	32
	__st.wmq	__check_FLOOR_L_end - 4  /* player_COLL_Y */

	.dbg	line,	"include\routines_LEVELS.c", 79; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
	__ld.wm		__check_FLOOR_L_end - 2  /* player_COLL_X */
	__add.wm	_sgx_map_pxl_x
	__st.wmq	map_pxl_x
	__ld.wm		__check_FLOOR_L_end - 4  /* player_COLL_Y */
	__add.wm	_sgx_map_pxl_y
	__st.wmq	map_pxl_y
	__call		_get_map_block.2

	.dbg	line,	"include\routines_LEVELS.c", 80; }
.LL6:
	__return	1
	.dbg	clear
	.endp
	.pceas

	.dbg	line,	"include\routines_LEVELS.c", 89; void scroll_BG()
	.dbg	line,	"include\routines_LEVELS.c", 90; {
;***********************
;***********************

	.hucc
	.proc		_scroll_BG
	__enter		_scroll_BG

	.dbg	line,	"include\routines_LEVELS.c", 91; // UPDATE VDC2 BG //

	.dbg	line,	"include\routines_LEVELS.c", 92; sgx_scroll_map();
	__call		_sgx_scroll_map

	.dbg	line,	"include\routines_LEVELS.c", 94; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\routines_LEVELS.c", 95; //                                        VDC 2                                         //

	.dbg	line,	"include\routines_LEVELS.c", 96; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\routines_LEVELS.c", 98; sgx_scroll_split(0,   0, sgx_map_pxl_x & (BAT_SIZE_W - 1), sgx_map_pxl_y & (BAT_SIZE_H - 1), BKG_ON | SPR_ON);
	__st.umiq	0, _al
	__st.umiq	0, _ah
	__ld.wm		_sgx_map_pxl_x
	__and.wi	2047
	__st.wmq	_bx
	__ld.wm		_sgx_map_pxl_y
	__and.wi	255
	__st.wmq	_cx
	__st.umiq	192, _dl
	__call		_sgx_scroll_split.5

	.dbg	line,	"include\routines_LEVELS.c", 99; }
.LL7:
	__return	0
	.dbg	clear
	.endp
	.pceas

	.dbg	line,	"include\routines_LEVELS.c", 108; void joypad_BUTTONS()
	.dbg	line,	"include\routines_LEVELS.c", 109; {
;***********************
;***********************

	.hucc
	.proc		_joypad_BUTTONS
	__enter		_joypad_BUTTONS

	.dbg	line,	"include\routines_LEVELS.c", 110; if(joytrg(JOYPAD_1) == JOY_I)
	__ld.uiq	0
	 _joytrg.1
	__equ_w.wi	1
	__bfalse	.LL9

	.dbg	line,	"include\routines_LEVELS.c", 111; {

	.dbg	line,	"include\routines_LEVELS.c", 112; if(player_state == STATE_IDLE)
	__not.um	_player_state
	__bfalse	.LL10

	.dbg	line,	"include\routines_LEVELS.c", 113; {

	.dbg	line,	"include\routines_LEVELS.c", 114; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_112 , TILES_16);
	__st.wmiq	18432, _di
	__farptr	_tiles_SPR_PLAYER + 3584, _bp_bank, _bp
	__st.wmiq	256, _ax
	 _load_vram.3

	.dbg	line,	"include\routines_LEVELS.c", 116; player_counter_anim = 0;
	__st.umiq	0, _player_counter_anim

	.dbg	line,	"include\routines_LEVELS.c", 118; player_state = STATE_JUMP;
	__st.umiq	4, _player_state

	.dbg	line,	"include\routines_LEVELS.c", 119; }

	.dbg	line,	"include\routines_LEVELS.c", 120; }
.LL10:

	.dbg	line,	"include\routines_LEVELS.c", 121; }
.LL9:
.LL8:
	__return	0
	.dbg	clear
	.endp
	.pceas

	.dbg	line,	"include\routines_LEVELS.c", 124; void joypad_DIR()
	.dbg	line,	"include\routines_LEVELS.c", 125; {
;***********************
;***********************

	.hucc
	.proc		_joypad_DIR
	__enter		_joypad_DIR

	.dbg	line,	"include\routines_LEVELS.c", 126; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\routines_LEVELS.c", 127; //                                        NO DIR                                        //

	.dbg	line,	"include\routines_LEVELS.c", 128; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\routines_LEVELS.c", 130; if(! (joy(JOYPAD_1) & JOY_DIR_PRESSED) )
	__ld.uiq	0
	 _joy.1
	__nand.wi	240
	__bfalse	.LL12

	.dbg	line,	"include\routines_LEVELS.c", 131; {

	.dbg	line,	"include\routines_LEVELS.c", 132; if(player_state == STATE_WALK || player_state == STATE_CROUCH)
	__ld.umq	_player_state
	__equ_b.uiq	1
	__btrue		.LL14
	__ld.umq	_player_state
	__equ_b.uiq	7
.LL14:
	__bfalse	.LL13

	.dbg	line,	"include\routines_LEVELS.c", 133; {

	.dbg	line,	"include\routines_LEVELS.c", 134; // A OPTIMISER G_PREVIOUS_STATE //

	.dbg	line,	"include\routines_LEVELS.c", 135; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
	__st.wmiq	18432, _di
	__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
	__st.wmiq	256, _ax
	 _load_vram.3

	.dbg	line,	"include\routines_LEVELS.c", 137; player_counter_anim = 0;
	__st.umiq	0, _player_counter_anim

	.dbg	line,	"include\routines_LEVELS.c", 139; player_state = STATE_IDLE;
	__st.umiq	0, _player_state

	.dbg	line,	"include\routines_LEVELS.c", 141; return;
	__bra		.LL11

	.dbg	line,	"include\routines_LEVELS.c", 142; }

	.dbg	line,	"include\routines_LEVELS.c", 143; }
.LL13:

	.dbg	line,	"include\routines_LEVELS.c", 146; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\routines_LEVELS.c", 147; //                                     RIGHT BUTTON                                     //

	.dbg	line,	"include\routines_LEVELS.c", 148; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\routines_LEVELS.c", 150; if(joy(JOYPAD_1) & JOY_RIGHT)
.LL12:
	__ld.uiq	0
	 _joy.1
	__tand.wi	32
	__bfalse	.LL15

	.dbg	line,	"include\routines_LEVELS.c", 151; {

	.dbg	line,	"include\routines_LEVELS.c", 152; if(player_state == STATE_IDLE || player_state == STATE_WALK)
	__not.um	_player_state
	__btrue		.LL17
	__ld.umq	_player_state
	__equ_b.uiq	1
.LL17:
	__bfalse	.LL16

	.dbg	line,	"include\routines_LEVELS.c", 153; {

	.dbg	line,	"include\routines_LEVELS.c", 154; player_state = STATE_WALK;
	__st.umiq	1, _player_state

	.dbg	line,	"include\routines_LEVELS.c", 155; player_axis = AXIS_RIGHT;
	__st.umiq	0, _player_axis

	.dbg	line,	"include\routines_LEVELS.c", 157; if(player_previous_axis != player_axis)
	__ld.umq	_player_previous_axis
	__neq_b.umq	_player_axis
	__bfalse	.LL18

	.dbg	line,	"include\routines_LEVELS.c", 158; {

	.dbg	line,	"include\routines_LEVELS.c", 159; player_previous_axis = player_axis;
	__ld.um		_player_axis
	__st.umq	_player_previous_axis

	.dbg	line,	"include\routines_LEVELS.c", 161; spr_set(player_id);
	__ld.umq	_player_id
	__call		_spr_set.1

	.dbg	line,	"include\routines_LEVELS.c", 162; spr_ctrl(FLIP_MAS, NO_FLIP_X);
	__st.umiq	136, _al
	__ld.uiq	0
	__call		_spr_ctrl.2

	.dbg	line,	"include\routines_LEVELS.c", 163; }

	.dbg	line,	"include\routines_LEVELS.c", 164; }
.LL18	.alias		.LL19

	.dbg	line,	"include\routines_LEVELS.c", 167; else if(player_state == STATE_JUMP)
	__bra		.LL19
.LL16:
	__ld.umq	_player_state
	__equ_b.uiq	4
	__bfalse	.LL20

	.dbg	line,	"include\routines_LEVELS.c", 168; {

	.dbg	line,	"include\routines_LEVELS.c", 169; if(player_axis == AXIS_LEFT)
	__ld.umq	_player_axis
	__equ_b.uiq	1
	__bfalse	.LL21

	.dbg	line,	"include\routines_LEVELS.c", 170; {

	.dbg	line,	"include\routines_LEVELS.c", 171; player_axis = AXIS_RIGHT;
	__st.umiq	0, _player_axis

	.dbg	line,	"include\routines_LEVELS.c", 172; player_previous_axis = player_axis;
	__ld.um		_player_axis
	__st.umq	_player_previous_axis

	.dbg	line,	"include\routines_LEVELS.c", 174; spr_set(player_id);
	__ld.umq	_player_id
	__call		_spr_set.1

	.dbg	line,	"include\routines_LEVELS.c", 175; spr_ctrl(FLIP_MAS, NO_FLIP_X);
	__st.umiq	136, _al
	__ld.uiq	0
	__call		_spr_ctrl.2

	.dbg	line,	"include\routines_LEVELS.c", 176; }

	.dbg	line,	"include\routines_LEVELS.c", 177; }
.LL21	.alias		.LL22

	.dbg	line,	"include\routines_LEVELS.c", 180; else if(player_state == STATE_CROUCH)
	__bra		.LL22
.LL20:
	__ld.umq	_player_state
	__equ_b.uiq	7
	__bfalse	.LL23

	.dbg	line,	"include\routines_LEVELS.c", 181; {

	.dbg	line,	"include\routines_LEVELS.c", 182; if(player_axis == AXIS_LEFT)
	__ld.umq	_player_axis
	__equ_b.uiq	1
	__bfalse	.LL24

	.dbg	line,	"include\routines_LEVELS.c", 183; {

	.dbg	line,	"include\routines_LEVELS.c", 184; player_axis = AXIS_RIGHT;
	__st.umiq	0, _player_axis

	.dbg	line,	"include\routines_LEVELS.c", 185; player_previous_axis = player_axis;
	__ld.um		_player_axis
	__st.umq	_player_previous_axis

	.dbg	line,	"include\routines_LEVELS.c", 187; spr_set(player_id);
	__ld.umq	_player_id
	__call		_spr_set.1

	.dbg	line,	"include\routines_LEVELS.c", 188; spr_ctrl(FLIP_MAS, NO_FLIP_X);
	__st.umiq	136, _al
	__ld.uiq	0
	__call		_spr_ctrl.2

	.dbg	line,	"include\routines_LEVELS.c", 189; }

	.dbg	line,	"include\routines_LEVELS.c", 190; }
.LL24	.alias		.LL25

	.dbg	line,	"include\routines_LEVELS.c", 191; }
.LL23	.alias		.LL25
.LL22	.alias		.LL25
.LL19	.alias		.LL25

	.dbg	line,	"include\routines_LEVELS.c", 194; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\routines_LEVELS.c", 195; //                                     LEFT BUTTON                                      //

	.dbg	line,	"include\routines_LEVELS.c", 196; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\routines_LEVELS.c", 198; else if(joy(JOYPAD_1) & JOY_LEFT)
	__bra		.LL25
.LL15:
	__ld.uiq	0
	 _joy.1
	__tand.wi	128
	__bfalse	.LL26

	.dbg	line,	"include\routines_LEVELS.c", 199; {

	.dbg	line,	"include\routines_LEVELS.c", 200; if(player_state == STATE_IDLE || player_state == STATE_WALK)
	__not.um	_player_state
	__btrue		.LL28
	__ld.umq	_player_state
	__equ_b.uiq	1
.LL28:
	__bfalse	.LL27

	.dbg	line,	"include\routines_LEVELS.c", 201; {

	.dbg	line,	"include\routines_LEVELS.c", 202; player_state = STATE_WALK;
	__st.umiq	1, _player_state

	.dbg	line,	"include\routines_LEVELS.c", 203; player_axis = AXIS_LEFT;
	__st.umiq	1, _player_axis

	.dbg	line,	"include\routines_LEVELS.c", 205; if(player_previous_axis != player_axis)
	__ld.umq	_player_previous_axis
	__neq_b.umq	_player_axis
	__bfalse	.LL29

	.dbg	line,	"include\routines_LEVELS.c", 206; {

	.dbg	line,	"include\routines_LEVELS.c", 207; player_previous_axis = player_axis;
	__ld.um		_player_axis
	__st.umq	_player_previous_axis

	.dbg	line,	"include\routines_LEVELS.c", 209; spr_set(player_id);
	__ld.umq	_player_id
	__call		_spr_set.1

	.dbg	line,	"include\routines_LEVELS.c", 210; spr_ctrl(FLIP_MAS, FLIP_X);
	__st.umiq	136, _al
	__ld.uiq	8
	__call		_spr_ctrl.2

	.dbg	line,	"include\routines_LEVELS.c", 211; }

	.dbg	line,	"include\routines_LEVELS.c", 212; }
.LL29	.alias		.LL30

	.dbg	line,	"include\routines_LEVELS.c", 215; else if(player_state == STATE_JUMP)
	__bra		.LL30
.LL27:
	__ld.umq	_player_state
	__equ_b.uiq	4
	__bfalse	.LL31

	.dbg	line,	"include\routines_LEVELS.c", 216; {

	.dbg	line,	"include\routines_LEVELS.c", 217; if(player_axis == AXIS_RIGHT)
	__not.um	_player_axis
	__bfalse	.LL32

	.dbg	line,	"include\routines_LEVELS.c", 218; {

	.dbg	line,	"include\routines_LEVELS.c", 219; player_axis = AXIS_LEFT;
	__st.umiq	1, _player_axis

	.dbg	line,	"include\routines_LEVELS.c", 220; player_previous_axis = player_axis;
	__ld.um		_player_axis
	__st.umq	_player_previous_axis

	.dbg	line,	"include\routines_LEVELS.c", 222; spr_set(player_id);
	__ld.umq	_player_id
	__call		_spr_set.1

	.dbg	line,	"include\routines_LEVELS.c", 223; spr_ctrl(FLIP_MAS, FLIP_X);
	__st.umiq	136, _al
	__ld.uiq	8
	__call		_spr_ctrl.2

	.dbg	line,	"include\routines_LEVELS.c", 224; }

	.dbg	line,	"include\routines_LEVELS.c", 225; }
.LL32	.alias		.LL33

	.dbg	line,	"include\routines_LEVELS.c", 228; else if(player_state == STATE_CROUCH)
	__bra		.LL33
.LL31:
	__ld.umq	_player_state
	__equ_b.uiq	7
	__bfalse	.LL34

	.dbg	line,	"include\routines_LEVELS.c", 229; {

	.dbg	line,	"include\routines_LEVELS.c", 230; if(player_axis == AXIS_RIGHT)
	__not.um	_player_axis
	__bfalse	.LL35

	.dbg	line,	"include\routines_LEVELS.c", 231; {

	.dbg	line,	"include\routines_LEVELS.c", 232; player_axis = AXIS_LEFT;
	__st.umiq	1, _player_axis

	.dbg	line,	"include\routines_LEVELS.c", 233; player_previous_axis = player_axis;
	__ld.um		_player_axis
	__st.umq	_player_previous_axis

	.dbg	line,	"include\routines_LEVELS.c", 235; spr_set(player_id);
	__ld.umq	_player_id
	__call		_spr_set.1

	.dbg	line,	"include\routines_LEVELS.c", 236; spr_ctrl(FLIP_MAS, FLIP_X);
	__st.umiq	136, _al
	__ld.uiq	8
	__call		_spr_ctrl.2

	.dbg	line,	"include\routines_LEVELS.c", 237; }

	.dbg	line,	"include\routines_LEVELS.c", 238; }
.LL35	.alias		.LL36

	.dbg	line,	"include\routines_LEVELS.c", 239; }
.LL34	.alias		.LL36
.LL33	.alias		.LL36
.LL30	.alias		.LL36

	.dbg	line,	"include\routines_LEVELS.c", 242; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\routines_LEVELS.c", 243; //                                      UP BUTTON                                       //

	.dbg	line,	"include\routines_LEVELS.c", 244; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\routines_LEVELS.c", 246; else if(joy(JOYPAD_1) & JOY_UP)
	__bra		.LL36
.LL26:
	__ld.uiq	0
	 _joy.1
	__tand.wi	16
	__bfalse	.LL37

	.dbg	line,	"include\routines_LEVELS.c", 247; {

	.dbg	line,	"include\routines_LEVELS.c", 248; //

	.dbg	line,	"include\routines_LEVELS.c", 249; }

	.dbg	line,	"include\routines_LEVELS.c", 252; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\routines_LEVELS.c", 253; //                                     DOWN BUTTON                                      //

	.dbg	line,	"include\routines_LEVELS.c", 254; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\routines_LEVELS.c", 256; else if(joy(JOYPAD_1) & JOY_DOWN)
	__bra		.LL38
.LL37:
	__ld.uiq	0
	 _joy.1
	__tand.wi	64
	__bfalse	.LL39

	.dbg	line,	"include\routines_LEVELS.c", 257; {

	.dbg	line,	"include\routines_LEVELS.c", 258; if(player_state == STATE_IDLE || player_state == STATE_WALK)
	__not.um	_player_state
	__btrue		.LL41
	__ld.umq	_player_state
	__equ_b.uiq	1
.LL41:
	__bfalse	.LL40

	.dbg	line,	"include\routines_LEVELS.c", 259; {

	.dbg	line,	"include\routines_LEVELS.c", 260; player_state = STATE_CROUCH;
	__st.umiq	7, _player_state

	.dbg	line,	"include\routines_LEVELS.c", 262; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_128 , TILES_16);
	__st.wmiq	18432, _di
	__farptr	_tiles_SPR_PLAYER + 4096, _bp_bank, _bp
	__st.wmiq	256, _ax
	 _load_vram.3

	.dbg	line,	"include\routines_LEVELS.c", 263; }

	.dbg	line,	"include\routines_LEVELS.c", 264; }
.LL40:

	.dbg	line,	"include\routines_LEVELS.c", 265; }
.LL39:
.LL38:
.LL36:
.LL25:
.LL11:
	__return	0
	.dbg	clear
	.endp
	.pceas

	.dbg	line,	"include\routines_LEVELS.c", 270; void update_PLAYER()
	.dbg	line,	"include\routines_LEVELS.c", 271; {
;***********************
;***********************

	.hucc
	.proc		_update_PLAYER
	__enter		_update_PLAYER

	.dbg	line,	"include\routines_LEVELS.c", 272; if(player_state == STATE_WALK)
	__ld.umq	_player_state
	__equ_b.uiq	1
	__bfalse	.LL43

	.dbg	line,	"include\routines_LEVELS.c", 273; {

	.dbg	line,	"include\routines_LEVELS.c", 274; if(player_axis == AXIS_RIGHT)
	__not.um	_player_axis
	__bfalse	.LL44

	.dbg	line,	"include\routines_LEVELS.c", 275; {

	.dbg	line,	"include\routines_LEVELS.c", 276; // CHECK COLLISION WITH FLOOR //

	.dbg	line,	"include\routines_LEVELS.c", 277; check_FLOOR_R();
	__call		_check_FLOOR_R

	.dbg	line,	"include\routines_LEVELS.c", 279; if(map_blk_flag == TILE_EMPTY)
	__not.um	_map_blk_flag
	__bfalse	.LL45

	.dbg	line,	"include\routines_LEVELS.c", 280; {

	.dbg	line,	"include\routines_LEVELS.c", 281; player_counter_anim = 0;
	__st.umiq	0, _player_counter_anim

	.dbg	line,	"include\routines_LEVELS.c", 283; player_state = STATE_FALL;
	__st.umiq	9, _player_state

	.dbg	line,	"include\routines_LEVELS.c", 285; return;
	__bra		.LL42

	.dbg	line,	"include\routines_LEVELS.c", 286; }

	.dbg	line,	"include\routines_LEVELS.c", 290; // CHECK COLLISION WITH WALLS //

	.dbg	line,	"include\routines_LEVELS.c", 291; check_WALL_R();
.LL45:
	__call		_check_WALL_R

	.dbg	line,	"include\routines_LEVELS.c", 293; if(map_blk_flag == TILE_EMPTY)
	__not.um	_map_blk_flag
	__bfalse	.LL46

	.dbg	line,	"include\routines_LEVELS.c", 294; {

	.dbg	line,	"include\routines_LEVELS.c", 295; sgx_map_pxl_x += 2;
	__add_st.wmiq	2, _sgx_map_pxl_x

	.dbg	line,	"include\routines_LEVELS.c", 297; vdc_map_pxl_x = sgx_map_pxl_x;
	__ld.wm		_sgx_map_pxl_x
	__st.wmq	_vdc_map_pxl_x

	.dbg	line,	"include\routines_LEVELS.c", 299; scroll_BG();
	__call		_scroll_BG

	.dbg	line,	"include\routines_LEVELS.c", 300; }

	.dbg	line,	"include\routines_LEVELS.c", 301; }
.LL46	.alias		.LL47

	.dbg	line,	"include\routines_LEVELS.c", 304; else if(player_axis == AXIS_LEFT)
	__bra		.LL47
.LL44:
	__ld.umq	_player_axis
	__equ_b.uiq	1
	__bfalse	.LL48

	.dbg	line,	"include\routines_LEVELS.c", 305; {

	.dbg	line,	"include\routines_LEVELS.c", 306; // CHECK COLLISION WITH FLOOR //

	.dbg	line,	"include\routines_LEVELS.c", 307; check_FLOOR_L();
	__call		_check_FLOOR_L

	.dbg	line,	"include\routines_LEVELS.c", 309; if(map_blk_flag == TILE_EMPTY)
	__not.um	_map_blk_flag
	__bfalse	.LL49

	.dbg	line,	"include\routines_LEVELS.c", 310; {

	.dbg	line,	"include\routines_LEVELS.c", 311; player_counter_anim = 0;
	__st.umiq	0, _player_counter_anim

	.dbg	line,	"include\routines_LEVELS.c", 313; player_state = STATE_FALL;
	__st.umiq	9, _player_state

	.dbg	line,	"include\routines_LEVELS.c", 315; return;
	__bra		.LL42

	.dbg	line,	"include\routines_LEVELS.c", 316; }

	.dbg	line,	"include\routines_LEVELS.c", 319; // CHECK COLLISION WITH BG //

	.dbg	line,	"include\routines_LEVELS.c", 320; check_WALL_L();
.LL49:
	__call		_check_WALL_L

	.dbg	line,	"include\routines_LEVELS.c", 322; if(map_blk_flag == TILE_EMPTY)
	__not.um	_map_blk_flag
	__bfalse	.LL50

	.dbg	line,	"include\routines_LEVELS.c", 323; {

	.dbg	line,	"include\routines_LEVELS.c", 324; sgx_map_pxl_x -= 2;
	__sub_st.wmiq	2, _sgx_map_pxl_x

	.dbg	line,	"include\routines_LEVELS.c", 326; vdc_map_pxl_x = sgx_map_pxl_x;
	__ld.wm		_sgx_map_pxl_x
	__st.wmq	_vdc_map_pxl_x

	.dbg	line,	"include\routines_LEVELS.c", 328; scroll_BG();
	__call		_scroll_BG

	.dbg	line,	"include\routines_LEVELS.c", 329; }

	.dbg	line,	"include\routines_LEVELS.c", 330; }
.LL50:

	.dbg	line,	"include\routines_LEVELS.c", 335; spr_set(player_id);
.LL48:
.LL47:
	__ld.umq	_player_id
	__call		_spr_set.1

	.dbg	line,	"include\routines_LEVELS.c", 338; // UPDATE PLAYER TILES //

	.dbg	line,	"include\routines_LEVELS.c", 339; if(player_counter_anim == 0)
	__not.um	_player_counter_anim
	__bfalse	.LL51

	.dbg	line,	"include\routines_LEVELS.c", 340; {

	.dbg	line,	"include\routines_LEVELS.c", 341; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
	__st.wmiq	18432, _di
	__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
	__st.wmiq	256, _ax
	 _load_vram.3

	.dbg	line,	"include\routines_LEVELS.c", 342; }

	.dbg	line,	"include\routines_LEVELS.c", 345; else if(player_counter_anim == 2)
	__bra		.LL52
.LL51:
	__ld.umq	_player_counter_anim
	__equ_b.uiq	2
	__bfalse	.LL53

	.dbg	line,	"include\routines_LEVELS.c", 346; {

	.dbg	line,	"include\routines_LEVELS.c", 347; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_16 , TILES_16);
	__st.wmiq	18432, _di
	__farptr	_tiles_SPR_PLAYER + 512, _bp_bank, _bp
	__st.wmiq	256, _ax
	 _load_vram.3

	.dbg	line,	"include\routines_LEVELS.c", 348; }

	.dbg	line,	"include\routines_LEVELS.c", 351; else if(player_counter_anim == 5)
	__bra		.LL54
.LL53:
	__ld.umq	_player_counter_anim
	__equ_b.uiq	5
	__bfalse	.LL55

	.dbg	line,	"include\routines_LEVELS.c", 352; {

	.dbg	line,	"include\routines_LEVELS.c", 353; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_32 , TILES_16);
	__st.wmiq	18432, _di
	__farptr	_tiles_SPR_PLAYER + 1024, _bp_bank, _bp
	__st.wmiq	256, _ax
	 _load_vram.3

	.dbg	line,	"include\routines_LEVELS.c", 354; }

	.dbg	line,	"include\routines_LEVELS.c", 357; else if(player_counter_anim == 8)
	__bra		.LL56
.LL55:
	__ld.umq	_player_counter_anim
	__equ_b.uiq	8
	__bfalse	.LL57

	.dbg	line,	"include\routines_LEVELS.c", 358; {

	.dbg	line,	"include\routines_LEVELS.c", 359; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_48 , TILES_16);
	__st.wmiq	18432, _di
	__farptr	_tiles_SPR_PLAYER + 1536, _bp_bank, _bp
	__st.wmiq	256, _ax
	 _load_vram.3

	.dbg	line,	"include\routines_LEVELS.c", 360; }

	.dbg	line,	"include\routines_LEVELS.c", 363; else if(player_counter_anim == 11)
	__bra		.LL58
.LL57:
	__ld.umq	_player_counter_anim
	__equ_b.uiq	11
	__bfalse	.LL59

	.dbg	line,	"include\routines_LEVELS.c", 364; {

	.dbg	line,	"include\routines_LEVELS.c", 365; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
	__st.wmiq	18432, _di
	__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
	__st.wmiq	256, _ax
	 _load_vram.3

	.dbg	line,	"include\routines_LEVELS.c", 366; }

	.dbg	line,	"include\routines_LEVELS.c", 369; else if(player_counter_anim == 14)
	__bra		.LL60
.LL59:
	__ld.umq	_player_counter_anim
	__equ_b.uiq	14
	__bfalse	.LL61

	.dbg	line,	"include\routines_LEVELS.c", 370; {

	.dbg	line,	"include\routines_LEVELS.c", 371; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_64 , TILES_16);
	__st.wmiq	18432, _di
	__farptr	_tiles_SPR_PLAYER + 2048, _bp_bank, _bp
	__st.wmiq	256, _ax
	 _load_vram.3

	.dbg	line,	"include\routines_LEVELS.c", 372; }

	.dbg	line,	"include\routines_LEVELS.c", 375; else if(player_counter_anim == 17)
	__bra		.LL62
.LL61:
	__ld.umq	_player_counter_anim
	__equ_b.uiq	17
	__bfalse	.LL63

	.dbg	line,	"include\routines_LEVELS.c", 376; {

	.dbg	line,	"include\routines_LEVELS.c", 377; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_80 , TILES_16);
	__st.wmiq	18432, _di
	__farptr	_tiles_SPR_PLAYER + 2560, _bp_bank, _bp
	__st.wmiq	256, _ax
	 _load_vram.3

	.dbg	line,	"include\routines_LEVELS.c", 378; }

	.dbg	line,	"include\routines_LEVELS.c", 381; else if(player_counter_anim == 20)
	__bra		.LL64
.LL63:
	__ld.umq	_player_counter_anim
	__equ_b.uiq	20
	__bfalse	.LL65

	.dbg	line,	"include\routines_LEVELS.c", 382; {

	.dbg	line,	"include\routines_LEVELS.c", 383; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_96 , TILES_16);
	__st.wmiq	18432, _di
	__farptr	_tiles_SPR_PLAYER + 3072, _bp_bank, _bp
	__st.wmiq	256, _ax
	 _load_vram.3

	.dbg	line,	"include\routines_LEVELS.c", 384; }

	.dbg	line,	"include\routines_LEVELS.c", 387; else if(player_counter_anim == 22)
	__bra		.LL66
.LL65:
	__ld.umq	_player_counter_anim
	__equ_b.uiq	22
	__bfalse	.LL67

	.dbg	line,	"include\routines_LEVELS.c", 388; {

	.dbg	line,	"include\routines_LEVELS.c", 389; player_counter_anim = 0;
	__st.umiq	0, _player_counter_anim

	.dbg	line,	"include\routines_LEVELS.c", 391; return;
	__bra		.LL42

	.dbg	line,	"include\routines_LEVELS.c", 392; }

	.dbg	line,	"include\routines_LEVELS.c", 395; player_counter_anim += 1;
.LL67:
.LL66:
.LL64:
.LL62:
.LL60:
.LL58:
.LL56:
.LL54:
.LL52:
	__add_st.umiq	1, _player_counter_anim

	.dbg	line,	"include\routines_LEVELS.c", 397; }

	.dbg	line,	"include\routines_LEVELS.c", 400; else if(player_state == STATE_JUMP)
	__bra		.LL68
.LL43:
	__ld.umq	_player_state
	__equ_b.uiq	4
	__bfalse	.LL69

	.dbg	line,	"include\routines_LEVELS.c", 401; {

	.dbg	line,	"include\routines_LEVELS.c", 402; unsigned char i;

	.dbg	line,	"include\routines_LEVELS.c", 403; i = 0;
	__st.umiq	0, __update_PLAYER_end - 1  /* i */

	.dbg	line,	"include\routines_LEVELS.c", 406; spr_set(player_id);
	__ld.umq	_player_id
	__call		_spr_set.1

	.dbg	line,	"include\routines_LEVELS.c", 407; player_pos_y += TABLE_PLAYER_JUMP_V[player_index_jump];
	__ldx.umq	_player_index_jump
	__ld.bax	_TABLE_PLAYER_JUMP_V
	__add_st.wmq	_player_pos_y

	.dbg	line,	"include\routines_LEVELS.c", 408; spr_y(player_pos_y);
	__ld.wm		_player_pos_y
	__call		_spr_y.1

	.dbg	line,	"include\routines_LEVELS.c", 412; if(player_index_jump < 34)
	__ld.umq	_player_index_jump
	__ult_b.uiq	34
	__bfalse	.LL70

	.dbg	line,	"include\routines_LEVELS.c", 413; {

	.dbg	line,	"include\routines_LEVELS.c", 414; player_index_jump += 1;
	__add_st.umiq	1, _player_index_jump

	.dbg	line,	"include\routines_LEVELS.c", 415; }

	.dbg	line,	"include\routines_LEVELS.c", 418; // CHECK COLLISION WITH FLOOR //

	.dbg	line,	"include\routines_LEVELS.c", 419; if(player_axis == AXIS_RIGHT)
.LL70:
	__not.um	_player_axis
	__bfalse	.LL71

	.dbg	line,	"include\routines_LEVELS.c", 420; {

	.dbg	line,	"include\routines_LEVELS.c", 421; check_FLOOR_R();
	__call		_check_FLOOR_R

	.dbg	line,	"include\routines_LEVELS.c", 422; }

	.dbg	line,	"include\routines_LEVELS.c", 424; else
	__bra		.LL72
.LL71:

	.dbg	line,	"include\routines_LEVELS.c", 425; {

	.dbg	line,	"include\routines_LEVELS.c", 426; check_FLOOR_L();
	__call		_check_FLOOR_L

	.dbg	line,	"include\routines_LEVELS.c", 427; }
.LL72:

	.dbg	line,	"include\routines_LEVELS.c", 430; if(map_blk_flag == TILE_BG)
	__ld.umq	_map_blk_flag
	__equ_b.uiq	1
	__bfalse	.LL73

	.dbg	line,	"include\routines_LEVELS.c", 431; {

	.dbg	line,	"include\routines_LEVELS.c", 432; // CALCULATE HOW MANY PIXELS THE PLAYER MOVED INTO THE GROUND //

	.dbg	line,	"include\routines_LEVELS.c", 433; for(i=1; i<11 ; i++ )
	__st.umiq	1, __update_PLAYER_end - 1  /* i */
.LL74:
	__ld.umq	__update_PLAYER_end - 1  /* i */
	__ult_b.uiq	11
	__btrue		.LL76
	__bra		.LL77
.LL75:
	__inc.umq	__update_PLAYER_end - 1  /* i */
	__bra		.LL74
.LL76:

	.dbg	line,	"include\routines_LEVELS.c", 434; {

	.dbg	line,	"include\routines_LEVELS.c", 435; if(player_axis == AXIS_RIGHT)
	__not.um	_player_axis
	__bfalse	.LL78

	.dbg	line,	"include\routines_LEVELS.c", 436; {

	.dbg	line,	"include\routines_LEVELS.c", 437; calculate_COLLISION_DEEP( 11 , i);
	__ld.wi		11
	__pusharg.wr
	__ld.um		__update_PLAYER_end - 1  /* i */
	__pusharg.wr
	__call		_calculate_COLLISION_DEEP

	.dbg	line,	"include\routines_LEVELS.c", 438; }

	.dbg	line,	"include\routines_LEVELS.c", 440; else
	__bra		.LL79
.LL78:

	.dbg	line,	"include\routines_LEVELS.c", 441; {

	.dbg	line,	"include\routines_LEVELS.c", 442; calculate_COLLISION_DEEP( 10 , i);
	__ld.wi		10
	__pusharg.wr
	__ld.um		__update_PLAYER_end - 1  /* i */
	__pusharg.wr
	__call		_calculate_COLLISION_DEEP

	.dbg	line,	"include\routines_LEVELS.c", 443; }
.LL79:

	.dbg	line,	"include\routines_LEVELS.c", 446; if(map_blk_flag == TILE_EMPTY)
	__not.um	_map_blk_flag
	__bfalse	.LL80

	.dbg	line,	"include\routines_LEVELS.c", 447; {

	.dbg	line,	"include\routines_LEVELS.c", 448; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
	__st.wmiq	18432, _di
	__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
	__st.wmiq	256, _ax
	 _load_vram.3

	.dbg	line,	"include\routines_LEVELS.c", 450; player_pos_y -= (i - 1);
	__ld.um		__update_PLAYER_end - 1  /* i */
	__sub.wi	1
	__isub_st.wmq	_player_pos_y

	.dbg	line,	"include\routines_LEVELS.c", 451; spr_y(player_pos_y);
	__ld.wm		_player_pos_y
	__call		_spr_y.1

	.dbg	line,	"include\routines_LEVELS.c", 453; break;
	__bra		.LL77

	.dbg	line,	"include\routines_LEVELS.c", 454; }

	.dbg	line,	"include\routines_LEVELS.c", 456; }
.LL80	.alias		.LL75
	__bra		.LL75
.LL77:

	.dbg	line,	"include\routines_LEVELS.c", 459; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
	__st.wmiq	18432, _di
	__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
	__st.wmiq	256, _ax
	 _load_vram.3

	.dbg	line,	"include\routines_LEVELS.c", 461; player_counter_anim = 0;
	__st.umiq	0, _player_counter_anim

	.dbg	line,	"include\routines_LEVELS.c", 462; player_index_jump = 0;
	__st.umiq	0, _player_index_jump

	.dbg	line,	"include\routines_LEVELS.c", 464; player_state = STATE_IDLE;
	__st.umiq	0, _player_state

	.dbg	line,	"include\routines_LEVELS.c", 466; return;
	__bra		.LL42

	.dbg	line,	"include\routines_LEVELS.c", 467; }

	.dbg	line,	"include\routines_LEVELS.c", 468; }
.LL73	.alias		.LL81

	.dbg	line,	"include\routines_LEVELS.c", 471; else if(player_state == STATE_FALL)
	__bra		.LL81
.LL69:
	__ld.umq	_player_state
	__equ_b.uiq	9
	__bfalse	.LL82

	.dbg	line,	"include\routines_LEVELS.c", 472; {

	.dbg	line,	"include\routines_LEVELS.c", 473; //

	.dbg	line,	"include\routines_LEVELS.c", 474; }

	.dbg	line,	"include\routines_LEVELS.c", 475; }
.LL82:
.LL81:
.LL68:
.LL42:
	__return	0
	.dbg	clear
	.endp
	.data
	.bss
__update_PLAYER_loc:
		ds	1
__update_PLAYER_end:
	.code
	.pceas

	.dbg	line,	"main.c", 22; #include "include/init.c"
	.dbg	line,	"include\init.c", 1; #include "huc.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
	.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
	.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
	.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
	.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
	.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
	.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
	.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
	.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
	.dbg	line,	"include\init.c", 2; #include "hucc-scroll.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 1; #ifndef _hucc_scroll_h
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 2; #define _hucc_scroll_h
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 7; ; hucc-scroll.h
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 9; ; Routines for a fast split-screen scrolling system.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 11; ; Copyright John Brandwood 2024.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 20; ; The maximum number of splits for each screen layer is set in your project's
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 21; ; "hucc-config.inc" file, with the library having a limit of 128-per-layer.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 22; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 23; ; Your first active split must be defined to start at screen line 0, and then
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 24; ; the rest of the active splits must be in increasing line order to match the
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 25; ; way that the PC Engine displays the output image.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 26; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 27; ; You can have disabled splits interleaved with your active splits.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 28; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 29; ; Splits that are normally disabled can be used to create full screen effects
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 30; ; such as bouncing the screen up and down by adding blank areas at the top or
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 31; ; bottom of the screen, and then rapidly changing the height of those areas.
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 32; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 33; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 34; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 36; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 37; // VDC bits for display_flags ...
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 38; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 40; #ifndef BKG_OFF
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 41; #define BKG_OFF 0x00
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 42; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 44; #ifndef SPR_OFF
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 45; #define SPR_OFF 0x00
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 46; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 48; #ifndef BKG_ON
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 49; #define BKG_ON 0x80
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 50; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 52; #ifndef SPR_ON
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 53; #define SPR_ON 0x40
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 54; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 56; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 57; // Functions in hucc-scroll.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 58; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 60; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 62; #asmdef	HUCC_USES_NEW_SCROLL 1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 64; extern void __fastcall scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 65; extern void __fastcall sgx_scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 67; extern void __fastcall disable_split( unsigned char index<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 68; extern void __fastcall sgx_disable_split( unsigned char index<acc> );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 70; extern void __fastcall __macro disable_all_splits( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 71; extern void __fastcall __macro sgx_disable_all_splits( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 73; #asm
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 74; .macro	_disable_all_splits
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 75; ldy	#HUCC_PCE_SPLITS - 1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 76; !loop:		tya
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 77; call	_disable_split.1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 78; dey
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 79; bpl	!loop-
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 80; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 82; .macro	_sgx_disable_all_splits
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 83; ldy	#HUCC_SGX_SPLITS - 1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 84; !loop:		tya
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 85; call	_sgx_disable_split.1
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 86; dey
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 87; bpl	!loop-
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 88; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 89; #endasm
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 91; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 93; #endif // _hucc_scroll_h
	.dbg	line,	"include\init.c", 3; #include "hucc-chrmap.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 1; #ifndef _hucc_chrmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 2; #define _hucc_chrmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 7; ; hucc-chrmap.h
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 9; ; A simple map system based on 8x8 characters (aka "tiles") in BAT format.
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 11; ; Copyright John Brandwood 2025.
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 20; ; The maximum X and Y size for chrmaps is 256 characters (2048 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 21; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 22; ; The maximum total size for a chrmap is 16KBytes, which allows for maps up
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 23; ; to 256x32 tiles (2048x256 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 24; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 25; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 26; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 28; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 29; // This code extends the blkmap library ...
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 30; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 32; #include "hucc-blkmap.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 34; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 35; // Functions in chrmap.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 36; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 38; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 40; #asmdef	HUCC_USES_CHRMAP 1
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 42; extern void __fastcall __nop set_chrmap( unsigned char __far *chrmap<vdc_map_bank:vdc_map_addr>, unsigned char tiles_w<vdc_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 44; extern void __fastcall draw_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 45; extern void __fastcall scroll_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 47; extern void __fastcall blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 49; #ifdef _SGX
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 51; extern void __fastcall __nop sgx_set_chrmap( unsigned char __far *chrmap<sgx_map_bank:sgx_map_addr>, unsigned char tiles_w<sgx_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 53; extern void __fastcall sgx_draw_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 54; extern void __fastcall sgx_scroll_bat( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 56; extern void __fastcall sgx_blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 58; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 60; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 62; #endif // _hucc_chrmap_h
	.dbg	line,	"include\init.c", 4; #include "hucc-blkmap.h"
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 1; #ifndef _hucc_blkmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 2; #define _hucc_blkmap_h
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 4; /****************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 5; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 6; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 7; ; hucc-blkmap.h
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 8; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 9; ; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 10; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 11; ; Copyright John Brandwood 2025.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 12; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 16; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 17; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 18; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 19; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 20; ; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 21; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 22; ; The maximum total size for a blkmap is 16KBytes, which allows for maps up
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 23; ; to 128x128 blocks (2048x2048 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 24; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 25; ; Huge multi-screen blkmaps are also supported (optionally).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 26; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 27; ; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 28; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 29; ; The maximum total size for a multi-screen map is 8KBytes, which allows for
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 30; ; a total of 1024 screens.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 31; ;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 32; ; ***************************************************************************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 33; ; **************************************************************************/
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 35; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 36; // Functions in blkmap.asm ...
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 37; // *************
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 39; #ifdef __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 41; #asmdef	HUCC_USES_BLKMAP 1
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 43; // Current top-left of drawn map in pixels.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 44; extern unsigned int   vdc_map_pxl_x;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 45; extern unsigned int   vdc_map_pxl_y;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 47; // Width and height to draw/scroll in characters (not tiles).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 48; extern unsigned char  vdc_map_draw_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 49; extern unsigned char  vdc_map_draw_h;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 51; // Width of map (or multi-screen BAT) in tiles.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 52; extern unsigned char  vdc_map_line_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 54; // Width of map in screens (if multi-screen map).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 55; extern unsigned char  vdc_map_scrn_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 57; // Extra information returned by get_map_block() and sgx_get_map_block(),
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 58; // which are the collision flags and the mask/overlay sprite for the BLK.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 59; extern unsigned char  map_blk_flag;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 60; extern unsigned char  map_blk_mask;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 62; extern unsigned char  vdc_scr_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 63; extern unsigned char *vdc_scr_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 65; extern unsigned char  vdc_map_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 66; extern unsigned char *vdc_map_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 68; extern unsigned char  vdc_blk_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 69; extern unsigned char *vdc_blk_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 71; extern unsigned char  vdc_tbl_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 72; extern unsigned char *vdc_tbl_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 74; extern void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blocks<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 75; extern void __fastcall __macro set_blkmap( unsigned char __far *blk_map<vdc_map_bank:vdc_map_addr>, unsigned char blocks_w<vdc_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 76; extern void __fastcall __macro set_multimap( unsigned char __far *multi_map<vdc_scr_bank:vdc_scr_addr>, unsigned char screens_w<vdc_map_scrn_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 78; extern void __fastcall draw_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 79; extern void __fastcall scroll_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 81; extern void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 83; extern unsigned char __fastcall get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 85; #asm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 86; .macro	_set_blkmap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 87; stz	vdc_scr_bank
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 88; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 90; .macro	_set_multimap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 91; lda	vdc_bat_width
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 92; lsr	a
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 93; sta	vdc_map_line_w
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 94; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 96; .macro	SCREEN
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 97; db	(((\1) & $1FFF) | $6000) >> 8, bank(\1)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 98; db	(((\2) & $1FFF) | $4000) >> 8, bank(\2)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 99; db	(((\3) & $1FFF) | $6000) >> 8, bank(\3)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 100; dw	(\4)
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 101; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 102; #endasm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 104; #ifdef _SGX
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 106; // Current top-left of drawn map in pixels.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 107; extern unsigned int   sgx_map_pxl_x;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 108; extern unsigned int   sgx_map_pxl_y;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 110; // Width and height to draw/scroll in characters (not tiles).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 111; extern unsigned char  sgx_map_draw_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 112; extern unsigned char  sgx_map_draw_h;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 114; // Width of map (or multi-screen BAT) in tiles.
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 115; extern unsigned char  sgx_map_line_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 117; // Width of map in screens (if multi-screen map).
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 118; extern unsigned char  sgx_map_scrn_w;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 120; extern unsigned char  sgx_scr_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 121; extern unsigned char *sgx_scr_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 123; extern unsigned char  sgx_map_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 124; extern unsigned char *sgx_map_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 126; extern unsigned char  sgx_blk_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 127; extern unsigned char *sgx_blk_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 129; extern unsigned char  sgx_tbl_bank;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 130; extern unsigned char *sgx_tbl_addr;
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 132; extern void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blocks<_al> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 133; extern void __fastcall __macro sgx_set_blkmap( unsigned char __far *blk_map<sgx_map_bank:sgx_map_addr>, unsigned char blocks_w<sgx_map_line_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 134; extern void __fastcall __macro sgx_set_multimap( unsigned char __far *multi_map<sgx_scr_bank:sgx_scr_addr>, unsigned char screens_w<sgx_map_scrn_w> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 136; extern void __fastcall sgx_draw_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 137; extern void __fastcall sgx_scroll_map( void );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 139; extern void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 141; extern unsigned char __fastcall sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 143; #asm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 144; .macro	_sgx_set_blkmap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 145; stz	sgx_scr_bank
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 146; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 148; .macro	_sgx_set_multimap.2
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 149; lda	sgx_bat_width
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 150; lsr	a
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 151; sta	sgx_map_line_w
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 152; .endm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 153; #endasm
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 155; #endif
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 157; #endif // __HUCC__
	.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 159; #endif // _hucc_blkmap_h
	.dbg	line,	"include\init.c", 13; void init_VARIABLES()
	.dbg	line,	"include\init.c", 14; {
;***********************
;***********************

	.hucc
	.proc		_init_VARIABLES
	__enter		_init_VARIABLES

	.dbg	line,	"include\init.c", 15; sequence_id = SEQUENCE_GAME;
	__st.umiq	2, _sequence_id

	.dbg	line,	"include\init.c", 17; level_id = 1;
	__st.umiq	1, _level_id

	.dbg	line,	"include\init.c", 19; sequence_loaded = FALSE;
	__st.umiq	0, _sequence_loaded

	.dbg	line,	"include\init.c", 20; }
.LL83:
	__return	0
	.dbg	clear
	.endp
	.pceas

	.dbg	line,	"include\init.c", 23; init_PLAYER()
	.dbg	line,	"include\init.c", 24; {
;***********************
;***********************

	.hucc
	.proc		_init_PLAYER
	__enter		_init_PLAYER

	.dbg	line,	"include\init.c", 25; player_id = 0;
	__st.umiq	0, _player_id

	.dbg	line,	"include\init.c", 26; player_axis = AXIS_RIGHT;
	__st.umiq	0, _player_axis

	.dbg	line,	"include\init.c", 27; player_previous_axis = player_axis;
	__ld.um		_player_axis
	__st.umq	_player_previous_axis

	.dbg	line,	"include\init.c", 28; player_counter_anim = 0;
	__st.umiq	0, _player_counter_anim

	.dbg	line,	"include\init.c", 29; player_index_jump = 0;
	__st.umiq	0, _player_index_jump

	.dbg	line,	"include\init.c", 30; player_state = STATE_IDLE;
	__st.umiq	0, _player_state

	.dbg	line,	"include\init.c", 31; }
.LL84:
	__return	1
	.dbg	clear
	.endp
	.pceas

	.dbg	line,	"include\init.c", 35; void init_LEVEL()
	.dbg	line,	"include\init.c", 36; {
;***********************
;***********************

	.hucc
	.proc		_init_LEVEL
	__enter		_init_LEVEL

	.dbg	line,	"include\init.c", 37; if(level_id == 1)
	__ld.umq	_level_id
	__equ_b.uiq	1
	__bfalse	.LL86

	.dbg	line,	"include\init.c", 38; {

	.dbg	line,	"include\init.c", 39; // VSYNC //

	.dbg	line,	"include\init.c", 40; vsync();
	__call		_vsync

	.dbg	line,	"include\init.c", 42; // LOAD DEFAULT FONT //

	.dbg	line,	"include\init.c", 43; load_default_font();
	 _load_default_font

	.dbg	line,	"include\init.c", 48; // SET VDC 1 SCREEN SIZE (IN TILES) - 64x32 = 512x256 PIXELS

	.dbg	line,	"include\init.c", 49; set_screen_size(SCR_SIZE_64x32);
	__st.umiq	1, _al
	__call		_set_screen_size.1

	.dbg	line,	"include\init.c", 52; // SET VDC 2 SCREEN SIZE (IN TILES) - 64x32 = 512x256 PIXELS

	.dbg	line,	"include\init.c", 53; sgx_set_screen_size(SCR_SIZE_64x32);
	__st.umiq	1, _al
	__call		_sgx_set_screen_size.1

	.dbg	line,	"include\init.c", 56; // INIT SPRITE ATTRIBUTE TABLE //

	.dbg	line,	"include\init.c", 57; init_satb();
	__call		_init_satb

	.dbg	line,	"include\init.c", 62; //**************************************************************************************//

	.dbg	line,	"include\init.c", 63; //                                                                                      //

	.dbg	line,	"include\init.c", 64; //                                        VDC 2                                         //

	.dbg	line,	"include\init.c", 65; //                                                                                      //

	.dbg	line,	"include\init.c", 66; //**************************************************************************************//

	.dbg	line,	"include\init.c", 68; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 69; //                                    LOAD TILESET                                      //

	.dbg	line,	"include\init.c", 70; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 72; sgx_load_vram( 0x1000, tileset_LV1_BG_B, SIZEOF(tileset_LV1_BG_B) >> 1 );
	__st.wmiq	4096, _di
	__farptr	_tileset_LV1_BG_B, _bp_bank, _bp
	__ld.wi		___sizeof__tileset_LV1_BG_B
	__lsr.wi	1
	__st.wmq	_ax
	 _sgx_load_vram.3

	.dbg	line,	"include\init.c", 75; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 76; //                               LOAD WALL & DOOR TILES                                 //

	.dbg	line,	"include\init.c", 77; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 79; sgx_load_vram( LV1_WALL_VRAM_ADR, tileset_LV1_WALL, SIZEOF(tileset_LV1_WALL) >> 1 );
	__st.wmiq	4096, _di
	__farptr	_tileset_LV1_WALL, _bp_bank, _bp
	__ld.wi		___sizeof__tileset_LV1_WALL
	__lsr.wi	1
	__st.wmq	_ax
	 _sgx_load_vram.3

	.dbg	line,	"include\init.c", 80; sgx_load_vram( LV1_DOOR_VRAM_ADR, tileset_LV1_DOOR_OPEN, SIZEOF(tileset_LV1_DOOR_OPEN) >> 1 );
	__st.wmiq	4352, _di
	__farptr	_tileset_LV1_DOOR_OPEN, _bp_bank, _bp
	__ld.wi		___sizeof__tileset_LV1_DOOR_OPEN
	__lsr.wi	1
	__st.wmq	_ax
	 _sgx_load_vram.3

	.dbg	line,	"include\init.c", 83; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 84; //                                     SET MULTIMAP                                     //

	.dbg	line,	"include\init.c", 85; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 87; // multimap is 2 screens wide //

	.dbg	line,	"include\init.c", 88; sgx_set_multimap( multimap_LV1_BG_B , 5 );
	__farptr	_multimap_LV1_BG_B, sgx_scr_bank, sgx_scr_addr
	__st.umiq	5, sgx_map_scrn_w
	 _sgx_set_multimap.2

	.dbg	line,	"include\init.c", 91; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 92; //                                    DRAW TILEMAP                                      //

	.dbg	line,	"include\init.c", 93; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 95; // The blkmap is drawn using global variables for the top-left coordinate

	.dbg	line,	"include\init.c", 96; // in pixels, and the draw width and height in terms of 8x8 characters.

	.dbg	line,	"include\init.c", 98; sgx_map_pxl_x = 96;
	__st.wmiq	96, _sgx_map_pxl_x

	.dbg	line,	"include\init.c", 99; sgx_map_pxl_y = 512;
	__st.wmiq	512, _sgx_map_pxl_y

	.dbg	line,	"include\init.c", 101; sgx_map_draw_w = 63;
	__st.umiq	63, _sgx_map_draw_w

	.dbg	line,	"include\init.c", 102; sgx_map_draw_h = 29;
	__st.umiq	29, _sgx_map_draw_h

	.dbg	line,	"include\init.c", 104; sgx_draw_map();
	__call		_sgx_draw_map

	.dbg	line,	"include\init.c", 109; //**************************************************************************************//

	.dbg	line,	"include\init.c", 110; //                                                                                      //

	.dbg	line,	"include\init.c", 111; //                                        VDC 1                                         //

	.dbg	line,	"include\init.c", 112; //                                                                                      //

	.dbg	line,	"include\init.c", 113; //**************************************************************************************//

	.dbg	line,	"include\init.c", 115; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 116; //                                    LOAD TILESET                                      //

	.dbg	line,	"include\init.c", 117; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 119; load_vram( 0x1000, tileset_LV1_BG_A, SIZEOF(tileset_LV1_BG_A) >> 1 );
	__st.wmiq	4096, _di
	__farptr	_tileset_LV1_BG_A, _bp_bank, _bp
	__ld.wi		___sizeof__tileset_LV1_BG_A
	__lsr.wi	1
	__st.wmq	_ax
	 _load_vram.3

	.dbg	line,	"include\init.c", 122; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 123; //                                 LOAD LIFABAR TILES                                   //

	.dbg	line,	"include\init.c", 124; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 126; load_vram( LIFEBAR_1_VRAM_ADR, tileset_LIFE_RED, SIZEOF(tileset_LIFE_RED) >> 1 );
	__st.wmiq	4096, _di
	__farptr	_tileset_LIFE_RED, _bp_bank, _bp
	__ld.wi		___sizeof__tileset_LIFE_RED
	__lsr.wi	1
	__st.wmq	_ax
	 _load_vram.3

	.dbg	line,	"include\init.c", 127; load_vram( LIFEBAR_2_VRAM_ADR, tileset_LIFE_ORANGE, SIZEOF(tileset_LIFE_ORANGE) >> 1 );
	__st.wmiq	4128, _di
	__farptr	_tileset_LIFE_ORANGE, _bp_bank, _bp
	__ld.wi		___sizeof__tileset_LIFE_ORANGE
	__lsr.wi	1
	__st.wmq	_ax
	 _load_vram.3

	.dbg	line,	"include\init.c", 128; load_vram( LIFEBAR_3_VRAM_ADR, tileset_LIFE_YELLOW, SIZEOF(tileset_LIFE_YELLOW) >> 1 );
	__st.wmiq	4160, _di
	__farptr	_tileset_LIFE_YELLOW, _bp_bank, _bp
	__ld.wi		___sizeof__tileset_LIFE_YELLOW
	__lsr.wi	1
	__st.wmq	_ax
	 _load_vram.3

	.dbg	line,	"include\init.c", 129; load_vram( LIFEBAR_4_VRAM_ADR, tileset_LIFE_YELLOW, SIZEOF(tileset_LIFE_YELLOW) >> 1 );
	__st.wmiq	4192, _di
	__farptr	_tileset_LIFE_YELLOW, _bp_bank, _bp
	__ld.wi		___sizeof__tileset_LIFE_YELLOW
	__lsr.wi	1
	__st.wmq	_ax
	 _load_vram.3

	.dbg	line,	"include\init.c", 130; load_vram( LIFEBAR_5_VRAM_ADR, tileset_LIFE_EMPTY, SIZEOF(tileset_LIFE_EMPTY) >> 1 );
	__st.wmiq	4224, _di
	__farptr	_tileset_LIFE_EMPTY, _bp_bank, _bp
	__ld.wi		___sizeof__tileset_LIFE_EMPTY
	__lsr.wi	1
	__st.wmq	_ax
	 _load_vram.3

	.dbg	line,	"include\init.c", 133; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 134; //                               LOAD WEAPON + ARMOR TILES                              //

	.dbg	line,	"include\init.c", 135; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 137; load_vram( WEAPON_VRAM_ADR, tileset_WEAPON_1, SIZEOF(tileset_WEAPON_1) >> 1 );
	__st.wmiq	4256, _di
	__farptr	_tileset_WEAPON_1, _bp_bank, _bp
	__ld.wi		___sizeof__tileset_WEAPON_1
	__lsr.wi	1
	__st.wmq	_ax
	 _load_vram.3

	.dbg	line,	"include\init.c", 138; load_vram( ARMOR_VRAM_ADR, tileset_ARMOR_2, SIZEOF(tileset_ARMOR_2) >> 1 );
	__st.wmiq	4320, _di
	__farptr	_tileset_ARMOR_2, _bp_bank, _bp
	__ld.wi		___sizeof__tileset_ARMOR_2
	__lsr.wi	1
	__st.wmq	_ax
	 _load_vram.3

	.dbg	line,	"include\init.c", 141; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 142; //                                     SET MULTIMAP                                     //

	.dbg	line,	"include\init.c", 143; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 145; // multimap is 2 screens wide //

	.dbg	line,	"include\init.c", 146; set_multimap( multimap_LV1_BG_A , 5 );
	__farptr	_multimap_LV1_BG_A, vdc_scr_bank, vdc_scr_addr
	__st.umiq	5, vdc_map_scrn_w
	 _set_multimap.2

	.dbg	line,	"include\init.c", 149; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 150; //                                    DRAW TILEMAP                                      //

	.dbg	line,	"include\init.c", 151; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 153; // The blkmap is drawn using global variables for the top-left coordinate

	.dbg	line,	"include\init.c", 154; // in pixels, and the draw width and height in terms of 8x8 characters.

	.dbg	line,	"include\init.c", 156; vdc_map_pxl_x = 0;
	__st.wmiq	0, _vdc_map_pxl_x

	.dbg	line,	"include\init.c", 157; vdc_map_pxl_y = 0;
	__st.wmiq	0, _vdc_map_pxl_y

	.dbg	line,	"include\init.c", 159; vdc_map_draw_w = 32;
	__st.umiq	32, _vdc_map_draw_w

	.dbg	line,	"include\init.c", 160; vdc_map_draw_h = 28;
	__st.umiq	28, _vdc_map_draw_h

	.dbg	line,	"include\init.c", 162; draw_map();
	__call		_draw_map

	.dbg	line,	"include\init.c", 167; //**************************************************************************************//

	.dbg	line,	"include\init.c", 168; //                                                                                      //

	.dbg	line,	"include\init.c", 169; //                                  SETUP SCROLL_SPLIT                                  //

	.dbg	line,	"include\init.c", 170; //                                                                                      //

	.dbg	line,	"include\init.c", 171; //**************************************************************************************//

	.dbg	line,	"include\init.c", 173; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 174; //                                        VDC 2                                         //

	.dbg	line,	"include\init.c", 175; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 177; sgx_scroll_map();
	__call		_sgx_scroll_map

	.dbg	line,	"include\init.c", 179; sgx_scroll_split(0,   0, sgx_map_pxl_x & (BAT_SIZE_W - 1), sgx_map_pxl_y & (BAT_SIZE_H - 1), BKG_ON | SPR_ON);
	__st.umiq	0, _al
	__st.umiq	0, _ah
	__ld.wm		_sgx_map_pxl_x
	__and.wi	2047
	__st.wmq	_bx
	__ld.wm		_sgx_map_pxl_y
	__and.wi	255
	__st.wmq	_cx
	__st.umiq	192, _dl
	__call		_sgx_scroll_split.5

	.dbg	line,	"include\init.c", 184; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 185; //                                   LOAD BG PALETTES                                   //

	.dbg	line,	"include\init.c", 186; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 188; // LOAD ALL PALETTES AT BG PALETTE 0 //

	.dbg	line,	"include\init.c", 189; load_palette( 0, palette_LV1, 16 );
	__st.umiq	0, _al
	__farptr	_palette_LV1, _bp_bank, _bp
	__st.umiq	16, _ah
	__call		_load_palette.3

	.dbg	line,	"include\init.c", 194; //**************************************************************************************//

	.dbg	line,	"include\init.c", 195; //                                                                                      //

	.dbg	line,	"include\init.c", 196; //                                       SPRITES                                        //

	.dbg	line,	"include\init.c", 197; //                                                                                      //

	.dbg	line,	"include\init.c", 198; //**************************************************************************************//

	.dbg	line,	"include\init.c", 200; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 201; //                                        PLAYER                                        //

	.dbg	line,	"include\init.c", 202; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 204; // LOAD PLAYER TILES //

	.dbg	line,	"include\init.c", 205; // 0x2000

	.dbg	line,	"include\init.c", 206; // 32 TILES = 512 //

	.dbg	line,	"include\init.c", 207; // LOAD PLAYER FIRST FRAME OF ANIMATION (IDLE)

	.dbg	line,	"include\init.c", 208; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
	__st.wmiq	18432, _di
	__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
	__st.wmiq	256, _ax
	 _load_vram.3

	.dbg	line,	"include\init.c", 211; // SELECT PLAYER CORE SPRITE //

	.dbg	line,	"include\init.c", 212; spr_set(player_id);
	__ld.umq	_player_id
	__call		_spr_set.1

	.dbg	line,	"include\init.c", 215; player_pos_x = 112;
	__st.wmiq	112, _player_pos_x

	.dbg	line,	"include\init.c", 216; player_pos_y = 128;
	__st.wmiq	128, _player_pos_y

	.dbg	line,	"include\init.c", 219; spr_x(player_pos_x);
	__ld.wm		_player_pos_x
	__call		_spr_x.1

	.dbg	line,	"include\init.c", 220; spr_y(player_pos_y);
	__ld.wm		_player_pos_y
	__call		_spr_y.1

	.dbg	line,	"include\init.c", 222; // SET TILES DATA FOR THE PLAYER //

	.dbg	line,	"include\init.c", 223; spr_pattern(PLAYER_VRAM_ADR);
	__ld.wi		18432
	__call		_spr_pattern.1

	.dbg	line,	"include\init.c", 226; spr_ctrl(FLIP_MAS|SIZE_MAS, NO_FLIP|SZ_32x32);
	__st.umiq	185, _al
	__ld.uiq	17
	__call		_spr_ctrl.2

	.dbg	line,	"include\init.c", 229; spr_pal(0);
	__ld.uiq	0
	__call		_spr_pal.1

	.dbg	line,	"include\init.c", 230; spr_pri(TRUE);
	__ld.uiq	1
	__call		_spr_pri.1

	.dbg	line,	"include\init.c", 233; // UPDATE PCE SAT //

	.dbg	line,	"include\init.c", 234; satb_update();
	__call		_satb_update

	.dbg	line,	"include\init.c", 239; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 240; //                                LOAD SPRITES PALETTES                                 //

	.dbg	line,	"include\init.c", 241; //--------------------------------------------------------------------------------------//

	.dbg	line,	"include\init.c", 243; load_palette( 16, palette_PLAYER, 1 );
	__st.umiq	16, _al
	__farptr	_palette_PLAYER, _bp_bank, _bp
	__st.umiq	1, _ah
	__call		_load_palette.3

	.dbg	line,	"include\init.c", 248; //**************************************************************************************//

	.dbg	line,	"include\init.c", 249; //                                                                                      //

	.dbg	line,	"include\init.c", 250; //                                      VARIABLES                                       //

	.dbg	line,	"include\init.c", 251; //                                                                                      //

	.dbg	line,	"include\init.c", 252; //**************************************************************************************//

	.dbg	line,	"include\init.c", 254; //

	.dbg	line,	"include\init.c", 257; // VSYNC //

	.dbg	line,	"include\init.c", 258; vsync();
	__call		_vsync

	.dbg	line,	"include\init.c", 260; // ENABLE DISPLAY //

	.dbg	line,	"include\init.c", 261; disp_on();
	__call		_disp_on

	.dbg	line,	"include\init.c", 262; }

	.dbg	line,	"include\init.c", 263; }
.LL86:
.LL85:
	__return	0
	.dbg	clear
	.endp
	.pceas

	.dbg	line,	"main.c", 29; main()
	.dbg	line,	"main.c", 30; {
;***********************
;***********************

	.hucc
	.proc		_main
	__enter		_main

	.dbg	line,	"main.c", 31; if(!sgx_detect())
	 _sgx_detect
	__not.wr
	__bfalse	.LL88

	.dbg	line,	"main.c", 32; {

	.dbg	line,	"main.c", 33; put_string("Halt: SGX hardware not found", 2, 13);
	__ld.wi		__const1+0
	__st.wmq	_bp
	__st.umiq	2, _dil
	__st.umiq	13, _dih
	__call		_put_string.3

	.dbg	line,	"main.c", 35; for(;;)
.LL89	.alias		.LL91
.LL90	.alias		.LL91
.LL91:

	.dbg	line,	"main.c", 36; {

	.dbg	line,	"main.c", 37; // INFINITE LOOP //

	.dbg	line,	"main.c", 38; }
	__bra		.LL91
.LL92:

	.dbg	line,	"main.c", 39; }

	.dbg	line,	"main.c", 44; init_VARIABLES();
.LL88:
	__call		_init_VARIABLES

	.dbg	line,	"main.c", 47; init_PLAYER();
	__call		_init_PLAYER

	.dbg	line,	"main.c", 52; //**************************************************************************************//

	.dbg	line,	"main.c", 53; //                                                                                      //

	.dbg	line,	"main.c", 54; //                                      TITLE                                           //

	.dbg	line,	"main.c", 55; //                                                                                      //

	.dbg	line,	"main.c", 56; //**************************************************************************************//

	.dbg	line,	"main.c", 57; for(;;)
.LL93:
.LL94:
.LL95:

	.dbg	line,	"main.c", 58; {

	.dbg	line,	"main.c", 60; if(sequence_id == SEQUENCE_TITLE)
	__not.um	_sequence_id
	__bfalse	.LL97

	.dbg	line,	"main.c", 61; {

	.dbg	line,	"main.c", 63; }

	.dbg	line,	"main.c", 66; else if(sequence_id == SEQUENCE_GAME)
	__bra		.LL98
.LL97:
	__ld.umq	_sequence_id
	__equ_b.uiq	2
	__bfalse	.LL99

	.dbg	line,	"main.c", 67; {

	.dbg	line,	"main.c", 68; // LOADING LOGO SCREEN //

	.dbg	line,	"main.c", 69; if(sequence_loaded == FALSE)
	__not.um	_sequence_loaded
	__bfalse	.LL100

	.dbg	line,	"main.c", 70; {

	.dbg	line,	"main.c", 71; init_LEVEL();
	__call		_init_LEVEL

	.dbg	line,	"main.c", 73; sequence_loaded = TRUE;
	__st.umiq	1, _sequence_loaded

	.dbg	line,	"main.c", 74; }

	.dbg	line,	"main.c", 77; else
	__bra		.LL101
.LL100:

	.dbg	line,	"main.c", 78; {

	.dbg	line,	"main.c", 79; if(level_id == 1)
	__ld.umq	_level_id
	__equ_b.uiq	1
	__bfalse	.LL102

	.dbg	line,	"main.c", 80; {

	.dbg	line,	"main.c", 81; vsync();
	__call		_vsync

	.dbg	line,	"main.c", 83; joypad_BUTTONS();
	__call		_joypad_BUTTONS

	.dbg	line,	"main.c", 84; joypad_DIR();
	__call		_joypad_DIR

	.dbg	line,	"main.c", 85; update_PLAYER();
	__call		_update_PLAYER

	.dbg	line,	"main.c", 87; // UPDATE PCE SAT //

	.dbg	line,	"main.c", 88; satb_update();
	__call		_satb_update

	.dbg	line,	"main.c", 90; //put_number(map_blk_flag,1,32,0);

	.dbg	line,	"main.c", 91; //put_number(player_previous_axis,1,15,1);

	.dbg	line,	"main.c", 92; }

	.dbg	line,	"main.c", 94; else if(level_id == 2)
	__bra		.LL103
.LL102:
	__ld.umq	_level_id
	__equ_b.uiq	2
	__bfalse	.LL104

	.dbg	line,	"main.c", 95; {

	.dbg	line,	"main.c", 96; //sequence_LV2();

	.dbg	line,	"main.c", 97; }

	.dbg	line,	"main.c", 99; else if(level_id == 3)
	__bra		.LL105
.LL104:
	__ld.umq	_level_id
	__equ_b.uiq	3
	__bfalse	.LL106

	.dbg	line,	"main.c", 100; {

	.dbg	line,	"main.c", 101; //sequence_LV3();

	.dbg	line,	"main.c", 102; }

	.dbg	line,	"main.c", 104; else if(level_id == 4)
	__bra		.LL107
.LL106:
	__ld.umq	_level_id
	__equ_b.uiq	4
	__bfalse	.LL108

	.dbg	line,	"main.c", 105; {

	.dbg	line,	"main.c", 106; //sequence_LV4();

	.dbg	line,	"main.c", 107; }

	.dbg	line,	"main.c", 109; else if(level_id == 5)
	__bra		.LL109
.LL108:
	__ld.umq	_level_id
	__equ_b.uiq	5
	__bfalse	.LL110

	.dbg	line,	"main.c", 110; {

	.dbg	line,	"main.c", 111; //sequence_LV5();

	.dbg	line,	"main.c", 112; }

	.dbg	line,	"main.c", 113; }
.LL110	.alias		.LL95
.LL109	.alias		.LL95
.LL107	.alias		.LL95
.LL105	.alias		.LL95
.LL103	.alias		.LL95
.LL101	.alias		.LL95

	.dbg	line,	"main.c", 114; }

	.dbg	line,	"main.c", 115; }
.LL99	.alias		.LL95
.LL98	.alias		.LL95
	__bra		.LL95
.LL96:

	.dbg	line,	"main.c", 118; }
.LL87:
	__return	1
	.dbg	clear
	.endp
	.pceas

	.dbg	clear
	.rodata
__const1:
		db	'H','a','l','t',':',' ','S','G'
		db	'X',' ','h','a','r','d','w','a'
		db	'r','e',' ','n','o','t',' ','f'
		db	'o','u','n','d',$00
_TABLE_PLAYER_JUMP_V:
		db	-4
		db	-5
		db	-10
		db	-4
		db	-4
		db	-7
		db	-6
		db	-3
		db	-5
		db	-2
		db	-4
		db	-1
		db	-1
		db	-1
		db	-1
		db	0
		db	0
		db	0
		db	0
		db	1
		db	1
		db	1
		db	1
		db	4
		db	2
		db	5
		db	3
		db	6
		db	7
		db	4
		db	4
		db	10
		db	4
		db	4
		db	5

	.bss
_sequence_id:
		ds	1
_sequence_loaded:
		ds	1
_level_id:
		ds	1
_player_id:
		ds	1
_player_state:
		ds	1
_player_axis:
		ds	1
_player_previous_axis:
		ds	1
_player_counter_anim:
		ds	1
_player_index_jump:
		ds	1
_player_pos_x:
		ds	2
_player_pos_y:
		ds	2


;0 error(s) in compilation
;	literal pool:29
;	constant pool:35
;	global pool:354
;	Macro pool:172
leaf_loc:
		ds	4
__calculate_COLLISION_DEEP_end:
__check_WALL_R_end:
__check_WALL_L_end:
__check_FLOOR_R_end:
__check_FLOOR_L_end:

__bss_init:

__heap_start:
