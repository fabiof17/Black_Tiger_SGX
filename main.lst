                             #[1]   "main.s"
   27                        	
   28               0010     	CORE_VERSION	=	$10			; Version 1.0
   29                        	
   30                        			; Get the user program's configuration settings, this will
   31                        			; be read from the current directory, if it exists, or the
   32                        			; "../include/" directory if not.
   33                        	
                             #[4]   "..\..\..\include\hucc\core-config.inc"
   34                        			include	"core-config.inc"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; core-config.inc
    5                        	;
    6                        	; Configuration settings for the "CORE(not TM)" PC Engine library code.
    7                        	;
    8                        	; Copyright John Brandwood 2021-2024.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; The idea is that you, a PCE developer, copy this file from the ../include/
   18                        	; directory and into your project's directory, and then customize the values
   19                        	; to suit your particular project.
   20                        	;
   21                        	; Because PCEAS searches the current (i.e. project) directory for an include
   22                        	; file first, then it will find your customized copy of the file rather than
   23                        	; the original copy in the ../include/ directory.
   24                        	;
   25                        	; That means that all of the different overlay programs in your project will
   26                        	; share the same overall library configuration for your game.
   27                        	;
   28                        	; ***************************************************************************
   29                        	; ***************************************************************************
   30                        	
   31                        	;
   32                        	; Are we going to take over MPR7?
   33                        	;
   34                        	; While this is the default for the "CORE(not TM)" library, it is definitely
   35                        	; possible to use the library to build CD-ROM code that runs with the System
   36                        	; Card in MPR7, and with the 1st bank remaining in MPR2.
   37                        	;
   38                        	; N.B. The CD-ROM Stage1 loader runs the library with USING_MPR7=0 while it
   39                        	;      installs the kernel into PCE RAM in MPR1.
   40                        	;
   41                        	
   42               0000     		.ifndef	USING_MPR7
   44                        		.endif
   45                        	
   46                        	;
   47                        	; Are we building a CD-ROM overlay that uses an already-built CD-ROM Stage1
   48                        	; loader to install the library's kernel code into PCE RAM in MPR1?
   49                        	;
   50                        	; If this is set, the library's kernel code will be excluded from the build,
   51                        	; which will save about 1KB-3KB of code space in every overlay program!
   52                        	;
   53                        	; N.B. The CD-ROM Stage1 loader sets USING_STAGE1=0 so it builds correctly.
   54                        	;
   55                        	
   56               0000     		.ifndef	USING_STAGE1
   58                        		.endif
   59                        	
   60                        	;
   61                        	; Are we currently building the CD-ROM Stage1 loader?
   62                        	;
   63                        	; If this is set, the library's startup code does not call the __sound_init
   64                        	; macro because the sound driver code is not usually a part of the kernel.
   65                        	;
   66                        	; N.B. The CD-ROM Stage1 loader sets BUILDING_STAGE1=1 so it builds correctly.
   67                        	;
   68                        	
   69               0000     		.ifndef	BUILDING_STAGE1
   71                        		.endif
   72                        	
   73                        	;
   74                        	; Is the last track of the CD a duplicate of the main ISO data track?
   75                        	;
   76                        	; Most CD games put two copies of the same ISO track on the CD, so that data
   77                        	; can be read from the secondary track if the drive has a problem reading it
   78                        	; it from the primary location.
   79                        	;
   80                        	; If set, the secondary track will be enabled when the library first starts.
   81                        	;
   82                        	
   83               0000     		.ifndef	SUPPORT_2ISO
   85                        		.endif
   86                        	
   87                        	;
   88                        	; Maximum number of directory entries to use from the ISO.
   89                        	;
   90                        	; The fewer that we choose, the less RAM memory we need. A setting of 64 is
   91                        	; a good compromise to use until you are putting lots of files on the ISO.
   92                        	;
   93                        	
   94               0000     		.ifndef	MAX_DIRSIZE
   96                        		.endif
   97                        	
   98                        	;
   99                        	; Use the System Card's PSG driver code instead of a modern alternative
  100                        	; sound driver like a DefleMask or Furnace player?
  101                        	;
  102                        	
  103               0000     		.ifndef	USING_PSGDRIVER
  105                        		.endif
  106                        	
  107                        	;
  108                        	; Support development for the Turbo EverDrive v2?
  109                        	;
  110                        	; This only applies to HuCard programs, but when chosen, the "CORE(not TM)"
  111                        	; kernel is moved from bank 0 to bank 2, and a minimal set of startup code
  112                        	; is put in bank 0.
  113                        	;
  114                        	; This is because the TED2 hardware occupies the whole of bank 0 when it is
  115                        	; activated, and so we need to run with a different bank in MPR7.
  116                        	;
  117                        	
  118               0000     		.ifndef	SUPPORT_TED2
  120                        		.endif
  121                        	
  122                        	;
  123                        	; Support development for the SuperGRAFX?
  124                        	;
  125                        	; This enables SuperGRAFX support in certain library functions.
  126                        	;
  127                        	
  128               0000     		.ifndef	SUPPORT_SGX
  130                        		.endif
  131                        	
  132                        	;
  133                        	; Choose SuperGRAFX VPC initialization mode.
  134                        	;
  135                        	; SGX_PARALLAX=0 (useful when VDC #1 is a fullscreen HUD)
  136                        	;
  137                        	;  FRONT
  138                        	;   SP1 = VDC #1 (pce) sprite pixels
  139                        	;   BG1 = VDC #1 (pce) background pixels
  140                        	;   SP2 = VDC #2 (sgx) sprite pixels
  141                        	;   BG2 = VDC #2 (sgx) background pixels
  142                        	;  BACK
  143                        	;
  144                        	; SGX_PARALLAX=1
  145                        	;
  146                        	;  FRONT
  147                        	;   SP1 = VDC #1 (pce) sprite pixels
  148                        	;   SP2 = VDC #2 (sgx) sprite pixels
  149                        	;   BG1 = VDC #1 (pce) background pixels
  150                        	;   BG2 = VDC #2 (sgx) background pixels
  151                        	;  BACK
  152                        	;
  153                        	
  154               0000     		.ifndef	SGX_PARALLAX
  156                        		.endif
  157                        	
  158                        	;
  159                        	; Support development for the ArcadeCard?
  160                        	;
  161                        	; This enables ArcadeCard support in certain library functions.
  162                        	;
  163                        	
  164               0000     		.ifndef	SUPPORT_ACD
  166                        		.endif
  167                        	
  168                        	;
  169                        	; Support development for the IFU's ADPCM hardware?
  170                        	;
  171                        	; Developers would normally just use the System Card functions for ADPCM, but
  172                        	; enabling this adds alternative functions, and allows ADPCM use on a HuCARD.
  173                        	;
  174                        	
  175               0000     		.ifndef	SUPPORT_ADPCM
  177                        		.endif
  178                        	
  179                        	;
  180                        	; Select which version of the joystick library code to include, only one of
  181                        	; these can be set to '1' ...
  182                        	;
  183                        	; SUPPORT_2BUTTON : Only returns buttons I and II.
  184                        	; SUPPORT_6BUTTON : Read buttons III-VI, but ignore a mouse.
  185                        	; SUPPORT_MOUSE	  : Read mouse, but ignore buttons III-VI.
  186                        	;
  187                        	; It doesn't make sense to design a game the relies on both the 6-button and
  188                        	; the mouse, so the joystick library is optimized for one or the other.
  189                        	;
  190                        	; Note that both those devices are always detected and no conflicts occur,
  191                        	; this just controls reading either buttons III-VI or the Mouse Y-movement.
  192                        	;
  193                        	
  194               0000     		.ifndef	SUPPORT_6BUTTON
  200                        		.endif
  201                        	
  202                        	;
  203                        	; How many joypad/mouse devices should be supported?
  204                        	;
  205                        	; This is normally 5, but can be set to 3 (or lower) in order to speed up
  206                        	; the processing and free up CPU time for other code, which is especially
  207                        	; useful for mouse games.
  208                        	;
  209                        	
  210               0000     		.ifndef	MAX_PADS
  212                        		.endif
  213                        	
  214                        	;
  215                        	; Implement a HuC-compatible seperate array for accumulating joypad presses?
  216                        	;
  217                        	; This is only really needed if your game is not expected to run at 60Hz and
  218                        	; so you will sometimes miss joypad presses.
  219                        	;
  220                        	; Alternatively you can set ACCUMULATE_JOY so that joypad presses are always
  221                        	; accumulated in the normal joytrg array, which is how asm programmers would
  222                        	; normally deal with this situation.
  223                        	;
  224                        	
  225               0000     		.ifndef HUC_JOY_EVENTS
  227                        		.endif
  228                        	
  229                        	;
  230                        	; Should "joytrg" accumulate presses, and so need to be explicitely cleared
  231                        	; after reading, or should it just be the result of the last read?
  232                        	;
  233                        	; This option has no effect if HUC_JOY_EVENTS is non-zero since that option
  234                        	; takes precedence over this one!
  235                        	;
  236                        	
  237               0000     		.ifndef ACCUMULATE_JOY
  239                        		.endif
  240                        	
  241                        	;
  242                        	; The DATA_BANK location needs to be set as early as possible so that library
  243                        	; code is able to put data in there before the total overall size of the code
  244                        	; is known.
  245                        	;
  246                        	; By default, DATA_BANK is the next bank after the CORE_BANK.
  247                        	;
  248                        	; RESERVE_BANKS allows developers to reserve some banks between the CORE_BANK
  249                        	; and the DATA_BANK that they can use however they wish.
  250                        	;
  251                        	; One use for RESERVE_BANKS is to create empty space that PCEAS can use when
  252                        	; it relocates procedures. This provides a way for a developer to group code
  253                        	; together at the start of memory, and leave the maximum number of banks for
  254                        	; loading dynamic data from CD-ROM.
  255                        	;
  256                        	; The KickC environment sets RESERVE_BANKS=1 (or higher) so that there is a
  257                        	; a bank for the permanent C code and static constants.
  258                        	;
  259                        	
  260               0000     		.ifndef	RESERVE_BANKS
  266                        		.endif	RESERVE_BANKS
                             #[3]   "..\..\..\include\hucc\core.inc"
   35                        	
   36                        	;
   37                        	; This is a simple macro to call System Card functions when using MPR7 for
   38                        	; running the "CORE(not TM)" PC Engine library code.
   39                        	;
   40                        	
   41                        	system		.macro
   42                        			ldy     #<\1
   43                        			jsr	call_bios
   44                        			.endm
   45                        	
   46                        	;
   47                        	; This replaces the System Card's ex_setvec, because "call_bios" uses the
   48                        	; Y register.
   49                        	;
   50                        	
   51                        	setvec		.macro
   52                        			php
   53                        			sei
   54                        			lda.l	#\2
   55                        			sta.l	\1
   56                        			lda.h	#\2
   57                        			sta.h	\1
   58                        			plp
   59                        			.endm
   60                        	
   61                        	;
   62                        	; Repurpose this System Card variable, since nmi_hook is never used.
   63                        	;
   64                        	; We'll use it as a vector to a user-supplied sound driver instead.
   65                        	;
   66                        	
   67               2206     	sound_hook	=	nmi_hook		; Sound Driver to run in VBL.
   68                        	
   69                        	;
   70                        	; CORE Zero-Page variables, relative to the System Card's ZP variables.
   71                        	;
   72                        	
   73               0000     		.if	USING_PSGDRIVER
   75                        		.else
   76               20EC     	core_zpend	=	$F8:20EC
   77                        		.endif	USING_PSGDRIVER
   78                        	
   79               0001     		.if	SUPPORT_SGX
   80                        	
   81                        			; Put some "CORE(not TM)" variables at the start of Zero Page.
   82                        			;
   83                        			; These are at the *start* of ZP so that the SuperGrafx shadow
   84                        			; "sgx_" registers are at a specific offset from their System
   85                        			; Card "vdc_" counterparts, and they MUST NOT be moved!
   86                        			;
   87                        			; This allows us to put SGX_VDC_OFFSET or PCE_VDC_OFFSET into
   88                        			; the X register, and then index into either set of hardware
   89                        			; registers and the "sgx_reg" or "vdc_reg" shadow-variables.
   90                        	
   91               0000     	PCE_VDC_OFFSET	=	$00		; Offset to PCE VDC chip & shadow vars.
   92               0010     	SGX_VDC_OFFSET	=	$10		; Offset to SGX VDC chip & shadow vars.
   93                        	
   94               2000     			.zp
   95               2000     			.org	$2000
   96    F8:2000             	__temp		ds	2		; $F8:2000 Use within any ASM routine.
   97    F8:2002             	_bp_bank	ds	1		; $F8:2002 Use within any ASM/HuCC routine.
   98    F8:2003             	sgx_crl		ds	1		; $F8:2003 SGX shadow (vdc_crl = $20F3).
   99    F8:2004             	sgx_crh		ds	1		; $F8:2004 SGX shadow (vdc_crh = $20F4).
  100    F8:2005             	core_1stbank	ds	1		; $F8:2005 1st bank of library code.
  101    F8:2006             	sgx_sr		ds	1		; $F8:2006 SGX shadow (vdc_sr  = $20F6).
  102    F8:2007             	sgx_reg		ds	1		; $F8:2007 SGX shadow (vdc_reg = $20F7).
  103                        	
  104               2008     	core_zp1st	=	*		; $F8:2008 1st free user address.
  105                        	
  106                        		.else	SUPPORT_SGX
  116                        		.endif	SUPPORT_SGX
  117                        	
  118                        	;
  119                        	; The kernel code in RAM follows the System Card's RAM variables.
  120                        	;
  121                        	
  122               0000     		.if	USING_PSGDRIVER
  124                        		.else
  125               22D0     	core_ram1st     =	$F8:22D0
  126                        		.endif	USING_PSGDRIVER
  127                        	
  128                        	;
  129                        	; Include the "CORE(not TM)" startup code to begin the HuCARD / Overlay.
  130                        	;
  131                        	
                             #[4]   "..\..\..\include\hucc\core-startup.asm"
  132                        			include	"core-startup.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; core-startup.asm
    5                        	;
    6                        	; The "CORE(not TM)" PC Engine library startup code that runs at boot/reset.
    7                        	;
    8                        	; Copyright John Brandwood 2021-2024.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; This is the initialization code in the 1st bank, and it is responsible for
   18                        	; setting up a consistant runtime environment for the developer's program,
   19                        	; so that the developer can concentrate on writing the program itself.
   20                        	;
   21                        	; The idea is that when a program is loaded, the first 40KB of it is mapped
   22                        	; as $4000..$DFFF, and initialization starts at $4000, with the developer's
   23                        	; program getting control after initialization, with a jump to "core_main".
   24                        	;
   25                        	; The initializtion sets up a small kernel of code that provides interrupt
   26                        	; handling that mimics a subset of the System Card's behavior, designed to
   27                        	; act in the same way on HuCARD and CD-ROM, with either the System Card in
   28                        	; MPR7, or with an overlay in MPR7.
   29                        	;
   30                        	; The kernel handles reading the joypad/mouse, and it offers handler hooks
   31                        	; for running the developer's interrupt code.  On CD-ROM systems, it also
   32                        	; handles the loading and running of subsequent overlay programs.
   33                        	;
   34                        	; On HuCARD, the kernel itself runs in MPR7; while on CD-ROM systems it is
   35                        	; run from RAM in MPR1, so that overlay programs are independant from each
   36                        	; other, and can be written in different programming languages.
   37                        	;
   38                        	;
   39                        	; 1) If we're running on a HuCARD, the initialization is simple!
   40                        	;
   41                        	;    The PC Engine's memory map is set to ...
   42                        	;
   43                        	;      MPR0 = bank $FF : PCE hardware
   44                        	;      MPR1 = bank $F8 : PCE RAM with Stack & ZP
   45                        	;      MPR2 = bank $00 : HuCARD ROM
   46                        	;      MPR3 = bank $01 : HuCARD ROM
   47                        	;      MPR4 = bank $02 : HuCARD ROM
   48                        	;      MPR5 = bank $03 : HuCARD ROM
   49                        	;      MPR6 = bank $04 : HuCARD ROM
   50                        	;      MPR7 = bank $00 : HuCARD ROM
   51                        	;
   52                        	;
   53                        	; 2) If we're running on a HuCARD that supports the Turbo Everdrive, then the
   54                        	;    first 2 banks are reserved for mapping the TED2 hardware and a RAM bank.
   55                        	;
   56                        	;    The PC Engine's memory map is set to ...
   57                        	;
   58                        	;      MPR0 = bank $FF : PCE hardware
   59                        	;      MPR1 = bank $F8 : PCE RAM with Stack & ZP
   60                        	;      MPR2 = bank $02 : HuCARD ROM
   61                        	;      MPR3 = bank $03 : HuCARD ROM
   62                        	;      MPR4 = bank $04 : HuCARD ROM
   63                        	;      MPR5 = bank $05 : HuCARD ROM
   64                        	;      MPR6 = bank $06 : HuCARD ROM
   65                        	;      MPR7 = bank $02 : HuCARD ROM
   66                        	;
   67                        	;
   68                        	; 3) If we're running on an old CD System, the overlay is loaded from the ISO
   69                        	;    into banks $80-$87 (64KB max).
   70                        	;
   71                        	;    The PC Engine's memory map is set to ...
   72                        	;
   73                        	;      MPR0 = bank $FF : PCE hardware
   74                        	;      MPR1 = bank $F8 : PCE RAM with Stack & ZP
   75                        	;      MPR2 = bank $80 : CD RAM
   76                        	;      MPR3 = bank $81 : CD RAM
   77                        	;      MPR4 = bank $82 : CD RAM
   78                        	;      MPR5 = bank $83 : CD RAM
   79                        	;      MPR6 = bank $84 : CD RAM
   80                        	;      MPR7 = bank $80 : CD RAM or System Card's bank $00
   81                        	;
   82                        	;
   83                        	; 4) If we're running on a SuperCD System, the overlay is loaded from the ISO
   84                        	;    into banks $68-$87 (256KB max).
   85                        	;
   86                        	;    The PC Engine's memory map is set to ...
   87                        	;
   88                        	;      MPR0 = bank $FF : PCE hardware
   89                        	;      MPR1 = bank $F8 : PCE RAM with Stack & ZP
   90                        	;      MPR2 = bank $68 : SCD RAM
   91                        	;      MPR3 = bank $69 : SCD RAM
   92                        	;      MPR4 = bank $6A : SCD RAM
   93                        	;      MPR5 = bank $6B : SCD RAM
   94                        	;      MPR6 = bank $6C : SCD RAM
   95                        	;      MPR7 = bank $68 : SCD RAM or System Card's bank $00
   96                        	;
   97                        	; ***************************************************************************
   98                        	; ***************************************************************************
   99                        	
  100                        	
  101                        	
  102               E000     			.code
  103               0000     			.bank	0
  104                        	
  105               0000     		.if	SUPPORT_TED2			; Do we want to use a TED2?
  177                        		.endif	SUPPORT_TED2
  178                        	
  179                        	
  180                        	
  181               0001     		.if	USING_MPR7
  182                        	
  183                        	; ***************************************************************************
  184                        	; ***************************************************************************
  185                        	;
  186                        	; RESET VECTORS (when running in MPR7, either as a HuCARD, or a CD overlay)
  187                        	;
  188                        	
  189                        			; Hardware reset and interrupt vectors.
  190                        	
  191               FFF4     			.org	$FFF4
  192                        	
  193    00:FFF4  10         	core_version:	db	CORE_VERSION		; CORE(not TM) Version.
  194    00:FFF5  80         			db	$80			; System Card compatibility.
  195                        	
  196    00:FFF6  5D E0      			dw	core_irq2		; IRQ2	(from CD/ADPCM)
  197    00:FFF8  64 E0      			dw	core_irq1		; IRQ1	(from VDC)
  198    00:FFFA  58 E1      			dw	core_timer		; TIMER (from CPU)
  199    00:FFFC  5E E1      			dw	core_rti		; NMI	(unused)
  200               0000     		.if	CDROM
  202                        		.else
  203    00:FFFE  21 E0      			dw	core_hw_reset		; RESET (HuCARD)
  204                        		.endif	CDROM
  205                        	
  206               0001     		.if	USING_NEWPROC			; If the ".proc" trampolines
  207               FFF3     	__trampolineptr =	$FFF3			; are in MPR7, tell PCEAS to
  208                        		.endif					; put them below the vectors.
  209                        	
  210                        		.else	USING_MPR7
  222                        		.endif	USING_MPR7
  223                        	
  224                        	
  225                        	
  226                        	; ***************************************************************************
  227                        	; ***************************************************************************
  228                        	;
  229                        	; !!! THE HuCARD/OVERLAY PROGRAM'S FIRST BANK STARTS HERE !!!
  230                        	;
  231                        	
  232                        			; Switch to MPR2 for the "CORE(not TM)" library init.
  233                        			;
  234                        			; This is also executed by a HuCARD once it has run
  235                        			; its initial hardware-reset code.
  236                        			;
  237                        			; When run, MPR2-MPR6 are always mapped to the 1st 5 banks of
  238                        			; the overlay program, and MPR7 contains the System Card.
  239                        	
  240               4000     			.org	$4000
  241                        	
  242               0000     	CORE_BANK	=	bank(*) - _bank_base	; It isn't always zero! ;-)
  243                        	
  244               0000     			.bank	CORE_BANK, "CORE_BANK"	; Give it a label.
  245                        	
  246               0001     		.if	USING_MPR7
  247               0007     	CORE_PAGE	=	7			; User code runs in MPR7.
  248                        		.else
  250                        		.endif	USING_MPR7
  251                        	
  252    00:4000  4C 06 40   	core_boot:	jmp	* + 6			; Allow someone to patch this.
  253                        	
  254                        			; Add an ident string so isoLINK can autodetect configuration.
  255                        			;
  256                        			; This allows isoLINK to decide whether to use the IPL-SCD boot
  257                        			; sector hack, and whether to include a SuperGRAFX signature in
  258                        			; the boot sector, without the user having to manually use some
  259                        			; command line parameters, although they are free to do that if
  260                        			; they wish.
  261                        	
  262               0001     		.if	SUPPORT_SGX
  263               0000     		.if	BUILDING_STAGE1
  265                        		.else
  266    00:4003  53 47 58   			db	"SGX"			; SGX SuperCD or SGX HuCARD.
  267                        		.endif	BUILDING_STAGE1
  268                        		.else
  282                        		.endif	SUPPORT_SGX
  283                        	
  284               0000     		.if	CDROM
  331                        		.else	CDROM
  332                        	
  333                        			; Set up HuCARD RAM in a compatible way to the System Card.
  334                        			;
  335                        			; Note that the entire RAM is cleared by "core_hw_reset".
  336                        	
  337    00:4006  A9 1F      			lda	#%11111			; Enable joypad soft-reset.
  338    00:4008  8D 27 22   			sta	joyena
  339                        	
  340                        		.endif	CDROM
  341                        	
  342                        			; Now that RAM is initialized ...
  343                        	
  344    00:400B  43 04      			tma2				; Remember overlay's 1st bank
  345    00:400D  85 05      			sta	<core_1stbank		; $00, $02, $68 or $80!
  346               0001     		.if	USING_MPR7
  347    00:400F  53 80      			tam7				; "CORE(not TM)" takes MPR7!
  348                        		.endif
  349                        	
  350    00:4011  A2 FF      			ldx	#$FF			; Initialize stack pointer.
  351    00:4013  9A         			txs
  352                        	
  353    00:4014  20 5F E1   			jsr	core_clr_hooks		; Reset default hooks.
  354                        	
  355                        	;		stz	TIMER_CR		; Stop HuC6280 timer.
  356                        	;		stz	IRQ_ACK			; Clr HuC6280 timer interrupt.
  357                        	;		stz	IRQ_MSK			; Clr HuC6280 interrupt mask.
  358                        	
  359    00:4017  AD 00 02   			lda	VDC_SR			; Purge any overdue VBL.
  360    00:401A  9C 41 22   			stz	irq_cnt			; Make it easy to check.
  361    00:401D  58         			cli				; Restore interrupts.
  362                        	
  363    00:401E  4C E5 FF   			jmp	core_main		; Start the game's code.
  364                        	
  365                        	
  366                        	
  367               0001     		.if	!CDROM
  368                        	
  369                        	; ***************************************************************************
  370                        	; ***************************************************************************
  371                        	;
  372                        	; HuCARD Kernel Code
  373                        	;
  374                        	; core_ram1st - Start of code to relocate to MPR1.
  375                        	; core_ramend - End of code to relocate to MPR1.
  376                        	;
  377                        	
  378                        			; In a HuCARD, BSS variables start as low as possible.
  379                        	
  380               2200     			.bss
  381               22D0     			.org	core_ram1st
  382               22D0     	core_ramend	=	*
  383               4021     			.code
  384                        	
  385                        			; Normal HuCARD hardware-reset code, executed in MPR7.
  386                        			;
  387                        			; This does the basic PCE startup that every HuCARD (including
  388                        			; a System Card) needs to do, and then it remaps memory to be
  389                        			; compatible with the "CORE(not TM)" CD overlay program start.
  390                        	
  391               E021     			.page	7			; This will run in MPR7.
  392                        	
  393    00:E021  78         	core_hw_reset:	sei				; Disable interrupts.
  394    00:E022  D4         			csh				; Set high-speed mode.
  395    00:E023  D8         			cld
  396                        	
  397    00:E024  A2 FF      			ldx	#$FF			; Initialize stack pointer.
  398    00:E026  9A         			txs
  399    00:E027  8A         			txa				; MPR0 = $FF : PCE hardware
  400    00:E028  53 01      			tam0				; MPR1 = $F8 : PCE RAM
  401    00:E02A  A9 F8      			lda	#$F8
  402    00:E02C  53 02      			tam1
  403                        	
  404    00:E02E  9C 01 0C   			stz	TIMER_CR		; HW reset already does these,
  405    00:E031  9C 03 14   			stz	IRQ_ACK			; but this may be a reset from
  406    00:E034  9C 02 14   			stz	IRQ_MSK			; software (i.e. joypad).
  407                        	
  408    00:E037  F3 53 E0 00			tai	const_0000, $2000, 8192 ; Clear RAM.
         00:E03B  20 00 20    
  409                        	
  410    00:E03E  43 80      			tma7				; Not always bank 0!
  411                        	
  412    00:E040  53 04      			tam2				; Set CD-ROM overlay memory map,
  413    00:E042  1A         			inc	a			; 1st 5 banks in MPR2-MPR6.
  414    00:E043  53 08      			tam3
  415    00:E045  1A         			inc	a
  416    00:E046  53 10      			tam4
  417    00:E048  1A         			inc	a
  418    00:E049  53 20      			tam5
  419    00:E04B  1A         			inc	a
  420    00:E04C  53 40      			tam6
  421                        	
  422    00:E04E  4C 00 40   			jmp	core_boot		; Continue execution in MPR2.
  423                        	
  424                        			; In a HuCARD, the kernel code is permanently in MPR7.
  425                        	
                             #[5]   "..\..\..\include\hucc\core-kernel.asm"
  426                        			include "core-kernel.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; core-kernel.asm
    5                        	;
    6                        	; The "CORE(not TM)" PC Engine library kernel code that runs after startup.
    7                        	;
    8                        	; Copyright John Brandwood 2021-2024.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; This code is permanently located in either MPR7 (HuCARD), or MPR1 (CD-ROM),
   18                        	; and it provides a consistant method of interrupt-handling on both systems
   19                        	; that is designed to be compatible with the System Card.
   20                        	;
   21                        	; The library uses the "irq1_hook" for its own VDC interrupt handler, and PCE
   22                        	; developers are expected to use "vsync_hook" and "hsync_hook" for their VDC
   23                        	; interrupt functions.  Plenty of memory is available in the 1st bank for the
   24                        	; developer to put those functions.
   25                        	;
   26                        	; The reason for using "irq1_hook", is so that the library can work properly
   27                        	; if either the current overlay program, or the System Card, are mapped into
   28                        	; MPR7 whenever an interrupt occurs.
   29                        	;
   30                        	; The VDC interupt handler itself is changed from the System Card's handler,
   31                        	; and it is designed to provide faster response to vsync_hook, and to enable
   32                        	; interrupts during the slow(ish) joypad and sound driver code, so that both
   33                        	; raster and timer interrupts are not delayed.
   34                        	;
   35                        	; Developers are free to enable interrupts during their own vsync_hook code,
   36                        	; if they wish to do so.
   37                        	;
   38                        	; On CD-ROM systems, this library kernel also provides a function to load and
   39                        	; run a new overlay program, without relying upon any of the code/data within
   40                        	; the current overlay program's memory (unlike HuC v3).
   41                        	;
   42                        	; ***************************************************************************
   43                        	; ***************************************************************************
   44                        	
   45                        	
   46                        	
   47                        	; ***************************************************************************
   48                        	; ***************************************************************************
   49                        	;
   50                        	; core_kernel - Start of kernel code.
   51                        	;
   52                        	
   53               E051     	core_kernel	=	*
   54                        	
   55                        	
   56                        	
   57                        	; ***************************************************************************
   58                        	; ***************************************************************************
   59                        	;
   60                        	; Useful constants, needed by joypad library code, and used by many others.
   61                        	;
   62                        	; The kernel starts with a non-zero byte so that core-startup.asm can check
   63                        	; whether it has already been loaded into RAM.
   64                        	;
   65                        	
   66    00:E051  FF FF      	const_FFFF:	dw	$FFFF			; Useful constant for TAI.
   67    00:E053  00 00      	const_0000:	dw	$0000			; Useful constant for TAI.
   68                        	
   69    00:E055  01 02 04 08	bit_mask:	db	$01,$02,$04,$08,$10,$20,$40,$80
         00:E059  10 20 40 80 
   70                        	
   71                        	
   72                        	
   73                        	; ***************************************************************************
   74                        	; ***************************************************************************
   75                        	;
   76                        	; core_irq2  - Minimal interrupt handler compatible with System Card.
   77                        	; core_irq1  - Minimal interrupt handler compatible with System Card.
   78                        	; core_timer - Minimal interrupt handler compatible with System Card.
   79                        	; core_rti   - Minimal interrupt handler compatible with System Card.
   80                        	;
   81                        	; Note that it takes 8 cycles to respond to an IRQ.
   82                        	;
   83                        	; These routines are copied to a location in RAM that does not vary when
   84                        	; a different overlay program is loaded.
   85                        	;
   86                        	; All overlay programs are set up to vector interrupts to these routines,
   87                        	; which is designed to avoid interrupt-related crashes when loading a new
   88                        	; overlay on top of an old overlay in memory.
   89                        	;
   90                        	; All of the game's actual interrupt handling itself is done in the "hook"
   91                        	; functions so that everything works the same if the System Card is banked
   92                        	; into MPR7 when an interrupt occurs.
   93                        	;
   94                        	; ***************************************************************************
   95                        	; ***************************************************************************
   96                        	;
   97                        	; Bit settings for irq_vec  ...
   98                        	;
   99                        	;   7 : 1 to skip BIOS hsync processsing
  100                        	;   6 : 1 to call [hsync_hook]
  101                        	;   5 : 1 to skip BIOS vsync processsing
  102                        	;   4 : 1 to call [vsync_hook]
  103                        	;
  104                        	;   3 : 1 to jump [nmi_hook]
  105                        	;   2 : 1 to jump [timer_hook]
  106                        	;   1 : 1 to jump [irq1_hook]
  107                        	;   0 : 1 to jump [irq2_hook]
  108                        	;
  109                        	; ***************************************************************************
  110                        	; ***************************************************************************
  111                        	
  112    00:E05D  8F F5 01   	core_irq2:	bbs0	<irq_vec, .hook		; 8 cycles if using hook.
  113                        	
  114               0000     		.if	CDROM
  138                        		.else
  139                        			; Does this HuCARD support the IFU's ADPCM hardware?
  140                        	
  141               0000     		.if	SUPPORT_ADPCM
  153                        		.endif	SUPPORT_ADPCM
  154                        	
  155    00:E060  40         			rti				; No IRQ2 hardware on HuCARD.
  156                        	
  157    00:E061  6C 00 22   	.hook:		jmp	[irq2_hook]		; 7 cycles.
  158                        		.endif	CDROM
  159                        	
  160                        	
  161                        	
  162                        	; ***************************************************************************
  163                        	; ***************************************************************************
  164                        	;
  165                        	; core_irq1 - Minimal interrupt handler compatible with System Card.
  166                        	;
  167                        	; irq1_handler - Basic "CORE(not TM)" IRQ1 handler to use as the "irq1_hook".
  168                        	;
  169                        	; Doing the IRQ1 handler processing in this hook means that things operate
  170                        	; the same whether the System Card or an Overlay is paged into MPR7.
  171                        	
  172               0000     		.ifndef	HUCC
  181                        		.else
  182                        			; Faster IRQ servicing for HuCC and code that would like to
  183                        			; avoid the 8 cycles used by the "bbs1" instruction that is
  184                        			; taken when the System Card is mapped into MPR7.
  185                        	
  186    00:E064             	core_irq1:	;;;				; 8 (cycles for the INT)
  187               0001     		.if	CDROM || !defined(NO_CORE_IRQ1_HOOK)
  188    00:E064  6C 02 22   			jmp	[irq1_hook]		; 7 cycles.
  189                        	
  190                        		.endif
  191                        		.endif
  192                        	
  193    00:E067  48         	irq1_handler:	pha				; 3 Save all registers.
  194    00:E068  DA         			phx				; 3
  195    00:E069  5A         			phy				; 3
  196                        	
  197               0000     		.ifndef	USING_RCR_MACROS		;   This slows things down
  206                        		.endif	USING_RCR_MACROS
  207                        	
  208    00:E06A  AD 00 02   			lda	VDC_SR			; 6 Acknowledge the VDC's IRQ.
  209    00:E06D  85 F6      			sta	<vdc_sr			; 4 Remember what caused it.
  210                        	
  211               0001     		.if	SUPPORT_SGX
  212    00:E06F  AE 10 02   			ldx	SGX_SR			; 6 Read SGX_SR after VDC_SR in
  213    00:E072  86 06      			stx	<sgx_sr			; 4 case this is not an SGX!
  214                        		.endif
  215                        	
  216                        			; Handle the VDC's RCR interrupt.
  217                        	
  218    00:E074  29 04      	!:		and	#$04			; 2 Is this an HSYNC interrupt?
  219    00:E076  F0 44      			beq	!+			; 2
  220                        	
  221               0001     		.ifdef	USING_RCR_MACROS
  222                        			VDC_RCR_MACRO
                             	
         00:E078  03 06      			st0	#VDC_RCR		; 5
                             	
         00:E07A  AE F0 23   			ldx	vdc_next_region		; 5 X and Y can be greater than
         00:E07D  BC F1 23   			ldy	vdc_regionA_nxt, x	; 5 HUCC_PCE_SPLITS if regionB!
         00:E080  18         			clc				; 2
         00:E081  D0 05      			bne	!set_next_rcr+		; 4 Stop RCR if next line is 0.
                             	
         00:E083  2D 53 E0   			and	const_0000		; 5 A=$00 with the same #cycles
         00:E086  80 05      			bra	!clr_next_rcr+		; 4 as if the branch were taken.
                             	
         00:E088  B9 A0 23   	!set_next_rcr:	lda	vdc_regionA_rcr, y	; 5 Set next RCR 1 line before
         00:E08B  69 3F      			adc	#64-1			; 2 the region begins, or 0 to
         00:E08D  8D 02 02   	!clr_next_rcr:	sta	VDC_DL			; 6 disable.
         00:E090  62         			cla				; 2
         00:E091  2A         			rol	a			; 2
         00:E092  8D 03 02   			sta	VDC_DH			; 6
                             	
         00:E095  03 08      			st0	#VDC_BYR		; 5 Do BYR first to mitigate the
         00:E097  BD D0 23   			lda	vdc_regionA_yl, x	; 5 glitch if the IRQ is delayed.
         00:E09A  8D 02 02   			sta	VDC_DL			; 6 = 105 cycles from RCR on SGX
         00:E09D  BD E0 23   			lda	vdc_regionA_yh, x	; 5
         00:E0A0  8D 03 02   			sta	VDC_DH			; 6
                             	
         00:E0A3  03 05      			st0	#VDC_CR			; 5
         00:E0A5  BD 90 23   			lda	vdc_regionA_crl, x	; 5
                             	;		asl	a
         00:E0A8  8D 02 02   			sta	VDC_DL			; 6
                             	
         00:E0AB  03 07      			st0	#VDC_BXR		; 2
         00:E0AD  BD B0 23   			lda	vdc_regionA_xl, x	; 5
         00:E0B0  8D 02 02   			sta	VDC_DL			; 6
         00:E0B3  BD C0 23   			lda	vdc_regionA_xh, x	; 5
         00:E0B6  8D 03 02   			sta	VDC_DH			; 6 = 156 cycles from RCR if DUO
                             	
                             	;		bcc	!+
                             	;		lda	vdc_regionA_yh, x	; 5
                             	;		sta.l	VCE_CTW			; 6
                             	
         00:E0B9  8C F0 23   			sty	vdc_next_region		; 5
                             	
  223                        		.else
  225                        		.endif
  226                        	
  227               0001     		.if	SUPPORT_SGX
  228                        	
  229                        			; Handle the SGX's RCR interrupt.
  230                        	
  231    00:E0BC  2F 06 50   	!:		bbr2	<sgx_sr, !+		; 6 Is this an HSYNC interrupt?
  232                        	
  233               0001     		.ifdef	USING_RCR_MACROS
  234                        			SGX_RCR_MACRO
                             	
         00:E0BF  A9 06      			lda	#VDC_RCR		; 2
         00:E0C1  8D 10 02   			sta	SGX_AR			; 6
                             	
         00:E0C4  AE 71 24   			ldx	sgx_next_region		; 5 X and Y can be greater than
         00:E0C7  BC 72 24   			ldy	sgx_regionA_nxt, x	; 5 HUCC_SGX_SPLITS if regionB!
         00:E0CA  18         			clc				; 2
         00:E0CB  D0 05      			bne	!set_next_rcr+		; 4 Stop RCR if next line is 0.
                             	
         00:E0CD  2D 53 E0   			and	const_0000		; 5 A=$00 with the same #cycles
         00:E0D0  80 05      			bra	!clr_next_rcr+		; 4 as if the branch were taken.
                             	
         00:E0D2  B9 21 24   	!set_next_rcr:	lda	sgx_regionA_rcr, y	; 5 Set next RCR 1 line before
         00:E0D5  69 3F      			adc	#64-1			; 2 the region begins, or 0 to
         00:E0D7  8D 12 02   	!clr_next_rcr:	sta	SGX_DL			; 6 disable.
         00:E0DA  62         			cla				; 2
         00:E0DB  2A         			rol	a			; 2
         00:E0DC  8D 13 02   			sta	SGX_DH			; 6
                             	
         00:E0DF  A9 08      			lda	#VDC_BYR		; 2 Do BYR first to mitigate the
         00:E0E1  8D 10 02   			sta	SGX_AR			; 6 glitch if the IRQ is delayed.
         00:E0E4  BD 51 24   			lda	sgx_regionA_yl, x	; 5
         00:E0E7  8D 12 02   			sta	SGX_DL			; 6
         00:E0EA  BD 61 24   			lda	sgx_regionA_yh, x	; 5
         00:E0ED  8D 13 02   			sta	SGX_DH			; 6
                             	
         00:E0F0  A9 05      			lda	#VDC_CR			; 2
         00:E0F2  8D 10 02   			sta	SGX_AR			; 6
         00:E0F5  BD 11 24   			lda	sgx_regionA_crl, x	; 5
         00:E0F8  8D 12 02   			sta	SGX_DL			; 6
                             	
         00:E0FB  A9 07      			lda	#VDC_BXR		; 2
         00:E0FD  8D 10 02   			sta	SGX_AR			; 6
         00:E100  BD 31 24   			lda	sgx_regionA_xl, x	; 5
         00:E103  8D 12 02   			sta	SGX_DL			; 6
         00:E106  BD 41 24   			lda	sgx_regionA_xh, x	; 5
         00:E109  8D 13 02   			sta	SGX_DH			; 6 = 293 cycles (282 if no YH)
                             	
         00:E10C  8C 71 24   			sty	sgx_next_region		; 5
                             	
  235                        		.else
  237                        		.endif
  238                        	
  239                        		.endif	SUPPORT_SGX
  240                        	
  241                        			; Handle the VDC's VBL interrupt.
  242                        	
  243    00:E10F  5F F6 32   	!:		bbr5	<vdc_sr, .exit_irq1	; 6 Is this a VBLANK interrupt?
  244                        	
  245               0001     		.ifdef	USING_RCR_MACROS		;   If we didn't do it earlier
  246               0000     		.if	CDROM				;   then we need to do it now.
  253                        		.endif	CDROM
  254                        		.endif	USING_RCR_MACROS
  255                        	
  256               0001     		.if	SUPPORT_SGX
  257    00:E112  A9 05      			lda	#VDC_CR			; Update the SGX's Control
  258    00:E114  8D 10 02   			sta	SGX_AR			; Register first, just in
  259    00:E117  8D 00 02   			sta	VDC_AR			; case this is not an SGX!
  260    00:E11A  A5 03      			lda	<sgx_crl		
  261    00:E11C  8D 12 02   			sta	SGX_DL
  262    00:E11F  A5 F3      			lda	<vdc_crl
  263    00:E121  8D 02 02   			sta	VDC_DL
  264                        	
  265                        	;		lda	<sgx_crh		; Do not mess with the SGX's
  266                        	;		sta	SGX_DH			; auto-increment!!!
  267                        	;		lda	<vdc_crh		; Do not mess with the VDC's
  268                        	;		sta	VDC_DH			; auto-increment!!!
  269                        		.else
  277                        		.endif	SUPPORT_SGX
  278                        	
  279    00:E124  EE 41 22   			inc	irq_cnt			; Mark that a VBLANK occurred.
  280                        	
  281    00:E127  4F F5 02   			bbr4	<irq_vec, .skip_hookv	; Is a driver registered?
  282                        	
  283    00:E12A  44 26      			bsr	.user_vsync		; Call game's VBLANK code.
  284                        	
  285    00:E12C  DF F5 15   	.skip_hookv:	bbs5	<irq_vec, .exit_vbl	; Should we skip "BIOS" stuff?
  286                        	
  287    00:E12F  58         			cli				; Allow HSYNC and TIMER IRQ.
  288                        	
  289    00:E130  20 DB FF   			call	read_joypads		; Update joypad state.
  290                        	
  291               0000     		.if	USING_PSGDRIVER
  305                        		.else
  306    00:E133  AD 07 22   			lda	sound_hook + 1		; Is a driver registered?
  307    00:E136  F0 0C      			beq	.exit_vbl
  308                        	
  309    00:E138  A9 80      			lda	#$80			; Acquire sound mutex to avoid
  310    00:E13A  0C E7 22   			tsb	sound_mutex		; conflict with a delayed VBL.
  311    00:E13D  30 05      			bmi	.exit_vbl
  312                        	
  313    00:E13F  44 14      			bsr	.user_sound		; Call the driver hook.
  314                        	
  315    00:E141  9C E7 22   			stz	sound_mutex		; Release sound mutex.
  316                        		.endif	USING_PSGDRIVER
  317                        	
  318    00:E144             	.exit_vbl:
  319                        	
  320               0001     		.ifdef	USING_RCR_MACROS		; If USING_RCR_MACROS then 
  321               0000     		.if	CDROM				; restore after the VBLANK.
  326                        		.endif	CDROM
  327                        		.endif	USING_RCR_MACROS
  328                        	
  329    00:E144             	.exit_irq1:
  330                        	
  331               0000     		.ifndef	USING_RCR_MACROS		; If !USING_RCR_MACROS then
  338                        		.endif	USING_RCR_MACROS
  339                        	
  340               0001     		.if	SUPPORT_SGX
  341    00:E144  A5 07      			lda	<sgx_reg		; Restore SGX_AR first, just
  342    00:E146  8D 10 02   			sta	SGX_AR			; in case this is not an SGX!
  343                        		.endif
  344                        	
  345    00:E149  A5 F7      			lda	<vdc_reg		; Restore VDC_AR in case we
  346    00:E14B  8D 00 02   			sta	VDC_AR			; changed it.
  347                        	
  348    00:E14E  7A         			ply				; Restore all registers.
  349    00:E14F  FA         			plx
  350    00:E150  68         			pla
  351                        	
  352    00:E151  40         			rti				; Return from interrupt.
  353                        	
  354    00:E152  6C 08 22   	.user_vsync:	jmp	[vsync_hook]		; 7
  355    00:E155  6C 06 22   	.user_sound:	jmp	[sound_hook]		; 7
  356                        	
  357               0000     		.ifndef	USING_RCR_MACROS
  362                        		.endif	USING_RCR_MACROS
  363                        	
  364                        	
  365                        	
  366                        	; ***************************************************************************
  367                        	; ***************************************************************************
  368                        	;
  369                        	; core_timer - Minimal interrupt handler compatible with System Card.
  370                        	;
  371                        	; tirq_handler - Basic "CORE(not TM)" TIRQ handler to use as the "timer_hook".
  372                        	;
  373                        	; Doing the TIRQ handler processing in this hook means that things operate
  374                        	; the same whether the System Card or an Overlay is paged into MPR7.
  375                        	
  376               0000     		.ifndef	HUCC
  385                        		.else
  386                        			; Faster IRQ servicing for HuCC and code that would like to
  387                        			; avoid the 8 cycles used by the "bbs2" instruction that is
  388                        			; taken when the System Card is mapped into MPR7.
  389                        	
  390    00:E158             	core_timer:	;;;				; 8 (cycles for the INT)
  391               0001     		.if	CDROM || !defined(NO_CORE_TIRQ_HOOK)
  392    00:E158  6C 04 22   			jmp	[timer_hook]		; 7 cycles.
  393                        		.endif
  394                        		.endif
  395                        	
  396    00:E15B             	tirq_handler:
  397               0000     		.ifdef	USING_TIRQ_MACRO
  399                        		.else
  400    00:E15B  9C 03 14   			stz	IRQ_ACK			; 5 Clear timer interrupt.
  401                        		.endif
  402                        	
  403    00:E15E  40         	core_rti:	rti
  404                        	
  405                        	
  406                        	
  407                        	; ***************************************************************************
  408                        	; ***************************************************************************
  409                        	;
  410                        	; core_clr_hooks - Reset default "CORE(not TM)" interrupt-handling hooks.
  411                        	;
  412                        	
  413    00:E15F  08         	core_clr_hooks:	php				; Preserve interrupt state.
  414    00:E160  78         			sei				; Disable interrupts.
  415                        	
  416               0000     		.if	USING_PSGDRIVER
  419                        		.else
  420    00:E161  9C 07 22   			stz.h	sound_hook		; Disable sound driver calls.
  421                        		.endif
  422                        	
  423    00:E164  A9 88      			lda	#<core_sw_reset		; Set up the soft-reset hook.
  424    00:E166  8D 84 22   			sta.l	reset_hook
  425    00:E169  A9 E1      			lda	#>core_sw_reset
  426    00:E16B  8D 85 22   			sta.h	reset_hook
  427                        	
  428    00:E16E  A9 67      			lda	#<irq1_handler		; Set up the IRQ1 hook.
  429    00:E170  8D 02 22   			sta.l	irq1_hook
  430    00:E173  A9 E0      			lda	#>irq1_handler
  431    00:E175  8D 03 22   			sta.h	irq1_hook
  432                        	
  433    00:E178  A9 5B      			lda	#<tirq_handler		; Set up the TIRQ hook.
  434    00:E17A  8D 04 22   			sta.l	timer_hook
  435    00:E17D  A9 E1      			lda	#>tirq_handler
  436    00:E17F  8D 05 22   			sta.h	timer_hook
  437                        	
  438    00:E182  A9 06      			lda	#%00000110		; Replace the System Card's
  439    00:E184  85 F5      			sta	<irq_vec		; IRQ1 and TIRQ processing.
  440                        	
  441    00:E186  28         			plp				; Restore interrupt state.
  442    00:E187  60         			rts
  443                        	
  444                        	
  445                        	
  446                        	; ***************************************************************************
  447                        	; ***************************************************************************
  448                        	;
  449                        	; Include the joypad library, with configuration from "core-config.inc".
  450                        	;
  451                        	
                             #[6]   "..\..\..\include\hucc\joypad.asm"
  452                        			include "joypad.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; joypad.asm
    5                        	;
    6                        	; Read 2-button & 6-button joypads & PCE mouse, with or without a MultiTap.
    7                        	;
    8                        	; Copyright John Brandwood 2019-2025.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; Unlike Lemmings, this code does not interfere with a Memory Base 128! ;-)
   18                        	;
   19                        	; ***************************************************************************
   20                        	; ***************************************************************************
   21                        	;
   22                        	; With SUPPORT_MOUSE ..... 2602 cycles to read 5 ports with 5 mice
   23                        	;
   24                        	; With HuC library code .. 2442 cycles to read 5 ports with 5 pads (2-button)
   25                        	; With HuC library code .. 2442 cycles to read 5 ports with 5 pads (6-button)
   26                        	;
   27                        	; With SUPPORT_MOUSE ....  2016 cycles to read 5 ports with 5 pads (2-button)
   28                        	; With SUPPORT_MOUSE ..... 1976 cycles to read 5 ports with 5 pads (6-button)
   29                        	;
   30                        	; With SUPPORT_MOUSE ....  1618 cycles to read 3 ports with 3 mice
   31                        	; With SUPPORT_MOUSE ..... 1462 cycles to read 3 ports with 2 mice
   32                        	; With SUPPORT_MOUSE ..... 1306 cycles to read 3 ports with 1 mouse
   33                        	;
   34                        	; With SUPPORT_6BUTTON ... 1235 cycles to read 5 ports with 5 pads (2-button)
   35                        	; With SUPPORT_6BUTTON ... 1215 cycles to read 5 ports with 5 pads (6-button)
   36                        	;
   37                        	; With SUPPORT_MOUSE ..... 1126 cycles to read 2 ports with 2 mice
   38                        	; With SUPPORT_MOUSE ...... 970 cycles to read 2 ports with 1 mouse
   39                        	;
   40                        	; Only SUPPORT_2BUTTON .... 971 cycles to read 5 ports with 5 pads (2-button)
   41                        	; Only SUPPORT_2BUTTON .... 861 cycles to read 5 ports with 5 pads (6-button)
   42                        	;
   43                        	; With SUPPORT_MOUSE ...... 634 cycles to read 1 port  with 1 mouse
   44                        	;
   45                        	; ***************************************************************************
   46                        	; ***************************************************************************
   47                        	
  142                        	
  143                        	;
  144                        	; Now choose which version of the code to include.
  145                        	;
  146                        	
  147               0000     		.if	SUPPORT_2BUTTON
  278                        		.endif	SUPPORT_2BUTTON
  279                        	
  280                        	
  281                        	
  282               0000     		.if	SUPPORT_MOUSE
  845                        		.else	SUPPORT_MOUSE
  846                        	
  847                        	
  848                        	
  849               0001     		.if	SUPPORT_6BUTTON			; Without mouse!
  850                        	
  851                        	; ***************************************************************************
  852                        	; ***************************************************************************
  853                        	;
  854                        	; read_joypads - full 6-button pad support, but mouse movement is ignored.
  855                        	;
  856                        	; This code distinguishes between a mouse and a 2-button or 6-button joypad,
  857                        	; so that unsupported devices do not have to be unplugged from the MultiTap.
  858                        	;
  859                        	; The code loops two times to get both sets of buttons on a 6-button joypad.
  860                        	;
  861                        	; N.B. Takes approx 1/3 frame to detect mice the first time it is run.
  862                        	;
  863                        	; bit values for joypad 2-button bytes: (MSB = #7; LSB = #0)
  864                        	; ----------------------------------------------------------
  865                        	; bit 0 (ie $01) = I
  866                        	; bit 1 (ie $02) = II
  867                        	; bit 2 (ie $04) = SELECT
  868                        	; bit 3 (ie $08) = RUN
  869                        	; bit 4 (ie $10) = UP
  870                        	; bit 5 (ie $20) = RIGHT
  871                        	; bit 6 (ie $40) = DOWN
  872                        	; bit 7 (ie $80) = LEFT
  873                        	;
  874                        	; bit values for joypad 6-button bytes: (MSB = #7; LSB = #0)
  875                        	; ----------------------------------------------------------
  876                        	; bit 0 (ie $01) = III
  877                        	; bit 1 (ie $02) = IV
  878                        	; bit 2 (ie $04) = V
  879                        	; bit 3 (ie $08) = VI
  880                        	; bit 4 (ie $10) = zero
  881                        	; bit 5 (ie $20) = zero
  882                        	; bit 6 (ie $40) = zero
  883                        	; bit 7 (ie $80) = zero, but set to one if 6-button pad detected.
  884                        	;
  885                        	
  886               E188     			.code
  887                        	
  888               0001     		.if	(* >= $4000)			; Make this a ".proc" if it
  889    09:DBF0             	read_joypads	.proc                           ; not running in RAM.
  890                        		.else
  892                        		.endif
  893                        	
  894    09:DBF0  A9 80      			lda	#$80			; Acquire port mutex to avoid
  895    09:DBF2  0C D0 22   			tsb	port_mutex		; conflict with a delayed VBL
  896    09:DBF5  30 75      			bmi	.exit			; or access to an MB128.
  897                        	
  898    09:DBF7  73 28 22 32			tii	joynow,joyold,MAX_PADS	; Save the previous values.
         09:DBFB  22 05 00    
  899    09:DBFE  73 D3 22 D8			tii	joy6now,joy6old,MAX_PADS
         09:DC02  22 05 00    
  900                        	
  901                        			; Reset the 6-btn bits, the user might change the joypad mode!
  902                        	
  903    09:DC05  F3 53 E0 D3			tai	const_0000, joy6now, MAX_PADS
         09:DC09  22 05 00    
  904                        	
  905                        			; Detect attached mice the first time this routine is called.
  906                        	
  907    09:DC0C  AD D2 22   			lda	mouse_flg		; Has mouse detection happened?
  908    09:DC0F  30 28      			bmi	.calc_pressed
  909                        	
  910    09:DC11  A9 05      			lda	#MAX_PADS		; Reset number of pads to read.
  911    09:DC13  8D D1 22   			sta	num_ports
  912                        	
  913    09:DC16  A9 1F      			lda	#%00011111		; Try reading everything as a
  914    09:DC18  8D D2 22   			sta	mouse_flg		; mouse.
  915                        	
  916    09:DC1B  A0 17      			ldy	#23			; Initialize repeat count.
  917    09:DC1D  A9 80      			lda	#$80			; Initialize mouse detection.
  918    09:DC1F  5A         	.detect_loop:	phy
  919    09:DC20  48         			pha
  920    09:DC21  44 53      			bsr	.read_devices		; Read all devices as if mice.
  921    09:DC23  68         			pla
  922    09:DC24  82         			clx
  923    09:DC25  BC E2 22   	.detect_port:	ldy	mouse_x, x		; A movement of zero means
  924    09:DC28  D0 03      			bne	.detect_next		; this port is a mouse.
  925    09:DC2A  1D 55 E0   			ora	bit_mask, x
  926    09:DC2D  E8         	.detect_next:	inx				; Get the next pad from the
  927    09:DC2E  E0 05      			cpx	#MAX_PADS		; multitap.
  928    09:DC30  D0 F3      			bne	.detect_port
  929    09:DC32  7A         			ply				; Repeat the detection test.
  930    09:DC33  88         			dey
  931    09:DC34  D0 E9      			bne	.detect_loop
  932                        	
  933                        	;	.if	DETECT_PHANTOMS
  934                        	;		cmp	#(1 << MAX_PADS) + 127	; If we find a mouse in every
  935                        	;		bne	.detect_done		; port, then assume mirrored!
  936                        	;		lda	#1			; Report a single mouse in a
  937                        	;		sta	num_ports		; single port.
  938                        	;		lda	#$81
  939                        	;	.endif
  940                        	
  941    09:DC36  8D D2 22   	.detect_done:	sta	mouse_flg		; Report mouse detection.
  942                        	
  943                        			; See what has just been pressed, and check for soft-reset.
  944                        	
  945    09:DC39  44 3B      	.calc_pressed:	bsr	.read_devices		; Read all devices normally.
  946                        	
  947    09:DC3B  A2 04      			ldx	#MAX_PADS - 1
  948                        	
  949    09:DC3D  BD D3 22   	.pressed_loop:	lda	joy6now, x		; Calc which buttons have just
  950    09:DC40  5D D8 22   			eor	joy6old, x		; been pressed (6-button).
  951    09:DC43  3D D3 22   			and	joy6now, x
  952               0000     		.if	HUC_JOY_EVENTS
  956                        		.else
  957               0000     		.if	ACCUMULATE_JOY
  959                        		.endif
  960    09:DC46  9D DD 22   			sta	joy6trg, x
  961                        		.endif
  962                        	
  963    09:DC49  BD 28 22   			lda	joynow, x		; Calc which buttons have just
  964    09:DC4C  A8         			tay                             ; been pressed (2-button).
  965    09:DC4D  5D 32 22   			eor	joyold, x
  966    09:DC50  3D 28 22   			and	joynow, x
  967               0000     		.if	HUC_JOY_EVENTS
  971                        		.else
  972               0000     		.if	ACCUMULATE_JOY
  974                        		.endif
  975    09:DC53  9D 2D 22   			sta	joytrg, x
  976                        		.endif
  977                        	
  978    09:DC56  C9 04      			cmp	#$04			; Detect the soft-reset combo,
  979    09:DC58  D0 0C      			bne	.not_reset		; hold RUN then press SELECT.
  980    09:DC5A  C0 0C      			cpy	#$0C
  981    09:DC5C  D0 08      			bne	.not_reset
  982    09:DC5E  BD 55 E0   			lda	bit_mask, x
  983    09:DC61  2C 27 22   			bit	joyena
  984    09:DC64  D0 09      			bne	.soft_reset
  985                        	
  986    09:DC66  CA         	.not_reset:	dex				; Check the next pad from the
  987    09:DC67  10 D4      			bpl	.pressed_loop		; multitap.
  988                        	
  989    09:DC69  9C D0 22   			stz	port_mutex		; Release port mutex.
  990                        	
  991               0001     		.if	(* >= $4000)			; This is a ".proc" if it is
  992                        	.exit:		leave                           ; not running in RAM.
         09:DC6C  4C EF FF   			jmp	leave_proc
  993                        		.else
  995                        		.endif
  996                        	
  997    09:DC6F  78         	.soft_reset:	sei				; Disable interrupts.
  998    09:DC70  9C D0 22   			stz	port_mutex		; Release port mutex.
  999    09:DC73  6C 84 22   			jmp	[reset_hook]		; Jump to the soft-reset hook.
 1000                        	
 1001                        			; Read all of the devices attached to the MultiTap.
 1002                        	
 1003    09:DC76  A2 02      	.read_devices:	ldx	#2			; Repeat this loop 2 times.
 1004                        	
 1005    09:DC78  A9 01      	.read_multitap:	lda	#$01			; CLR lo, SEL hi for d-pad.
 1006    09:DC7A  8D 00 10   			sta	IO_PORT
 1007    09:DC7D  A9 03      			lda	#$03			; CLR hi, SEL hi, reset tap.
 1008    09:DC7F  8D 00 10   			sta	IO_PORT
 1009    09:DC82  C2         			cly				; Start at port 1.
 1010                        	
 1011    09:DC83  A9 01      	.read_port:	lda	#$01			; CLR lo, SEL hi for d-pad.
 1012    09:DC85  8D 00 10   			sta	IO_PORT			; Wait 1.25us (9 cycles).
 1013                        	
 1014    09:DC88  B9 55 E0   			lda	bit_mask, y		; Is there a mouse attached?
 1015    09:DC8B  2D D2 22   			and	mouse_flg
 1016    09:DC8E  D0 33      			bne	.read_mouse
 1017                        	
 1018    09:DC90  AD 00 10   	.read_pad:	lda	IO_PORT			; Read direction-pad bits.
 1019    09:DC93  9C 00 10   			stz	IO_PORT			; CLR lo, SEL lo for buttons.
 1020    09:DC96  0A         			asl	a			; Wait 1.25us (9 cycles).
 1021    09:DC97  0A         			asl	a
 1022    09:DC98  0A         			asl	a
 1023    09:DC99  0A         			asl	a
 1024    09:DC9A  F0 1B      			beq	.read_6button		; 6-btn pad if UDLR all held.
 1025                        	
 1026    09:DC9C  99 28 22   	.read_2button:	sta	joynow, y		; Get buttons of 2-btn pad.
 1027    09:DC9F  AD 00 10   			lda	IO_PORT
 1028    09:DCA2  29 0F      			and	#$0F
 1029    09:DCA4  19 28 22   			ora	joynow, y
 1030    09:DCA7  49 FF      			eor	#$FF
 1031    09:DCA9  99 28 22   			sta	joynow, y
 1032                        	
 1033    09:DCAC  C8         	.next_port:	iny				; Get the next pad from the
 1034    09:DCAD  CC D1 22   			cpy	num_ports		; multitap.
 1035    09:DCB0  90 D1      			bcc	.read_port
 1036                        	
 1037    09:DCB2  CA         			dex				; Do the next complete pass.
 1038    09:DCB3  CA         			dex
 1039    09:DCB4  10 C2      			bpl	.read_multitap		; Have we finished 2 passes?
 1040    09:DCB6  60         			rts				; Now that everything is read.
 1041                        	
 1042    09:DCB7  AD 00 10   	.read_6button:	lda	IO_PORT			; Get buttons of 6-btn pad.
 1043    09:DCBA  29 0F      			and	#$0F
 1044    09:DCBC  49 8F      			eor	#$8F			; Set bit-7 to show that a
 1045    09:DCBE  99 D3 22   			sta	joy6now, y		; 6-button pad is present.
 1046    09:DCC1  80 E9      			bra	.next_port
 1047                        	
 1048    09:DCC3  7C F4 DC   	.read_mouse:	jmp	[.mouse_vectors, x]	; Which mouse info is next?
 1049                        	
 1050                        			; Mouse processing, normally four passes, here just two.
 1051                        	
 1052    09:DCC6  A9 1C      	.mouse_x_hi:	lda	#28			; 189 cycle delay after CLR lo
 1053    09:DCC8  3A         	.wait_loop:	dec	a			; on port to allow the mouse
 1054    09:DCC9  D0 FD      			bne	.wait_loop		; to buffer and reset counters.
 1055                        	
 1056    09:DCCB  AD 00 10   			lda	IO_PORT			; Read direction-pad bits.
 1057    09:DCCE  9C 00 10   			stz	IO_PORT			; CLR lo, SEL lo for buttons.
 1058    09:DCD1  0A         			asl	a			; Wait 1.25us (9 cycles).
 1059    09:DCD2  0A         			asl	a
 1060    09:DCD3  0A         			asl	a
 1061    09:DCD4  0A         			asl	a
 1062    09:DCD5  99 E2 22   			sta	mouse_x, y		; Save port's X-hi nibble.
 1063                        	
 1064    09:DCD8  AD 00 10   			lda	IO_PORT			; Get mouse buttons.
 1065    09:DCDB  29 0F      			and	#$0F
 1066    09:DCDD  49 0F      			eor	#$0F
 1067    09:DCDF  99 28 22   			sta	joynow, y
 1068    09:DCE2  80 C8      			bra	.next_port
 1069                        	
 1070    09:DCE4  AD 00 10   	.mouse_x_lo:	lda	IO_PORT			; Read direction-pad bits.
 1071    09:DCE7  9C 00 10   			stz	IO_PORT			; CLR lo, SEL lo for buttons.
 1072    09:DCEA  29 0F      			and	#$0F			; Wait 1.25us (9 cycles).
 1073    09:DCEC  19 E2 22   			ora	mouse_x, y		; Add port's X-hi nibble.
 1074                        	;		eor	#$FF			; Negate so LEFT is -ve.
 1075                        	;		inc	a
 1076    09:DCEF  99 E2 22   			sta	mouse_x, y
 1077    09:DCF2  80 B8      			bra	.next_port
 1078                        	
 1079    09:DCF4  E4 DC      	.mouse_vectors: dw	.mouse_x_lo		; Pass 2
 1080    09:DCF6  C6 DC      			dw	.mouse_x_hi		; Pass 1
 1081                        	
 1082               0001     		.if	(* >= $4000)			; This is a ".proc" if it is
 1083                        			.endp                           ; not running in RAM.
 1084               22D0     			.bss				; Put the variables in RAM.
 1085                        		.endif
 1086                        	
 1087    F8:22D0             	port_mutex:	ds	1			; NZ when controller port busy.
 1088    F8:22D1             	num_ports:	ds	1			; Set to 1 if no multitap.
 1089    F8:22D2             	mouse_flg:	ds	1			; Which ports are mice?
 1090               0000     		.if	HUC_JOY_EVENTS
 1093                        		.endif
 1094    F8:22D3             	joy6now:	ds	MAX_PADS
 1095    F8:22D8             	joy6old:	ds	MAX_PADS
 1096    F8:22DD             	joy6trg:	ds	MAX_PADS
 1097    F8:22E2             	mouse_x:	ds	MAX_PADS
 1098                        	
 1099               E188     			.code
 1100                        	
 1101                        		.endif	SUPPORT_6BUTTON			; Without mouse!
 1102                        	
 1103                        		.endif	SUPPORT_MOUSE
                             #[5]   "..\..\..\include\hucc\core-kernel.asm"
  453                        	
  454                        	
  455                        	
  456               0001     		.if	!CDROM
  457                        	
  458                        	; ***************************************************************************
  459                        	; ***************************************************************************
  460                        	;
  461                        	; core_sw_reset - Default HuCARD handler for a joypad "soft-reset".
  462                        	;
  463                        	
  464    00:E188  78         	core_sw_reset:	sei				; Disable interrupts.
  465                        	
  466    00:E189  6C FE FF   			jmp	[$FFFE]			; Jump to the HuCARD reset.
  467                        	
  468                        	
  469                        	
  470                        		.else	!CDROM
  616                        		.endif	!CDROM
  617                        	
  618                        	
  619                        	
  620                        	; ***************************************************************************
  621                        	; ***************************************************************************
  622                        	
  623               0001     		.if	(core_kernel >= $4000)		; If not running in RAM, then
  624               22E7     			.bss				; put these variables in RAM.
  625                        		.endif
  626                        	
  627    F8:22E7             	sound_mutex:	ds	1			; NZ when controller port busy.
  628                        	
  629               0001     		.if	SUPPORT_SGX
  630    F8:22E8             	sgx_detected:	ds	1			; NZ if SuperGrafx detected.
  631    F8:22E9             	hsync_hook_sgx:	ds	2			; SGX version of hsync_hook.
  632                        		.endif
  633                        	
  634               0000     		.if	SUPPORT_ACD
  636                        		.endif
  637                        	
  638               0001     		.if	(core_kernel >= $4000)
  639               E18C     			.code
  640                        		.endif
                             #[4]   "..\..\..\include\hucc\core-startup.asm"
  427                        	
  428                        	
  429                        	
  430                        		.else	!CDROM
  524                        		.endif	!CDROM
  525                        	
  526                        	
  527                        	
  528                        	; ***************************************************************************
  529                        	; ***************************************************************************
  530                        	;
  531                        	; With the availability of so many different configuration options, we've now
  532                        	; built somewhere between a few hundred bytes, and a couple of KB, of code in
  533                        	; the CORE_BANK of the HuCARD / overlay program.
  534                        	;
  535                        	; This is the end of the "CORE(not TM)" library code!
  536                        	;
  537                        	; Remember that the ".proc" trampolines are located at the end of this bank,
  538                        	; so the amount of free space left depends upon the number of ".proc" calls.
  539                        	;
  540                        	
  541                        			; Switch to CORE_PAGE to run the developer's game code.
  542               E18C     			.page	CORE_PAGE
  543                        	
  544                        	
  545                        	
  546                        	; ***************************************************************************
  547                        	; ***************************************************************************
  548                        	;
  549                        	; The DATA_BANK location needs to be set as early as possible so that library
  550                        	; code is able to put data in there before the total overall size of the code
  551                        	; is known.
  552                        	;
  553                        	; By default, DATA_BANK is the next bank after the CORE_BANK.
  554                        	;
  555                        	; RESERVE_BANKS allows developers to reserve some banks between the CORE_BANK
  556                        	; and the DATA_BANK that they can use however they wish.
  557                        	;
  558                        	; One use for RESERVE_BANKS is to create empty space that PCEAS can use when
  559                        	; it relocates procedures. This provides a way for a developer to group code
  560                        	; together at the start of memory, and leave the maximum number of banks for
  561                        	; loading dynamic data from CD-ROM.
  562                        	;
  563                        	; The KickC environment sets RESERVE_BANKS=1 (or higher) so that there is a
  564                        	; a bank for the permanent C code and static constants.
  565                        	;
  566                        	; RESERVE_BANKS is normally defined in each project's "core-config.inc".
  567                        	;
  568                        	
  569                        			.opt	d+			; DATA labels use fixed MPR.
  570                        	
  571               0001     			.rsset	CORE_BANK + 1
  572                        	
  573               0000     		.ifdef	NEED_HOME_BANK
  580                        		.endif
  581                        	
  582               0001     		.ifdef	NEED_SOUND_BANK			; Defined in hucc-sound.inc
  583               0000     		.if	NEED_SOUND_BANK			; if the driver wants a bank.
  585                        		.endif
  586                        		.endif
  587                        	
  588               0001     		.ifdef	RESERVE_BANKS			; For CORE projects.
  589               0001     	RESERVED_BANK	.rs	RESERVE_BANKS
  590                        		.endif
  591                        	
  592               0001     		.ifdef	HUCC
  593               0001     		.ifdef	HUC_RESERVE_BANKS		; For HuCC projects.
  594               0001     	HUC_USER_BANK	.rs	HUC_RESERVE_BANKS
  595                        		.endif
  596                        	
  597               0001     	CONST_BANK	.rs	2
  598               6000     			.rodata
  599               0001     			.bank	CONST_BANK, ".rodata"
  600                        		.endif	HUCC
  601                        	
  602               0003     	DATA_BANK	.rs	0
  603               6000     			.data
  604               0000     		.if	BUILDING_STAGE1
  606                        		.else
  607               0003     			.bank	DATA_BANK, ".data"
  608                        		.endif
  609               6000     			.org	$6000
  610                        	
  611               E18C     			.code
                             #[3]   "..\..\..\include\hucc\core.inc"
                             #[2]   "..\..\..\include\hucc\hucc.asm"
  120                        		.else
  126                        		.endif
  127                        	
  128                        			; Allocate this as early as possible to ensure bank-aligned
  129                        			; so that there is no wasted space for aligning the table.
  130                        	
  131               0000     		.if	FAST_MULTIPLY
  138                        		.endif
  139                        	
  140                        			;
  141                        	
  144                        	
  145                        			; The hardware stack is used for expressions.
  146                        	
  147               00FF     	__tos		=	$F8:2101, 255
  148                        	
  149               2008     			.zp
  150               2008     			.align	2
  151    F8:2008             	__stack:	ds	HUCC_STACK_SZ
  152                        	
  153    F8:2088             	__ptr:		ds	2
  154    F8:208A             	__fptr:		ds	2
  155    F8:208C             	__fbank:	ds	1
  156    F8:208D             	__sp:		ds	1
  157                        	
  158                        			; REGTEMP 6-byte stack for temporaries used by SDCC.
  159                        			; Keep the size in sync with NUM_TEMP_REGS in sdcc/src/mos6502/gen.h!
  160                        	
  161    F8:208E             	REGTEMP:	ds	6
  162                        	
  163                        			; HuCC's non-recursive consecutive varargs for printf().
  164                        	
  165               2008     	__vararg1	=	__stack + 0
  166               200A     	__vararg2	=	__stack + 2
  167               200C     	__vararg3	=	__stack + 4
  168               200E     	__vararg4	=	__stack + 6
  169                        	
  170                        			; Pointer used by poke() because __ptr could be overwritten.
  171                        	
  172               20EE     	__poke		=	__si
  173                        	
  174                        			; Used for indirect calls because __ptr could be overwritten.
  175                        	
  176               20EE     	__func		=	__si
  177                        	
  178                        			; Data pointer used by SDCC for indirect indexed memory access.
  179                        	
  180               2088     	DPTR		=	__ptr
  181                        	
  182                        			; Values returned from SDCC functions that don't fit into XA.
  183                        			; These are also used as workspace for SDCC library functions,
  184                        			; including HuCC's multiplication and division functions.
  185                        	
  186    F8:2094             	___SDCC_m6502_ret0:	ds	1
  187    F8:2095             	___SDCC_m6502_ret1:	ds	1
  188    F8:2096             	___SDCC_m6502_ret2:	ds	1
  189    F8:2097             	___SDCC_m6502_ret3:	ds	1
  190                        	
  191               0000     		.if	0
  196                        		.endif
  197                        	
  198                        			; Permanent pointers for fast table-of-squares multiplication.
  199                        	
  200               0000     		.if	FAST_MULTIPLY
  205                        		.endif
  206                        	
  207                        			; HuCC keeps a realtime clock, updated in hucc_vbl.
  208                        			;
  209                        			; Defining this here means that it will go before any HuCC
  210                        			; variables in "globals.h", and so it won't get cleared in
  211                        			; a CDROM game when loading different overlays.
  212                        	
  213               22EB     			.bss
  214    F8:22EB             	old_cnt:	ds	1			; irq_cnt of previous vsync().
  215    F8:22EC             	clock_hh:	ds	1			; System Clock, hours	(0-11)
  216    F8:22ED             	clock_mm:	ds	1			; System Clock, minutes (0-59)
  217    F8:22EE             	clock_ss:	ds	1			; System Clock, seconds (0-59)
  218    F8:22EF             	clock_tt:	ds	1			; System Clock, ticks	(0-59)
  219               E18C     			.code
  220                        	
  221                        			; Critical HuCC libraries that the compiler depends upon.
  222                        			;
  223                        			; These include various macros that must be defined before
  224                        			; they are encountered in any compiler-generated code.
  225                        	
                             #[3]   "..\..\..\include\hucc\hucc-codegen.asm"
  226                        			include "hucc-codegen.asm"	; HuCC i-code macros and funcs.
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-codegen.asm
    5                        	;
    6                        	; The HuCC compiler translates C code into these macros, it does not directly
    7                        	; generate HuC6280 instructions.
    8                        	;
    9                        	; Based on the original HuC macros created by David Michel and the other HuC
   10                        	; developers, later modified and improved by Ulrich Hecht.
   11                        	;
   12                        	; Modifications copyright John Brandwood 2024.
   13                        	;
   14                        	; Distributed under the Boost Software License, Version 1.0.
   15                        	; (See accompanying file LICENSE_1_0.txt or copy at
   16                        	;  http://www.boost.org/LICENSE_1_0.txt)
   17                        	;
   18                        	; ***************************************************************************
   19                        	; ***************************************************************************
   20                        	;
   21                        	; NAMING SCHEME FOR HuCC MACROS ...
   22                        	;
   23                        	;   __function.parameters
   24                        	;
   25                        	; {parameters} is a list of alphanumeric specifiers, starting with {size} and
   26                        	; followed by {where}, followed by {index} if an array, then optional {value}
   27                        	; and finally ending with optional {suffix}
   28                        	;
   29                        	; {size}
   30                        	;   w : 16-bit signed int (default "int" in HuCC)
   31                        	;   c : 16-bit unsigned int (a "cardinal" in Pascal terms)
   32                        	;   b :  8-bit signed char
   33                        	;   u :  8-bit unsigned char (default "char" in HuCC)
   34                        	;
   35                        	; {where} or {index}
   36                        	;   r : HuCC primary register, made up of the Y:A cpu registers
   37                        	;   t : top of expression stack
   38                        	;   p : indirect pointer, usually [__ptr]
   39                        	;   f : structure field (member) offset value
   40                        	;   i : immediate value, i.e. a decimal number
   41                        	;   m : memory, i.e. C global, static, and "-fno-recursive" variables
   42                        	;   s : stack, i.e. C function parameters and locals (not "-fno-recursive")
   43                        	;   a : array, i.e. C global, static, "-fno-recursive" arrays <= 256 bytes
   44                        	;   x : array index already in the X register
   45                        	;   y : array index already in the Y register
   46                        	;
   47                        	; {value} OPTIONAL
   48                        	;   i : immediate value, i.e. a decimal number
   49                        	;   z : zero value
   50                        	;
   51                        	; {suffix} OPTIONAL
   52                        	;   q : quick, used for optimized math on only 8-bit values, because all math
   53                        	;       is normally promoted to "int" size in C; and when optimized stores do
   54                        	;       not need to preserve the primary register contents
   55                        	;
   56                        	; ***************************************************************************
   57                        	; ***************************************************************************
   58                        	
   59                        	
   60                        	
 8399                        	
 8400                        	; ***************************************************************************
 8401                        	; ***************************************************************************
 8402                        	; subroutines for logical and arithmetic shifts by a constant amount
 8403                        	; ***************************************************************************
 8404                        	; ***************************************************************************
 8405                        	
 8406                        	; **************
 8407                        	; Y:A = Y:A << const
 8408                        	
 8409    00:E1BE  0A         	aslw15:		asl	a
 8410    00:E1BF  0A         	aslw14:		asl	a
 8411    00:E1C0  0A         	aslw13:		asl	a
 8412    00:E1C1  0A         	aslw12:		asl	a
 8413    00:E1C2  0A         	aslw11:		asl	a
 8414    00:E1C3  0A         	aslw10:		asl	a
 8415    00:E1C4  0A         	aslw9:		asl	a
 8416    00:E1C5  A8         	aslw8:		tay
 8417    00:E1C6  62         			cla
 8418    00:E1C7  60         			rts
 8419                        	
 8420               0001     		.if	1
 8421    00:E1C8  66 00      	aslw5:		ror	<__temp
 8422    00:E1CA  6A         			ror	a
 8423    00:E1CB  66 00      	aslw6:		ror	<__temp
 8424    00:E1CD  6A         			ror	a
 8425    00:E1CE  66 00      	aslw7:		ror	<__temp
 8426    00:E1D0  6A         			ror	a
 8427    00:E1D1  A4 00      			ldy	<__temp
 8428    00:E1D3  60         			rts
 8429                        		.else
 8436                        		.endif
 8437    00:E1D4  0A         	aslw4:		asl	a
 8438    00:E1D5  26 00      			rol	<__temp
 8439    00:E1D7  0A         	aslw3:		asl	a
 8440    00:E1D8  26 00      			rol	<__temp
 8441    00:E1DA  0A         	aslw2:		asl	a
 8442    00:E1DB  26 00      			rol	<__temp
 8443    00:E1DD  0A         	aslw1:		asl	a
 8444    00:E1DE  26 00      			rol	<__temp
 8445    00:E1E0  A4 00      	aslw0:		ldy	<__temp
 8446    00:E1E2  60         			rts
 8447                        	
 8448                        	; **************
 8449                        	; Y:A = Y:A >> const
 8450                        	
 8451    00:E1E3  C9 80      	asrw15:		cmp	#$80
 8452    00:E1E5  6A         			ror	a
 8453    00:E1E6  C9 80      	asrw14:		cmp	#$80
 8454    00:E1E8  6A         			ror	a
 8455    00:E1E9  C9 80      	asrw13:		cmp	#$80
 8456    00:E1EB  6A         			ror	a
 8457    00:E1EC  C9 80      	asrw12:		cmp	#$80
 8458    00:E1EE  6A         			ror	a
 8459    00:E1EF  C9 80      	asrw11:		cmp	#$80
 8460    00:E1F1  6A         			ror	a
 8461    00:E1F2  C9 80      	asrw10:		cmp	#$80
 8462    00:E1F4  6A         			ror	a
 8463    00:E1F5  C9 80      	asrw9:		cmp	#$80
 8464    00:E1F7  6A         			ror	a
 8465    00:E1F8  C9 80      	asrw8:		cmp	#$80
 8466    00:E1FA  C2         			cly
 8467    00:E1FB  90 01      			bcc	!+
 8468    00:E1FD  88         			dey
 8469    00:E1FE  60         	!:		rts
 8470                        	
 8471    00:E1FF  C0 80      	asrw7:		cpy	#$80
 8472    00:E201  66 00      			ror	<__temp
 8473    00:E203  6A         			ror	a
 8474    00:E204  C0 80      	asrw6:		cpy	#$80
 8475    00:E206  66 00      			ror	<__temp
 8476    00:E208  6A         			ror	a
 8477    00:E209  C0 80      	asrw5:		cpy	#$80
 8478    00:E20B  66 00      			ror	<__temp
 8479    00:E20D  6A         			ror	a
 8480    00:E20E  C0 80      	asrw4:		cpy	#$80
 8481    00:E210  66 00      			ror	<__temp
 8482    00:E212  6A         			ror	a
 8483    00:E213  C0 80      	asrw3:		cpy	#$80
 8484    00:E215  66 00      			ror	<__temp
 8485    00:E217  6A         			ror	a
 8486    00:E218  C0 80      	asrw2:		cpy	#$80
 8487    00:E21A  66 00      			ror	<__temp
 8488    00:E21C  6A         			ror	a
 8489    00:E21D  C0 80      	asrw1:		cpy	#$80
 8490    00:E21F  66 00      			ror	<__temp
 8491    00:E221  6A         			ror	a
 8492    00:E222  A4 00      	asrw0:		ldy	<__temp
 8493    00:E224  60         			rts
 8494                        	
 8495                        	; **************
 8496                        	; Y:A = Y:A >> const
 8497                        	
 8498    00:E225  4A         	lsrw15:		lsr	a
 8499    00:E226  4A         	lsrw14:		lsr	a
 8500    00:E227  4A         	lsrw13:		lsr	a
 8501    00:E228  4A         	lsrw12:		lsr	a
 8502    00:E229  4A         	lsrw11:		lsr	a
 8503    00:E22A  4A         	lsrw10:		lsr	a
 8504    00:E22B  4A         	lsrw9:		lsr	a
 8505    00:E22C  C2         	lsrw8:		cly
 8506    00:E22D  60         			rts
 8507                        	
 8508    00:E22E  46 00      	lsrw7:		lsr	<__temp
 8509    00:E230  6A         			ror	a
 8510    00:E231  46 00      	lsrw6:		lsr	<__temp
 8511    00:E233  6A         			ror	a
 8512    00:E234  46 00      	lsrw5:		lsr	<__temp
 8513    00:E236  6A         			ror	a
 8514    00:E237  46 00      	lsrw4:		lsr	<__temp
 8515    00:E239  6A         			ror	a
 8516    00:E23A  46 00      	lsrw3:		lsr	<__temp
 8517    00:E23C  6A         			ror	a
 8518    00:E23D  46 00      	lsrw2:		lsr	<__temp
 8519    00:E23F  6A         			ror	a
 8520    00:E240  46 00      	lsrw1:		lsr	<__temp
 8521    00:E242  6A         			ror	a
 8522    00:E243  A4 00      	lsrw0:		ldy	<__temp
 8523    00:E245  60         			rts
 8524                        	
 8525                        	
 8526                        	
 8527                        	; ***************************************************************************
 8528                        	; ***************************************************************************
 8529                        	; subroutines for logical and arithmetic shifts by a variable amount
 8530                        	; ***************************************************************************
 8531                        	; ***************************************************************************
 8532                        	
 8533                        	; **************
 8534                        	; Y:A = Y:A << X
 8535                        	
 8536    00:E246  84 00      	asl.wx:		sty	<__temp
 8537    00:E248  E0 10      			cpx	#16
 8538    00:E24A  B0 37      			bcs	!zero+
 8539    00:E24C  CA         			dex
 8540    00:E24D  30 06      			bmi	.done
 8541    00:E24F  0A         	.loop:		asl	a
 8542    00:E250  26 00      			rol	<__temp
 8543    00:E252  CA         			dex
 8544    00:E253  10 FA      			bpl	.loop
 8545    00:E255  A4 00      	.done:		ldy	<__temp
 8546    00:E257  60         			rts
 8547                        	
 8548                        	; **************
 8549                        	; Y:A = Y:A >> X
 8550                        	
 8551    00:E258  84 00      	asr.wx:		sty	<__temp
 8552    00:E25A  10 17      			bpl	!positive+
 8553    00:E25C  E0 10      	!negative:	cpx	#16
 8554    00:E25E  B0 0D      			bcs	.sign
 8555    00:E260  CA         			dex
 8556    00:E261  30 07      			bmi	.done
 8557    00:E263  38         	.loop:		sec
 8558    00:E264  66 00      			ror	<__temp
 8559    00:E266  6A         			ror	a
 8560    00:E267  CA         			dex
 8561    00:E268  10 F9      			bpl	.loop
 8562    00:E26A  A4 00      	.done:		ldy	<__temp
 8563    00:E26C  60         			rts
 8564                        	
 8565    00:E26D  A9 FF      	.sign:		lda	#$FF
 8566    00:E26F  A8         			tay
 8567    00:E270  60         			rts
 8568                        	
 8569                        	; **************
 8570                        	; Y:A = Y:A >> X
 8571                        	
 8572    00:E271  84 00      	lsr.wx:		sty	<__temp
 8573    00:E273  E0 10      	!positive:	cpx	#16
 8574    00:E275  B0 0C      			bcs	!zero+
 8575    00:E277  CA         			dex
 8576    00:E278  30 06      			bmi	.done
 8577    00:E27A  46 00      	.loop:		lsr	<__temp
 8578    00:E27C  6A         			ror	a
 8579    00:E27D  CA         			dex
 8580    00:E27E  10 FA      			bpl	.loop
 8581    00:E280  A4 00      	.done:		ldy	<__temp
 8582    00:E282  60         			rts
 8583                        	
 8584    00:E283  62         	!zero:		cla
 8585    00:E284  C2         			cly
 8586    00:E285  60         			rts
 8587                        	
 8588                        	
 8589                        	
 8590                        	; ***************************************************************************
 8591                        	; ***************************************************************************
 8592                        	; POTENTIAL OPTIMIZATIONS, NOT YET ADDED
 8593                        	; ***************************************************************************
 8594                        	; ***************************************************************************
                             #[2]   "..\..\..\include\hucc\hucc.asm"
                             #[3]   "..\..\..\include\hucc\hucc-baselib.asm"
  227                        			include	"hucc-baselib.asm"	; HuCC base library macros.
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-baselib.asm
    5                        	;
    6                        	; Basic library functions provided (mostly) as macros.
    7                        	;
    8                        	; Copyright John Brandwood 2024-2025.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	
   17                        	
   18                        	
   19                        	; ***************************************************************************
   20                        	; ***************************************************************************
   21                        	;
   22                        	; Make certain System Card variables accessible to HuCC.
   23                        	
   24    00:E286             	_irq_cnt	.alias	irq_cnt
   25    00:E286             	_joynow		.alias	joynow
   26    00:E286             	_joytrg		.alias	joytrg
   27    00:E286             	_joy6now	.alias	joy6now
   28    00:E286             	_joy6trg	.alias	joy6trg
   29    00:E286             	_bg_x1		.alias	bg_x1
   30    00:E286             	_bg_y1		.alias	bg_y1
   31    00:E286             	_bg_x2		.alias	bg_x2
   32    00:E286             	_bg_y2		.alias	bg_y2
   33                        	
   34                        	
   35                        	
   36                        	; ***************************************************************************
   37                        	; ***************************************************************************
   38                        	;
   39                        	; void __fastcall dump_screen( void );
   40                        	;
   41                        	; THIS IS AN ILLEGAL INSTRUCTION ONLY IMPLEMENTED BY THE TGEMU EMULATOR!
   42                        	
   43    00:E286  33         	_dump_screen:	db	0x33
   44                        	
   45                        	
   46                        	
   47                        	; ***************************************************************************
   48                        	; ***************************************************************************
   49                        	;
   50                        	; void __fastcall abort( void );
   51                        	;
   52                        	; THIS IS AN ILLEGAL INSTRUCTION ONLY IMPLEMENTED BY THE TGEMU EMULATOR!
   53                        	
   54    00:E287  E2         	_abort:		db	0xE2
   55                        	
   56                        	
   57                        	
   58                        	; ***************************************************************************
   59                        	; ***************************************************************************
   60                        	;
   61                        	; void __fastcall exit( int value<acc> );
   62                        	;
   63                        	; THIS IS AN ILLEGAL INSTRUCTION ONLY IMPLEMENTED BY THE TGEMU EMULATOR!
   64                        	
   65    00:E288  AA         	_exit.1:	tax				; Put the return code into X.
   66    00:E289  63         			db	0x63
   67                        	
   68    00:E28A  80 FE      	.hang:		bra	.hang			; Hang if used in normal code.
   69                        	
   70                        	
   71                        	
   72                        	; ***************************************************************************
   73                        	; ***************************************************************************
   74                        	;
   75                        	; unsigned char __fastcall __macro cd_execoverlay( unsigned char ovl_index<acc> );
   76                        	;
   77                        	; Execute program overlay from disc
   78                        	;
   79                        	; N.B. This does not return, even if there's an error.
   80                        	
   81                        			.macro	_cd_execoverlay.1
   82                        			tax
   83                        			jmp	exec_overlay
   84                        			.endm
   85                        	
   86                        	
   87                        	
   88                        	; ***************************************************************************
   89                        	; ***************************************************************************
   90                        	;
   91                        	; void __fastcall __nop set_far_base( unsigned char data_bank<_bp_bank>, unsigned char *data_addr<_bp> );
   92                        	; void __fastcall set_far_offset( unsigned int offset<_bp>, unsigned char data_bank<_bp_bank>, unsigned char *data_addr<acc> );
   93                        	
   94    00:E28C             	_set_far_offset.3:
   95    00:E28C  18         			clc
   96    00:E28D  65 EC      			adc.l	<_bp
   97    00:E28F  85 EC      			sta.l	<_bp
   98    00:E291  98         			tya
   99    00:E292  29 1F      			and	#$1F
  100    00:E294  65 ED      			adc.h	<_bp
  101    00:E296  A8         			tay
  102    00:E297  29 1F      			and	#$1F
  103    00:E299  09 60      			ora	#$60
  104    00:E29B  85 ED      			sta.h	<_bp
  105    00:E29D  98         			tya
  106    00:E29E  6A         			ror	a
  107    00:E29F  4A         			lsr	a
  108    00:E2A0  4A         			lsr	a
  109    00:E2A1  4A         			lsr	a
  110    00:E2A2  4A         			lsr	a
  111    00:E2A3  18         			clc
  112    00:E2A4  65 02      			adc	<_bp_bank
  113    00:E2A6  85 02      			sta	<_bp_bank
  114    00:E2A8  60         			rts
  115                        	
  116                        	
  117                        	; ***************************************************************************
  118                        	; ***************************************************************************
  119                        	;
  120                        	; void __fastcall __macro reset_mpr2( void );
  121                        	; void __fastcall __macro reset_mpr34( void );
  122                        	;
  123                        	; void * __fastcall __macro set_mpr2( void __far *addr<_bp_bank:_bp> );
  124                        	; void * __fastcall __macro set_mpr34( void __far *addr<_bp_bank:_bp> );
  125                        	;
  126                        	; void * __fastcall __macro far_set_mpr2( void );
  127                        	; void * __fastcall __macro far_set_mpr34( void );
  128                        	
  129                        	_reset_mpr2	.macro
  130                        		.if	SUPPORT_SGX
  131                        			lda	#$F9
  132                        		.else
  133                        			lda	#$87
  134                        		.endif
  135                        			tam2
  136                        			.endm
  137                        	
  138                        	_reset_mpr34	.macro
  139                        			lda	#CONST_BANK + _bank_base
  140                        			tam3
  141                        			inc	a
  142                        			tam4
  143                        			.endm
  144                        	
  145                        	_farset_mpr2.1	.macro
  146                        			lda	<_bp_bank
  147                        			tam2
  148                        			lda.l	<_bp
  149                        			ldy.h	<_bp
  150                        			.endm
  151                        	
  152                        	_farset_mpr34.1	.macro
  153                        			lda	<_bp_bank
  154                        			tam3
  155                        			inc	a
  156                        			tam4
  157                        			lda.l	<_bp
  158                        			ldy.h	<_bp
  159                        			.endm
  160                        	
  161                        	_far_set_mpr2	.macro
  162                        			lda	<_bp_bank
  163                        			tam2
  164                        			lda.l	<_bp
  165                        			ldy.h	<_bp
  166                        			.endm
  167                        	
  168                        	_far_set_mpr34	.macro
  169                        			lda	<_bp_bank
  170                        			tam3
  171                        			inc	a
  172                        			tam4
  173                        			lda.l	<_bp
  174                        			ldy.h	<_bp
  175                        			.endm
  176                        	
  177                        	
  178                        	
  179                        	; ***************************************************************************
  180                        	; ***************************************************************************
  181                        	;
  182                        	; unsigned char __fastcall __macro ac_exists( void );
  183                        	
  184                        	_ac_exists	.macro
  185                        			cla
  186                        			ldy	ACD_FLAG
  187                        			cpy	#ACD_ID
  188                        			bne	!+
  189                        			inc	a
  190                        	!:		cly
  191                        			.endm
  192                        	
  193                        	
  194                        	
  195                        	; ***************************************************************************
  196                        	; ***************************************************************************
  197                        	;
  198                        	; unsigned char __fastcall __macro _sgx_detect( void );
  199                        	
  200                        	_sgx_detect	.macro
  201                        			lda	sgx_detected
  202                        			cly
  203                        			.endm
  204                        	
  205                        	
  206                        	
  207                        	; ***************************************************************************
  208                        	; ***************************************************************************
  209                        	;
  210                        	; unsigned int __fastcall __macro peek( unsigned int addr<__ptr> );
  211                        	
  212                        	_peek.1		.macro
  213                        			lda	[__ptr]
  214                        			cly
  215                        			.endm
  216                        	
  217                        	
  218                        	
  219                        	; ***************************************************************************
  220                        	; ***************************************************************************
  221                        	;
  222                        	; unsigned int __fastcall __macro peekw( unsigned int addr<__ptr> );
  223                        	
  224                        	_peekw.1	.macro
  225                        			lda	[__ptr]
  226                        			pha
  227                        			ldy	#1
  228                        			lda	[__ptr], y
  229                        			tay
  230                        			pla
  231                        			.endm
  232                        	
  233                        	
  234                        	
  235                        	; ***************************************************************************
  236                        	; ***************************************************************************
  237                        	;
  238                        	; void __fastcall __macro poke( unsigned int addr<__poke>, unsigned char with<acc> );
  239                        	;
  240                        	; N.B. Because the <acc> value can be a complex C calculation, it isn't safe
  241                        	; to use __ptr as the destination, which can be overwritten in C macros.
  242                        	
  243                        	_poke.2		.macro
  244                        			sta	[__poke]
  245                        			.endm
  246                        	
  247                        	
  248                        	
  249                        	; ***************************************************************************
  250                        	; ***************************************************************************
  251                        	;
  252                        	; void __fastcall __macro pokew( unsigned int addr<__poke>, unsigned int with<acc> );
  253                        	;
  254                        	; N.B. Because the <acc> value can be a complex C calculation, it isn't safe
  255                        	; to use __ptr as the destination, which can be overwritten in C macros.
  256                        	
  257                        	_pokew.2	.macro
  258                        			sta	[__poke]
  259                        			tya
  260                        			ldy	#1
  261                        			sta	[__poke], y
  262                        			.endm
  263                        	
  264                        	
  265                        	
  266                        	; ***************************************************************************
  267                        	; ***************************************************************************
  268                        	;
  269                        	; unsigned char __fastcall __macro clock_hh( void );
  270                        	
  271                        	_clock_hh	.macro
  272                        			lda	clock_hh
  273                        			cly
  274                        			.endm
  275                        	
  276                        	
  277                        	
  278                        	; ***************************************************************************
  279                        	; ***************************************************************************
  280                        	;
  281                        	; unsigned char __fastcall __macro clock_mm( void );
  282                        	
  283                        	_clock_mm	.macro
  284                        			lda	clock_mm
  285                        			cly
  286                        			.endm
  287                        	
  288                        	
  289                        	
  290                        	; ***************************************************************************
  291                        	; ***************************************************************************
  292                        	;
  293                        	; unsigned char __fastcall __macro clock_ss( void );
  294                        	
  295                        	_clock_ss	.macro
  296                        			lda	clock_ss
  297                        			cly
  298                        			.endm
  299                        	
  300                        	
  301                        	
  302                        	; ***************************************************************************
  303                        	; ***************************************************************************
  304                        	;
  305                        	; unsigned char __fastcall __macro clock_tt( void );
  306                        	
  307                        	_clock_tt	.macro
  308                        			lda	clock_tt
  309                        			cly
  310                        			.endm
  311                        	
  312                        	
  313                        	
  314                        	; ***************************************************************************
  315                        	; ***************************************************************************
  316                        	;
  317                        	; void __fastcall __macro clock_reset( void );
  318                        	
  319                        	_clock_reset	.macro
  320                        			stz	clock_hh
  321                        			stz	clock_mm
  322                        			stz	clock_ss
  323                        			stz	clock_tt
  324                        			.endm
  325                        	
  326                        	
  327                        	
  328                        	; ***************************************************************************
  329                        	; ***************************************************************************
  330                        	;
  331                        	; unsigned int __fastcall __macro joy( unsigned char which<acc> );
  332                        	
  333                        	_joy.1		.macro
  334                        			tax
  335                        			lda	joynow, x
  336                        		.if	SUPPORT_6BUTTON
  337                        			ldy	joy6now, x
  338                        		.else
  339                        			cly
  340                        		.endif
  341                        			.endm
  342                        	
  343                        	
  344                        	
  345                        	; ***************************************************************************
  346                        	; ***************************************************************************
  347                        	;
  348                        	; unsigned int __fastcall __macro joytrg( unsigned char which<acc> );
  349                        	
  350                        	_joytrg.1	.macro
  351                        			tax
  352                        			lda	joytrg, x
  353                        		.if	SUPPORT_6BUTTON
  354                        			ldy	joy6trg, x
  355                        		.else
  356                        			cly
  357                        		.endif
  358                        			.endm
  359                        	
  360                        	
  361                        	
  362                        	; ***************************************************************************
  363                        	; ***************************************************************************
  364                        	;
  365                        	; unsigned int __fastcall __macro joybuf( unsigned char which<acc> );
  366                        	
  367                        	_joybuf.1	.macro
  368                        		.if	HUC_JOY_EVENTS
  369                        			tax
  370                        			lda	joybuf, x
  371                        		.if	SUPPORT_6BUTTON
  372                        			ldy	joy6buf, x
  373                        		.else
  374                        			cly
  375                        		.endif
  376                        		.else
  377                        			.fail	You must enable HUC_JOY_EVENTS in your hucc-config.inc!
  378                        		.endif
  379                        			.endm
  380                        	
  381                        	
  382                        	
  383                        	; ***************************************************************************
  384                        	; ***************************************************************************
  385                        	;
  386                        	; unsigned int __fastcall __macro get_joy_events( unsigned char which<acc> );
  387                        	;
  388                        	; N.B. This is just a version of joybuf() that clears the accumulated events.
  389                        	
  390                        			.macro	_get_joy_events.1
  391                        		.if	HUC_JOY_EVENTS
  392                        			tax
  393                        			lda	joybuf, x
  394                        			stz	joybuf, x
  395                        		.if	SUPPORT_6BUTTON
  396                        			ldy	joy6buf, x
  397                        			stz	joy6buf, x
  398                        		.else
  399                        			cly
  400                        		.endif
  401                        		.else
  402                        		.if	ACCUMULATE_JOY
  403                        			tax
  404                        			lda	joytrg, x
  405                        			stz	joytrg, x
  406                        		.if	SUPPORT_6BUTTON
  407                        			ldy	joy6trg, x
  408                        			stz	joy6trg, x
  409                        		.else
  410                        			cly
  411                        		.endif
  412                        		.else
  413                        			.fail	You must enable HUC_JOY_EVENTS or ACCUMULATE_JOY in your hucc-config.inc!
  414                        		.endif
  415                        		.endif
  416                        			.endm
  417                        	
  418                        	
  419                        	
  420                        	; ***************************************************************************
  421                        	; ***************************************************************************
  422                        	;
  423                        	; void __fastcall __macro clear_joy_events( unsigned char mask<acc> );
  424                        	
  425                        			.macro	_clear_joy_events.1
  426                        			php
  427                        			sei
  428                        			and	#(1 << MAX_PADS) - 1
  429                        			ldx	#$FF
  430                        	.loop:		inx
  431                        			lsr	a
  432                        			bcc	.next
  433                        		.if	HUC_JOY_EVENTS
  434                        			stz	joybuf, x
  435                        		.if	SUPPORT_6BUTTON
  436                        			stz	joy6buf, x
  437                        		.endif
  438                        		.else
  439                        		.if	ACCUMULATE_JOY
  440                        			stz	joytrg, x
  441                        		.if	SUPPORT_6BUTTON
  442                        			stz	joy6trg, x
  443                        		.endif
  444                        		.else
  445                        			.fail	You must enable HUC_JOY_EVENTS or ACCUMULATE_JOY in your hucc-config.inc!
  446                        		.endif
  447                        		.endif
  448                        	.next:		bne	.loop
  449                        			plp
  450                        			.endm
  451                        	
  452                        	
  453                        	
  454                        	; ***************************************************************************
  455                        	; ***************************************************************************
  456                        	;
  457                        	; void __fastcall srand( unsigned char seed<acc> );
  458                        	
  459               0001     		.ifndef	HUCC_NO_DEFAULT_RANDOM
  460                        	_srand.1	.macro
  461                        			tay
  462                        			jsr	init_random
  463                        			.endm
  464                        		.endif
  465                        	
  466                        	
  467                        	
  468                        	; ***************************************************************************
  469                        	; ***************************************************************************
  470                        	;
  471                        	; unsigned int __fastcall rand( void );
  472                        	; unsigned char __fastcall rand8( void );
  473                        	
  474               0001     		.ifndef	HUCC_NO_DEFAULT_RANDOM
  475    00:E2A9  20 C3 E5   	_rand:		jsr	get_random		; Random in A, preserve Y.
  476    00:E2AC  A8         			tay
  477    00:E2AD  4C C3 E5   			jmp	get_random		; Random in A, preserve Y.
  478                        		.endif
  479                        	
  480                        	
  481                        	
  482                        	; ***************************************************************************
  483                        	; ***************************************************************************
  484                        	;
  485                        	; unsigned char __fastcall random8( unsigned char limit<acc> );
  486                        	;
  487                        	; IN :	A = range (0..255)
  488                        	; OUT : A = random number interval 0 <= x < A
  489                        	
  490               0001     		.ifndef	HUCC_NO_DEFAULT_RANDOM
  491                        	
  492    00:E2B0  A8         	_random8.1:	tay				; Preserve the limit.
  493    00:E2B1  20 C3 E5   			jsr	get_random		; Random in A, preserve Y.
  494                        	
  495    00:E2B4  20 F0 E4   			jsr	__muluchar
  496    00:E2B7  98         			tya				; Do a 8.0 x 0.8 fixed point
  497    00:E2B8  C2         			cly				; fractional multiply.
  498    00:E2B9  60         			rts
  499                        		.endif
  500                        	
  501                        	
  502                        	
  503                        	; ***************************************************************************
  504                        	; ***************************************************************************
  505                        	;
  506                        	; unsigned char __fastcall random( unsigned char limit<acc> );
  507                        	;
  508                        	; IN :	A = range (0..128), 129..255 is treated as 128
  509                        	; OUT : A = random number interval 0 <= x < A
  510                        	
  511               0001     		.ifndef	HUCC_NO_DEFAULT_RANDOM
  512                        	
  513    00:E2BA  A8         	_random.1:	tay				; Preserve the limit.
  514    00:E2BB  20 C3 E5   			jsr	get_random		; Random in A, preserve Y.
  515                        	
  516    00:E2BE  C0 80      			cpy	#128			; Check the limit.
  517    00:E2C0  90 04      			bcc	!+
  518                        	
  519    00:E2C2  29 7F      			and	#$7F			; Just mask the random if
  520    00:E2C4  C2         			cly				; the limit is >= 128.
  521    00:E2C5  60         			rts
  522                        	
  523    00:E2C6  20 F0 E4   	!:		jsr	__muluchar
  524    00:E2C9  98         			tya				; If the limit is < 128 then
  525    00:E2CA  C2         			cly				; do a 8.0 x 0.8 fixed point
  526    00:E2CB  60         			rts				; fractional multiply.
  527                        		.endif
  528                        	
  529                        	
  530                        	
  531                        	; ***************************************************************************
  532                        	; ***************************************************************************
  533                        	;
  534                        	; unsigned char __fastcall __builtin_ffs( unsigned int value<__temp> );
  535                        	
  536                        			.proc	___builtin_ffs.1
  556                        			.endp
  557                        	
  558                        	
  559                        	
  560                        	; ***************************************************************************
  561                        	; ***************************************************************************
  562                        	;
  563                        	; N.B. Declared in hucc-string.h, but defined here because they're macros!
  564                        	;
  565                        	; int __fastcall __macro memcmp( unsigned char *destination<_di>, unsigned char *source<_bp>, unsigned int count<acc> );
  566                        	
  567                        	_memcmp.3	.macro
  568                        			stz	<_bp_bank		; Map the source string.
  569                        			call	_farmemcmp.3
  570                        			.endm
  571                        	
  572                        	
  573                        	
  574                        	; ***************************************************************************
  575                        	; ***************************************************************************
  576                        	;
  577                        	; N.B. Declared in hucc-gfx.h, but defined here because they're macros!
  578                        	;
  579                        	; void __fastcall __macro get_color( unsigned int index<VCE_CTA> );
  580                        	
  581                        	_get_color.1	.macro
  582                        			lda.l	VCE_CTR
  583                        			ldy.h	VCE_CTR
  584                        			.endm
  585                        	
  586                        	
  587                        	
  588                        	; ***************************************************************************
  589                        	; ***************************************************************************
  590                        	;
  591                        	; N.B. Declared in hucc-gfx.h, but defined here because they're macros!
  592                        	;
  593                        	; void __fastcall __macro fade_to_black( unsigned int __far *from<_bp_bank:_bp>, unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_sub<_ah> );
  594                        	; void __fastcall __macro fade_to_white( unsigned int __far *from<_bp_bank:_bp>, unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_add<_ah> );
  595                        	; void __fastcall __macro cross_fade_to( unsigned int __far *from<_bp_bank:_bp>, unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char which_component<_ah );
  596                        	;
  597                        	; void __fastcall __macro far_fade_to_black( unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_sub<_ah> );
  598                        	; void __fastcall __macro far_fade_to_white( unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_add<_ah> );
  599                        	; void __fastcall __macro far_cross_fade_to( unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char which_component<_ah );
  600                        	
  601                        			.macro	_fade_to_black.4
  602                        			ldy	<_bp_bank
  603                        			call	fade_to_black
  604                        			.endm
  605                        	
  606                        			.macro	_fade_to_white.4
  607                        			ldy	<_bp_bank
  608                        			call	fade_to_white
  609                        			.endm
  610                        	
  611                        			.macro	_cross_fade_to.4
  612                        			ldy	<_bp_bank
  613                        			call	cross_fade_to
  614                        			.endm
  615                        	
  616                        			.macro	_far_fade_to_black.3
  617                        			ldy	<_bp_bank
  618                        			call	fade_to_black
  619                        			.endm
  620                        	
  621                        			.macro	_far_fade_to_white.3
  622                        			ldy	<_bp_bank
  623                        			call	fade_to_white
  624                        			.endm
  625                        	
  626                        			.macro	_far_cross_fade_to.3
  627                        			ldy	<_bp_bank
  628                        			call	cross_fade_to
  629                        			.endm
  630                        	
  631                        	
  632                        	
  633                        	; ***************************************************************************
  634                        	; ***************************************************************************
  635                        	;
  636                        	; N.B. Declared in hucc-gfx.h, but defined here because they're macros!
  637                        	;
  638                        	; void __fastcall __macro set_xres( unsigned int x_pixels<_ax> );
  639                        	; void __fastcall __macro sgx_set_xres( unsigned int x_pixels<_ax> );
  640                        	;
  641                        	; void __fastcall set_xres( unsigned int x_pixels<_ax>, unsigned char blur_flag<_bl> );
  642                        	; void __fastcall sgx_set_xres( unsigned int x_pixels<_ax>, unsigned char blur_flag<_bl> );
  643                        	
  644                        	_set_xres.1	.macro
  645                        			lda	#XRES_SOFT
  646                        			sta	<_bl
  647                        			call	_set_xres.2
  648                        			.endm
  649                        	
  650               0001     		.if	SUPPORT_SGX
  651                        			.macro	_sgx_set_xres.1
  652                        			lda	#XRES_SOFT
  653                        			sta	<_bl
  654                        			call	_sgx_set_xres.2
  655                        			.endm
  656                        		.endif
  657                        	
  658                        	
  659                        	
  660                        	; ***************************************************************************
  661                        	; ***************************************************************************
  662                        	;
  663                        	; N.B. Declared in hucc-gfx.h, but defined here because they're macros!
  664                        	;
  665                        	; unsigned int __fastcall __macro vram_addr( unsigned char bat_x<_al>, unsigned char bat_y<_ah> );
  666                        	; unsigned int __fastcall __macro sgx_vram_addr( unsigned char bat_x<_al>, unsigned char bat_y<_ah> );
  667                        	
  668                        			.macro	_vram_addr.2
  669                        			cla
  670                        			bit	vdc_bat_width
  671                        			bmi	!w128+
  672                        			bvs	!w64+
  673                        	!w32:		lsr	<_ah
  674                        			ror	a
  675                        	!w64:		lsr	<_ah
  676                        			ror	a
  677                        	!w128:		lsr	<_ah
  678                        			ror	a
  679                        			ora	<_al
  680                        			ldy	<_ah
  681                        			.endm
  682                        	
  683               0001     		.if	SUPPORT_SGX
  684                        			.macro	_sgx_vram_addr.2
  685                        			cla
  686                        			bit	sgx_bat_width
  687                        			bmi	!w128+
  688                        			bvs	!w64+
  689                        	!w32:		lsr	<_ah
  690                        			ror	a
  691                        	!w64:		lsr	<_ah
  692                        			ror	a
  693                        	!w128:		lsr	<_ah
  694                        			ror	a
  695                        			ora	<_al
  696                        			ldy	<_ah
  697                        			.endm
  698                        		.endif
  699                        	
  700                        	
  701                        	
  702                        	; ***************************************************************************
  703                        	; ***************************************************************************
  704                        	;
  705                        	; N.B. Declared in hucc-gfx.h, but defined here because they're macros!
  706                        	;
  707                        	; unsigned int __fastcall __macro get_vram( unsigned int address<_di> );
  708                        	; void __fastcall __macro put_vram( unsigned int address<_di>, unsigned int data<acc> );
  709                        	;
  710                        	; unsigned int __fastcall __macro sgx_get_vram( unsigned int address<_di> );
  711                        	; void __fastcall __macro sgx_put_vram( unsigned int address<_di>, unsigned int data<acc> );
  712                        	
  713                        			.macro	_get_vram.1
  714                        			jsr	vdc_di_to_marr
  715                        			lda	VDC_DL
  716                        			ldy	VDC_DH
  717                        			.endm
  718                        	
  719                        			.macro	_put_vram.2
  720                        			pha
  721                        			jsr	vdc_di_to_mawr
  722                        			pla
  723                        			sta	VDC_DL
  724                        			sty	VDC_DH
  725                        			.endm
  726                        	
  727               0001     		.if	SUPPORT_SGX
  728                        			.macro	_sgx_get_vram.1
  729                        			jsr	sgx_di_to_marr
  730                        			lda	SGX_DL
  731                        			ldy	SGX_DH
  732                        			.endm
  733                        	
  734                        			.macro	_sgx_put_vram.2
  735                        			pha
  736                        			jsr	sgx_di_to_mawr
  737                        			pla
  738                        			sta	SGX_DL
  739                        			sty	SGX_DH
  740                        			.endm
  741                        		.endif
  742                        	
  743                        	
  744                        	
  745                        	; ***************************************************************************
  746                        	; ***************************************************************************
  747                        	;
  748                        	; N.B. Declared in hucc-gfx.h, but defined here because they're macros!
  749                        	;
  750                        	; void __fastcall __macro set_bgpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp> );
  751                        	; void __fastcall __macro set_bgpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_palettes<_ah> );
  752                        	; void __fastcall __macro set_sprpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp> );
  753                        	; void __fastcall __macro set_sprpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_palettes<_ah> );
  754                        	
  755                        	_set_bgpal.2	.macro
  756                        			lda	#1
  757                        			sta	<_ah
  758                        			call	_load_palette.3
  759                        			.endm
  760                        	
  761                        	_set_bgpal.3	.macro
  762                        			call	_load_palette.3
  763                        			.endm
  764                        	
  765                        	_set_sprpal.2	.macro
  766                        			lda	#1
  767                        			sta	<_ah
  768                        			smb4	<_al
  769                        			call	_load_palette.3
  770                        			.endm
  771                        	
  772                        	_set_sprpal.3	.macro
  773                        			smb4	<_al
  774                        			call	_load_palette.3
  775                        			.endm
  776                        	
  777                        	
  778                        	
  779                        	; ***************************************************************************
  780                        	; ***************************************************************************
  781                        	;
  782                        	; N.B. Declared in hucc-gfx.h, but defined here because they're macros!
  783                        	;
  784                        	; void __fastcall __macro load_vram( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_words<_ax> );
  785                        	; void __fastcall __macro sgx_load_vram( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_words<_ax> );
  786                        	;
  787                        	; void __fastcall __macro far_load_vram( unsigned int vram<_di>, unsigned int num_words<_ax> );
  788                        	; void __fastcall __macro sgx_far_load_vram( unsigned int vram<_di>, unsigned int num_words<_ax> );
  789                        	;
  790                        	
  791               0001     		.if	SUPPORT_SGX
  792                        			.macro	_sgx_load_vram.3
  793                        			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  794                        			call	load_vram_x
  795                        			.endm
  796                        	
  797                        			.macro	_sgx_far_load_vram.2
  798                        			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  799                        			call	load_vram_x
  800                        			.endm
  801                        		.endif
  802                        	
  803                        			.macro	_load_vram.3
  804                        			clx				; Offset to PCE VDC.
  805                        			call	load_vram_x
  806                        			.endm
  807                        	
  808                        			.macro	_far_load_vram.2
  809                        			clx				; Offset to PCE VDC.
  810                        			call	load_vram_x
  811                        			.endm
  812                        	
  813                        	
  814                        	
  815                        	; ***************************************************************************
  816                        	; ***************************************************************************
  817                        	;
  818                        	; N.B. Declared in hucc-gfx.h, but defined here because they're macros!
  819                        	;
  820                        	; void __fastcall __macro load_sprites( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_groups<acc> );
  821                        	; void __fastcall __macro sgx_load_sprites( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_groups<acc> );
  822                        	; void __fastcall __macro far_load_sprites( unsigned int vram<_di>, unsigned int num_groups<acc> );
  823                        	; void __fastcall __macro sgx_far_load_sprites( unsigned int vram<_di>, unsigned int num_groups<acc> );
  824                        	
  825               0001     		.if	SUPPORT_SGX
  826                        			.macro	_sgx_load_sprites.3
  827                        			stz.l	<_ax
  828                        			asl	a
  829                        			sta.h	<_ax
  830                        			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  831                        			call	load_vram_x
  832                        			.endm
  833                        	
  834                        			.macro	_sgx_far_load_sprites.2
  835                        			stz.l	<_ax
  836                        			asl	a
  837                        			sta.h	<_ax
  838                        			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  839                        			call	load_vram_x
  840                        			.endm
  841                        		.endif
  842                        	
  843                        			.macro	_load_sprites.3
  844                        			stz.l	<_ax
  845                        			asl	a
  846                        			sta.h	<_ax
  847                        			clx				; Offset to PCE VDC.
  848                        			call	load_vram_x
  849                        			.endm
  850                        	
  851                        			.macro	_far_load_sprites.2
  852                        			stz.l	<_ax
  853                        			asl	a
  854                        			sta.h	<_ax
  855                        			clx				; Offset to PCE VDC.
  856                        			call	load_vram_x
  857                        			.endm
  858                        	
  859                        	
  860                        	
  861                        	; ***************************************************************************
  862                        	; ***************************************************************************
  863                        	;
  864                        	; N.B. Declared in hucc-gfx.h, but defined here because they're macros!
  865                        	;
  866                        	; void __fastcall load_default_font( void );
  867                        	; void __fastcall sgx_load_default_font( void );
  868                        	;
  869                        	
  870               0001     		.if	SUPPORT_SGX
  871                        			.macro	_sgx_load_default_font
  872                        			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  873                        			call	huc_monofont_x
  874                        			.endm
  875                        		.endif
  876                        	
  877                        			.macro	_load_default_font
  878                        			clx				; Offset to PCE VDC.
  879                        			call	huc_monofont_x
  880                        			.endm
  881                        	
  882                        	
  883                        	
  884                        	; ***************************************************************************
  885                        	; ***************************************************************************
  886                        	
  887               0000     		.if	0
  905                        		.endif
                             #[2]   "..\..\..\include\hucc\hucc.asm"
  228                        	
  229               0000     		.if	CDROM
  231                        		.endif
  232                        	
  233                        			; Definitions for compatibility with old HuC/MagicKit projects.
  234                        	
  235               0001     		.ifndef	HUCC_NO_DEPRECATED
                             #[3]   "..\..\..\include\hucc\hucc-deprecated.inc"
  236                        			include	"hucc-deprecated.inc"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-deprecated.inc
    5                        	;
    6                        	; Macros and definitions for compatibility with old HuC/MagicKit projects.
    7                        	;
    8                        	; Based on the original HuC and MagicKit definitions by David Michel and the
    9                        	; other original HuC developers.
   10                        	;
   11                        	; ***************************************************************************
   12                        	; ***************************************************************************
   13                        	
   14                        			; For compatibility with HuC projects that use the old name.
   15                        	
   16               0001     	HUC_USER_RESERVED = HUC_USER_BANK
   17                        	
   18                        			; For compatibility with code that expects the HuC naming that
   19                        			; is used in the newer HuC, rather than the original HuC v3.21.
   20                        			;
   21                        			; Code generated by HuCC uses the original single-underscore.
   22                        	
   23               0001     		.if	1				
   24               0002     	__bp		=	$F8:20EC, 2		; base pointer
   25               0002     	__si		=	$F8:20EE, 2		; source address
   26               0002     	__di		=	$F8:20F0, 2		; destination address
   27                        	
   28               0002     	__ax		=	$F8:20F8, 2
   29               0001     	__al		=	$F8:20F8, 1
   30               0001     	__ah		=	$F8:20F9, 1
   31                        	
   32               0002     	__bx		=	$F8:20FA, 2
   33               0001     	__bl		=	$F8:20FA, 1
   34               0001     	__bh		=	$F8:20FB, 1
   35                        	
   36               0002     	__cx		=	$F8:20FC, 2
   37               0001     	__cl		=	$F8:20FC, 1
   38               0001     	__ch		=	$F8:20FD, 1
   39                        	
   40               0002     	__dx		=	$F8:20FE, 2
   41               0001     	__dl		=	$F8:20FE, 1
   42               0001     	__dh		=	$F8:20FF, 1
   43                        		.endif
   44                        	
   45                        			; For compatibility with code that expects the HuC naming that
   46                        			; is used rather than the shorter upper-case #define naming.
   47                        	
   48               0001     		.if	1				
   49               0001     	video_reg	=	$FF:0200, 1		; Address/Status Register
   50               0001     	video_reg_l	=	$FF:0200, 1		; Address/Status Register
   51               0001     	video_reg_h	=	$FF:0201, 1		; Address/Status Register
   52               0002     	video_data	=	$FF:0202, 2		; Data (Read/Write) Low
   53               0001     	video_data_l	=	$FF:0202, 1		; Data (Read/Write) Low
   54               0001     	video_data_h	=	$FF:0203, 1		; Data (Read/Write) High
   55                        	
   56               0002     	color_ctrl	=	$FF:0400, 2		; Control Register
   57               0002     	color_reg	=	$FF:0402, 2		; Color Table Address
   58               0001     	color_reg_l	=	$FF:0402, 1		; Color Table Address
   59               0001     	color_reg_h	=	$FF:0402, 1		; Color Table Address
   60               0002     	color_data	=	$FF:0404, 2		; Color Table Data Read/Write
   61               0001     	color_data_l	=	$FF:0404, 1		; Color Table Data Read/Write
   62               0001     	color_data_h	=	$FF:0405, 1		; Color Table Data Read/Write
   63                        	
   64               0001     	psg_ch		=	$FF:0800, 1		; Channel Select
   65               0001     	psg_mainvol	=	$FF:0801, 1		; Main Amplitude Level
   66               0001     	psg_freqlo	=	$FF:0802, 1		; Frequency Low
   67               0001     	psg_freqhi	=	$FF:0803, 1		; Frequency High
   68               0001     	psg_ctrl	=	$FF:0804, 1		; Control & Channel Amplitude
   69               0001     	psg_pan		=	$FF:0805, 1		; L/R Amplitude Level
   70               0001     	psg_wavebuf	=	$FF:0806, 1		; Waveform
   71               0001     	psg_noise	=	$FF:0807, 1		; Noise
   72               0001     	psg_lfofreq	=	$FF:0808, 1		; LFO Frequency
   73               0001     	psg_lfoctrl	=	$FF:0809, 1		; LFO Control
   74                        	
   75               0001     	irq_m		=	irq_vec, 1		; Old System Card name.
   76               0002     	irq2_jmp	=	irq2_hook, 2		; Old System Card name.
   77               0002     	irq1_jmp	=	irq1_hook, 2		; Old System Card name.
   78               0002     	timer_jmp	=	timer_hook, 2		; Old System Card name.
   79               0002     	nmi_jmp		=	nmi_hook, 2		; Old System Card name.
   80               0002     	sat_adr		=	satb_addr, 2		; Old System Card name.
   81               0005     	joy		=	joynow, 5		; Old System Card name.
   82               0001     	mwr_m		=	vdc_mwr, 1		; Old System Card name.
   83               0001     	dcr_m		=	vdc_dcr, 1		; Old System Card name.
   84                        		.endif
   85                        	
   86                        			; Macros for compatibility with #asm usage in old HuC projects.
   87                        	
   88                        	stw		.macro
   89                        			lda.l	\1
   90                        			sta.l	\2
   91                        			lda.h	\1
   92                        			sta.h	\2
   93                        			.endm
   94                        	
   95                        	stb		.macro
   96                        			lda	\1
   97                        			sta	\2
   98                        			.endm
   99                        	
  100                        	addw		.macro
  101                        		.if	(\# = 3)
  102                        			clc
  103                        			lda.l	\2
  104                        			adc.l	\1
  105                        			sta.l	\3
  106                        			lda.h	\2
  107                        			adc.h	\1
  108                        			sta.h	\3
  109                        		.else
  110                        			clc
  111                        			lda.l	\2
  112                        			adc.l	\1
  113                        			sta.l	\2
  114                        			lda.h	\2
  115                        			adc.h	\1
  116                        			sta.h	\2
  117                        		.endif
  118                        			.endm
  119                        	
  120                        	add		.macro			; add byte-sized value to
  121                        		.if (\# = 2)			; register A (handle carry
  122                        			lda	\2		; flag)
  123                        			clc
  124                        			adc	\1
  125                        			sta	\2
  126                        		.else
  127                        			clc
  128                        			adc	\1
  129                        		.endif
  130                        			.endm
  131                        	
  132                        	subw		.macro
  133                        			sec
  134                        			lda.l	\2
  135                        			sbc.l	\1
  136                        			sta.l	\2
  137                        			lda.h	\2
  138                        			sbc.h	\1
  139                        			sta.h	\2
  140                        			.endm
  141                        	
  142                        	sub		.macro			; subtract byte-sized value
  143                        		.if (\# = 2)			; from register A (handle
  144                        			lda	\2		; carry flag)
  145                        			sec
  146                        			sbc	\1
  147                        			sta	\2
  148                        		.else
  149                        			sec
  150                        			sbc	\1
  151                        		.endif
  152                        			.endm
  153                        	
  154                        	incw		.macro			; increment a word-sized
  155                        			inc.l	\1		; value at stated memory
  156                        			bne	!+		; location
  157                        			inc.h	\1
  158                        	!:
  159                        			.endm
  160                        	
  161                        	decw		.macro			; decrement a word-sized
  162                        			lda	\1		; value at stated memory
  163                        			bne	!+		; location
  164                        			dec.h	\1
  165                        	!:		dec.l	\1
  166                        			.endm
  167                        	
  168                        	lbne		.macro
  169                        			bne	\1
  170                        			.endm
  171                        	
  172                        	lbeq		.macro
  173                        			beq	\1
  174                        			.endm
  175                        	
  176                        	lbpl		.macro
  177                        			bpl	\1
  178                        			.endm
  179                        	
  180                        	lbmi		.macro
  181                        			bmi	\1
  182                        			.endm
  183                        	
  184                        	lbcc		.macro
  185                        			bcc	\1
  186                        			.endm
  187                        	
  188                        	lbcs		.macro
  189                        			bcs	\1
  190                        			.endm
  191                        	
  192                        	lblo		.macro
  193                        			bcc	\1
  194                        			.endm
  195                        	
  196                        	lbhs		.macro
  197                        			bcs	\1
  198                        			.endm
  199                        	
  200                        	__ldwi		.macro
  201                        		__ld.wi		\1
  202                        			.endm
                             #[2]   "..\..\..\include\hucc\hucc.asm"
  237                        		.endif
  238                        	
  239                        			;
  240                        			;
  241                        			;
  242                        	
  243                        	
  244                        	
  245                        	; ***************************************************************************
  246                        	; ***************************************************************************
  247                        	;
  248                        	; core_main - This is executed after "CORE(not TM)" library initialization.
  249                        	;
  250                        	; This is the first code assembled after the library includes, so we're still
  251                        	; in the CORE_BANK, usually ".bank 0"; and because this is assembled with the
  252                        	; default configuration from "include/core-config.inc", which sets the option
  253                        	; "USING_MPR7", then we're running in MPR7 ($E000-$FFFF).
  254                        	
  255    02:C107             	core_main	.proc
  256                        	
  257               0001     		.if	SUPPORT_SGX
  258    02:C107  A9 F9      			lda	#$F9			; Map the 2nd SGX RAM bank.
  259                        		.else
  261                        		.endif
  262    02:C109  53 04      			tam2
  263                        	
  264    02:C10B  A9 01      			lda	#CONST_BANK + _bank_base; Map HuCC's .RODATA bank.
  265    02:C10D  53 08      			tam3
  266    02:C10F  1A         			inc	a
  267    02:C110  53 10      			tam4
  268                        	
  269               0000     		.ifdef	HOME_BANK
  271                        		.else
  272    02:C112  1A         			inc	a
  273                        		.endif
  274    02:C113  53 20      			tam5
  275                        	
  276    02:C115  08         			php				; Disable interrupts while
  277    02:C116  78         			sei				; clearing overlay's BSS.
  278                        	
  279               0000     		.ifndef	USING_RCR_MACROS
  294                        		.endif	USING_RCR_MACROS
  295                        	
  296    02:C117  A9 CC      			lda	#<hucc_vbl		; Setup HuCC's VBL IRQ handler.
  297    02:C119  8D 08 22   			sta.l	vsync_hook
  298    02:C11C  A9 E2      			lda	#>hucc_vbl
  299    02:C11E  8D 09 22   			sta.h	vsync_hook
  300                        	
  301               0000     		.if	CDROM				; Overlays should clear BSS.
  303                        		.else
  304    02:C121  73 6E C1 F0			tii	.rom_tia, ram_tia, 16	; Only needed on HuCARD.
         02:C125  22 10 00    
  305                        		.endif	CDROM
  306                        	
  307               0000     		.if	(__heap_start - __bss_init)	; Copy initialized BSS data.
  309                        		.endif
  310                        	
  311    02:C128  F3 6C C1 08			tai	.stack_fill, __stack, HUCC_STACK_SZ
         02:C12C  20 80 00    
  312                        	
  313               0000     		.if	FAST_MULTIPLY
  322                        		.endif
  323                        	
  324    02:C12F  A9 10      			lda	#$10			; Enable HuCC's vblank IRQ
  325    02:C131  04 F5      			tsb	<irq_vec		; handler.
  326                        	
  327                        			__sound_init			; Initialize a sound driver.
  328                        	
  329    02:C133  AD 00 02   			lda	VDC_SR			; Purge any overdue VBL.
  330    02:C136  9C 41 22   			stz	irq_cnt			; Make it easy to check.
  331                        	
  332    02:C139  28         			plp				; Restore interrupts.
  333                        	
  334               0001     		.ifndef	HUCC_NO_DEFAULT_SCREEN
  335    02:C13A  20 D1 FF   			call	_init_256x224		; HuCC initializes the VDC and
  336    02:C13D  20 16 E4   			jsr	set_dspon		; turns the display on.
  337                        		.endif
  338                        	
  339               0001     		.ifndef	HUCC_NO_DEFAULT_FONT
  340    02:C140  A9 01      			lda	#1			; HuCC loads a default font.
  341    02:C142  8D 7E 23   			sta	monofont_fg
  342    02:C145  9C 7F 23   			stz	monofont_bg
  343                        			_load_default_font
         02:C148  82         			clx				; Offset to PCE VDC.
         02:C149  20 C7 FF   			call	huc_monofont_x
  344    02:C14C  A9 01      			lda	#$01			; Set the font palette entry to
  345    02:C14E  8D 02 04   			sta.l	VCE_CTA			; cyan which is a) visible, but
  346    02:C151  9C 03 04   			stz.h	VCE_CTA			; b) a clear indicator that the
  347    02:C154  A0 96      			ldy	#$96			; user hasn't set a palette yet.
  348    02:C156  8C 04 04   			sty.l	VCE_CTW
  349    02:C159  8D 05 04   			sta.h	VCE_CTW
  350                        		.endif
  351                        	
  352               0001     		.ifndef	HUCC_NO_DEFAULT_RANDOM
  353    02:C15C  AC 41 22   			ldy	irq_cnt			; Initialize random seed.
  354    02:C15F  20 BD FF   			call	init_random
  355                        		.endif
  356                        	
  357    02:C162  A2 80      			ldx	#HUCC_STACK_SZ		; Initialize the HuCC stack.
  358    02:C164  86 8D      			stx	<__sp
  359                        	
  360    02:C166  20 B3 FF   			call	_main			; Execute the HuCC program.
  361                        	
  362    02:C169  4C 88 E2   			jmp	_exit.1			; Pass the exit code on.
  363                        	
  364    02:C16C  EA EA      	.stack_fill:	db	$EA,$EA			; To make it easier to see.
  365                        	
  366               0001     		.if	!CDROM
  367                        	
  368    02:C16E  E3 34 12 02	.rom_tia:	tia	$1234, VDC_DL, 32
         02:C172  02 20 00    
  369    02:C175  60         			rts
  370                        	
  371    02:C176  73 34 12 78	.rom_tii:	tii	$1234, $5678, $9ABC
         02:C17A  56 BC 9A    
  372    02:C17D  60         			rts
  373                        	
  374               22F0     			.bss
  375    F8:22F0             	ram_tia:	ds	8
  376    F8:22F8             	ram_tii:	ds	8
  377               C17E     			.code
  378                        	
  379                        		.endif	!CDROM
  380                        	
  381                        			.endp
  382                        	
  383                        			;
  384                        			; Self-Modifying TIA and TII instruction subroutines.
  385                        			;
  386                        			; These need to be in permanently-accessible memory so that
  387                        			; HuCC code can modify the values as __fastcall parameters.
  388                        			;
  389                        	
  390               0000     		.if	CDROM
  398                        		.endif	CDROM
  399                        	
  400               22F0     			rsset	ram_tia
  401               22F0     	ram_tia_opc	rs	1
  402               22F1     	ram_tia_src	rs	2
  403               22F3     	ram_tia_dst	rs	2
  404               22F5     	ram_tia_len	rs	2
  405               22F7     	ram_tia_rts	rs	1
  406                        	
  407               22F8     			rsset	ram_tii
  408               22F8     	ram_tii_opc	rs	1
  409               22F9     	ram_tii_src	rs	2
  410               22FB     	ram_tii_dst	rs	2
  411               22FD     	ram_tii_len	rs	2
  412               22FF     	ram_tii_rts	rs	1
  413                        	
  414                        	
  415                        	
  416                        	; ***************************************************************************
  417                        	; ***************************************************************************
  418                        	;
  419                        	; hucc_vbl - vblank IRQ handler, called by the "CORE(not TM)" kernel.
  420                        	;
  421                        	; This uses the kernel's hook to process things during vblank. It returns
  422                        	; with a simple RTS, and it can corrupt any register.
  423                        	;
  424                        	; Any slow routines in here should enable interrupts and protect itself from
  425                        	; re-entrancy problems.
  426                        	;
  427                        	
  428    00:E2CC  20 A9 FF   	hucc_vbl:	call	vbl_init_scroll		; Prepare for the next frame.
  429                        	
  430    00:E2CF  F8         			sed				; Update the HuC system clock
  431    00:E2D0  38         			sec				; which is in BCD here rather
  432    00:E2D1  AD EF 22   			lda	clock_tt		; than the binary one in HuC.
  433    00:E2D4  69 00      			adc	#0			; BCD add ...
  434    00:E2D6  C9 60      			cmp	#$60			; ... but binary comparison.
  435    00:E2D8  90 28      			bcc	.ticks
  436    00:E2DA  AD EE 22   			lda	clock_ss
  437    00:E2DD  69 00      			adc	#0			; BCD add ...
  438    00:E2DF  C9 60      			cmp	#$60			; ... but binary comparison.
  439    00:E2E1  90 1B      			bcc	.seconds
  440    00:E2E3  AD ED 22   			lda	clock_mm
  441    00:E2E6  69 00      			adc	#0			; BCD add ...
  442    00:E2E8  C9 60      			cmp	#$60			; ... but binary comparison.
  443    00:E2EA  90 0E      			bcc	.minutes
  444    00:E2EC  AD EC 22   			lda	clock_hh
  445    00:E2EF  69 00      			adc	#0			; BCD add ...
  446    00:E2F1  C9 12      			cmp	#$12			; ... but binary comparison.
  447    00:E2F3  90 01      			bcc	.hours
  448    00:E2F5  62         			cla
  449    00:E2F6  8D EC 22   	.hours:		sta	clock_hh
  450    00:E2F9  62         			cla
  451    00:E2FA  8D ED 22   	.minutes:	sta	clock_mm
  452    00:E2FD  62         			cla
  453    00:E2FE  8D EE 22   	.seconds:	sta	clock_ss
  454    00:E301  62         			cla
  455    00:E302  8D EF 22   	.ticks:		sta	clock_tt
  456    00:E305  D8         			cld
  457                        	
  458    00:E306  4C 96 E3   			jmp	xfer_palettes		; Upload any palette changes.
                             #[1]   "main.s"
   15               6000     			.data
   16               0003     			.bank	DATA_BANK
   17                        	
   18               E309     		.code
   19                        	
   20                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 1; // **************************************************************************
   21                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 2; // **************************************************************************
   22                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 3; //
   23                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 4; // globals.h
   24                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 5; //
   25                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 6; // **************************************************************************
   26                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 7; // **************************************************************************
   27                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 8; //
   28                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 9; // The idea is that you, a PCE developer, copy this file from the ../include/
   29                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 10; // directory and into your project's directory, and then define the variables
   30                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 11; // that you want to have shared access to in all overlay programs on your CD.
   31                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 12; //
   32                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 13; // Because PCEAS searches the current (i.e. project) directory for an include
   33                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 14; // file first, then it will find your customized copy of the file rather than
   34                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 15; // the original copy in the ../include/ directory.
   35                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 16; //
   36                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 17; // **************************************************************************
   37                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 18; // **************************************************************************
   38                        		.dbg	clear
   39               2300     		.bss
   40    F8:2300             	huc_globals:
   41                        	
   42    F8:2300             	huc_globals_end:
   43               E309     		.code
   44                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
   45                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
   46                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
   47                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
   48                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
   49                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
   50                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
   51                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
   52                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
   53                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
   54                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
   55                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
   56                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
   57                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
   58                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
   59                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
   60                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
   61                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
   62                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
   63                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
   64                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
   65                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
   66                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
   67                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
   68                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
   69                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
   70                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
   71                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
   72                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
   73                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
   74                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
   75                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 1; #ifndef _hucc_systemcard_h
   76                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 2; #define _hucc_systemcard_h
   77                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 4; /****************************************************************************
   78                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 5; ; ***************************************************************************
   79                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 6; ;
   80                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 7; ; hucc-systemcard.h
   81                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 8; ;
   82                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 9; ; Macros and library functions for using the System Card.
   83                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 10; ;
   84                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 11; ; Copyright John Brandwood 2024.
   85                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 12; ;
   86                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 13; ; Distributed under the Boost Software License, Version 1.0.
   87                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
   88                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
   89                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 16; ;
   90                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 17; ; ***************************************************************************
   91                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 18; ; ***************************************************************************
   92                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 19; ;
   93                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 20; ; Because these are mainly macros, and so must be included before being used
   94                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 21; ; in compiled code, the actual functions here are written to avoid using any
   95                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 22; ; BSS memory so that HuCC's overlay global-shared-variables are not effected.
   96                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 23; ;
   97                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 24; ; ***************************************************************************
   98                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 25; ; **************************************************************************/
   99                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 27; // *************
  100                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 28; // Backup RAM defines ...
  101                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 29; // *************
  102                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 31; #define  BM_OK             0
  103                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 32; #define  BM_NOT_FOUND      1
  104                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 33; #define  BM_BAD_CHECKSUM   2
  105                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 34; #define  BM_DIR_CORRUPTED  3
  106                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 35; #define  BM_FILE_EMPTY     4
  107                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 36; #define  BM_FULL           5
  108                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 37; #define  BM_NOT_FORMATED   0xFF			// HuC incorrect spelling.
  109                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 38; #define  BM_NOT_FORMATTED  0xFF			// HuCC can use a dictionary!
  110                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 40; #define  BRAM_STARTPTR     0x8010
  111                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 42; // *************
  112                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 43; // CD defines ...
  113                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 44; // *************
  114                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 46; #define	CDPLAY_MUTE		0
  115                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 47; #define	CDPLAY_REPEAT		1
  116                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 48; #define	CDPLAY_NORMAL		2
  117                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 49; #define	CDPLAY_ENDOFDISC	0
  118                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 51; #define	CDFADE_CANCEL	0
  119                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 52; #define	CDFADE_PCM6	8
  120                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 53; #define	CDFADE_ADPCM6	10
  121                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 54; #define	CDFADE_PCM2	12
  122                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 55; #define	CDFADE_ADPCM2	14
  123                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 57; #define CDTRK_AUDIO	0
  124                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 58; #define CDTRK_DATA	4
  125                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 60; // *************
  126                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 61; // ADPCM defines ...
  127                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 62; // *************
  128                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 64; #define	ADPLAY_AUTOSTOP		0
  129                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 65; #define	ADPLAY_REPEAT		0x80
  130                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 67; #define ADPLAY_FREQ_16KHZ	0xE
  131                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 68; #define ADPLAY_FREQ_10KHZ	0xD
  132                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 69; #define ADPLAY_FREQ_8KHZ	0xC
  133                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 70; #define ADPLAY_FREQ_6KHZ	0xB
  134                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 71; #define ADPLAY_FREQ_5KHZ	0xA
  135                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 73; #define ADREAD_RAM	0
  136                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 74; #define ADREAD_VRAM	0xFF
  137                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 76; #define ADWRITE_RAM	0
  138                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 77; #define ADWRITE_VRAM	0xFF
  139                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 79; // *************
  140                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 80; // Functions in hucc-systemcard.asm ...
  141                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 81; // *************
  142                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 83; #ifdef __HUCC__
  143                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 85; #asmdef	HUCC_USES_SYSTEMCARD 1
  144               0001     	HUCC_USES_SYSTEMCARD = 1
  145                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 87; extern void __fastcall __macro cd_boot( void );
  146                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 88; extern unsigned int __fastcall __macro cd_getver( void );
  147                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 89; extern void __fastcall __macro cd_reset( void );
  148                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 90; extern unsigned char __fastcall __macro cd_pause( void );
  149                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 91; extern unsigned char __fastcall cd_unpause( void );
  150                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 92; extern void __fastcall __macro cd_fade( unsigned char type<acc> );
  151                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 93; extern unsigned char __fastcall cd_playtrk( unsigned char start_track<_bx>, unsigned char end_track<_cx>, unsigned char mode<_dh> );
  152                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 94; extern unsigned char __fastcall cd_playmsf( unsigned char start_minute<_al>,  unsigned char start_second<_ah>,  unsigned char start_frame<_bl>, unsigned char end_minute<_cl>,  unsigned char end_second<_ch>,  unsigned char end_frame<_dl>,  unsigned char mode<_dh> );
  153                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 95; extern unsigned char __fastcall cd_fastvram( unsigned char ovl_index<_cl>, unsigned int sect_offset<_si>, unsigned int vramaddr<_bx>, unsigned int sectors<_al> );
  154                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 96; extern unsigned char __fastcall cd_loadvram( unsigned char ovl_index<_cl>, unsigned int sect_offset<_si>, unsigned int vramaddr<_bx>, unsigned int bytes<_ax> );
  155                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 97; extern unsigned char __fastcall cd_loaddata( unsigned char ovl_index<_cl>, unsigned int sect_offset<_si>, unsigned char __far *buffer<_bp_bank:_bp>, unsigned int bytes<__ptr> );
  156                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 98; extern unsigned char __fastcall cd_loadbank( unsigned char ovl_index<_cl>, unsigned int sect_offset<_si>, unsigned char bank<_bl>, unsigned int sectors<_al> );
  157                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 99; extern unsigned char __fastcall __macro cd_status( unsigned char mode<acc> );
  158                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 101; extern void __fastcall __macro ad_reset( void );
  159                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 102; extern unsigned char __fastcall __macro ad_trans( unsigned char ovl_index<_cl>, unsigned int sect_offset<_si>, unsigned char nb_sectors<_dh>, unsigned int ad_addr<_bx> );
  160                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 103; extern void __fastcall __macro ad_read( unsigned int ad_addr<_cx>, unsigned char mode<_dh>, unsigned int buf<_bx>, unsigned int bytes<_ax> );
  161                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 104; extern void __fastcall __macro ad_write( unsigned int ad_addr<_cx>, unsigned char mode<_dh>, unsigned int buf<_bx>, unsigned int bytes<_ax> );
  162                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 105; extern unsigned char __fastcall __macro ad_play( unsigned int ad_addr<_bx>, unsigned int bytes<_ax>, unsigned char freq<_dh>, unsigned char mode<_dl> );
  163                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 106; extern unsigned char __fastcall __macro ad_cplay( unsigned char ovl_index<_cl>, unsigned int sect_offset<_si>, unsigned int nb_sectors<_bx>, unsigned char freq<_dh> );
  164                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 107; extern void __fastcall __macro ad_stop( void );
  165                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 108; extern unsigned char __fastcall __macro ad_stat( void );
  166                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 110; extern unsigned char __fastcall bm_check( void );
  167                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 111; extern unsigned char __fastcall bm_format( void );
  168                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 112; extern unsigned int __fastcall __macro bm_free( void );
  169                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 113; extern unsigned char __fastcall __macro bm_read( unsigned char *buffer<_bx>, unsigned char *name<_ax>, unsigned int offset<_dx>, unsigned int length<_cx> );
  170                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 114; extern unsigned char __fastcall __macro bm_write( unsigned char *buffer<_bx>, unsigned char *name<_ax>, unsigned int offset<_dx>, unsigned int length<_cx> );
  171                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 115; extern unsigned char __fastcall __macro bm_delete( unsigned char *name<_ax> );
  172                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 117; // Deprecated functions ...
  173                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 119; extern unsigned char __fastcall __macro bm_exist( unsigned char *name<_ax> );
  174                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 120; extern unsigned char __fastcall __macro bm_create( unsigned char *name<_ax>, unsigned int length<_cx> );
  175                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 122; // void __fastcall _xsafe add_sectors( unsigned int sector_offset<acc> );
  176                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 124; #endif // __HUCC__
  177                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 126; #endif // _hucc_systemcard_h
  178                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
  179                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 1; #ifndef _hucc_baselib_h
  180                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 2; #define _hucc_baselib_h
  181                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 4; /****************************************************************************
  182                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 5; ; ***************************************************************************
  183                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 6; ;
  184                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 7; ; hucc-baselib.h
  185                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 8; ;
  186                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 9; ; Basic library functions provided as macros.
  187                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 10; ;
  188                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 11; ; Copyright John Brandwood 2024.
  189                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 12; ;
  190                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 13; ; Distributed under the Boost Software License, Version 1.0.
  191                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
  192                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
  193                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 16; ;
  194                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 17; ; ***************************************************************************
  195                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 18; ; **************************************************************************/
  196                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 20; // *************
  197                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 21; // Joypad defines ...
  198                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 22; // *************
  199                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 24; #define	JOY_A		0x01
  200                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 25; #define	JOY_I		0x01
  201                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 26; #define	JOY_B		0x02
  202                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 27; #define	JOY_II		0x02
  203                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 28; #define	JOY_SLCT	0x04
  204                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 29; #define	JOY_SEL		0x04
  205                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 30; #define	JOY_STRT	0x08
  206                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 31; #define	JOY_RUN		0x08
  207                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 32; #define	JOY_UP		0x10
  208                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 33; #define	JOY_RGHT	0x20
  209                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 34; #define	JOY_RIGHT	0x20
  210                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 35; #define	JOY_DOWN	0x40
  211                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 36; #define	JOY_LEFT	0x80
  212                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 38; #define	JOY_C		0x0100
  213                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 39; #define	JOY_III		0x0100
  214                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 40; #define	JOY_D		0x0200
  215                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 41; #define	JOY_IV		0x0200
  216                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 42; #define	JOY_E		0x0400
  217                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 43; #define	JOY_V		0x0400
  218                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 44; #define	JOY_F		0x0800
  219                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 45; #define	JOY_VI		0x0800
  220                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 47; #define JOY_SIXBUT	0x8000
  221                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 48; #define JOY_TYPE6	0x8000
  222                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 50; // *************
  223                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 51; // SuperGRAFX VPC settings for set_vpc_ctl() ...
  224                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 52; // *************
  225                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 54; #define VPC_SPR1_BKG1_SPR2_BKG2	0x3000 // same as SGX_PARALLAX=0
  226                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 55; #define VPC_SPR1_SPR2_BKG1_BKG2	0x7000 // same as SGX_PARALLAX=1
  227                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 56; #define VPC_BKG1_BKG2_SPR1_SPR2	0xB000
  228                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 58; // *************
  229                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 59; // System Card variables ...
  230                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 60; // *************
  231                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 62; extern unsigned int si;
  232                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 63; extern unsigned int di;
  233                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 64; extern unsigned int bp;
  234                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 66; extern unsigned int ax;
  235                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 67; extern unsigned int bx;
  236                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 68; extern unsigned int cx;
  237                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 69; extern unsigned int dx;
  238                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 71; extern unsigned char al;
  239                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 72; extern unsigned char ah;
  240                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 73; extern unsigned char bl;
  241                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 74; extern unsigned char bh;
  242                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 75; extern unsigned char cl;
  243                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 76; extern unsigned char ch;
  244                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 77; extern unsigned char dl;
  245                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 78; extern unsigned char dh;
  246                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 80; extern unsigned char irq_cnt;
  247                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 81; extern unsigned char joynow[5];
  248                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 82; extern unsigned char joytrg[5];
  249                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 83; extern unsigned char joy6now[5];
  250                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 84; extern unsigned char joy6trg[5];
  251                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 85; extern unsigned int  bg_x1;
  252                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 86; extern unsigned int  bg_y1;
  253                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 87; extern unsigned int  bg_x2;
  254                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 88; extern unsigned int  bg_y2;
  255                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 90; // *************
  256                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 91; // Special macros to get information from PCEAS ...
  257                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 92; // *************
  258                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 94; #define BANK( datasym ) ((unsigned) (&__bank__ ## datasym))
  259                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 95; #define SIZEOF( datasym ) ((unsigned) (&__sizeof__ ## datasym))
  260                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 96; #define COUNTOF( datasym ) ((unsigned) (&__countof__ ## datasym))
  261                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 97; #define OVERLAY( datasym ) ((unsigned) (&__overlay__ ## datasym))
  262                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 100; // *************
  263                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 101; // Functions in hucc-baselib.asm ...
  264                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 102; // *************
  265                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 104; #ifdef __HUCC__
  266                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 106; #asmdef	HUCC_USES_BASELIB 1
  267               0001     	HUCC_USES_BASELIB = 1
  268                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 108; #define	_OPTIMIZE 1
  269                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 111; // *************
  270                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 112; // Hardware Detection
  271                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 113; // *************
  272                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 115; extern unsigned char __fastcall __macro sgx_detect( void );
  273                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 116; extern unsigned char __fastcall __macro ac_exists( void );
  274                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 119; // *************
  275                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 120; // Memory Access
  276                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 121; // *************
  277                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 123; extern unsigned char __fastcall __macro peek( unsigned int addr<__ptr> );
  278                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 124; extern unsigned int  __fastcall __macro peekw( unsigned int addr<__ptr> );
  279                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 126; extern void __fastcall __macro poke( unsigned int addr<__poke>, unsigned char with<acc> );
  280                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 127; extern void __fastcall __macro pokew( unsigned int addr<__poke>, unsigned int with<acc> );
  281                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 129; extern unsigned char __fastcall farpeek( void __far *addr<_bp_bank:_bp> );
  282                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 130; extern unsigned int  __fastcall farpeekw( void __far *addr<_bp_bank:_bp> );
  283                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 132; extern void __fastcall __nop set_far_base( unsigned char data_bank<_bp_bank>, unsigned char *data_addr<_bp> );
  284                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 133; extern void __fastcall set_far_offset( unsigned int offset<_bp>, unsigned char data_bank<_bp_bank>, unsigned char *data_addr<acc> );
  285                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 135; extern unsigned char __fastcall far_peek( void );
  286                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 136; extern unsigned int  __fastcall far_peekw( void );
  287                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 138; extern void __fastcall __macro reset_mpr2( void );
  288                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 139; extern void __fastcall __macro reset_mpr34( void );
  289                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 141; extern void * __fastcall __macro farset_mpr2( void __far *addr<_bp_bank:_bp> );
  290                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 142; extern void * __fastcall __macro farset_mpr34( void __far *addr<_bp_bank:_bp> );
  291                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 144; extern void * __fastcall __macro far_set_mpr2( void );
  292                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 145; extern void * __fastcall __macro far_set_mpr34( void );
  293                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 148; // *************
  294                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 149; // Clock Functions
  295                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 150; // *************
  296                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 152; extern unsigned char __fastcall __macro clock_hh( void );
  297                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 153; extern unsigned char __fastcall __macro clock_mm( void );
  298                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 154; extern unsigned char __fastcall __macro clock_ss( void );
  299                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 155; extern unsigned char __fastcall __macro clock_tt( void );
  300                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 156; extern void __fastcall __macro clock_reset( void );
  301                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 159; // *************
  302                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 160; // Joypad Functions
  303                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 161; // *************
  304                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 163; extern unsigned int __fastcall __macro joy( unsigned char which<acc> );
  305                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 164; extern unsigned int __fastcall __macro joytrg( unsigned char which<acc> );
  306                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 167; // *************
  307                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 168; // Number Functions
  308                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 169; // *************
  309                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 171; extern int __fastcall abs( int value<acc> );
  310                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 173; extern void __fastcall __macro srand( unsigned char seed<acc> );
  311                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 174; extern unsigned int __fastcall rand( void );
  312                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 175; extern unsigned char __fastcall rand8( void );
  313                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 177; // Note: "limit" is 0..255.
  314                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 178; extern unsigned char __fastcall random8( unsigned char limit<acc> );
  315                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 180; // Note: "limit" is 0..128, 129..255 are treated as 128!
  316                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 181; extern unsigned char __fastcall random( unsigned char limit<acc> );
  317                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 184; // *************
  318                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 185; // Overlay Execution
  319                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 186; // *************
  320                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 188; extern unsigned char __fastcall __macro cd_execoverlay( unsigned char ovl_index<acc> );
  321                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 191; // *************
  322                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 192; // Functions that are only optionally available if configured in your hucc-config.inc
  323                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 193; // *************
  324                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 195; extern unsigned int __fastcall __macro joybuf( unsigned char which<acc> );
  325                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 196; extern unsigned int __fastcall __macro get_joy_events( unsigned char which<acc> );
  326                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 197; extern void __fastcall __macro clear_joy_events( unsigned char mask<acc> );
  327                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 200; // *************
  328                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 201; // Functions that are only implemented in the TGEMU emulator for unit-testing
  329                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 202; // the compiler, and which should never be used in normal HuCC projects ...
  330                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 203; // *************
  331                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 205; extern void __fastcall dump_screen( void );
  332                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 206; extern void __fastcall abort( void );
  333                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 207; extern void __fastcall exit( int value<acc> );
  334                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 209; extern unsigned char __fastcall __builtin_ffs( unsigned int value<__temp> );
  335                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 211; #endif // __HUCC__
  336                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 213; #endif // _hucc_baselib_h
  337                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
  338                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 1; #ifndef _hucc_gfx_h
  339                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 2; #define _hucc_gfx_h
  340                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 4; /****************************************************************************
  341                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 5; ; ***************************************************************************
  342                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 6; ;
  343                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 7; ; huc-gfx.h
  344                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 8; ;
  345                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 9; ; Based on the original HuC and MagicKit functions by David Michel and the
  346                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 10; ; other original HuC developers.
  347                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 11; ;
  348                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 12; ; Modifications copyright John Brandwood 2024.
  349                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 13; ;
  350                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 14; ; Distributed under the Boost Software License, Version 1.0.
  351                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 15; ; (See accompanying file LICENSE_1_0.txt or copy at
  352                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 16; ;  http://www.boost.org/LICENSE_1_0.txt)
  353                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 17; ;
  354                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 18; ; ***************************************************************************
  355                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 19; ; **************************************************************************/
  356                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 21; // *************
  357                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 22; // Screen defines ...
  358                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 23; // *************
  359                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 25; #define	SCR_SIZE_32x32	0
  360                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 26; #define	SCR_SIZE_64x32	1
  361                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 27; #define	SCR_SIZE_128x32	2
  362                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 28; #define	SCR_SIZE_32x64	4
  363                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 29; #define	SCR_SIZE_64x64	5
  364                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 30; #define	SCR_SIZE_128x64	6
  365                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 32; #define	XRES_SHARP	0
  366                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 33; #define	XRES_SOFT	4
  367                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 34; #define	XRES_KEEP	128
  368                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 36; #define VPC_WIN_A	0x00
  369                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 37; #define VPC_WIN_B	0x01
  370                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 38; #define	VPC_WIN_AB	0x02
  371                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 39; #define	VPC_WIN_NONE	0x03
  372                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 40; #define	VPC_NORM	0x00
  373                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 41; #define	VPC_SPR		0x04
  374                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 42; #define	VPC_INV_SPR	0x08
  375                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 43; #define VDC1_ON		0x01
  376                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 44; #define	VDC1_OFF	0x00
  377                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 45; #define VDC2_ON		0x02
  378                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 46; #define	VDC2_OFF	0x00
  379                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 47; #define VDC_ON		0x03
  380                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 48; #define	VDC_OFF		0x00
  381                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 50; // *************
  382                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 51; // Functions in hucc-gfx.asm ...
  383                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 52; // *************
  384                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 54; #ifdef __HUCC__
  385                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 56; #asmdef	HUCC_USES_GFX 1
  386               0001     	HUCC_USES_GFX = 1
  387                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 58; // *************
  388                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 59; // Color and Palette Functions
  389                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 60; // *************
  390                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 62; extern void __fastcall clear_palette( void );
  391                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 64; extern void __fastcall __nop set_color( unsigned int index<VCE_CTA>, unsigned int value<VCE_CTW> );
  392                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 65; extern void __fastcall set_color_rgb( unsigned int index<VCE_CTA>, unsigned char r<_al>, unsigned char g<_ah>, unsigned char b<acc> );
  393                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 66; extern unsigned int __fastcall __macro get_color( unsigned int index<VCE_CTA> );
  394                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 68; extern void __fastcall load_palette( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp>, unsigned char num_palettes<_ah> );
  395                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 69; extern void __fastcall far_load_palette( unsigned char palette<_al>, unsigned char num_palettes<_ah> );
  396                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 71; extern void __fastcall read_palette( unsigned char palette<_al>, unsigned char num_palettes<_ah>, unsigned int *destination<_di> );
  397                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 73; extern void __fastcall __macro fade_to_black( unsigned int __far *from<_bp_bank:_bp>, unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_sub<_ah> );
  398                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 74; extern void __fastcall __macro fade_to_white( unsigned int __far *from<_bp_bank:_bp>, unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_add<_ah> );
  399                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 75; extern void __fastcall __macro cross_fade_to( unsigned int __far *from<_bp_bank:_bp>, unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char which_component<_ah> );
  400                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 77; extern void __fastcall __macro far_fade_to_black( unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_sub<_ah> );
  401                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 78; extern void __fastcall __macro far_fade_to_white( unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_add<_ah> );
  402                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 79; extern void __fastcall __macro far_cross_fade_to( unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char which_component<_ah> );
  403                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 83; // *************
  404                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 84; // Video Functions
  405                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 85; // *************
  406                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 87; extern void __fastcall init_240x208( void );
  407                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 88; extern void __fastcall init_256x224( void );
  408                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 90; extern void __fastcall vsync( void );
  409                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 91; extern void __fastcall vsync( unsigned char count<_al> );
  410                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 93; extern void __fastcall disp_on( void );
  411                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 94; extern void __fastcall disp_off( void );
  412                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 96; extern void __fastcall set_screen_size( unsigned char value<_al> );
  413                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 98; extern void __fastcall set_xres( unsigned int x_pixels<_ax>, unsigned char blur_flag<_bl> );
  414                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 100; extern void __fastcall cls( void );
  415                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 101; extern void __fastcall cls( unsigned int tile<acc> );
  416                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 103; extern unsigned int __fastcall __macro vram_addr( unsigned char bat_x<_al>, unsigned char bat_y<_ah> );
  417                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 104; extern unsigned int __fastcall __macro get_vram( unsigned int address<_di> );
  418                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 105; extern void __fastcall __macro put_vram( unsigned int address<_di>, unsigned int data<acc> );
  419                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 107; extern void __fastcall __macro load_vram( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_words<_ax> );
  420                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 108; extern void __fastcall __macro far_load_vram( unsigned int vram<_di>,  unsigned int num_words<_ax> );
  421                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 110; extern void __fastcall load_bat( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
  422                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 111; extern void __fastcall far_load_bat( unsigned int vram<_di>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
  423                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 113; extern void __fastcall __macro load_sprites( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_groups<acc> );
  424                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 114; extern void __fastcall __macro far_load_sprites( unsigned int vram<_di>, unsigned int num_groups<acc> );
  425                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 116; extern void __fastcall vram2vram( unsigned int vram_dst<_ax>, unsigned int vram_src<_bx>, unsigned int word_len<_cx> );
  426                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 119; // *************
  427                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 120; // SuperGRAFX Video Functions
  428                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 121; // *************
  429                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 123; extern void __fastcall __nop vpc_set_ctl( unsigned int bits<VPC_CR> );
  430                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 124; extern void __fastcall __nop vpc_set_win1( unsigned int width<VPC_WINDOW1> );
  431                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 125; extern void __fastcall __nop vpc_set_win2( unsigned int width<VPC_WINDOW2> );
  432                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 127; extern void __fastcall sgx_set_screen_size( unsigned char value<_al> );
  433                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 129; extern void __fastcall sgx_set_xres( unsigned int x_pixels<_ax>, unsigned char blur_flag<_bl> );
  434                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 131; extern void __fastcall sgx_cls( void );
  435                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 132; extern void __fastcall sgx_cls( unsigned int tile<acc> );
  436                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 134; extern unsigned int __fastcall __macro sgx_vram_addr( unsigned char bat_x<_al>, unsigned char bat_y<_ah> );
  437                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 135; extern unsigned int __fastcall __macro sgx_get_vram( unsigned int address<_di> );
  438                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 136; extern void __fastcall __macro sgx_put_vram( unsigned int address<_di>, unsigned int data<acc> );
  439                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 138; extern void __fastcall __macro sgx_load_vram( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_words<_ax> );
  440                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 139; extern void __fastcall __macro sgx_far_load_vram( unsigned int vram<_di>, unsigned int num_words<_ax> );
  441                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 141; extern void __fastcall sgx_load_bat( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
  442                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 142; extern void __fastcall sgx_far_load_bat( unsigned int vram<_di>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
  443                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 144; extern void __fastcall __macro sgx_load_sprites( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_groups<acc> );
  444                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 145; extern void __fastcall __macro sgx_far_load_sprites( unsigned int vram<_di>, unsigned int num_groups<acc> );
  445                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 147; extern void __fastcall sgx_vram2vram( unsigned int vram_dst<_ax>, unsigned int vram_src<_bx>, unsigned int word_len<_cx> );
  446                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 150; // *************
  447                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 151; // Font Functions
  448                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 152; // *************
  449                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 154; extern void __fastcall set_font_addr( unsigned int vram<acc> );
  450                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 155; extern void __fastcall set_font_pal( unsigned char palette<acc> );
  451                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 157; extern void __fastcall load_font( unsigned char __far *font<_bp_bank:_bp>, unsigned char count<_al>, unsigned int vram<acc> );
  452                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 158; extern void __fastcall far_load_font( unsigned char count<_al>, unsigned int vram<acc> );
  453                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 160; extern void __fastcall __nop set_font_color( unsigned char foreground<monofont_fg>, unsigned char background<monofont_bg> );
  454                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 161; extern void __fastcall __macro load_default_font( void );
  455                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 164; // *************
  456                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 165; // SuperGRAFX Font Functions
  457                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 166; // *************
  458                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 168; extern void __fastcall sgx_set_font_addr( unsigned int vram<acc> );
  459                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 169; extern void __fastcall sgx_set_font_pal( unsigned char palette<acc> );
  460                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 171; extern void __fastcall sgx_load_font( char __far *font<_bp_bank:_bp>, unsigned char count<_al>, unsigned int vram<acc> );
  461                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 172; extern void __fastcall sgx_far_load_font( unsigned char count<_al>, unsigned int vram<acc> );
  462                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 174; extern void __fastcall __macro sgx_load_default_font( void );
  463                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 177; // *************
  464                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 178; // Deprecated functions ...
  465                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 179; // *************
  466                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 181; extern void __fastcall __macro set_xres( unsigned int x_pixels<_ax> );
  467                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 182; extern void __fastcall __macro sgx_set_xres( unsigned int x_pixels<_ax> );
  468                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 184; extern void __fastcall load_background( unsigned char __far *tiles<_bp_bank:_bp>, unsigned char __far *palettes<__fbank:__fptr>, unsigned char __far *bat<_cl:_bx>, unsigned char w<_dl>, unsigned char h<_dh> );
  469                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 186; extern void __fastcall __macro set_bgpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp> );
  470                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 187; extern void __fastcall __macro set_bgpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_palettes<_ah> );
  471                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 188; extern void __fastcall __macro set_sprpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp> );
  472                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 189; extern void __fastcall __macro set_sprpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_palettes<_ah> );
  473                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 191; extern void __fastcall load_font( char __far *font<_bp_bank:_bp>, unsigned char count<_al> );
  474                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 193; extern void __fastcall put_string( unsigned char *string<_bp>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
  475                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 195; extern void __fastcall put_char( unsigned char digit<_bl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
  476                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 196; extern void __fastcall put_digit( unsigned char digit<_bl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
  477                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 197; extern void __fastcall put_hex( unsigned int number<_bx>, unsigned char length<_cl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
  478                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 198; extern void __fastcall put_number( unsigned int number<_bx>, unsigned char length<_cl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
  479                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 199; extern void __fastcall put_raw( unsigned int data<_bx>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
  480                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 201; #endif // __HUCC__
  481                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 203; #endif // _hucc_gfx_h
  482                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
  483                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 1; #ifndef _hucc_string_h
  484                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 2; #define _hucc_string_h
  485                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 4; /****************************************************************************
  486                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 5; ; ***************************************************************************
  487                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 6; ;
  488                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 7; ; hucc-string.h
  489                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 8; ;
  490                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 9; ; Not-quite-standard, but fast, replacements for <string.h>.
  491                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 10; ;
  492                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 11; ; Copyright John Brandwood 2024.
  493                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 12; ;
  494                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 13; ; Distributed under the Boost Software License, Version 1.0.
  495                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
  496                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
  497                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 16; ;
  498                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 17; ; ***************************************************************************
  499                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 18; ; ***************************************************************************
  500                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 19; ;
  501                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 20; ; !!! WARNING : non-standard return values !!!
  502                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 21; ;
  503                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 22; ; Strings are limited to a maximum of 255 characters (+ the terminator)!
  504                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 23; ;
  505                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 24; ; The memcpy(), strcpy() and strcat() functions do NOT return the destination
  506                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 25; ; address, and they are declared "void" to check that the value is not used.
  507                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 26; ;
  508                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 27; ; mempcpy() is provided which returns the end address instead of the starting
  509                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 28; ; address, because this is typically more useful.
  510                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 29; ;
  511                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 30; ; Please note that both memcpy() and memset() are implemented using a TII for
  512                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 31; ; speed, and so the length should be < 16 bytes if used in time-critical bits
  513                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 32; ; of code (such as when using a split screen) because they delay interrupts.
  514                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 33; ;
  515                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 34; ; strncpy() and strncat() are not provided, because strncpy() was not created
  516                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 35; ; for the purpose of avoiding string overruns, and strncat() is just a poorly
  517                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 36; ; designed function IMHO.
  518                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 37; ;
  519                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 38; ; POSIX strlcpy() and strlcat() are provided instead, but once again they are
  520                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 39; ; slightly non-standard in that the return value when there is an overflow is
  521                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 40; ; the buffer size (so that the overflow can be detected), instead of the full
  522                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 41; ; size of the destination string that was too big to fit in the buffer.
  523                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 42; ;
  524                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 43; ; ***************************************************************************
  525                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 44; ; **************************************************************************/
  526                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 46; // *************
  527                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 47; // Functions in hucc-string.asm ...
  528                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 48; // *************
  529                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 50; #ifdef __HUCC__
  530                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 52; #asmdef	HUCC_USES_STRING 1
  531               0001     	HUCC_USES_STRING = 1
  532                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 54; extern void __fastcall strcpy( char *destination<_di>, char *source<_bp> );
  533                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 55; extern void __fastcall strcat( char *destination<_di>, char *source<_bp> );
  534                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 57; extern unsigned int __fastcall strlen( char *source<_bp> );
  535                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 59; extern unsigned int __fastcall strlcpy( char *destination<_di>, char *source<_bp>, unsigned char size<acc> );
  536                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 60; extern unsigned int __fastcall strlcat( char *destination<_di>, char *source<_bp>, unsigned char size<acc> );
  537                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 62; extern void __fastcall memcpy( unsigned char *destination<ram_tii_dst>, unsigned char *source<ram_tii_src>, unsigned int count<acc> );
  538                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 63; extern void __fastcall farmemcpy( unsigned char *destination<ram_tii_dst>, unsigned char __far *source<_bp_bank:ram_tii_src>, unsigned int count<acc> );
  539                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 64; extern void __fastcall far_memcpy( unsigned char *destination<ram_tii_dst>, unsigned int count<acc> );
  540                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 66; extern unsigned char * __fastcall mempcpy( unsigned char *destination<ram_tii_dst>, unsigned char *source<ram_tii_src>, unsigned int count<acc> );
  541                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 67; extern unsigned char * __fastcall farmempcpy( unsigned char *destination<ram_tii_dst>, unsigned char __far *source<_bp_bank:ram_tii_src>, unsigned int count<acc> );
  542                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 68; extern unsigned char * __fastcall far_mempcpy( unsigned char *destination<ram_tii_dst>, unsigned int count<acc> );
  543                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 70; extern void __fastcall memset( unsigned char *destination<ram_tii_src>, unsigned char value<_al>, unsigned int count<acc> );
  544                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 72; //  0 	if strings are equal
  545                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 73; //  1 	if the first non-matching character in string1 > string2 (in ASCII).
  546                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 74; // -1 	if the first non-matching character in string1 < string2 (in ASCII).
  547                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 76; extern int __fastcall strcmp( char *string1<_di>, char *string2<_bp> );
  548                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 77; extern int __fastcall strncmp( char *string1<_di>, char *string2<_bp>, unsigned int count<_ax> );
  549                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 79; extern int __fastcall __macro memcmp( unsigned char *string1<_di>, unsigned char *string2<_bp>, unsigned int count<acc> );
  550                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 80; extern int __fastcall farmemcmp( unsigned char *string1<_di>, unsigned char __far *string2<_bp_bank:_bp>, unsigned int count<acc> );
  551                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 81; extern int __fastcall far_memcmp( unsigned char *string1<_di>, unsigned int count<acc> );
  552                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 83; #endif // __HUCC__
  553                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 85; #endif // _hucc_string_h
  554                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
  555                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 1; #ifndef _hucc_old_scroll_h
  556                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 2; #define _hucc_old_scroll_h
  557                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 4; /****************************************************************************
  558                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 5; ; ***************************************************************************
  559                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 6; ;
  560                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 7; ; hucc-old-scroll.h
  561                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 8; ;
  562                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 9; ; Based on the original HuC and MagicKit functions by David Michel and the
  563                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 10; ; other original HuC developers.
  564                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 11; ;
  565                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 12; ; Modifications copyright John Brandwood 2024.
  566                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 13; ;
  567                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 14; ; Distributed under the Boost Software License, Version 1.0.
  568                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 15; ; (See accompanying file LICENSE_1_0.txt or copy at
  569                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 16; ;  http://www.boost.org/LICENSE_1_0.txt)
  570                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 17; ;
  571                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 18; ; ***************************************************************************
  572                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 19; ; ***************************************************************************
  573                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 20; ;
  574                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 21; ; HuC's old scrolling library is provided for use with existing HuC projects,
  575                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 22; ; but it should preferably be avoided in new projects because it is slow and
  576                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 23; ; forever limited by its choice to handle gaps between areas, and sorting.
  577                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 24; ;
  578                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 25; ; HuCC's new scrolling library puts the responibility for defining both gaps
  579                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 26; ; and the display order into the project's hands, but in return it runs much
  580                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 27; ; faster, using less than 1/6 of the processing time in VBLANK, and far less
  581                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 28; ; time in the RCR interrputs themselves. It also supports the 2nd SuperGRAFX
  582                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 29; ; screen layer, which HuC's old scrolling library ignores.
  583                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 30; ;
  584                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 31; ; ***************************************************************************
  585                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 32; ; **************************************************************************/
  586                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 34; // *************
  587                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 35; // Functions in hucc-old-scroll.asm ...
  588                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 36; // *************
  589                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 38; #ifdef __HUCC__
  590                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 40; #asmdef	HUCC_USES_OLD_SCROLL 1
  591               0001     	HUCC_USES_OLD_SCROLL = 1
  592                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 42; extern void __fastcall scroll( unsigned char num<_al>, unsigned int x<_cx>, unsigned int y<_dx>, unsigned char top<_ah>, unsigned char bottom<_bl>, unsigned char disp<acc> );
  593                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 43; extern void __fastcall scroll_disable( unsigned char num<acc> );
  594                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 45; #endif // __HUCC__
  595                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 47; #endif // _hucc_old_scroll_h
  596                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
  597                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 1; #ifndef _hucc_old_spr_h
  598                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 2; #define _hucc_old_spr_h
  599                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 4; /****************************************************************************
  600                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 5; ; ***************************************************************************
  601                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 6; ;
  602                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 7; ; hucc-old-spr.h
  603                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 8; ;
  604                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 9; ; Based on the original HuC and MagicKit functions by David Michel and the
  605                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 10; ; other original HuC developers.
  606                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 11; ;
  607                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 12; ; Modifications copyright John Brandwood 2024.
  608                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 13; ;
  609                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 14; ; Distributed under the Boost Software License, Version 1.0.
  610                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 15; ; (See accompanying file LICENSE_1_0.txt or copy at
  611                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 16; ;  http://www.boost.org/LICENSE_1_0.txt)
  612                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 17; ;
  613                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 18; ; ***************************************************************************
  614                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 19; ; **************************************************************************/
  615                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 21; // *************
  616                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 22; // Sprite defines ...
  617                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 23; // *************
  618                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 25; #define FLIP_X_MASK 0x08
  619                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 26; #define FLIP_Y_MASK 0x80
  620                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 27; #define FLIP_MAS    0x88
  621                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 28; #define SIZE_MAS    0x31
  622                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 30; #define NO_FLIP     0x00
  623                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 31; #define NO_FLIP_X   0x00
  624                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 32; #define NO_FLIP_Y   0x00
  625                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 33; #define FLIP_X      0x08
  626                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 34; #define FLIP_Y      0x80
  627                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 35; #define SZ_16x16    0x00
  628                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 36; #define SZ_16x32    0x10
  629                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 37; #define SZ_16x64    0x30
  630                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 38; #define SZ_32x16    0x01
  631                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 39; #define SZ_32x32    0x11
  632                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 40; #define	SZ_32x64    0x31
  633                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 42; // *************
  634                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 43; // Functions in hucc-old-spr.asm ...
  635                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 44; // *************
  636                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 46; #ifdef __HUCC__
  637                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 48; #asmdef	HUCC_USES_OLD_SPR 1
  638               0001     	HUCC_USES_OLD_SPR = 1
  639                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 50; extern void __fastcall init_satb( void );
  640                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 51; extern void __fastcall reset_satb( void );
  641                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 52; extern void __fastcall satb_update( void );
  642                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 53; extern void __fastcall spr_set( unsigned char num<acc> );
  643                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 54; extern void __fastcall spr_hide( void );
  644                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 55; extern void __fastcall spr_show( void );
  645                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 56; extern void __fastcall spr_x( unsigned int value<acc> );
  646                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 57; extern void __fastcall spr_y( unsigned int value<acc> );
  647                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 58; extern void __fastcall spr_pattern( unsigned int vaddr<acc> );
  648                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 59; extern void __fastcall spr_ctrl( unsigned char mask<_al>, unsigned char value<acc> );
  649                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 60; extern void __fastcall spr_pal( unsigned char palette<acc> );
  650                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 61; extern void __fastcall spr_pri( unsigned char priority<acc> );
  651                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 63; extern unsigned int __fastcall spr_get_x( void );
  652                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 64; extern unsigned int __fastcall spr_get_y( void );
  653                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 66; extern void __fastcall sgx_init_satb( void );
  654                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 67; extern void __fastcall sgx_reset_satb( void );
  655                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 68; extern void __fastcall sgx_satb_update( void );
  656                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 69; extern void __fastcall sgx_spr_set( unsigned char num<acc> );
  657                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 70; extern void __fastcall sgx_spr_hide( void );
  658                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 71; extern void __fastcall sgx_spr_show( void );
  659                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 72; extern void __fastcall sgx_spr_x( unsigned int value<acc> );
  660                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 73; extern void __fastcall sgx_spr_y( unsigned int value<acc> );
  661                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 74; extern void __fastcall sgx_spr_pattern( unsigned int vaddr<acc> );
  662                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 75; extern void __fastcall sgx_spr_ctrl( unsigned char mask<_al>, unsigned char value<acc> );
  663                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 76; extern void __fastcall sgx_spr_pal( unsigned char palette<acc> );
  664                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 77; extern void __fastcall sgx_spr_pri( unsigned char priority<acc> );
  665                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 79; extern unsigned int __fastcall sgx_spr_get_x( void );
  666                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 80; extern unsigned int __fastcall sgx_spr_get_y( void );
  667                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 82; #endif // __HUCC__
  668                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 84; #endif // _hucc_old_spr_h
  669                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
  670                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 1; #ifndef _hucc_old_map_h
  671                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 2; #define _hucc_old_map_h
  672                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 4; /****************************************************************************
  673                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 5; ; ***************************************************************************
  674                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 6; ;
  675                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 7; ; hucc-old-map.h
  676                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 8; ;
  677                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 9; ; Based on the original HuC and MagicKit functions by David Michel and the
  678                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 10; ; other original HuC developers.
  679                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 11; ;
  680                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 12; ; Modifications copyright John Brandwood 2024.
  681                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 13; ;
  682                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 14; ; Distributed under the Boost Software License, Version 1.0.
  683                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 15; ; (See accompanying file LICENSE_1_0.txt or copy at
  684                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 16; ;  http://www.boost.org/LICENSE_1_0.txt)
  685                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 17; ;
  686                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 18; ; ***************************************************************************
  687                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 19; ; **************************************************************************/
  688                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 21; // *************
  689                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 22; // Functions in hucc-old-map.asm ...
  690                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 23; // *************
  691                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 25; #ifdef __HUCC__
  692                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 27; #asmdef	HUCC_USES_OLD_MAP 1
  693               0001     	HUCC_USES_OLD_MAP = 1
  694                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 29; extern void __fastcall set_tile_address( unsigned int vram<_di> );
  695                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 30; extern void __fastcall sgx_set_tile_address( unsigned int vram<_di> );
  696                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 32; extern void __fastcall __nop set_tile_data( unsigned char __far *tiles<vdc_tile_bank:vdc_tile_addr>, unsigned char num_tiles<vdc_num_tiles>, unsigned char __far *palette_table<vdc_attr_bank:vdc_attr_addr>, unsigned char tile_type<vdc_tile_type> );
  697                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 33; extern void __fastcall __nop sgx_set_tile_data( unsigned char __far *tiles<sgx_tile_bank:sgx_tile_addr>, unsigned char num_tiles<sgx_num_tiles>, unsigned char __far *palette_table<sgx_attr_bank:sgx_attr_addr>, unsigned char tile_type<sgx_tile_type> );
  698                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 35; extern void __fastcall __nop set_far_tile_data( unsigned char tile_bank<vdc_tile_bank>, unsigned char *tile_addr<vdc_tile_addr>, unsigned char num_tiles<vdc_num_tiles>, unsigned char palette_table_bank<vdc_attr_bank>, unsigned char *palette_table_addr<vdc_attr_addr>, unsigned char tile_type<vdc_tile_type> );
  699                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 36; extern void __fastcall __nop sgx_set_far_tile_data( unsigned char tile_bank<sgx_tile_bank>, unsigned char *tile_addr<sgx_tile_addr>, unsigned char num_tiles<sgx_num_tiles>, unsigned char palette_table_bank<sgx_attr_bank>, unsigned char *palette_table_addr<sgx_attr_addr>, unsigned char tile_type<sgx_tile_type> );
  700                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 38; extern void __fastcall __nop set_map_data( unsigned char __far *map<vdc_map_bank:vdc_map_addr>, unsigned char w<vdc_map_width>, unsigned char h<vdc_map_height> );
  701                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 39; extern void __fastcall __nop sgx_set_map_data( unsigned char __far *map<sgx_map_bank:sgx_map_addr>, unsigned char w<sgx_map_width>, unsigned char h<sgx_map_height> );
  702                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 41; extern void __fastcall __nop set_far_map_data( unsigned char map_bank<vdc_map_bank>, unsigned char *map_addr<vdc_map_addr>, unsigned char w<vdc_map_width>, unsigned char h<vdc_map_height> );
  703                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 42; extern void __fastcall __nop sgx_set_far_map_data( unsigned char map_bank<vdc_map_bank>, unsigned char *map_addr<vdc_map_addr>, unsigned char w<sgx_map_width>, unsigned char h<sgx_map_height> );
  704                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 44; extern void __fastcall load_tile( unsigned int vram<_di> );
  705                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 45; extern void __fastcall sgx_load_tile( unsigned int vram<_di> );
  706                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 47; extern void __fastcall load_map( unsigned char bat_x<_al>, unsigned char bat_y<_ah>, int map_x<_bx>, int map_y<_dx>, unsigned char tiles_w<_cl>, unsigned char tiles_h<_ch> );
  707                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 48; extern void __fastcall sgx_load_map( unsigned char bat_x<_al>, unsigned char bat_y<_ah>, int map_x<_bx>, int map_y<_dx>, unsigned char tiles_w<_cl>, unsigned char tiles_h<_ch> );
  708                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 50; extern unsigned char __fastcall map_get_tile( unsigned char map_x<_bl>, unsigned char map_y<_bh> );
  709                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 51; extern unsigned char __fastcall sgx_map_get_tile( unsigned char map_x<_bl>, unsigned char map_y<_bh> );
  710                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 53; extern void __fastcall map_put_tile( unsigned char map_x<_bl>, unsigned char map_y<_bh>, unsigned char tile<_al> );
  711                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 54; extern void __fastcall sgx_map_put_tile( unsigned char map_x<_bl>, unsigned char map_y<_bh>, unsigned char tile<_al> );
  712                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 56; extern void __fastcall put_tile( unsigned char tile<_bl>, unsigned char bat_x<_al>, unsigned char bat_y<_ah> );
  713                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 57; extern void __fastcall sgx_put_tile( unsigned char tile<_bl>, unsigned char bat_x<_al>, unsigned char bat_y<_ah> );
  714                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 59; // Deprecated functions ...
  715                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 61; extern void __fastcall set_tile_data( unsigned char *tile_ex<_di> );
  716                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 63; extern void __fastcall __nop set_map_pals( unsigned char __far *palette_table<vdc_attr_bank:vdc_attr_addr> );
  717                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 64; extern void __fastcall __nop set_map_tile_type( unsigned char tile_type<vdc_tile_type> );
  718                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 66; extern void __fastcall __nop sgx_set_map_pals( unsigned char __far *palette_table<sgx_attr_bank:sgx_attr_addr> );
  719                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 67; extern void __fastcall __nop sgx_set_map_tile_type( unsigned char tile_type<sgx_tile_type> );
  720                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 69; extern void __fastcall set_map_tile_base( unsigned int vram<_di> );
  721                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 70; extern void __fastcall sgx_set_map_tile_base( unsigned int vram<_di> );
  722                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 72; #endif // __HUCC__
  723                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 74; #endif // _hucc_old_map_h
  724                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
  725                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 1; #ifndef _hucc_old_line_h
  726                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 2; #define _hucc_old_line_h
  727                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 4; /****************************************************************************
  728                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 5; ; ***************************************************************************
  729                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 6; ;
  730                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 7; ; hucc-old-line.h
  731                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 8; ;
  732                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 9; ; Based on the original HuC and MagicKit functions by David Michel and the
  733                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 10; ; other original HuC developers.
  734                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 11; ;
  735                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 12; ; Modifications copyright John Brandwood 2024.
  736                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 13; ;
  737                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 14; ; Distributed under the Boost Software License, Version 1.0.
  738                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 15; ; (See accompanying file LICENSE_1_0.txt or copy at
  739                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 16; ;  http://www.boost.org/LICENSE_1_0.txt)
  740                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 17; ;
  741                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 18; ; ***************************************************************************
  742                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 19; ; **************************************************************************/
  743                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 21; // *************
  744                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 22; // Functions in hucc-old-line.asm ...
  745                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 23; // *************
  746                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 25; #ifdef __HUCC__
  747                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 27; #asmdef	HUCC_USES_OLD_LINE 1
  748               0001     	HUCC_USES_OLD_LINE = 1
  749                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 29; extern void __fastcall gfx_init( unsigned int start_vram_addr<_ax> );
  750                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 30; extern void __fastcall gfx_clear( unsigned int start_vram_addr<_di> );
  751                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 31; extern void __fastcall gfx_plot( unsigned int x<_gfx_x1>, unsigned int y<_gfx_y1>, char color<_gfx_color> );
  752                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 32; extern void __fastcall gfx_line( unsigned int x1<_gfx_x1>, unsigned int y1<_gfx_y1>, unsigned int x2<_gfx_x2>, unsigned int y2<_gfx_y2>, unsigned char color<_gfx_color> );
  753                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 34; #endif // __HUCC__
  754                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 36; #endif // _hucc_old_line_h
  755                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
  756                        		.dbg	line,	"main.c", 1; #include "huc.h"
  757                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
  758                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
  759                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
  760                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
  761                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
  762                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
  763                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
  764                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
  765                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
  766                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
  767                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
  768                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
  769                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
  770                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
  771                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
  772                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
  773                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
  774                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
  775                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
  776                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
  777                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
  778                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
  779                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
  780                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
  781                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
  782                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
  783                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
  784                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
  785                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
  786                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
  787                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
  788                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
  789                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
  790                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
  791                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
  792                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
  793                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
  794                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
  795                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
  796                        		.dbg	line,	"main.c", 2; #include "hucc-scroll.h"
  797                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 1; #ifndef _hucc_scroll_h
  798                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 2; #define _hucc_scroll_h
  799                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 4; /****************************************************************************
  800                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 5; ; ***************************************************************************
  801                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 6; ;
  802                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 7; ; hucc-scroll.h
  803                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 8; ;
  804                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 9; ; Routines for a fast split-screen scrolling system.
  805                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 10; ;
  806                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 11; ; Copyright John Brandwood 2024.
  807                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 12; ;
  808                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 13; ; Distributed under the Boost Software License, Version 1.0.
  809                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
  810                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
  811                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 16; ;
  812                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 17; ; ***************************************************************************
  813                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 18; ; ***************************************************************************
  814                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 19; ;
  815                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 20; ; The maximum number of splits for each screen layer is set in your project's
  816                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 21; ; "hucc-config.inc" file, with the library having a limit of 128-per-layer.
  817                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 22; ;
  818                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 23; ; Your first active split must be defined to start at screen line 0, and then
  819                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 24; ; the rest of the active splits must be in increasing line order to match the
  820                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 25; ; way that the PC Engine displays the output image.
  821                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 26; ;
  822                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 27; ; You can have disabled splits interleaved with your active splits.
  823                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 28; ;
  824                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 29; ; Splits that are normally disabled can be used to create full screen effects
  825                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 30; ; such as bouncing the screen up and down by adding blank areas at the top or
  826                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 31; ; bottom of the screen, and then rapidly changing the height of those areas.
  827                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 32; ;
  828                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 33; ; ***************************************************************************
  829                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 34; ; **************************************************************************/
  830                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 36; // *************
  831                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 37; // VDC bits for display_flags ...
  832                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 38; // *************
  833                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 40; #ifndef BKG_OFF
  834                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 41; #define BKG_OFF 0x00
  835                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 42; #endif
  836                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 44; #ifndef SPR_OFF
  837                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 45; #define SPR_OFF 0x00
  838                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 46; #endif
  839                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 48; #ifndef BKG_ON
  840                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 49; #define BKG_ON 0x80
  841                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 50; #endif
  842                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 52; #ifndef SPR_ON
  843                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 53; #define SPR_ON 0x40
  844                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 54; #endif
  845                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 56; // *************
  846                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 57; // Functions in hucc-scroll.asm ...
  847                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 58; // *************
  848                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 60; #ifdef __HUCC__
  849                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 62; #asmdef	HUCC_USES_NEW_SCROLL 1
  850               0001     	HUCC_USES_NEW_SCROLL = 1
  851                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 64; extern void __fastcall scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
  852                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 65; extern void __fastcall sgx_scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
  853                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 67; extern void __fastcall disable_split( unsigned char index<acc> );
  854                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 68; extern void __fastcall sgx_disable_split( unsigned char index<acc> );
  855                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 70; extern void __fastcall __macro disable_all_splits( void );
  856                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 71; extern void __fastcall __macro sgx_disable_all_splits( void );
  857                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 73; #asm
  858                        		.dbg	clear
  859                        			.macro	_disable_all_splits
  860                        			ldy	#HUCC_PCE_SPLITS - 1
  861                        	!loop:		tya
  862                        			call	_disable_split.1
  863                        			dey
  864                        			bpl	!loop-
  865                        			.endm
  866                        			.macro	_sgx_disable_all_splits
  867                        			ldy	#HUCC_SGX_SPLITS - 1
  868                        	!loop:		tya
  869                        			call	_sgx_disable_split.1
  870                        			dey
  871                        			bpl	!loop-
  872                        			.endm
  873                        	
  874                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 89; #endasm
  875                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 91; #endif // __HUCC__
  876                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 93; #endif // _hucc_scroll_h
  877                        		.dbg	line,	"main.c", 3; #include "hucc-chrmap.h"
  878                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 1; #ifndef _hucc_chrmap_h
  879                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 2; #define _hucc_chrmap_h
  880                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 4; /****************************************************************************
  881                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 5; ; ***************************************************************************
  882                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 6; ;
  883                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 7; ; hucc-chrmap.h
  884                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 8; ;
  885                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 9; ; A simple map system based on 8x8 characters (aka "tiles") in BAT format.
  886                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 10; ;
  887                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 11; ; Copyright John Brandwood 2025.
  888                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 12; ;
  889                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
  890                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
  891                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
  892                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 16; ;
  893                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 17; ; ***************************************************************************
  894                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 18; ; ***************************************************************************
  895                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 19; ;
  896                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 20; ; The maximum X and Y size for chrmaps is 256 characters (2048 pixels).
  897                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 21; ;
  898                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 22; ; The maximum total size for a chrmap is 16KBytes, which allows for maps up
  899                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 23; ; to 256x32 tiles (2048x256 pixels).
  900                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 24; ;
  901                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 25; ; ***************************************************************************
  902                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 26; ; **************************************************************************/
  903                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 28; // *************
  904                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 29; // This code extends the blkmap library ...
  905                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 30; // *************
  906                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 32; #include "hucc-blkmap.h"
  907                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 1; #ifndef _hucc_blkmap_h
  908                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 2; #define _hucc_blkmap_h
  909                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 4; /****************************************************************************
  910                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 5; ; ***************************************************************************
  911                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 6; ;
  912                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 7; ; hucc-blkmap.h
  913                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 8; ;
  914                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 9; ; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
  915                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 10; ;
  916                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 11; ; Copyright John Brandwood 2025.
  917                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 12; ;
  918                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
  919                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
  920                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
  921                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 16; ;
  922                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 17; ; ***************************************************************************
  923                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 18; ; ***************************************************************************
  924                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 19; ;
  925                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 20; ; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
  926                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 21; ;
  927                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 22; ; The maximum total size for a blkmap is 16KBytes, which allows for maps up
  928                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 23; ; to 128x128 blocks (2048x2048 pixels).
  929                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 24; ;
  930                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 25; ; Huge multi-screen blkmaps are also supported (optionally).
  931                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 26; ;
  932                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 27; ; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
  933                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 28; ;
  934                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 29; ; The maximum total size for a multi-screen map is 8KBytes, which allows for
  935                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 30; ; a total of 1024 screens.
  936                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 31; ;
  937                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 32; ; ***************************************************************************
  938                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 33; ; **************************************************************************/
  939                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 35; // *************
  940                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 36; // Functions in blkmap.asm ...
  941                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 37; // *************
  942                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 39; #ifdef __HUCC__
  943                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 41; #asmdef	HUCC_USES_BLKMAP 1
  944               0001     	HUCC_USES_BLKMAP = 1
  945                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 43; // Current top-left of drawn map in pixels.
  946                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 44; extern unsigned int   vdc_map_pxl_x;
  947                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 45; extern unsigned int   vdc_map_pxl_y;
  948                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 47; // Width and height to draw/scroll in characters (not tiles).
  949                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 48; extern unsigned char  vdc_map_draw_w;
  950                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 49; extern unsigned char  vdc_map_draw_h;
  951                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 51; // Width of map (or multi-screen BAT) in tiles.
  952                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 52; extern unsigned char  vdc_map_line_w;
  953                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 54; // Width of map in screens (if multi-screen map).
  954                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 55; extern unsigned char  vdc_map_scrn_w;
  955                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 57; // Extra information returned by get_map_block() and sgx_get_map_block(),
  956                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 58; // which are the collision flags and the mask/overlay sprite for the BLK.
  957                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 59; extern unsigned char  map_blk_flag;
  958                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 60; extern unsigned char  map_blk_mask;
  959                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 62; extern unsigned char  vdc_scr_bank;
  960                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 63; extern unsigned char *vdc_scr_addr;
  961                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 65; extern unsigned char  vdc_map_bank;
  962                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 66; extern unsigned char *vdc_map_addr;
  963                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 68; extern unsigned char  vdc_blk_bank;
  964                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 69; extern unsigned char *vdc_blk_addr;
  965                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 71; extern unsigned char  vdc_tbl_bank;
  966                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 72; extern unsigned char *vdc_tbl_addr;
  967                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 74; extern void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blocks<_al> );
  968                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 75; extern void __fastcall __macro set_blkmap( unsigned char __far *blk_map<vdc_map_bank:vdc_map_addr>, unsigned char blocks_w<vdc_map_line_w> );
  969                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 76; extern void __fastcall __macro set_multimap( unsigned char __far *multi_map<vdc_scr_bank:vdc_scr_addr>, unsigned char screens_w<vdc_map_scrn_w> );
  970                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 78; extern void __fastcall draw_map( void );
  971                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 79; extern void __fastcall scroll_map( void );
  972                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 81; extern void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
  973                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 83; extern unsigned char __fastcall get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
  974                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 85; #asm
  975                        		.dbg	clear
  976                        			.macro	_set_blkmap.2
  977                        			stz	vdc_scr_bank
  978                        			.endm
  979                        			.macro	_set_multimap.2
  980                        			lda	vdc_bat_width
  981                        			lsr	a
  982                        			sta	vdc_map_line_w
  983                        			.endm
  984                        			.macro	SCREEN
  985                        			db	(((\1) & $1FFF) | $6000) >> 8, bank(\1)
  986                        			db	(((\2) & $1FFF) | $4000) >> 8, bank(\2)
  987                        			db	(((\3) & $1FFF) | $6000) >> 8, bank(\3)
  988                        			dw	(\4)
  989                        			.endm
  990                        	
  991                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 102; #endasm
  992                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 104; #ifdef _SGX
  993                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 106; // Current top-left of drawn map in pixels.
  994                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 107; extern unsigned int   sgx_map_pxl_x;
  995                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 108; extern unsigned int   sgx_map_pxl_y;
  996                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 110; // Width and height to draw/scroll in characters (not tiles).
  997                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 111; extern unsigned char  sgx_map_draw_w;
  998                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 112; extern unsigned char  sgx_map_draw_h;
  999                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 114; // Width of map (or multi-screen BAT) in tiles.
 1000                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 115; extern unsigned char  sgx_map_line_w;
 1001                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 117; // Width of map in screens (if multi-screen map).
 1002                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 118; extern unsigned char  sgx_map_scrn_w;
 1003                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 120; extern unsigned char  sgx_scr_bank;
 1004                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 121; extern unsigned char *sgx_scr_addr;
 1005                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 123; extern unsigned char  sgx_map_bank;
 1006                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 124; extern unsigned char *sgx_map_addr;
 1007                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 126; extern unsigned char  sgx_blk_bank;
 1008                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 127; extern unsigned char *sgx_blk_addr;
 1009                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 129; extern unsigned char  sgx_tbl_bank;
 1010                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 130; extern unsigned char *sgx_tbl_addr;
 1011                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 132; extern void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blocks<_al> );
 1012                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 133; extern void __fastcall __macro sgx_set_blkmap( unsigned char __far *blk_map<sgx_map_bank:sgx_map_addr>, unsigned char blocks_w<sgx_map_line_w> );
 1013                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 134; extern void __fastcall __macro sgx_set_multimap( unsigned char __far *multi_map<sgx_scr_bank:sgx_scr_addr>, unsigned char screens_w<sgx_map_scrn_w> );
 1014                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 136; extern void __fastcall sgx_draw_map( void );
 1015                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 137; extern void __fastcall sgx_scroll_map( void );
 1016                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 139; extern void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1017                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 141; extern unsigned char __fastcall sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 1018                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 143; #asm
 1019                        		.dbg	clear
 1020                        			.macro	_sgx_set_blkmap.2
 1021                        			stz	sgx_scr_bank
 1022                        			.endm
 1023                        			.macro	_sgx_set_multimap.2
 1024                        			lda	sgx_bat_width
 1025                        			lsr	a
 1026                        			sta	sgx_map_line_w
 1027                        			.endm
 1028                        	
 1029                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 153; #endasm
 1030                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 155; #endif
 1031                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 157; #endif // __HUCC__
 1032                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 159; #endif // _hucc_blkmap_h
 1033                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 34; // *************
 1034                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 35; // Functions in chrmap.asm ...
 1035                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 36; // *************
 1036                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 38; #ifdef __HUCC__
 1037                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 40; #asmdef	HUCC_USES_CHRMAP 1
 1038               0001     	HUCC_USES_CHRMAP = 1
 1039                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 42; extern void __fastcall __nop set_chrmap( unsigned char __far *chrmap<vdc_map_bank:vdc_map_addr>, unsigned char tiles_w<vdc_map_line_w> );
 1040                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 44; extern void __fastcall draw_bat( void );
 1041                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 45; extern void __fastcall scroll_bat( void );
 1042                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 47; extern void __fastcall blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1043                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 49; #ifdef _SGX
 1044                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 51; extern void __fastcall __nop sgx_set_chrmap( unsigned char __far *chrmap<sgx_map_bank:sgx_map_addr>, unsigned char tiles_w<sgx_map_line_w> );
 1045                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 53; extern void __fastcall sgx_draw_bat( void );
 1046                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 54; extern void __fastcall sgx_scroll_bat( void );
 1047                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 56; extern void __fastcall sgx_blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1048                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 58; #endif
 1049                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 60; #endif // __HUCC__
 1050                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 62; #endif // _hucc_chrmap_h
 1051                        		.dbg	line,	"main.c", 4; #include "hucc-blkmap.h"
 1052                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 1; #ifndef _hucc_blkmap_h
 1053                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 2; #define _hucc_blkmap_h
 1054                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 4; /****************************************************************************
 1055                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 5; ; ***************************************************************************
 1056                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 6; ;
 1057                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 7; ; hucc-blkmap.h
 1058                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 8; ;
 1059                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 9; ; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
 1060                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 10; ;
 1061                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 11; ; Copyright John Brandwood 2025.
 1062                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 12; ;
 1063                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 1064                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 1065                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 1066                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 16; ;
 1067                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 17; ; ***************************************************************************
 1068                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 18; ; ***************************************************************************
 1069                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 19; ;
 1070                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 20; ; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
 1071                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 21; ;
 1072                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 22; ; The maximum total size for a blkmap is 16KBytes, which allows for maps up
 1073                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 23; ; to 128x128 blocks (2048x2048 pixels).
 1074                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 24; ;
 1075                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 25; ; Huge multi-screen blkmaps are also supported (optionally).
 1076                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 26; ;
 1077                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 27; ; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
 1078                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 28; ;
 1079                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 29; ; The maximum total size for a multi-screen map is 8KBytes, which allows for
 1080                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 30; ; a total of 1024 screens.
 1081                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 31; ;
 1082                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 32; ; ***************************************************************************
 1083                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 33; ; **************************************************************************/
 1084                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 35; // *************
 1085                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 36; // Functions in blkmap.asm ...
 1086                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 37; // *************
 1087                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 39; #ifdef __HUCC__
 1088                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 41; #asmdef	HUCC_USES_BLKMAP 1
 1089                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 43; // Current top-left of drawn map in pixels.
 1090                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 44; extern unsigned int   vdc_map_pxl_x;
 1091                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 45; extern unsigned int   vdc_map_pxl_y;
 1092                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 47; // Width and height to draw/scroll in characters (not tiles).
 1093                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 48; extern unsigned char  vdc_map_draw_w;
 1094                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 49; extern unsigned char  vdc_map_draw_h;
 1095                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 51; // Width of map (or multi-screen BAT) in tiles.
 1096                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 52; extern unsigned char  vdc_map_line_w;
 1097                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 54; // Width of map in screens (if multi-screen map).
 1098                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 55; extern unsigned char  vdc_map_scrn_w;
 1099                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 57; // Extra information returned by get_map_block() and sgx_get_map_block(),
 1100                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 58; // which are the collision flags and the mask/overlay sprite for the BLK.
 1101                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 59; extern unsigned char  map_blk_flag;
 1102                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 60; extern unsigned char  map_blk_mask;
 1103                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 62; extern unsigned char  vdc_scr_bank;
 1104                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 63; extern unsigned char *vdc_scr_addr;
 1105                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 65; extern unsigned char  vdc_map_bank;
 1106                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 66; extern unsigned char *vdc_map_addr;
 1107                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 68; extern unsigned char  vdc_blk_bank;
 1108                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 69; extern unsigned char *vdc_blk_addr;
 1109                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 71; extern unsigned char  vdc_tbl_bank;
 1110                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 72; extern unsigned char *vdc_tbl_addr;
 1111                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 74; extern void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blocks<_al> );
 1112                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 75; extern void __fastcall __macro set_blkmap( unsigned char __far *blk_map<vdc_map_bank:vdc_map_addr>, unsigned char blocks_w<vdc_map_line_w> );
 1113                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 76; extern void __fastcall __macro set_multimap( unsigned char __far *multi_map<vdc_scr_bank:vdc_scr_addr>, unsigned char screens_w<vdc_map_scrn_w> );
 1114                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 78; extern void __fastcall draw_map( void );
 1115                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 79; extern void __fastcall scroll_map( void );
 1116                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 81; extern void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1117                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 83; extern unsigned char __fastcall get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 1118                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 85; #asm
 1119                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 86; .macro	_set_blkmap.2
 1120                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 87; stz	vdc_scr_bank
 1121                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 88; .endm
 1122                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 90; .macro	_set_multimap.2
 1123                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 91; lda	vdc_bat_width
 1124                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 92; lsr	a
 1125                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 93; sta	vdc_map_line_w
 1126                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 94; .endm
 1127                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 96; .macro	SCREEN
 1128                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 97; db	(((\1) & $1FFF) | $6000) >> 8, bank(\1)
 1129                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 98; db	(((\2) & $1FFF) | $4000) >> 8, bank(\2)
 1130                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 99; db	(((\3) & $1FFF) | $6000) >> 8, bank(\3)
 1131                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 100; dw	(\4)
 1132                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 101; .endm
 1133                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 102; #endasm
 1134                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 104; #ifdef _SGX
 1135                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 106; // Current top-left of drawn map in pixels.
 1136                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 107; extern unsigned int   sgx_map_pxl_x;
 1137                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 108; extern unsigned int   sgx_map_pxl_y;
 1138                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 110; // Width and height to draw/scroll in characters (not tiles).
 1139                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 111; extern unsigned char  sgx_map_draw_w;
 1140                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 112; extern unsigned char  sgx_map_draw_h;
 1141                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 114; // Width of map (or multi-screen BAT) in tiles.
 1142                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 115; extern unsigned char  sgx_map_line_w;
 1143                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 117; // Width of map in screens (if multi-screen map).
 1144                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 118; extern unsigned char  sgx_map_scrn_w;
 1145                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 120; extern unsigned char  sgx_scr_bank;
 1146                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 121; extern unsigned char *sgx_scr_addr;
 1147                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 123; extern unsigned char  sgx_map_bank;
 1148                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 124; extern unsigned char *sgx_map_addr;
 1149                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 126; extern unsigned char  sgx_blk_bank;
 1150                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 127; extern unsigned char *sgx_blk_addr;
 1151                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 129; extern unsigned char  sgx_tbl_bank;
 1152                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 130; extern unsigned char *sgx_tbl_addr;
 1153                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 132; extern void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blocks<_al> );
 1154                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 133; extern void __fastcall __macro sgx_set_blkmap( unsigned char __far *blk_map<sgx_map_bank:sgx_map_addr>, unsigned char blocks_w<sgx_map_line_w> );
 1155                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 134; extern void __fastcall __macro sgx_set_multimap( unsigned char __far *multi_map<sgx_scr_bank:sgx_scr_addr>, unsigned char screens_w<sgx_map_scrn_w> );
 1156                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 136; extern void __fastcall sgx_draw_map( void );
 1157                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 137; extern void __fastcall sgx_scroll_map( void );
 1158                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 139; extern void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1159                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 141; extern unsigned char __fastcall sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 1160                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 143; #asm
 1161                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 144; .macro	_sgx_set_blkmap.2
 1162                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 145; stz	sgx_scr_bank
 1163                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 146; .endm
 1164                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 148; .macro	_sgx_set_multimap.2
 1165                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 149; lda	sgx_bat_width
 1166                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 150; lsr	a
 1167                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 151; sta	sgx_map_line_w
 1168                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 152; .endm
 1169                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 153; #endasm
 1170                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 155; #endif
 1171                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 157; #endif // __HUCC__
 1172                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 159; #endif // _hucc_blkmap_h
 1173                        		.dbg	line,	"main.c", 9; #include "include/constants.c"
 1174                        		.dbg	line,	"include\constants.c", 1; //*****************************************************************************//
 1175                        		.dbg	line,	"include\constants.c", 2; //                                                                             //
 1176                        		.dbg	line,	"include\constants.c", 3; //                                SYSTEM CONSTANTS                             //
 1177                        		.dbg	line,	"include\constants.c", 4; //                                                                             //
 1178                        		.dbg	line,	"include\constants.c", 5; //*****************************************************************************//
 1179                        		.dbg	line,	"include\constants.c", 7; #define FALSE 0
 1180                        		.dbg	line,	"include\constants.c", 8; #define TRUE  1
 1181                        		.dbg	line,	"include\constants.c", 10; #define YES   1
 1182                        		.dbg	line,	"include\constants.c", 11; #define NO    2
 1183                        		.dbg	line,	"include\constants.c", 13; #define JOYPAD_1 0
 1184                        		.dbg	line,	"include\constants.c", 14; #define JOYPAD_2 1
 1185                        		.dbg	line,	"include\constants.c", 16; #define BAT_SIZE_W 2048 // IN PIXELS
 1186                        		.dbg	line,	"include\constants.c", 17; #define BAT_SIZE_H 256  // IN PIXELS
 1187                        		.dbg	line,	"include\constants.c", 19; #define JOY_DIR_PRESSED (JOY_DOWN | JOY_UP | JOY_RIGHT | JOY_LEFT)
 1188                        		.dbg	line,	"include\constants.c", 22; #define TILES_1   16
 1189                        		.dbg	line,	"include\constants.c", 23; #define TILES_2   32
 1190                        		.dbg	line,	"include\constants.c", 24; #define TILES_3   48
 1191                        		.dbg	line,	"include\constants.c", 25; #define TILES_4   64
 1192                        		.dbg	line,	"include\constants.c", 26; #define TILES_8   128
 1193                        		.dbg	line,	"include\constants.c", 27; #define TILES_16  256
 1194                        		.dbg	line,	"include\constants.c", 28; #define TILES_32  512
 1195                        		.dbg	line,	"include\constants.c", 29; #define TILES_48  768
 1196                        		.dbg	line,	"include\constants.c", 30; #define TILES_64  1024
 1197                        		.dbg	line,	"include\constants.c", 31; #define TILES_80  1280
 1198                        		.dbg	line,	"include\constants.c", 32; #define TILES_96  1536
 1199                        		.dbg	line,	"include\constants.c", 33; #define TILES_112 1792
 1200                        		.dbg	line,	"include\constants.c", 34; #define TILES_128 2048
 1201                        		.dbg	line,	"include\constants.c", 35; #define TILES_144 2304
 1202                        		.dbg	line,	"include\constants.c", 36; #define TILES_160 2560
 1203                        		.dbg	line,	"include\constants.c", 37; #define TILES_176 2816
 1204                        		.dbg	line,	"include\constants.c", 38; #define TILES_192 3072
 1205                        		.dbg	line,	"include\constants.c", 39; #define TILES_208 3328
 1206                        		.dbg	line,	"include\constants.c", 40; #define TILES_224 3584+256
 1207                        		.dbg	line,	"include\constants.c", 43; #define OFFSET_PLAYER_WALK_1     256
 1208                        		.dbg	line,	"include\constants.c", 44; #define OFFSET_PLAYER_WALK_2     512
 1209                        		.dbg	line,	"include\constants.c", 45; #define OFFSET_PLAYER_WALK_3     768
 1210                        		.dbg	line,	"include\constants.c", 46; #define OFFSET_PLAYER_WALK_4     1024
 1211                        		.dbg	line,	"include\constants.c", 47; #define OFFSET_PLAYER_WALK_5     1280
 1212                        		.dbg	line,	"include\constants.c", 48; #define OFFSET_PLAYER_WALK_6     1536
 1213                        		.dbg	line,	"include\constants.c", 55; #define SEQUENCE_TITLE      0
 1214                        		.dbg	line,	"include\constants.c", 56; #define SEQUENCE_INTRO      1
 1215                        		.dbg	line,	"include\constants.c", 57; #define SEQUENCE_GAME       2
 1216                        		.dbg	line,	"include\constants.c", 60; #define CAMERA_RECENTER_VELOCITY    4
 1217                        		.dbg	line,	"include\constants.c", 65; //-----------------------------------------------------------------------------//
 1218                        		.dbg	line,	"include\constants.c", 66; //                                                                             //
 1219                        		.dbg	line,	"include\constants.c", 67; //                                   PLAYER                                    //
 1220                        		.dbg	line,	"include\constants.c", 68; //                                                                             //
 1221                        		.dbg	line,	"include\constants.c", 69; //-----------------------------------------------------------------------------//
 1222                        		.dbg	line,	"include\constants.c", 71; #define AXIS_RIGHT          0
 1223                        		.dbg	line,	"include\constants.c", 72; #define AXIS_LEFT           1
 1224                        		.dbg	line,	"include\constants.c", 73; #define AXIS_UP             2
 1225                        		.dbg	line,	"include\constants.c", 74; #define AXIS_DOWN           3
 1226                        		.dbg	line,	"include\constants.c", 78; #define STATE_IDLE          0
 1227                        		.dbg	line,	"include\constants.c", 79; #define STATE_WALK          1
 1228                        		.dbg	line,	"include\constants.c", 80; #define STATE_PUNCH         2
 1229                        		.dbg	line,	"include\constants.c", 81; #define STATE_JUMP          4
 1230                        		.dbg	line,	"include\constants.c", 82; #define STATE_JUMP_RIGHT    5
 1231                        		.dbg	line,	"include\constants.c", 83; #define STATE_JUMP_LEFT     6
 1232                        		.dbg	line,	"include\constants.c", 84; #define STATE_CROUCH        7
 1233                        		.dbg	line,	"include\constants.c", 85; #define STATE_CROUCH_PUNCH  8
 1234                        		.dbg	line,	"include\constants.c", 86; #define STATE_FALL          9
 1235                        		.dbg	line,	"include\constants.c", 87; #define STATE_HANG          10
 1236                        		.dbg	line,	"include\constants.c", 88; #define STATE_CLIMB_UP      11
 1237                        		.dbg	line,	"include\constants.c", 89; #define STATE_CLIMB_DOWN    12
 1238                        		.dbg	line,	"include\constants.c", 90; #define STATE_JUMP_LADDER   13
 1239                        		.dbg	line,	"include\constants.c", 94; #define PLAYER_VRAM_ADR     0x4800
 1240                        		.dbg	line,	"include\constants.c", 96; #define PLAYER_BASE_Y_POS   128
 1241                        		.dbg	line,	"include\constants.c", 101; //-----------------------------------------------------------------------------//
 1242                        		.dbg	line,	"include\constants.c", 102; //                                                                             //
 1243                        		.dbg	line,	"include\constants.c", 103; //                                  COLLISIONS                                 //
 1244                        		.dbg	line,	"include\constants.c", 104; //                                                                             //
 1245                        		.dbg	line,	"include\constants.c", 105; //-----------------------------------------------------------------------------//
 1246                        		.dbg	line,	"include\constants.c", 107; #define TILE_EMPTY          0
 1247                        		.dbg	line,	"include\constants.c", 108; #define TILE_BG             1
 1248                        		.dbg	line,	"include\constants.c", 109; #define TILE_LADDER         2
 1249                        		.dbg	line,	"include\constants.c", 114; //-----------------------------------------------------------------------------//
 1250                        		.dbg	line,	"include\constants.c", 115; //                                                                             //
 1251                        		.dbg	line,	"include\constants.c", 116; //                                     HUD                                     //
 1252                        		.dbg	line,	"include\constants.c", 117; //                                                                             //
 1253                        		.dbg	line,	"include\constants.c", 118; //-----------------------------------------------------------------------------//
 1254                        		.dbg	line,	"include\constants.c", 120; #define LIFEBAR_1_VRAM_ADR      0x1000
 1255                        		.dbg	line,	"include\constants.c", 121; #define LIFEBAR_2_VRAM_ADR      LIFEBAR_1_VRAM_ADR+TILES_2
 1256                        		.dbg	line,	"include\constants.c", 122; #define LIFEBAR_3_VRAM_ADR      LIFEBAR_2_VRAM_ADR+TILES_2
 1257                        		.dbg	line,	"include\constants.c", 123; #define LIFEBAR_4_VRAM_ADR      LIFEBAR_3_VRAM_ADR+TILES_2
 1258                        		.dbg	line,	"include\constants.c", 124; #define LIFEBAR_5_VRAM_ADR      LIFEBAR_4_VRAM_ADR+TILES_2
 1259                        		.dbg	line,	"include\constants.c", 126; #define WEAPON_VRAM_ADR         LIFEBAR_5_VRAM_ADR+TILES_2
 1260                        		.dbg	line,	"include\constants.c", 127; #define ARMOR_VRAM_ADR          WEAPON_VRAM_ADR+TILES_4
 1261                        		.dbg	line,	"include\constants.c", 132; //-----------------------------------------------------------------------------//
 1262                        		.dbg	line,	"include\constants.c", 133; //                                                                             //
 1263                        		.dbg	line,	"include\constants.c", 134; //                                    LEVELS                                   //
 1264                        		.dbg	line,	"include\constants.c", 135; //                                                                             //
 1265                        		.dbg	line,	"include\constants.c", 136; //-----------------------------------------------------------------------------//
 1266                        		.dbg	line,	"include\constants.c", 138; #define LV1_WALL_VRAM_ADR       0x1000
 1267                        		.dbg	line,	"include\constants.c", 139; #define LV1_DOOR_VRAM_ADR       LV1_WALL_VRAM_ADR+256
 1268                        		.dbg	line,	"main.c", 10; #include "include/variables.c"
 1269                        		.dbg	line,	"include\variables.c", 1; #include "huc.h"
 1270                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
 1271                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
 1272                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
 1273                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
 1274                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
 1275                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
 1276                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
 1277                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
 1278                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
 1279                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
 1280                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
 1281                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 1282                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 1283                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 1284                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
 1285                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
 1286                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
 1287                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
 1288                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
 1289                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
 1290                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
 1291                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
 1292                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
 1293                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
 1294                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
 1295                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
 1296                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
 1297                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
 1298                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
 1299                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
 1300                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
 1301                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
 1302                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
 1303                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
 1304                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
 1305                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
 1306                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
 1307                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
 1308                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
 1309                        		.dbg	line,	"include\variables.c", 2; #include "hucc-scroll.h"
 1310                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 1; #ifndef _hucc_scroll_h
 1311                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 2; #define _hucc_scroll_h
 1312                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 4; /****************************************************************************
 1313                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 5; ; ***************************************************************************
 1314                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 6; ;
 1315                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 7; ; hucc-scroll.h
 1316                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 8; ;
 1317                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 9; ; Routines for a fast split-screen scrolling system.
 1318                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 10; ;
 1319                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 11; ; Copyright John Brandwood 2024.
 1320                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 12; ;
 1321                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 1322                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 1323                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 1324                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 16; ;
 1325                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 17; ; ***************************************************************************
 1326                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 18; ; ***************************************************************************
 1327                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 19; ;
 1328                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 20; ; The maximum number of splits for each screen layer is set in your project's
 1329                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 21; ; "hucc-config.inc" file, with the library having a limit of 128-per-layer.
 1330                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 22; ;
 1331                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 23; ; Your first active split must be defined to start at screen line 0, and then
 1332                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 24; ; the rest of the active splits must be in increasing line order to match the
 1333                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 25; ; way that the PC Engine displays the output image.
 1334                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 26; ;
 1335                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 27; ; You can have disabled splits interleaved with your active splits.
 1336                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 28; ;
 1337                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 29; ; Splits that are normally disabled can be used to create full screen effects
 1338                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 30; ; such as bouncing the screen up and down by adding blank areas at the top or
 1339                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 31; ; bottom of the screen, and then rapidly changing the height of those areas.
 1340                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 32; ;
 1341                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 33; ; ***************************************************************************
 1342                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 34; ; **************************************************************************/
 1343                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 36; // *************
 1344                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 37; // VDC bits for display_flags ...
 1345                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 38; // *************
 1346                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 40; #ifndef BKG_OFF
 1347                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 41; #define BKG_OFF 0x00
 1348                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 42; #endif
 1349                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 44; #ifndef SPR_OFF
 1350                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 45; #define SPR_OFF 0x00
 1351                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 46; #endif
 1352                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 48; #ifndef BKG_ON
 1353                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 49; #define BKG_ON 0x80
 1354                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 50; #endif
 1355                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 52; #ifndef SPR_ON
 1356                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 53; #define SPR_ON 0x40
 1357                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 54; #endif
 1358                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 56; // *************
 1359                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 57; // Functions in hucc-scroll.asm ...
 1360                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 58; // *************
 1361                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 60; #ifdef __HUCC__
 1362                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 62; #asmdef	HUCC_USES_NEW_SCROLL 1
 1363                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 64; extern void __fastcall scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
 1364                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 65; extern void __fastcall sgx_scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
 1365                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 67; extern void __fastcall disable_split( unsigned char index<acc> );
 1366                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 68; extern void __fastcall sgx_disable_split( unsigned char index<acc> );
 1367                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 70; extern void __fastcall __macro disable_all_splits( void );
 1368                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 71; extern void __fastcall __macro sgx_disable_all_splits( void );
 1369                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 73; #asm
 1370                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 74; .macro	_disable_all_splits
 1371                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 75; ldy	#HUCC_PCE_SPLITS - 1
 1372                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 76; !loop:		tya
 1373                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 77; call	_disable_split.1
 1374                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 78; dey
 1375                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 79; bpl	!loop-
 1376                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 80; .endm
 1377                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 82; .macro	_sgx_disable_all_splits
 1378                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 83; ldy	#HUCC_SGX_SPLITS - 1
 1379                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 84; !loop:		tya
 1380                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 85; call	_sgx_disable_split.1
 1381                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 86; dey
 1382                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 87; bpl	!loop-
 1383                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 88; .endm
 1384                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 89; #endasm
 1385                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 91; #endif // __HUCC__
 1386                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 93; #endif // _hucc_scroll_h
 1387                        		.dbg	line,	"include\variables.c", 3; #include "hucc-chrmap.h"
 1388                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 1; #ifndef _hucc_chrmap_h
 1389                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 2; #define _hucc_chrmap_h
 1390                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 4; /****************************************************************************
 1391                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 5; ; ***************************************************************************
 1392                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 6; ;
 1393                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 7; ; hucc-chrmap.h
 1394                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 8; ;
 1395                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 9; ; A simple map system based on 8x8 characters (aka "tiles") in BAT format.
 1396                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 10; ;
 1397                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 11; ; Copyright John Brandwood 2025.
 1398                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 12; ;
 1399                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 1400                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 1401                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 1402                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 16; ;
 1403                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 17; ; ***************************************************************************
 1404                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 18; ; ***************************************************************************
 1405                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 19; ;
 1406                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 20; ; The maximum X and Y size for chrmaps is 256 characters (2048 pixels).
 1407                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 21; ;
 1408                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 22; ; The maximum total size for a chrmap is 16KBytes, which allows for maps up
 1409                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 23; ; to 256x32 tiles (2048x256 pixels).
 1410                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 24; ;
 1411                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 25; ; ***************************************************************************
 1412                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 26; ; **************************************************************************/
 1413                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 28; // *************
 1414                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 29; // This code extends the blkmap library ...
 1415                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 30; // *************
 1416                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 32; #include "hucc-blkmap.h"
 1417                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 34; // *************
 1418                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 35; // Functions in chrmap.asm ...
 1419                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 36; // *************
 1420                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 38; #ifdef __HUCC__
 1421                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 40; #asmdef	HUCC_USES_CHRMAP 1
 1422                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 42; extern void __fastcall __nop set_chrmap( unsigned char __far *chrmap<vdc_map_bank:vdc_map_addr>, unsigned char tiles_w<vdc_map_line_w> );
 1423                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 44; extern void __fastcall draw_bat( void );
 1424                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 45; extern void __fastcall scroll_bat( void );
 1425                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 47; extern void __fastcall blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1426                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 49; #ifdef _SGX
 1427                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 51; extern void __fastcall __nop sgx_set_chrmap( unsigned char __far *chrmap<sgx_map_bank:sgx_map_addr>, unsigned char tiles_w<sgx_map_line_w> );
 1428                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 53; extern void __fastcall sgx_draw_bat( void );
 1429                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 54; extern void __fastcall sgx_scroll_bat( void );
 1430                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 56; extern void __fastcall sgx_blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1431                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 58; #endif
 1432                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 60; #endif // __HUCC__
 1433                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 62; #endif // _hucc_chrmap_h
 1434                        		.dbg	line,	"include\variables.c", 4; #include "hucc-blkmap.h"
 1435                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 1; #ifndef _hucc_blkmap_h
 1436                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 2; #define _hucc_blkmap_h
 1437                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 4; /****************************************************************************
 1438                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 5; ; ***************************************************************************
 1439                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 6; ;
 1440                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 7; ; hucc-blkmap.h
 1441                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 8; ;
 1442                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 9; ; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
 1443                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 10; ;
 1444                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 11; ; Copyright John Brandwood 2025.
 1445                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 12; ;
 1446                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 1447                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 1448                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 1449                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 16; ;
 1450                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 17; ; ***************************************************************************
 1451                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 18; ; ***************************************************************************
 1452                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 19; ;
 1453                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 20; ; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
 1454                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 21; ;
 1455                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 22; ; The maximum total size for a blkmap is 16KBytes, which allows for maps up
 1456                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 23; ; to 128x128 blocks (2048x2048 pixels).
 1457                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 24; ;
 1458                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 25; ; Huge multi-screen blkmaps are also supported (optionally).
 1459                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 26; ;
 1460                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 27; ; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
 1461                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 28; ;
 1462                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 29; ; The maximum total size for a multi-screen map is 8KBytes, which allows for
 1463                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 30; ; a total of 1024 screens.
 1464                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 31; ;
 1465                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 32; ; ***************************************************************************
 1466                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 33; ; **************************************************************************/
 1467                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 35; // *************
 1468                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 36; // Functions in blkmap.asm ...
 1469                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 37; // *************
 1470                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 39; #ifdef __HUCC__
 1471                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 41; #asmdef	HUCC_USES_BLKMAP 1
 1472                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 43; // Current top-left of drawn map in pixels.
 1473                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 44; extern unsigned int   vdc_map_pxl_x;
 1474                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 45; extern unsigned int   vdc_map_pxl_y;
 1475                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 47; // Width and height to draw/scroll in characters (not tiles).
 1476                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 48; extern unsigned char  vdc_map_draw_w;
 1477                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 49; extern unsigned char  vdc_map_draw_h;
 1478                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 51; // Width of map (or multi-screen BAT) in tiles.
 1479                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 52; extern unsigned char  vdc_map_line_w;
 1480                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 54; // Width of map in screens (if multi-screen map).
 1481                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 55; extern unsigned char  vdc_map_scrn_w;
 1482                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 57; // Extra information returned by get_map_block() and sgx_get_map_block(),
 1483                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 58; // which are the collision flags and the mask/overlay sprite for the BLK.
 1484                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 59; extern unsigned char  map_blk_flag;
 1485                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 60; extern unsigned char  map_blk_mask;
 1486                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 62; extern unsigned char  vdc_scr_bank;
 1487                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 63; extern unsigned char *vdc_scr_addr;
 1488                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 65; extern unsigned char  vdc_map_bank;
 1489                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 66; extern unsigned char *vdc_map_addr;
 1490                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 68; extern unsigned char  vdc_blk_bank;
 1491                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 69; extern unsigned char *vdc_blk_addr;
 1492                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 71; extern unsigned char  vdc_tbl_bank;
 1493                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 72; extern unsigned char *vdc_tbl_addr;
 1494                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 74; extern void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blocks<_al> );
 1495                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 75; extern void __fastcall __macro set_blkmap( unsigned char __far *blk_map<vdc_map_bank:vdc_map_addr>, unsigned char blocks_w<vdc_map_line_w> );
 1496                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 76; extern void __fastcall __macro set_multimap( unsigned char __far *multi_map<vdc_scr_bank:vdc_scr_addr>, unsigned char screens_w<vdc_map_scrn_w> );
 1497                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 78; extern void __fastcall draw_map( void );
 1498                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 79; extern void __fastcall scroll_map( void );
 1499                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 81; extern void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1500                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 83; extern unsigned char __fastcall get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 1501                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 85; #asm
 1502                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 86; .macro	_set_blkmap.2
 1503                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 87; stz	vdc_scr_bank
 1504                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 88; .endm
 1505                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 90; .macro	_set_multimap.2
 1506                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 91; lda	vdc_bat_width
 1507                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 92; lsr	a
 1508                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 93; sta	vdc_map_line_w
 1509                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 94; .endm
 1510                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 96; .macro	SCREEN
 1511                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 97; db	(((\1) & $1FFF) | $6000) >> 8, bank(\1)
 1512                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 98; db	(((\2) & $1FFF) | $4000) >> 8, bank(\2)
 1513                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 99; db	(((\3) & $1FFF) | $6000) >> 8, bank(\3)
 1514                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 100; dw	(\4)
 1515                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 101; .endm
 1516                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 102; #endasm
 1517                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 104; #ifdef _SGX
 1518                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 106; // Current top-left of drawn map in pixels.
 1519                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 107; extern unsigned int   sgx_map_pxl_x;
 1520                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 108; extern unsigned int   sgx_map_pxl_y;
 1521                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 110; // Width and height to draw/scroll in characters (not tiles).
 1522                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 111; extern unsigned char  sgx_map_draw_w;
 1523                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 112; extern unsigned char  sgx_map_draw_h;
 1524                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 114; // Width of map (or multi-screen BAT) in tiles.
 1525                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 115; extern unsigned char  sgx_map_line_w;
 1526                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 117; // Width of map in screens (if multi-screen map).
 1527                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 118; extern unsigned char  sgx_map_scrn_w;
 1528                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 120; extern unsigned char  sgx_scr_bank;
 1529                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 121; extern unsigned char *sgx_scr_addr;
 1530                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 123; extern unsigned char  sgx_map_bank;
 1531                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 124; extern unsigned char *sgx_map_addr;
 1532                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 126; extern unsigned char  sgx_blk_bank;
 1533                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 127; extern unsigned char *sgx_blk_addr;
 1534                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 129; extern unsigned char  sgx_tbl_bank;
 1535                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 130; extern unsigned char *sgx_tbl_addr;
 1536                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 132; extern void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blocks<_al> );
 1537                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 133; extern void __fastcall __macro sgx_set_blkmap( unsigned char __far *blk_map<sgx_map_bank:sgx_map_addr>, unsigned char blocks_w<sgx_map_line_w> );
 1538                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 134; extern void __fastcall __macro sgx_set_multimap( unsigned char __far *multi_map<sgx_scr_bank:sgx_scr_addr>, unsigned char screens_w<sgx_map_scrn_w> );
 1539                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 136; extern void __fastcall sgx_draw_map( void );
 1540                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 137; extern void __fastcall sgx_scroll_map( void );
 1541                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 139; extern void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1542                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 141; extern unsigned char __fastcall sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 1543                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 143; #asm
 1544                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 144; .macro	_sgx_set_blkmap.2
 1545                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 145; stz	sgx_scr_bank
 1546                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 146; .endm
 1547                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 148; .macro	_sgx_set_multimap.2
 1548                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 149; lda	sgx_bat_width
 1549                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 150; lsr	a
 1550                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 151; sta	sgx_map_line_w
 1551                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 152; .endm
 1552                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 153; #endasm
 1553                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 155; #endif
 1554                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 157; #endif // __HUCC__
 1555                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 159; #endif // _hucc_blkmap_h
 1556                        		.dbg	line,	"include\variables.c", 13; unsigned char   sequence_id,
 1557                        		.dbg	line,	"include\variables.c", 14; sequence_loaded,
 1558                        		.dbg	line,	"include\variables.c", 16; level_id,
 1559                        		.dbg	line,	"include\variables.c", 18; player_id,
 1560                        		.dbg	line,	"include\variables.c", 19; player_state,
 1561                        		.dbg	line,	"include\variables.c", 20; player_axis,
 1562                        		.dbg	line,	"include\variables.c", 21; player_previous_axis,
 1563                        		.dbg	line,	"include\variables.c", 22; player_counter_anim,
 1564                        		.dbg	line,	"include\variables.c", 23; player_index_jump;
 1565                        		.dbg	line,	"include\variables.c", 25; //collision_side;
 1566                        		.dbg	line,	"include\variables.c", 30; signed int      player_pos_x,
 1567                        		.dbg	line,	"include\variables.c", 31; player_pos_y,
 1568                        		.dbg	line,	"include\variables.c", 32; camera_max_y_position;
 1569                        		.dbg	line,	"include\variables.c", 37; extern unsigned char tileset_LV1_BG_B[];
 1570                        		.dbg	line,	"include\variables.c", 38; extern unsigned char multimap_LV1_BG_B[];
 1571                        		.dbg	line,	"include\variables.c", 40; extern unsigned char tileset_LV1_BG_A[];
 1572                        		.dbg	line,	"include\variables.c", 41; extern unsigned char multimap_LV1_BG_A[];
 1573                        		.dbg	line,	"main.c", 15; #include "include/gfx_BG.c"
 1574                        		.dbg	line,	"include\gfx_BG.c", 1; #include "huc.h"
 1575                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
 1576                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
 1577                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
 1578                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
 1579                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
 1580                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
 1581                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
 1582                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
 1583                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
 1584                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
 1585                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
 1586                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 1587                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 1588                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 1589                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
 1590                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
 1591                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
 1592                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
 1593                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
 1594                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
 1595                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
 1596                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
 1597                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
 1598                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
 1599                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
 1600                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
 1601                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
 1602                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
 1603                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
 1604                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
 1605                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
 1606                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
 1607                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
 1608                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
 1609                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
 1610                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
 1611                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
 1612                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
 1613                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
 1614                        		.dbg	line,	"include\gfx_BG.c", 2; #include "hucc-scroll.h"
 1615                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 1; #ifndef _hucc_scroll_h
 1616                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 2; #define _hucc_scroll_h
 1617                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 4; /****************************************************************************
 1618                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 5; ; ***************************************************************************
 1619                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 6; ;
 1620                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 7; ; hucc-scroll.h
 1621                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 8; ;
 1622                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 9; ; Routines for a fast split-screen scrolling system.
 1623                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 10; ;
 1624                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 11; ; Copyright John Brandwood 2024.
 1625                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 12; ;
 1626                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 1627                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 1628                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 1629                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 16; ;
 1630                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 17; ; ***************************************************************************
 1631                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 18; ; ***************************************************************************
 1632                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 19; ;
 1633                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 20; ; The maximum number of splits for each screen layer is set in your project's
 1634                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 21; ; "hucc-config.inc" file, with the library having a limit of 128-per-layer.
 1635                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 22; ;
 1636                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 23; ; Your first active split must be defined to start at screen line 0, and then
 1637                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 24; ; the rest of the active splits must be in increasing line order to match the
 1638                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 25; ; way that the PC Engine displays the output image.
 1639                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 26; ;
 1640                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 27; ; You can have disabled splits interleaved with your active splits.
 1641                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 28; ;
 1642                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 29; ; Splits that are normally disabled can be used to create full screen effects
 1643                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 30; ; such as bouncing the screen up and down by adding blank areas at the top or
 1644                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 31; ; bottom of the screen, and then rapidly changing the height of those areas.
 1645                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 32; ;
 1646                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 33; ; ***************************************************************************
 1647                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 34; ; **************************************************************************/
 1648                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 36; // *************
 1649                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 37; // VDC bits for display_flags ...
 1650                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 38; // *************
 1651                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 40; #ifndef BKG_OFF
 1652                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 41; #define BKG_OFF 0x00
 1653                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 42; #endif
 1654                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 44; #ifndef SPR_OFF
 1655                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 45; #define SPR_OFF 0x00
 1656                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 46; #endif
 1657                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 48; #ifndef BKG_ON
 1658                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 49; #define BKG_ON 0x80
 1659                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 50; #endif
 1660                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 52; #ifndef SPR_ON
 1661                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 53; #define SPR_ON 0x40
 1662                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 54; #endif
 1663                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 56; // *************
 1664                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 57; // Functions in hucc-scroll.asm ...
 1665                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 58; // *************
 1666                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 60; #ifdef __HUCC__
 1667                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 62; #asmdef	HUCC_USES_NEW_SCROLL 1
 1668                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 64; extern void __fastcall scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
 1669                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 65; extern void __fastcall sgx_scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
 1670                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 67; extern void __fastcall disable_split( unsigned char index<acc> );
 1671                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 68; extern void __fastcall sgx_disable_split( unsigned char index<acc> );
 1672                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 70; extern void __fastcall __macro disable_all_splits( void );
 1673                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 71; extern void __fastcall __macro sgx_disable_all_splits( void );
 1674                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 73; #asm
 1675                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 74; .macro	_disable_all_splits
 1676                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 75; ldy	#HUCC_PCE_SPLITS - 1
 1677                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 76; !loop:		tya
 1678                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 77; call	_disable_split.1
 1679                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 78; dey
 1680                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 79; bpl	!loop-
 1681                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 80; .endm
 1682                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 82; .macro	_sgx_disable_all_splits
 1683                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 83; ldy	#HUCC_SGX_SPLITS - 1
 1684                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 84; !loop:		tya
 1685                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 85; call	_sgx_disable_split.1
 1686                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 86; dey
 1687                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 87; bpl	!loop-
 1688                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 88; .endm
 1689                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 89; #endasm
 1690                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 91; #endif // __HUCC__
 1691                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 93; #endif // _hucc_scroll_h
 1692                        		.dbg	line,	"include\gfx_BG.c", 3; #include "hucc-chrmap.h"
 1693                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 1; #ifndef _hucc_chrmap_h
 1694                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 2; #define _hucc_chrmap_h
 1695                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 4; /****************************************************************************
 1696                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 5; ; ***************************************************************************
 1697                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 6; ;
 1698                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 7; ; hucc-chrmap.h
 1699                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 8; ;
 1700                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 9; ; A simple map system based on 8x8 characters (aka "tiles") in BAT format.
 1701                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 10; ;
 1702                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 11; ; Copyright John Brandwood 2025.
 1703                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 12; ;
 1704                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 1705                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 1706                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 1707                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 16; ;
 1708                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 17; ; ***************************************************************************
 1709                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 18; ; ***************************************************************************
 1710                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 19; ;
 1711                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 20; ; The maximum X and Y size for chrmaps is 256 characters (2048 pixels).
 1712                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 21; ;
 1713                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 22; ; The maximum total size for a chrmap is 16KBytes, which allows for maps up
 1714                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 23; ; to 256x32 tiles (2048x256 pixels).
 1715                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 24; ;
 1716                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 25; ; ***************************************************************************
 1717                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 26; ; **************************************************************************/
 1718                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 28; // *************
 1719                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 29; // This code extends the blkmap library ...
 1720                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 30; // *************
 1721                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 32; #include "hucc-blkmap.h"
 1722                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 34; // *************
 1723                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 35; // Functions in chrmap.asm ...
 1724                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 36; // *************
 1725                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 38; #ifdef __HUCC__
 1726                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 40; #asmdef	HUCC_USES_CHRMAP 1
 1727                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 42; extern void __fastcall __nop set_chrmap( unsigned char __far *chrmap<vdc_map_bank:vdc_map_addr>, unsigned char tiles_w<vdc_map_line_w> );
 1728                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 44; extern void __fastcall draw_bat( void );
 1729                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 45; extern void __fastcall scroll_bat( void );
 1730                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 47; extern void __fastcall blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1731                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 49; #ifdef _SGX
 1732                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 51; extern void __fastcall __nop sgx_set_chrmap( unsigned char __far *chrmap<sgx_map_bank:sgx_map_addr>, unsigned char tiles_w<sgx_map_line_w> );
 1733                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 53; extern void __fastcall sgx_draw_bat( void );
 1734                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 54; extern void __fastcall sgx_scroll_bat( void );
 1735                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 56; extern void __fastcall sgx_blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1736                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 58; #endif
 1737                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 60; #endif // __HUCC__
 1738                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 62; #endif // _hucc_chrmap_h
 1739                        		.dbg	line,	"include\gfx_BG.c", 4; #include "hucc-blkmap.h"
 1740                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 1; #ifndef _hucc_blkmap_h
 1741                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 2; #define _hucc_blkmap_h
 1742                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 4; /****************************************************************************
 1743                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 5; ; ***************************************************************************
 1744                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 6; ;
 1745                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 7; ; hucc-blkmap.h
 1746                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 8; ;
 1747                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 9; ; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
 1748                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 10; ;
 1749                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 11; ; Copyright John Brandwood 2025.
 1750                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 12; ;
 1751                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 1752                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 1753                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 1754                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 16; ;
 1755                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 17; ; ***************************************************************************
 1756                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 18; ; ***************************************************************************
 1757                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 19; ;
 1758                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 20; ; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
 1759                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 21; ;
 1760                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 22; ; The maximum total size for a blkmap is 16KBytes, which allows for maps up
 1761                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 23; ; to 128x128 blocks (2048x2048 pixels).
 1762                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 24; ;
 1763                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 25; ; Huge multi-screen blkmaps are also supported (optionally).
 1764                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 26; ;
 1765                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 27; ; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
 1766                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 28; ;
 1767                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 29; ; The maximum total size for a multi-screen map is 8KBytes, which allows for
 1768                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 30; ; a total of 1024 screens.
 1769                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 31; ;
 1770                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 32; ; ***************************************************************************
 1771                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 33; ; **************************************************************************/
 1772                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 35; // *************
 1773                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 36; // Functions in blkmap.asm ...
 1774                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 37; // *************
 1775                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 39; #ifdef __HUCC__
 1776                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 41; #asmdef	HUCC_USES_BLKMAP 1
 1777                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 43; // Current top-left of drawn map in pixels.
 1778                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 44; extern unsigned int   vdc_map_pxl_x;
 1779                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 45; extern unsigned int   vdc_map_pxl_y;
 1780                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 47; // Width and height to draw/scroll in characters (not tiles).
 1781                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 48; extern unsigned char  vdc_map_draw_w;
 1782                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 49; extern unsigned char  vdc_map_draw_h;
 1783                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 51; // Width of map (or multi-screen BAT) in tiles.
 1784                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 52; extern unsigned char  vdc_map_line_w;
 1785                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 54; // Width of map in screens (if multi-screen map).
 1786                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 55; extern unsigned char  vdc_map_scrn_w;
 1787                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 57; // Extra information returned by get_map_block() and sgx_get_map_block(),
 1788                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 58; // which are the collision flags and the mask/overlay sprite for the BLK.
 1789                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 59; extern unsigned char  map_blk_flag;
 1790                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 60; extern unsigned char  map_blk_mask;
 1791                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 62; extern unsigned char  vdc_scr_bank;
 1792                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 63; extern unsigned char *vdc_scr_addr;
 1793                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 65; extern unsigned char  vdc_map_bank;
 1794                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 66; extern unsigned char *vdc_map_addr;
 1795                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 68; extern unsigned char  vdc_blk_bank;
 1796                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 69; extern unsigned char *vdc_blk_addr;
 1797                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 71; extern unsigned char  vdc_tbl_bank;
 1798                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 72; extern unsigned char *vdc_tbl_addr;
 1799                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 74; extern void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blocks<_al> );
 1800                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 75; extern void __fastcall __macro set_blkmap( unsigned char __far *blk_map<vdc_map_bank:vdc_map_addr>, unsigned char blocks_w<vdc_map_line_w> );
 1801                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 76; extern void __fastcall __macro set_multimap( unsigned char __far *multi_map<vdc_scr_bank:vdc_scr_addr>, unsigned char screens_w<vdc_map_scrn_w> );
 1802                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 78; extern void __fastcall draw_map( void );
 1803                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 79; extern void __fastcall scroll_map( void );
 1804                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 81; extern void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1805                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 83; extern unsigned char __fastcall get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 1806                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 85; #asm
 1807                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 86; .macro	_set_blkmap.2
 1808                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 87; stz	vdc_scr_bank
 1809                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 88; .endm
 1810                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 90; .macro	_set_multimap.2
 1811                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 91; lda	vdc_bat_width
 1812                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 92; lsr	a
 1813                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 93; sta	vdc_map_line_w
 1814                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 94; .endm
 1815                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 96; .macro	SCREEN
 1816                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 97; db	(((\1) & $1FFF) | $6000) >> 8, bank(\1)
 1817                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 98; db	(((\2) & $1FFF) | $4000) >> 8, bank(\2)
 1818                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 99; db	(((\3) & $1FFF) | $6000) >> 8, bank(\3)
 1819                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 100; dw	(\4)
 1820                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 101; .endm
 1821                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 102; #endasm
 1822                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 104; #ifdef _SGX
 1823                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 106; // Current top-left of drawn map in pixels.
 1824                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 107; extern unsigned int   sgx_map_pxl_x;
 1825                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 108; extern unsigned int   sgx_map_pxl_y;
 1826                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 110; // Width and height to draw/scroll in characters (not tiles).
 1827                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 111; extern unsigned char  sgx_map_draw_w;
 1828                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 112; extern unsigned char  sgx_map_draw_h;
 1829                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 114; // Width of map (or multi-screen BAT) in tiles.
 1830                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 115; extern unsigned char  sgx_map_line_w;
 1831                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 117; // Width of map in screens (if multi-screen map).
 1832                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 118; extern unsigned char  sgx_map_scrn_w;
 1833                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 120; extern unsigned char  sgx_scr_bank;
 1834                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 121; extern unsigned char *sgx_scr_addr;
 1835                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 123; extern unsigned char  sgx_map_bank;
 1836                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 124; extern unsigned char *sgx_map_addr;
 1837                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 126; extern unsigned char  sgx_blk_bank;
 1838                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 127; extern unsigned char *sgx_blk_addr;
 1839                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 129; extern unsigned char  sgx_tbl_bank;
 1840                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 130; extern unsigned char *sgx_tbl_addr;
 1841                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 132; extern void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blocks<_al> );
 1842                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 133; extern void __fastcall __macro sgx_set_blkmap( unsigned char __far *blk_map<sgx_map_bank:sgx_map_addr>, unsigned char blocks_w<sgx_map_line_w> );
 1843                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 134; extern void __fastcall __macro sgx_set_multimap( unsigned char __far *multi_map<sgx_scr_bank:sgx_scr_addr>, unsigned char screens_w<sgx_map_scrn_w> );
 1844                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 136; extern void __fastcall sgx_draw_map( void );
 1845                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 137; extern void __fastcall sgx_scroll_map( void );
 1846                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 139; extern void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1847                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 141; extern unsigned char __fastcall sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 1848                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 143; #asm
 1849                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 144; .macro	_sgx_set_blkmap.2
 1850                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 145; stz	sgx_scr_bank
 1851                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 146; .endm
 1852                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 148; .macro	_sgx_set_multimap.2
 1853                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 149; lda	sgx_bat_width
 1854                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 150; lsr	a
 1855                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 151; sta	sgx_map_line_w
 1856                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 152; .endm
 1857                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 153; #endasm
 1858                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 155; #endif
 1859                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 157; #endif // __HUCC__
 1860                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 159; #endif // _hucc_blkmap_h
 1861                        		.dbg	line,	"include\gfx_BG.c", 13; //**************************************************************************************//
 1862                        		.dbg	line,	"include\gfx_BG.c", 14; //                                                                                      //
 1863                        		.dbg	line,	"include\gfx_BG.c", 15; //                                       LEVEL 1                                        //
 1864                        		.dbg	line,	"include\gfx_BG.c", 16; //                                                                                      //
 1865                        		.dbg	line,	"include\gfx_BG.c", 17; //**************************************************************************************//
 1866                        		.dbg	line,	"include\gfx_BG.c", 19; #incchr(tileset_LV1_WALL,"res/maps/tiles_LV1_WALL.png", 4 , 4);
 1867               6000     		.data
 1868    03:6000             	_tileset_LV1_WALL: 	.incchr		"res/maps/tiles_LV1_WALL.png", 4, 4
 1869               E309     		.code
 1870                        		.dbg	line,	"include\gfx_BG.c", 20; #incchr(tileset_LV1_DOOR_OPEN,"res/maps/tiles_LV1_DOOR_OPEN.png", 4 , 6);
 1871               6200     		.data
 1872    03:6200             	_tileset_LV1_DOOR_OPEN: 	.incchr		"res/maps/tiles_LV1_DOOR_OPEN.png", 4, 6
 1873               E309     		.code
 1874                        		.dbg	line,	"include\gfx_BG.c", 21; #incchr(tileset_LV1_DOOR_CLOSED,"res/maps/tiles_LV1_DOOR_CLOSED.png", 4 , 6);
 1875               6500     		.data
 1876    03:6500             	_tileset_LV1_DOOR_CLOSED: 	.incchr		"res/maps/tiles_LV1_DOOR_CLOSED.png", 4, 6
 1877               E309     		.code
 1878                        		.dbg	line,	"include\gfx_BG.c", 23; #incchr(tileset_LIFE_RED,"res/maps/tileset_LIFE_RED.png", 2 , 1);
 1879               6800     		.data
 1880    03:6800             	_tileset_LIFE_RED: 	.incchr		"res/maps/tileset_LIFE_RED.png", 2, 1
 1881               E309     		.code
 1882                        		.dbg	line,	"include\gfx_BG.c", 24; #incchr(tileset_LIFE_ORANGE,"res/maps/tileset_LIFE_ORANGE.png", 2 , 1);
 1883               6840     		.data
 1884    03:6840             	_tileset_LIFE_ORANGE: 	.incchr		"res/maps/tileset_LIFE_ORANGE.png", 2, 1
 1885               E309     		.code
 1886                        		.dbg	line,	"include\gfx_BG.c", 25; #incchr(tileset_LIFE_YELLOW,"res/maps/tileset_LIFE_YELLOW.png", 2 , 1);
 1887               6880     		.data
 1888    03:6880             	_tileset_LIFE_YELLOW: 	.incchr		"res/maps/tileset_LIFE_YELLOW.png", 2, 1
 1889               E309     		.code
 1890                        		.dbg	line,	"include\gfx_BG.c", 26; #incchr(tileset_LIFE_EMPTY,"res/maps/tileset_LIFE_EMPTY.png", 2 , 1);
 1891               68C0     		.data
 1892    03:68C0             	_tileset_LIFE_EMPTY: 	.incchr		"res/maps/tileset_LIFE_EMPTY.png", 2, 1
 1893               E309     		.code
 1894                        		.dbg	line,	"include\gfx_BG.c", 28; #incchr(tileset_ARMOR_1,"res/maps/tileset_ARMOR_1.png", 2 , 2);
 1895               6900     		.data
 1896    03:6900             	_tileset_ARMOR_1: 	.incchr		"res/maps/tileset_ARMOR_1.png", 2, 2
 1897               E309     		.code
 1898                        		.dbg	line,	"include\gfx_BG.c", 29; #incchr(tileset_ARMOR_2,"res/maps/tileset_ARMOR_2.png", 2 , 2);
 1899               6980     		.data
 1900    03:6980             	_tileset_ARMOR_2: 	.incchr		"res/maps/tileset_ARMOR_2.png", 2, 2
 1901               E309     		.code
 1902                        		.dbg	line,	"include\gfx_BG.c", 30; #incchr(tileset_ARMOR_4,"res/maps/tileset_ARMOR_4.png", 2 , 2);
 1903               6A00     		.data
 1904    03:6A00             	_tileset_ARMOR_4: 	.incchr		"res/maps/tileset_ARMOR_4.png", 2, 2
 1905               E309     		.code
 1906                        		.dbg	line,	"include\gfx_BG.c", 31; #incchr(tileset_ARMOR_8,"res/maps/tileset_ARMOR_8.png", 2 , 2);
 1907               6A80     		.data
 1908    03:6A80             	_tileset_ARMOR_8: 	.incchr		"res/maps/tileset_ARMOR_8.png", 2, 2
 1909               E309     		.code
 1910                        		.dbg	line,	"include\gfx_BG.c", 33; #incchr(tileset_WEAPON_1,"res/maps/tileset_WEAPON_1.png", 2 , 2);
 1911               6B00     		.data
 1912    03:6B00             	_tileset_WEAPON_1: 	.incchr		"res/maps/tileset_WEAPON_1.png", 2, 2
 1913               E309     		.code
 1914                        		.dbg	line,	"include\gfx_BG.c", 34; #incchr(tileset_WEAPON_2,"res/maps/tileset_WEAPON_2.png", 2 , 2);
 1915               6B80     		.data
 1916    03:6B80             	_tileset_WEAPON_2: 	.incchr		"res/maps/tileset_WEAPON_2.png", 2, 2
 1917               E309     		.code
 1918                        		.dbg	line,	"include\gfx_BG.c", 35; #incchr(tileset_WEAPON_4,"res/maps/tileset_WEAPON_4.png", 2 , 2);
 1919               6C00     		.data
 1920    03:6C00             	_tileset_WEAPON_4: 	.incchr		"res/maps/tileset_WEAPON_4.png", 2, 2
 1921               E309     		.code
 1922                        		.dbg	line,	"include\gfx_BG.c", 36; #incchr(tileset_WEAPON_5,"res/maps/tileset_WEAPON_5.png", 2 , 2);
 1923               6C80     		.data
 1924    03:6C80             	_tileset_WEAPON_5: 	.incchr		"res/maps/tileset_WEAPON_5.png", 2, 2
 1925               E309     		.code
 1926                        		.dbg	line,	"include\gfx_BG.c", 37; #incchr(tileset_WEAPON_8,"res/maps/tileset_WEAPON_8.png", 2 , 2);
 1927               6D00     		.data
 1928    03:6D00             	_tileset_WEAPON_8: 	.incchr		"res/maps/tileset_WEAPON_8.png", 2, 2
 1929               E309     		.code
 1930                        		.dbg	line,	"include\gfx_BG.c", 40; //--------------------------------------------------------------------------------------//
 1931                        		.dbg	line,	"include\gfx_BG.c", 41; //                                        VDC 2                                         //
 1932                        		.dbg	line,	"include\gfx_BG.c", 42; //--------------------------------------------------------------------------------------//
 1933                        		.dbg	line,	"include\gfx_BG.c", 44; #asm
 1934                        		.dbg	clear
 1935               0001     	OPTIMIZE	=	1
 1936               6D80     			.data
 1937                        	; EXTRACT TILESET
 1938                        	;----------------
 1939    03:6D80             	_tileset_LV1_BG_B:  incchr	"res/maps/template_LV1_WALL.png"
 1940    03:6F80             			incchr	"res/maps/template_LV1_DOOR.png"
 1941    03:7280             			incchr	"res/maps/tilemap_LV1_BG_B.png", OPTIMIZE
 1942                        	; EXTRACT BLOCKS
 1943                        	;--------------
 1944    07:6800             	blocks_LV1_BG_B1:	incblk	"res/maps/tilemap_LV1_BG_B.png" , 0x1000 ,    0 ,   0 ,  64 , 32 , _tileset_LV1_BG_B ; // 96x16 = 1536 | 32x16 =  512
 1945    07:7000             	blocks_LV1_BG_B2:	incblk	"res/maps/tilemap_LV1_BG_B.png" , 0x1000 , 1024 ,   0 ,  96 , 32 , _tileset_LV1_BG_B ; // 64x16 = 1024 | 32x16 =  512
 1946    07:7800             	blocks_LV1_BG_B3:	incblk	"res/maps/tilemap_LV1_BG_B.png" , 0x1000 ,    0 , 512 ,  64 , 32 , _tileset_LV1_BG_B ; // 96x16 = 1536 | 16x16 =  256
 1947    08:6000             	blocks_LV1_BG_B4:	incblk	"res/maps/tilemap_LV1_BG_B.png" , 0x1000 , 1024 , 512 ,  96 , 32 , _tileset_LV1_BG_B ; // 64x16 = 1024 | 16x16 =  256
 1948                        	; EXTRACT MAPS
 1949                        	;------------
 1950               6800     			align	256
 1951    08:6800             	MAP_LV1_BG_B1:		incmap	"res/maps/tilemap_LV1_BG_B.png",    0 ,   0 ,  64 , 32 , blocks_LV1_BG_B1 ; // 96x16 = 1536 | 32x16 =  512
 1952               7000     			align	256
 1953    08:7000             	MAP_LV1_BG_B2:		incmap	"res/maps/tilemap_LV1_BG_B.png", 1024 ,   0 ,  96 , 32 , blocks_LV1_BG_B2 ; // 64x16 = 1024 | 32x16 =  512
 1954               7C00     			align	256
 1955    08:7C00             	MAP_LV1_BG_B3:		incmap	"res/maps/tilemap_LV1_BG_B.png",    0 , 512 ,  64 , 32 , blocks_LV1_BG_B3 ; // 96x16 = 1536 | 16x16 =  256
 1956               6400     			align	256
 1957    09:6400             	MAP_LV1_BG_B4:		incmap	"res/maps/tilemap_LV1_BG_B.png", 1024 , 512 ,  96 , 32 , blocks_LV1_BG_B4 ; // 64x16 = 1024 | 16x16 =  256
 1958                        	; MASK (EMPTY)
 1959                        	;----------------
 1960    09:7000  00 00 00 00	dummy_tbl:	ds	256
         09:7004  00 00 00 00 
         09:7008  00 00 00 00 
         09:700C  00 00 00 00 
         09:7010  00 00 00 00 
         09:7014  00 00 00 00 
         09:7018  00 00 00 00 
         09:701C  00 00 00 00 
         09:7020  00 00 00 00 
         09:7024  00 00 00 00 
         09:7028  00 00 00 00 
         09:702C  00 00 00 00 
         09:7030  00 00 00 00 
         09:7034  00 00 00 00 
         09:7038  00 00 00 00 
         09:703C  00 00 00 00 
         09:7040  00 00 00 00 
         09:7044  00 00 00 00 
         09:7048  00 00 00 00 
         09:704C  00 00 00 00 
         09:7050  00 00 00 00 
         09:7054  00 00 00 00 
         09:7058  00 00 00 00 
         09:705C  00 00 00 00 
         09:7060  00 00 00 00 
         09:7064  00 00 00 00 
         09:7068  00 00 00 00 
         09:706C  00 00 00 00 
         09:7070  00 00 00 00 
         09:7074  00 00 00 00 
         09:7078  00 00 00 00 
         09:707C  00 00 00 00 
         09:7080  00 00 00 00 
         09:7084  00 00 00 00 
         09:7088  00 00 00 00 
         09:708C  00 00 00 00 
         09:7090  00 00 00 00 
         09:7094  00 00 00 00 
         09:7098  00 00 00 00 
         09:709C  00 00 00 00 
         09:70A0  00 00 00 00 
         09:70A4  00 00 00 00 
         09:70A8  00 00 00 00 
         09:70AC  00 00 00 00 
         09:70B0  00 00 00 00 
         09:70B4  00 00 00 00 
         09:70B8  00 00 00 00 
         09:70BC  00 00 00 00 
         09:70C0  00 00 00 00 
         09:70C4  00 00 00 00 
         09:70C8  00 00 00 00 
         09:70CC  00 00 00 00 
         09:70D0  00 00 00 00 
         09:70D4  00 00 00 00 
         09:70D8  00 00 00 00 
         09:70DC  00 00 00 00 
         09:70E0  00 00 00 00 
         09:70E4  00 00 00 00 
         09:70E8  00 00 00 00 
         09:70EC  00 00 00 00 
         09:70F0  00 00 00 00 
         09:70F4  00 00 00 00 
         09:70F8  00 00 00 00 
         09:70FC  00 00 00 00 
 1961                        	; SWIZZLE MAPS
 1962                        	;-------------
 1963    09:7100             	swizzle	MAP_LV1_BG_B1,  32, 16 ;
 1964    09:7100             	swizzle	MAP_LV1_BG_B2,  32, 16 ;
 1965    09:7100             	swizzle	MAP_LV1_BG_B3,  32, 16 ;
 1966    09:7100             	swizzle	MAP_LV1_BG_B4,  32, 16 ;
 1967                        	; BUILD MULTIMAP
 1968                        	;---------------
 1969    09:7100             	_multimap_LV1_BG_B:
 1970                        			; 1st line of 5 screens (512x256)
 1971                        			SCREEN MAP_LV1_BG_B1 + 0x0000, blocks_LV1_BG_B1, dummy_tbl, 0
         09:7100  68 08      			db	(((MAP_LV1_BG_B1 + 0x0000) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B1 + 0x0000)
         09:7102  48 07      			db	(((blocks_LV1_BG_B1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B1)
         09:7104  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7106  00 00      			dw	(0)
 1972                        			SCREEN MAP_LV1_BG_B1 + 0x0200, blocks_LV1_BG_B1, dummy_tbl, 0
         09:7108  6A 08      			db	(((MAP_LV1_BG_B1 + 0x0200) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B1 + 0x0200)
         09:710A  48 07      			db	(((blocks_LV1_BG_B1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B1)
         09:710C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:710E  00 00      			dw	(0)
 1973                        			SCREEN MAP_LV1_BG_B2 + 0x0000, blocks_LV1_BG_B2, dummy_tbl, 0
         09:7110  70 08      			db	(((MAP_LV1_BG_B2 + 0x0000) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B2 + 0x0000)
         09:7112  50 07      			db	(((blocks_LV1_BG_B2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B2)
         09:7114  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7116  00 00      			dw	(0)
 1974                        			SCREEN MAP_LV1_BG_B2 + 0x0200, blocks_LV1_BG_B2, dummy_tbl, 0
         09:7118  72 08      			db	(((MAP_LV1_BG_B2 + 0x0200) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B2 + 0x0200)
         09:711A  50 07      			db	(((blocks_LV1_BG_B2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B2)
         09:711C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:711E  00 00      			dw	(0)
 1975                        			SCREEN MAP_LV1_BG_B2 + 0x0400, blocks_LV1_BG_B2, dummy_tbl, 0
         09:7120  74 08      			db	(((MAP_LV1_BG_B2 + 0x0400) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B2 + 0x0400)
         09:7122  50 07      			db	(((blocks_LV1_BG_B2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B2)
         09:7124  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7126  00 00      			dw	(0)
 1976                        			; 2nd line of 5 screens (512x256)
 1977                        			SCREEN MAP_LV1_BG_B1 + 0x0400, blocks_LV1_BG_B1, dummy_tbl, 0
         09:7128  6C 08      			db	(((MAP_LV1_BG_B1 + 0x0400) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B1 + 0x0400)
         09:712A  48 07      			db	(((blocks_LV1_BG_B1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B1)
         09:712C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:712E  00 00      			dw	(0)
 1978                        			SCREEN MAP_LV1_BG_B1 + 0x0600, blocks_LV1_BG_B1, dummy_tbl, 0
         09:7130  6E 08      			db	(((MAP_LV1_BG_B1 + 0x0600) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B1 + 0x0600)
         09:7132  48 07      			db	(((blocks_LV1_BG_B1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B1)
         09:7134  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7136  00 00      			dw	(0)
 1979                        			SCREEN MAP_LV1_BG_B2 + 0x0600, blocks_LV1_BG_B2, dummy_tbl, 0
         09:7138  76 08      			db	(((MAP_LV1_BG_B2 + 0x0600) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B2 + 0x0600)
         09:713A  50 07      			db	(((blocks_LV1_BG_B2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B2)
         09:713C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:713E  00 00      			dw	(0)
 1980                        			SCREEN MAP_LV1_BG_B2 + 0x0800, blocks_LV1_BG_B2, dummy_tbl, 0
         09:7140  78 08      			db	(((MAP_LV1_BG_B2 + 0x0800) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B2 + 0x0800)
         09:7142  50 07      			db	(((blocks_LV1_BG_B2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B2)
         09:7144  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7146  00 00      			dw	(0)
 1981                        			SCREEN MAP_LV1_BG_B2 + 0x0A00, blocks_LV1_BG_B2, dummy_tbl, 0
         09:7148  7A 08      			db	(((MAP_LV1_BG_B2 + 0x0A00) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B2 + 0x0A00)
         09:714A  50 07      			db	(((blocks_LV1_BG_B2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B2)
         09:714C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:714E  00 00      			dw	(0)
 1982                        			; 3rd line of 5 screens (512x256)
 1983                        			SCREEN MAP_LV1_BG_B3 + 0x0000, blocks_LV1_BG_B3, dummy_tbl, 0
         09:7150  7C 08      			db	(((MAP_LV1_BG_B3 + 0x0000) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B3 + 0x0000)
         09:7152  58 07      			db	(((blocks_LV1_BG_B3) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B3)
         09:7154  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7156  00 00      			dw	(0)
 1984                        			SCREEN MAP_LV1_BG_B3 + 0x0200, blocks_LV1_BG_B3, dummy_tbl, 0
         09:7158  7E 08      			db	(((MAP_LV1_BG_B3 + 0x0200) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B3 + 0x0200)
         09:715A  58 07      			db	(((blocks_LV1_BG_B3) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B3)
         09:715C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:715E  00 00      			dw	(0)
 1985                        			SCREEN MAP_LV1_BG_B4 + 0x0000, blocks_LV1_BG_B4, dummy_tbl, 0
         09:7160  64 09      			db	(((MAP_LV1_BG_B4 + 0x0000) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B4 + 0x0000)
         09:7162  40 08      			db	(((blocks_LV1_BG_B4) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B4)
         09:7164  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7166  00 00      			dw	(0)
 1986                        			SCREEN MAP_LV1_BG_B4 + 0x0200, blocks_LV1_BG_B4, dummy_tbl, 0
         09:7168  66 09      			db	(((MAP_LV1_BG_B4 + 0x0200) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B4 + 0x0200)
         09:716A  40 08      			db	(((blocks_LV1_BG_B4) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B4)
         09:716C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:716E  00 00      			dw	(0)
 1987                        			SCREEN MAP_LV1_BG_B4 + 0x0400, blocks_LV1_BG_B4, dummy_tbl, 0
         09:7170  68 09      			db	(((MAP_LV1_BG_B4 + 0x0400) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B4 + 0x0400)
         09:7172  40 08      			db	(((blocks_LV1_BG_B4) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B4)
         09:7174  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7176  00 00      			dw	(0)
 1988                        			; 4th line of 5 screens (512x256)
 1989                        			SCREEN MAP_LV1_BG_B3 + 0x0400, blocks_LV1_BG_B3, dummy_tbl, 0
         09:7178  60 09      			db	(((MAP_LV1_BG_B3 + 0x0400) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B3 + 0x0400)
         09:717A  58 07      			db	(((blocks_LV1_BG_B3) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B3)
         09:717C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:717E  00 00      			dw	(0)
 1990                        			SCREEN MAP_LV1_BG_B3 + 0x0600, blocks_LV1_BG_B3, dummy_tbl, 0
         09:7180  62 09      			db	(((MAP_LV1_BG_B3 + 0x0600) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B3 + 0x0600)
         09:7182  58 07      			db	(((blocks_LV1_BG_B3) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B3)
         09:7184  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7186  00 00      			dw	(0)
 1991                        			SCREEN MAP_LV1_BG_B4 + 0x0600, blocks_LV1_BG_B4, dummy_tbl, 0
         09:7188  6A 09      			db	(((MAP_LV1_BG_B4 + 0x0600) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B4 + 0x0600)
         09:718A  40 08      			db	(((blocks_LV1_BG_B4) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B4)
         09:718C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:718E  00 00      			dw	(0)
 1992                        			SCREEN MAP_LV1_BG_B4 + 0x0800, blocks_LV1_BG_B4, dummy_tbl, 0
         09:7190  6C 09      			db	(((MAP_LV1_BG_B4 + 0x0800) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B4 + 0x0800)
         09:7192  40 08      			db	(((blocks_LV1_BG_B4) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B4)
         09:7194  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7196  00 00      			dw	(0)
 1993                        			SCREEN MAP_LV1_BG_B4 + 0x0A00, blocks_LV1_BG_B4, dummy_tbl, 0
         09:7198  6E 09      			db	(((MAP_LV1_BG_B4 + 0x0A00) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B4 + 0x0A00)
         09:719A  40 08      			db	(((blocks_LV1_BG_B4) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B4)
         09:719C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:719E  00 00      			dw	(0)
 1994                        	;//--------------------------------------------------------------------------------------//
 1995                        	;//                                        VDC 1                                         //
 1996                        	;//--------------------------------------------------------------------------------------//
 1997                        	; EXTRACT TILESET
 1998                        	;----------------
 1999    09:71A0             	_tileset_LV1_BG_A:	incchr	"res/maps/template_LIFEBAR_1.png"
 2000    09:71E0             			incchr	"res/maps/template_LIFEBAR_2.png"
 2001    09:7220             			incchr	"res/maps/template_LIFEBAR_3.png"
 2002    09:7260             			incchr	"res/maps/template_LIFEBAR_4.png"
 2003    09:72A0             			incchr	"res/maps/template_LIFEBAR_5.png"
 2004    09:72E0             			incchr	"res/maps/tileset_WEAPON_1.png"
 2005    09:7360             			incchr	"res/maps/tileset_ARMOR_1.png"
 2006    09:73E0             			incchr	"res/maps/tilemap_LV1_BG_A.png", OPTIMIZE
 2007                        	; EXTRACT BLOCKS
 2008                        	;--------------
 2009    0A:6000             	blocks_LV1_BG_A1:	incblk	"res/maps/tilemap_LV1_BG_A.png" , 0x1000 ,    0 ,   0 , 128 , 64 , _tileset_LV1_BG_A ; // 128x16 = 2048 | 64x16 = 1024
 2010    0A:6800             	blocks_LV1_BG_A2:	incblk	"res/maps/tilemap_LV1_BG_A.png" , 0x1000 , 2048 ,   0 ,  32 , 64 , _tileset_LV1_BG_A ; //  32x16 =  512 | 64x16 = 1024
 2011                        	; EXTRACT MAPS
 2012                        	;------------
 2013               7000     			align	256
 2014    0A:7000             	MAP_LV1_BG_A1:		incmap	"res/maps/tilemap_LV1_BG_A.png",    0 ,   0 , 128 , 64 , blocks_LV1_BG_A1 ; // 128x16 = 2048 | 64x16 = 1024
 2015    0B:7000             			flagmap "res/maps/collision_LV1.png",       0 ,   0 , 128 , 64 , MAP_LV1_BG_A1
 2016               7000     			align	256
 2017    0B:7000             	MAP_LV1_BG_A2:		incmap	"res/maps/tilemap_LV1_BG_A.png", 2048 ,   0 ,  32 , 64 , blocks_LV1_BG_A2 ; //  32x16 =  512 | 64x16 = 1024
 2018    0B:7800             			flagmap "res/maps/collision_LV1.png",    2048 ,   0 ,  32 , 64 , MAP_LV1_BG_A2
 2019                        	; SWIZZLE MAPS
 2020                        	;-------------
 2021    0B:7800             	swizzle	MAP_LV1_BG_A1,  32, 16 ;
 2022    0B:7800             	swizzle	MAP_LV1_BG_A2,  32, 16 ;
 2023                        	; BUILD MULTIMAP
 2024                        	;---------------
 2025    0B:7800             	_multimap_LV1_BG_A:
 2026                        			; 1st line of 5 screens (512x256)
 2027                        			SCREEN MAP_LV1_BG_A1 + 0x0000, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7800  70 0A      			db	(((MAP_LV1_BG_A1 + 0x0000) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x0000)
         0B:7802  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:7804  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7806  00 00      			dw	(0)
 2028                        			SCREEN MAP_LV1_BG_A1 + 0x0200, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7808  72 0A      			db	(((MAP_LV1_BG_A1 + 0x0200) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x0200)
         0B:780A  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:780C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:780E  00 00      			dw	(0)
 2029                        			SCREEN MAP_LV1_BG_A1 + 0x0400, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7810  74 0A      			db	(((MAP_LV1_BG_A1 + 0x0400) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x0400)
         0B:7812  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:7814  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7816  00 00      			dw	(0)
 2030                        			SCREEN MAP_LV1_BG_A1 + 0x0600, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7818  76 0A      			db	(((MAP_LV1_BG_A1 + 0x0600) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x0600)
         0B:781A  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:781C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:781E  00 00      			dw	(0)
 2031                        			SCREEN MAP_LV1_BG_A2 + 0x0000, blocks_LV1_BG_A2, dummy_tbl, 0
         0B:7820  70 0B      			db	(((MAP_LV1_BG_A2 + 0x0000) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A2 + 0x0000)
         0B:7822  48 0A      			db	(((blocks_LV1_BG_A2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A2)
         0B:7824  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7826  00 00      			dw	(0)
 2032                        			; 2nd line of 5 screens (512x256)
 2033                        			SCREEN MAP_LV1_BG_A1 + 0x0800, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7828  78 0A      			db	(((MAP_LV1_BG_A1 + 0x0800) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x0800)
         0B:782A  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:782C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:782E  00 00      			dw	(0)
 2034                        			SCREEN MAP_LV1_BG_A1 + 0x0A00, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7830  7A 0A      			db	(((MAP_LV1_BG_A1 + 0x0A00) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x0A00)
         0B:7832  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:7834  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7836  00 00      			dw	(0)
 2035                        			SCREEN MAP_LV1_BG_A1 + 0x0C00, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7838  7C 0A      			db	(((MAP_LV1_BG_A1 + 0x0C00) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x0C00)
         0B:783A  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:783C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:783E  00 00      			dw	(0)
 2036                        			SCREEN MAP_LV1_BG_A1 + 0x0E00, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7840  7E 0A      			db	(((MAP_LV1_BG_A1 + 0x0E00) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x0E00)
         0B:7842  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:7844  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7846  00 00      			dw	(0)
 2037                        			SCREEN MAP_LV1_BG_A2 + 0x0200, blocks_LV1_BG_A2, dummy_tbl, 0
         0B:7848  72 0B      			db	(((MAP_LV1_BG_A2 + 0x0200) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A2 + 0x0200)
         0B:784A  48 0A      			db	(((blocks_LV1_BG_A2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A2)
         0B:784C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:784E  00 00      			dw	(0)
 2038                        			; 3rd line of 5 screens (512x256)
 2039                        			SCREEN MAP_LV1_BG_A1 + 0x1000, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7850  60 0B      			db	(((MAP_LV1_BG_A1 + 0x1000) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x1000)
         0B:7852  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:7854  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7856  00 00      			dw	(0)
 2040                        			SCREEN MAP_LV1_BG_A1 + 0x1200, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7858  62 0B      			db	(((MAP_LV1_BG_A1 + 0x1200) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x1200)
         0B:785A  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:785C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:785E  00 00      			dw	(0)
 2041                        			SCREEN MAP_LV1_BG_A1 + 0x1400, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7860  64 0B      			db	(((MAP_LV1_BG_A1 + 0x1400) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x1400)
         0B:7862  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:7864  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7866  00 00      			dw	(0)
 2042                        			SCREEN MAP_LV1_BG_A1 + 0x1600, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7868  66 0B      			db	(((MAP_LV1_BG_A1 + 0x1600) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x1600)
         0B:786A  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:786C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:786E  00 00      			dw	(0)
 2043                        			SCREEN MAP_LV1_BG_A2 + 0x0400, blocks_LV1_BG_A2, dummy_tbl, 0
         0B:7870  74 0B      			db	(((MAP_LV1_BG_A2 + 0x0400) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A2 + 0x0400)
         0B:7872  48 0A      			db	(((blocks_LV1_BG_A2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A2)
         0B:7874  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7876  00 00      			dw	(0)
 2044                        			; 4th line of 5 screens (512x256)
 2045                        			SCREEN MAP_LV1_BG_A1 + 0x1800, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7878  68 0B      			db	(((MAP_LV1_BG_A1 + 0x1800) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x1800)
         0B:787A  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:787C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:787E  00 00      			dw	(0)
 2046                        			SCREEN MAP_LV1_BG_A1 + 0x1A00, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7880  6A 0B      			db	(((MAP_LV1_BG_A1 + 0x1A00) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x1A00)
         0B:7882  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:7884  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7886  00 00      			dw	(0)
 2047                        			SCREEN MAP_LV1_BG_A1 + 0x1C00, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7888  6C 0B      			db	(((MAP_LV1_BG_A1 + 0x1C00) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x1C00)
         0B:788A  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:788C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:788E  00 00      			dw	(0)
 2048                        			SCREEN MAP_LV1_BG_A1 + 0x1E00, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7890  6E 0B      			db	(((MAP_LV1_BG_A1 + 0x1E00) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x1E00)
         0B:7892  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:7894  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7896  00 00      			dw	(0)
 2049                        			SCREEN MAP_LV1_BG_A2 + 0x0600, blocks_LV1_BG_A2, dummy_tbl, 0
         0B:7898  76 0B      			db	(((MAP_LV1_BG_A2 + 0x0600) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A2 + 0x0600)
         0B:789A  48 0A      			db	(((blocks_LV1_BG_A2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A2)
         0B:789C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:789E  00 00      			dw	(0)
 2050               E309     			.code
 2051                        	
 2052                        		.dbg	line,	"include\gfx_BG.c", 204; #endasm
 2053                        		.dbg	line,	"include\gfx_BG.c", 208; //--------------------------------------------------------------------------------------//
 2054                        		.dbg	line,	"include\gfx_BG.c", 209; //                                   EXTRACT PALETTES                                   //
 2055                        		.dbg	line,	"include\gfx_BG.c", 210; //--------------------------------------------------------------------------------------//
 2056                        		.dbg	line,	"include\gfx_BG.c", 212; // EXTRACT PALETTE //
 2057                        		.dbg	line,	"include\gfx_BG.c", 213; #incpal(palette_LV1,"res/maps/tilemap_LV1_BG_B.png");
 2058               78A0     		.data
 2059    0B:78A0             	_palette_LV1:	.incpal		"res/maps/tilemap_LV1_BG_B.png"
 2060               E309     		.code
 2061                        		.dbg	line,	"main.c", 16; #include "include/gfx_SPRITES.c"
 2062                        		.dbg	line,	"include\gfx_SPRITES.c", 1; #include "huc.h"
 2063                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
 2064                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
 2065                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
 2066                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
 2067                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
 2068                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
 2069                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
 2070                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
 2071                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
 2072                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
 2073                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
 2074                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 2075                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 2076                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 2077                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
 2078                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
 2079                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
 2080                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
 2081                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
 2082                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
 2083                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
 2084                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
 2085                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
 2086                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
 2087                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
 2088                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
 2089                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
 2090                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
 2091                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
 2092                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
 2093                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
 2094                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
 2095                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
 2096                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
 2097                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
 2098                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
 2099                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
 2100                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
 2101                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
 2102                        		.dbg	line,	"include\gfx_SPRITES.c", 10; // EXTRACT PLAYER TILES //
 2103                        		.dbg	line,	"include\gfx_SPRITES.c", 11; #incspr(tiles_SPR_PLAYER,"res/sprites/tiles_SPR_PLAYER.png")
 2104               7AA0     		.data
 2105    0B:7AA0             	_tiles_SPR_PLAYER:	.incspr		"res/sprites/tiles_SPR_PLAYER.png"
 2106               E309     		.code
 2107                        		.dbg	line,	"include\gfx_SPRITES.c", 13; // EXTRACT PLAYER PALETTE //
 2108                        		.dbg	line,	"main.c", 16; #incpal(palette_PLAYER,"res/palettes/palette_PLAYER.png");
 2109               7AA0     		.data
 2110    0C:7AA0             	_palette_PLAYER:	.incpal		"res/palettes/palette_PLAYER.png"
 2111               E309     		.code
 2112                        		.dbg	line,	"main.c", 20; #include "include/tables_player.c"
 2113                        		.dbg	line,	"include\tables_player.c", 3; const signed char       TABLE_PLAYER_JUMP_V[35]     =   {
 2114                        		.dbg	line,	"include\tables_player.c", 4; // UPWARD
 2115                        		.dbg	line,	"include\tables_player.c", 5; -4,
 2116                        		.dbg	line,	"include\tables_player.c", 6; -5,
 2117                        		.dbg	line,	"include\tables_player.c", 7; -10,
 2118                        		.dbg	line,	"include\tables_player.c", 8; -4,
 2119                        		.dbg	line,	"include\tables_player.c", 9; -4,
 2120                        		.dbg	line,	"include\tables_player.c", 10; -7,
 2121                        		.dbg	line,	"include\tables_player.c", 11; -6,
 2122                        		.dbg	line,	"include\tables_player.c", 12; -3,
 2123                        		.dbg	line,	"include\tables_player.c", 13; -5,
 2124                        		.dbg	line,	"include\tables_player.c", 14; -2,
 2125                        		.dbg	line,	"include\tables_player.c", 15; -4,
 2126                        		.dbg	line,	"include\tables_player.c", 16; -1,
 2127                        		.dbg	line,	"include\tables_player.c", 17; -1,
 2128                        		.dbg	line,	"include\tables_player.c", 18; -1,
 2129                        		.dbg	line,	"include\tables_player.c", 19; -1,
 2130                        		.dbg	line,	"include\tables_player.c", 20; 0,
 2131                        		.dbg	line,	"include\tables_player.c", 21; 0,
 2132                        		.dbg	line,	"include\tables_player.c", 22; 0,
 2133                        		.dbg	line,	"include\tables_player.c", 23; 0,
 2134                        		.dbg	line,	"include\tables_player.c", 24; // DOWNWARD
 2135                        		.dbg	line,	"include\tables_player.c", 25; 1,
 2136                        		.dbg	line,	"include\tables_player.c", 26; 1,
 2137                        		.dbg	line,	"include\tables_player.c", 27; 1,
 2138                        		.dbg	line,	"include\tables_player.c", 28; 1,
 2139                        		.dbg	line,	"include\tables_player.c", 29; 4,
 2140                        		.dbg	line,	"include\tables_player.c", 30; 2,
 2141                        		.dbg	line,	"include\tables_player.c", 31; 5,
 2142                        		.dbg	line,	"include\tables_player.c", 32; 3,
 2143                        		.dbg	line,	"include\tables_player.c", 33; 6,
 2144                        		.dbg	line,	"include\tables_player.c", 34; 7,
 2145                        		.dbg	line,	"include\tables_player.c", 35; 4,
 2146                        		.dbg	line,	"include\tables_player.c", 36; 4,
 2147                        		.dbg	line,	"include\tables_player.c", 37; 10,
 2148                        		.dbg	line,	"include\tables_player.c", 38; 4,
 2149                        		.dbg	line,	"include\tables_player.c", 39; 4,
 2150                        		.dbg	line,	"include\tables_player.c", 40; 5
 2151                        		.dbg	line,	"include\tables_player.c", 41; };
 2152                        		.dbg	line,	"include\tables_player.c", 44; const signed char       TABLE_PLAYER_FALL[10]       =   {
 2153                        		.dbg	line,	"include\tables_player.c", 45; 1
 2154                        		.dbg	line,	"main.c", 20; };
 2155                        		.dbg	line,	"main.c", 21; #include "include/routines_LEVELS.c"
 2156                        		.dbg	line,	"include\routines_LEVELS.c", 1; #include "huc.h"
 2157                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
 2158                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
 2159                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
 2160                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
 2161                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
 2162                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
 2163                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
 2164                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
 2165                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
 2166                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
 2167                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
 2168                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 2169                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 2170                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 2171                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
 2172                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
 2173                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
 2174                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
 2175                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
 2176                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
 2177                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
 2178                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
 2179                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
 2180                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
 2181                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
 2182                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
 2183                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
 2184                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
 2185                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
 2186                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
 2187                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
 2188                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
 2189                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
 2190                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
 2191                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
 2192                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
 2193                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
 2194                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
 2195                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
 2196                        		.dbg	line,	"include\routines_LEVELS.c", 2; #include "hucc-scroll.h"
 2197                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 1; #ifndef _hucc_scroll_h
 2198                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 2; #define _hucc_scroll_h
 2199                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 4; /****************************************************************************
 2200                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 5; ; ***************************************************************************
 2201                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 6; ;
 2202                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 7; ; hucc-scroll.h
 2203                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 8; ;
 2204                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 9; ; Routines for a fast split-screen scrolling system.
 2205                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 10; ;
 2206                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 11; ; Copyright John Brandwood 2024.
 2207                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 12; ;
 2208                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 2209                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 2210                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 2211                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 16; ;
 2212                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 17; ; ***************************************************************************
 2213                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 18; ; ***************************************************************************
 2214                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 19; ;
 2215                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 20; ; The maximum number of splits for each screen layer is set in your project's
 2216                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 21; ; "hucc-config.inc" file, with the library having a limit of 128-per-layer.
 2217                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 22; ;
 2218                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 23; ; Your first active split must be defined to start at screen line 0, and then
 2219                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 24; ; the rest of the active splits must be in increasing line order to match the
 2220                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 25; ; way that the PC Engine displays the output image.
 2221                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 26; ;
 2222                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 27; ; You can have disabled splits interleaved with your active splits.
 2223                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 28; ;
 2224                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 29; ; Splits that are normally disabled can be used to create full screen effects
 2225                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 30; ; such as bouncing the screen up and down by adding blank areas at the top or
 2226                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 31; ; bottom of the screen, and then rapidly changing the height of those areas.
 2227                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 32; ;
 2228                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 33; ; ***************************************************************************
 2229                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 34; ; **************************************************************************/
 2230                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 36; // *************
 2231                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 37; // VDC bits for display_flags ...
 2232                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 38; // *************
 2233                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 40; #ifndef BKG_OFF
 2234                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 41; #define BKG_OFF 0x00
 2235                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 42; #endif
 2236                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 44; #ifndef SPR_OFF
 2237                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 45; #define SPR_OFF 0x00
 2238                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 46; #endif
 2239                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 48; #ifndef BKG_ON
 2240                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 49; #define BKG_ON 0x80
 2241                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 50; #endif
 2242                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 52; #ifndef SPR_ON
 2243                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 53; #define SPR_ON 0x40
 2244                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 54; #endif
 2245                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 56; // *************
 2246                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 57; // Functions in hucc-scroll.asm ...
 2247                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 58; // *************
 2248                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 60; #ifdef __HUCC__
 2249                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 62; #asmdef	HUCC_USES_NEW_SCROLL 1
 2250                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 64; extern void __fastcall scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
 2251                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 65; extern void __fastcall sgx_scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
 2252                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 67; extern void __fastcall disable_split( unsigned char index<acc> );
 2253                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 68; extern void __fastcall sgx_disable_split( unsigned char index<acc> );
 2254                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 70; extern void __fastcall __macro disable_all_splits( void );
 2255                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 71; extern void __fastcall __macro sgx_disable_all_splits( void );
 2256                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 73; #asm
 2257                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 74; .macro	_disable_all_splits
 2258                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 75; ldy	#HUCC_PCE_SPLITS - 1
 2259                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 76; !loop:		tya
 2260                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 77; call	_disable_split.1
 2261                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 78; dey
 2262                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 79; bpl	!loop-
 2263                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 80; .endm
 2264                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 82; .macro	_sgx_disable_all_splits
 2265                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 83; ldy	#HUCC_SGX_SPLITS - 1
 2266                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 84; !loop:		tya
 2267                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 85; call	_sgx_disable_split.1
 2268                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 86; dey
 2269                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 87; bpl	!loop-
 2270                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 88; .endm
 2271                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 89; #endasm
 2272                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 91; #endif // __HUCC__
 2273                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 93; #endif // _hucc_scroll_h
 2274                        		.dbg	line,	"include\routines_LEVELS.c", 3; #include "hucc-chrmap.h"
 2275                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 1; #ifndef _hucc_chrmap_h
 2276                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 2; #define _hucc_chrmap_h
 2277                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 4; /****************************************************************************
 2278                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 5; ; ***************************************************************************
 2279                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 6; ;
 2280                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 7; ; hucc-chrmap.h
 2281                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 8; ;
 2282                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 9; ; A simple map system based on 8x8 characters (aka "tiles") in BAT format.
 2283                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 10; ;
 2284                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 11; ; Copyright John Brandwood 2025.
 2285                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 12; ;
 2286                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 2287                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 2288                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 2289                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 16; ;
 2290                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 17; ; ***************************************************************************
 2291                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 18; ; ***************************************************************************
 2292                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 19; ;
 2293                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 20; ; The maximum X and Y size for chrmaps is 256 characters (2048 pixels).
 2294                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 21; ;
 2295                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 22; ; The maximum total size for a chrmap is 16KBytes, which allows for maps up
 2296                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 23; ; to 256x32 tiles (2048x256 pixels).
 2297                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 24; ;
 2298                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 25; ; ***************************************************************************
 2299                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 26; ; **************************************************************************/
 2300                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 28; // *************
 2301                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 29; // This code extends the blkmap library ...
 2302                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 30; // *************
 2303                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 32; #include "hucc-blkmap.h"
 2304                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 34; // *************
 2305                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 35; // Functions in chrmap.asm ...
 2306                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 36; // *************
 2307                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 38; #ifdef __HUCC__
 2308                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 40; #asmdef	HUCC_USES_CHRMAP 1
 2309                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 42; extern void __fastcall __nop set_chrmap( unsigned char __far *chrmap<vdc_map_bank:vdc_map_addr>, unsigned char tiles_w<vdc_map_line_w> );
 2310                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 44; extern void __fastcall draw_bat( void );
 2311                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 45; extern void __fastcall scroll_bat( void );
 2312                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 47; extern void __fastcall blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 2313                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 49; #ifdef _SGX
 2314                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 51; extern void __fastcall __nop sgx_set_chrmap( unsigned char __far *chrmap<sgx_map_bank:sgx_map_addr>, unsigned char tiles_w<sgx_map_line_w> );
 2315                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 53; extern void __fastcall sgx_draw_bat( void );
 2316                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 54; extern void __fastcall sgx_scroll_bat( void );
 2317                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 56; extern void __fastcall sgx_blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 2318                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 58; #endif
 2319                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 60; #endif // __HUCC__
 2320                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 62; #endif // _hucc_chrmap_h
 2321                        		.dbg	line,	"include\routines_LEVELS.c", 4; #include "hucc-blkmap.h"
 2322                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 1; #ifndef _hucc_blkmap_h
 2323                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 2; #define _hucc_blkmap_h
 2324                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 4; /****************************************************************************
 2325                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 5; ; ***************************************************************************
 2326                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 6; ;
 2327                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 7; ; hucc-blkmap.h
 2328                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 8; ;
 2329                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 9; ; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
 2330                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 10; ;
 2331                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 11; ; Copyright John Brandwood 2025.
 2332                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 12; ;
 2333                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 2334                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 2335                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 2336                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 16; ;
 2337                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 17; ; ***************************************************************************
 2338                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 18; ; ***************************************************************************
 2339                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 19; ;
 2340                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 20; ; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
 2341                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 21; ;
 2342                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 22; ; The maximum total size for a blkmap is 16KBytes, which allows for maps up
 2343                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 23; ; to 128x128 blocks (2048x2048 pixels).
 2344                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 24; ;
 2345                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 25; ; Huge multi-screen blkmaps are also supported (optionally).
 2346                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 26; ;
 2347                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 27; ; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
 2348                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 28; ;
 2349                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 29; ; The maximum total size for a multi-screen map is 8KBytes, which allows for
 2350                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 30; ; a total of 1024 screens.
 2351                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 31; ;
 2352                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 32; ; ***************************************************************************
 2353                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 33; ; **************************************************************************/
 2354                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 35; // *************
 2355                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 36; // Functions in blkmap.asm ...
 2356                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 37; // *************
 2357                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 39; #ifdef __HUCC__
 2358                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 41; #asmdef	HUCC_USES_BLKMAP 1
 2359                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 43; // Current top-left of drawn map in pixels.
 2360                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 44; extern unsigned int   vdc_map_pxl_x;
 2361                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 45; extern unsigned int   vdc_map_pxl_y;
 2362                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 47; // Width and height to draw/scroll in characters (not tiles).
 2363                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 48; extern unsigned char  vdc_map_draw_w;
 2364                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 49; extern unsigned char  vdc_map_draw_h;
 2365                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 51; // Width of map (or multi-screen BAT) in tiles.
 2366                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 52; extern unsigned char  vdc_map_line_w;
 2367                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 54; // Width of map in screens (if multi-screen map).
 2368                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 55; extern unsigned char  vdc_map_scrn_w;
 2369                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 57; // Extra information returned by get_map_block() and sgx_get_map_block(),
 2370                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 58; // which are the collision flags and the mask/overlay sprite for the BLK.
 2371                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 59; extern unsigned char  map_blk_flag;
 2372                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 60; extern unsigned char  map_blk_mask;
 2373                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 62; extern unsigned char  vdc_scr_bank;
 2374                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 63; extern unsigned char *vdc_scr_addr;
 2375                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 65; extern unsigned char  vdc_map_bank;
 2376                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 66; extern unsigned char *vdc_map_addr;
 2377                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 68; extern unsigned char  vdc_blk_bank;
 2378                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 69; extern unsigned char *vdc_blk_addr;
 2379                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 71; extern unsigned char  vdc_tbl_bank;
 2380                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 72; extern unsigned char *vdc_tbl_addr;
 2381                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 74; extern void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blocks<_al> );
 2382                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 75; extern void __fastcall __macro set_blkmap( unsigned char __far *blk_map<vdc_map_bank:vdc_map_addr>, unsigned char blocks_w<vdc_map_line_w> );
 2383                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 76; extern void __fastcall __macro set_multimap( unsigned char __far *multi_map<vdc_scr_bank:vdc_scr_addr>, unsigned char screens_w<vdc_map_scrn_w> );
 2384                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 78; extern void __fastcall draw_map( void );
 2385                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 79; extern void __fastcall scroll_map( void );
 2386                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 81; extern void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 2387                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 83; extern unsigned char __fastcall get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 2388                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 85; #asm
 2389                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 86; .macro	_set_blkmap.2
 2390                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 87; stz	vdc_scr_bank
 2391                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 88; .endm
 2392                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 90; .macro	_set_multimap.2
 2393                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 91; lda	vdc_bat_width
 2394                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 92; lsr	a
 2395                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 93; sta	vdc_map_line_w
 2396                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 94; .endm
 2397                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 96; .macro	SCREEN
 2398                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 97; db	(((\1) & $1FFF) | $6000) >> 8, bank(\1)
 2399                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 98; db	(((\2) & $1FFF) | $4000) >> 8, bank(\2)
 2400                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 99; db	(((\3) & $1FFF) | $6000) >> 8, bank(\3)
 2401                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 100; dw	(\4)
 2402                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 101; .endm
 2403                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 102; #endasm
 2404                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 104; #ifdef _SGX
 2405                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 106; // Current top-left of drawn map in pixels.
 2406                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 107; extern unsigned int   sgx_map_pxl_x;
 2407                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 108; extern unsigned int   sgx_map_pxl_y;
 2408                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 110; // Width and height to draw/scroll in characters (not tiles).
 2409                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 111; extern unsigned char  sgx_map_draw_w;
 2410                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 112; extern unsigned char  sgx_map_draw_h;
 2411                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 114; // Width of map (or multi-screen BAT) in tiles.
 2412                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 115; extern unsigned char  sgx_map_line_w;
 2413                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 117; // Width of map in screens (if multi-screen map).
 2414                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 118; extern unsigned char  sgx_map_scrn_w;
 2415                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 120; extern unsigned char  sgx_scr_bank;
 2416                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 121; extern unsigned char *sgx_scr_addr;
 2417                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 123; extern unsigned char  sgx_map_bank;
 2418                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 124; extern unsigned char *sgx_map_addr;
 2419                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 126; extern unsigned char  sgx_blk_bank;
 2420                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 127; extern unsigned char *sgx_blk_addr;
 2421                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 129; extern unsigned char  sgx_tbl_bank;
 2422                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 130; extern unsigned char *sgx_tbl_addr;
 2423                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 132; extern void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blocks<_al> );
 2424                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 133; extern void __fastcall __macro sgx_set_blkmap( unsigned char __far *blk_map<sgx_map_bank:sgx_map_addr>, unsigned char blocks_w<sgx_map_line_w> );
 2425                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 134; extern void __fastcall __macro sgx_set_multimap( unsigned char __far *multi_map<sgx_scr_bank:sgx_scr_addr>, unsigned char screens_w<sgx_map_scrn_w> );
 2426                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 136; extern void __fastcall sgx_draw_map( void );
 2427                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 137; extern void __fastcall sgx_scroll_map( void );
 2428                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 139; extern void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 2429                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 141; extern unsigned char __fastcall sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 2430                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 143; #asm
 2431                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 144; .macro	_sgx_set_blkmap.2
 2432                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 145; stz	sgx_scr_bank
 2433                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 146; .endm
 2434                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 148; .macro	_sgx_set_multimap.2
 2435                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 149; lda	sgx_bat_width
 2436                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 150; lsr	a
 2437                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 151; sta	sgx_map_line_w
 2438                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 152; .endm
 2439                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 153; #endasm
 2440                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 155; #endif
 2441                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 157; #endif // __HUCC__
 2442                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 159; #endif // _hucc_blkmap_h
 2443                        		.dbg	line,	"include\routines_LEVELS.c", 13; int check_BG(unsigned char x_offset , unsigned char y_offset)
 2444                        		.dbg	line,	"include\routines_LEVELS.c", 14; {
 2445                        	;***********************
 2446                        	;***********************
 2447                        	
 2448                        		.hucc
 2449    09:DF9C             		.proc		_check_BG
 2450                        		__enter		_check_BG
 2451                        	
 2452                        		.dbg	line,	"include\routines_LEVELS.c", 15; int player_COLL_X;
 2453                        	
 2454                        		.dbg	line,	"include\routines_LEVELS.c", 16; int player_COLL_Y;
 2455                        	
 2456                        		.dbg	line,	"include\routines_LEVELS.c", 19; player_COLL_X = player_pos_x + x_offset;
 2457                        		__ld.wm		_player_pos_x
         09:DF9C  AD 13 23   			lda.l	_player_pos_x
         09:DF9F  AC 14 23   			ldy.h	_player_pos_x
 2458                        		__add.us	2  /* x_offset */
         09:DFA2  A6 8D      			ldx	<__sp
         09:DFA4  18         			clc
         09:DFA5  75 0A      			adc	<__stack + 2, x
         09:DFA7  90 01      			bcc	!+
         09:DFA9  C8         			iny
         09:DFAA             	!:
 2459                        		__st.wmq	__check_BG_end - 2  /* player_COLL_X */
         09:DFAA  8D 1B 23   			sta.l	__check_BG_end - 2
         09:DFAD  8C 1C 23   			sty.h	__check_BG_end - 2
 2460                        	
 2461                        		.dbg	line,	"include\routines_LEVELS.c", 20; player_COLL_Y = player_pos_y + 32 - y_offset;
 2462                        		__ld.wm		_player_pos_y
         09:DFB0  AD 15 23   			lda.l	_player_pos_y
         09:DFB3  AC 16 23   			ldy.h	_player_pos_y
 2463                        		__add.wi	32
         09:DFB6  18         			clc
         09:DFB7  69 20      			adc.l	#32
         09:DFB9  90 01      			bcc	!+
         09:DFBB  C8         			iny
         09:DFBC             	!:
 2464                        		__sub.us	0  /* y_offset */
         09:DFBC  A6 8D      			ldx	<__sp
         09:DFBE  38         			sec
         09:DFBF  F5 08      			sbc	<__stack + 0, x
         09:DFC1  B0 01      			bcs	!+
         09:DFC3  88         			dey
         09:DFC4             	!:
 2465                        		__st.wmq	__check_BG_end - 4  /* player_COLL_Y */
         09:DFC4  8D 19 23   			sta.l	__check_BG_end - 4
         09:DFC7  8C 1A 23   			sty.h	__check_BG_end - 4
 2466                        	
 2467                        		.dbg	line,	"include\routines_LEVELS.c", 22; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
 2468                        		__ld.wm		__check_BG_end - 2  /* player_COLL_X */
         09:DFCA  AD 1B 23   			lda.l	__check_BG_end - 2
         09:DFCD  AC 1C 23   			ldy.h	__check_BG_end - 2
 2469                        		__add.wm	_sgx_map_pxl_x
         09:DFD0  18         			clc
         09:DFD1  6D 61 23   			adc.l	_sgx_map_pxl_x
         09:DFD4  42         			say
         09:DFD5  6D 62 23   			adc.h	_sgx_map_pxl_x
         09:DFD8  42         			say
 2470                        		__st.wmq	map_pxl_x
         09:DFD9  85 FC      			sta.l	map_pxl_x
         09:DFDB  84 FD      			sty.h	map_pxl_x
 2471                        		__ld.wm		__check_BG_end - 4  /* player_COLL_Y */
         09:DFDD  AD 19 23   			lda.l	__check_BG_end - 4
         09:DFE0  AC 1A 23   			ldy.h	__check_BG_end - 4
 2472                        		__add.wm	_sgx_map_pxl_y
         09:DFE3  18         			clc
         09:DFE4  6D 63 23   			adc.l	_sgx_map_pxl_y
         09:DFE7  42         			say
         09:DFE8  6D 64 23   			adc.h	_sgx_map_pxl_y
         09:DFEB  42         			say
 2473                        		__st.wmq	map_pxl_y
         09:DFEC  85 FE      			sta.l	map_pxl_y
         09:DFEE  84 FF      			sty.h	map_pxl_y
 2474                        		__call		_get_map_block.2
         09:DFF0  20 9F FF   			call	_get_map_block.2
 2475                        	
 2476                        		.dbg	line,	"include\routines_LEVELS.c", 23; }
 2477    09:DFF3             	.LL2:
 2478                        		__modsp		4
         09:DFF3  AA         			tax
         09:DFF4  A5 8D      			lda	<__sp
         09:DFF6  18         			clc
         09:DFF7  69 04      			adc	#4
         09:DFF9  85 8D      			sta	<__sp
         09:DFFB  8A         			txa
 2479                        		__return	1
         09:DFFC  AA         			tax
         09:DFFD  4C EF FF   			jmp	leave_proc
 2480                        		.dbg	clear
 2481                        		.endp
 2482                        		.pceas
 2483                        	
 2484                        		.dbg	line,	"include\routines_LEVELS.c", 26; int check_WALL_TR()
 2485                        		.dbg	line,	"include\routines_LEVELS.c", 27; {
 2486                        	;***********************
 2487                        	;***********************
 2488                        	
 2489                        		.hucc
 2490    02:C311             		.proc		_check_WALL_TR
 2491                        		__enter		_check_WALL_TR
 2492                        	
 2493                        		.dbg	line,	"include\routines_LEVELS.c", 28; int player_COLL_X;
 2494                        	
 2495                        		.dbg	line,	"include\routines_LEVELS.c", 29; int player_COLL_Y;
 2496                        	
 2497                        		.dbg	line,	"include\routines_LEVELS.c", 32; player_COLL_X = player_pos_x + 24;
 2498                        		__ld.wm		_player_pos_x
         02:C311  AD 13 23   			lda.l	_player_pos_x
         02:C314  AC 14 23   			ldy.h	_player_pos_x
 2499                        		__add.wi	24
         02:C317  18         			clc
         02:C318  69 18      			adc.l	#24
         02:C31A  90 01      			bcc	!+
         02:C31C  C8         			iny
         02:C31D             	!:
 2500                        		__st.wmq	__check_WALL_TR_end - 2  /* player_COLL_X */
         02:C31D  8D 1B 23   			sta.l	__check_WALL_TR_end - 2
         02:C320  8C 1C 23   			sty.h	__check_WALL_TR_end - 2
 2501                        	
 2502                        		.dbg	line,	"include\routines_LEVELS.c", 33; player_COLL_Y = player_pos_y + 15;
 2503                        		__ld.wm		_player_pos_y
         02:C323  AD 15 23   			lda.l	_player_pos_y
         02:C326  AC 16 23   			ldy.h	_player_pos_y
 2504                        		__add.wi	15
         02:C329  18         			clc
         02:C32A  69 0F      			adc.l	#15
         02:C32C  90 01      			bcc	!+
         02:C32E  C8         			iny
         02:C32F             	!:
 2505                        		__st.wmq	__check_WALL_TR_end - 4  /* player_COLL_Y */
         02:C32F  8D 19 23   			sta.l	__check_WALL_TR_end - 4
         02:C332  8C 1A 23   			sty.h	__check_WALL_TR_end - 4
 2506                        	
 2507                        		.dbg	line,	"include\routines_LEVELS.c", 36; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
 2508                        		__ld.wm		__check_WALL_TR_end - 2  /* player_COLL_X */
         02:C335  AD 1B 23   			lda.l	__check_WALL_TR_end - 2
         02:C338  AC 1C 23   			ldy.h	__check_WALL_TR_end - 2
 2509                        		__add.wm	_sgx_map_pxl_x
         02:C33B  18         			clc
         02:C33C  6D 61 23   			adc.l	_sgx_map_pxl_x
         02:C33F  42         			say
         02:C340  6D 62 23   			adc.h	_sgx_map_pxl_x
         02:C343  42         			say
 2510                        		__st.wmq	map_pxl_x
         02:C344  85 FC      			sta.l	map_pxl_x
         02:C346  84 FD      			sty.h	map_pxl_x
 2511                        		__ld.wm		__check_WALL_TR_end - 4  /* player_COLL_Y */
         02:C348  AD 19 23   			lda.l	__check_WALL_TR_end - 4
         02:C34B  AC 1A 23   			ldy.h	__check_WALL_TR_end - 4
 2512                        		__add.wm	_sgx_map_pxl_y
         02:C34E  18         			clc
         02:C34F  6D 63 23   			adc.l	_sgx_map_pxl_y
         02:C352  42         			say
         02:C353  6D 64 23   			adc.h	_sgx_map_pxl_y
         02:C356  42         			say
 2513                        		__st.wmq	map_pxl_y
         02:C357  85 FE      			sta.l	map_pxl_y
         02:C359  84 FF      			sty.h	map_pxl_y
 2514                        		__call		_get_map_block.2
         02:C35B  20 9F FF   			call	_get_map_block.2
 2515                        	
 2516                        		.dbg	line,	"include\routines_LEVELS.c", 37; }
 2517    02:C35E             	.LL3:
 2518                        		__return	1
         02:C35E  AA         			tax
         02:C35F  4C EF FF   			jmp	leave_proc
 2519                        		.dbg	clear
 2520                        		.endp
 2521                        		.pceas
 2522                        	
 2523                        		.dbg	line,	"include\routines_LEVELS.c", 40; int check_WALL_TL()
 2524                        		.dbg	line,	"include\routines_LEVELS.c", 41; {
 2525                        	;***********************
 2526                        	;***********************
 2527                        	
 2528                        		.hucc
 2529    02:C362             		.proc		_check_WALL_TL
 2530                        		__enter		_check_WALL_TL
 2531                        	
 2532                        		.dbg	line,	"include\routines_LEVELS.c", 42; int player_COLL_X;
 2533                        	
 2534                        		.dbg	line,	"include\routines_LEVELS.c", 43; int player_COLL_Y;
 2535                        	
 2536                        		.dbg	line,	"include\routines_LEVELS.c", 46; player_COLL_X = player_pos_x + 8;
 2537                        		__ld.wm		_player_pos_x
         02:C362  AD 13 23   			lda.l	_player_pos_x
         02:C365  AC 14 23   			ldy.h	_player_pos_x
 2538                        		__add.wi	8
         02:C368  18         			clc
         02:C369  69 08      			adc.l	#8
         02:C36B  90 01      			bcc	!+
         02:C36D  C8         			iny
         02:C36E             	!:
 2539                        		__st.wmq	__check_WALL_TL_end - 2  /* player_COLL_X */
         02:C36E  8D 1B 23   			sta.l	__check_WALL_TL_end - 2
         02:C371  8C 1C 23   			sty.h	__check_WALL_TL_end - 2
 2540                        	
 2541                        		.dbg	line,	"include\routines_LEVELS.c", 47; player_COLL_Y = player_pos_y + 15;
 2542                        		__ld.wm		_player_pos_y
         02:C374  AD 15 23   			lda.l	_player_pos_y
         02:C377  AC 16 23   			ldy.h	_player_pos_y
 2543                        		__add.wi	15
         02:C37A  18         			clc
         02:C37B  69 0F      			adc.l	#15
         02:C37D  90 01      			bcc	!+
         02:C37F  C8         			iny
         02:C380             	!:
 2544                        		__st.wmq	__check_WALL_TL_end - 4  /* player_COLL_Y */
         02:C380  8D 19 23   			sta.l	__check_WALL_TL_end - 4
         02:C383  8C 1A 23   			sty.h	__check_WALL_TL_end - 4
 2545                        	
 2546                        		.dbg	line,	"include\routines_LEVELS.c", 50; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
 2547                        		__ld.wm		__check_WALL_TL_end - 2  /* player_COLL_X */
         02:C386  AD 1B 23   			lda.l	__check_WALL_TL_end - 2
         02:C389  AC 1C 23   			ldy.h	__check_WALL_TL_end - 2
 2548                        		__add.wm	_sgx_map_pxl_x
         02:C38C  18         			clc
         02:C38D  6D 61 23   			adc.l	_sgx_map_pxl_x
         02:C390  42         			say
         02:C391  6D 62 23   			adc.h	_sgx_map_pxl_x
         02:C394  42         			say
 2549                        		__st.wmq	map_pxl_x
         02:C395  85 FC      			sta.l	map_pxl_x
         02:C397  84 FD      			sty.h	map_pxl_x
 2550                        		__ld.wm		__check_WALL_TL_end - 4  /* player_COLL_Y */
         02:C399  AD 19 23   			lda.l	__check_WALL_TL_end - 4
         02:C39C  AC 1A 23   			ldy.h	__check_WALL_TL_end - 4
 2551                        		__add.wm	_sgx_map_pxl_y
         02:C39F  18         			clc
         02:C3A0  6D 63 23   			adc.l	_sgx_map_pxl_y
         02:C3A3  42         			say
         02:C3A4  6D 64 23   			adc.h	_sgx_map_pxl_y
         02:C3A7  42         			say
 2552                        		__st.wmq	map_pxl_y
         02:C3A8  85 FE      			sta.l	map_pxl_y
         02:C3AA  84 FF      			sty.h	map_pxl_y
 2553                        		__call		_get_map_block.2
         02:C3AC  20 9F FF   			call	_get_map_block.2
 2554                        	
 2555                        		.dbg	line,	"include\routines_LEVELS.c", 51; }
 2556    02:C3AF             	.LL4:
 2557                        		__return	1
         02:C3AF  AA         			tax
         02:C3B0  4C EF FF   			jmp	leave_proc
 2558                        		.dbg	clear
 2559                        		.endp
 2560                        		.pceas
 2561                        	
 2562                        		.dbg	line,	"include\routines_LEVELS.c", 54; int check_WALL_BR()
 2563                        		.dbg	line,	"include\routines_LEVELS.c", 55; {
 2564                        	;***********************
 2565                        	;***********************
 2566                        	
 2567                        		.hucc
 2568    02:C3B3             		.proc		_check_WALL_BR
 2569                        		__enter		_check_WALL_BR
 2570                        	
 2571                        		.dbg	line,	"include\routines_LEVELS.c", 56; int player_COLL_X;
 2572                        	
 2573                        		.dbg	line,	"include\routines_LEVELS.c", 57; int player_COLL_Y;
 2574                        	
 2575                        		.dbg	line,	"include\routines_LEVELS.c", 60; player_COLL_X = player_pos_x + 24;
 2576                        		__ld.wm		_player_pos_x
         02:C3B3  AD 13 23   			lda.l	_player_pos_x
         02:C3B6  AC 14 23   			ldy.h	_player_pos_x
 2577                        		__add.wi	24
         02:C3B9  18         			clc
         02:C3BA  69 18      			adc.l	#24
         02:C3BC  90 01      			bcc	!+
         02:C3BE  C8         			iny
         02:C3BF             	!:
 2578                        		__st.wmq	__check_WALL_BR_end - 2  /* player_COLL_X */
         02:C3BF  8D 1B 23   			sta.l	__check_WALL_BR_end - 2
         02:C3C2  8C 1C 23   			sty.h	__check_WALL_BR_end - 2
 2579                        	
 2580                        		.dbg	line,	"include\routines_LEVELS.c", 61; player_COLL_Y = player_pos_y + 31;
 2581                        		__ld.wm		_player_pos_y
         02:C3C5  AD 15 23   			lda.l	_player_pos_y
         02:C3C8  AC 16 23   			ldy.h	_player_pos_y
 2582                        		__add.wi	31
         02:C3CB  18         			clc
         02:C3CC  69 1F      			adc.l	#31
         02:C3CE  90 01      			bcc	!+
         02:C3D0  C8         			iny
         02:C3D1             	!:
 2583                        		__st.wmq	__check_WALL_BR_end - 4  /* player_COLL_Y */
         02:C3D1  8D 19 23   			sta.l	__check_WALL_BR_end - 4
         02:C3D4  8C 1A 23   			sty.h	__check_WALL_BR_end - 4
 2584                        	
 2585                        		.dbg	line,	"include\routines_LEVELS.c", 64; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
 2586                        		__ld.wm		__check_WALL_BR_end - 2  /* player_COLL_X */
         02:C3D7  AD 1B 23   			lda.l	__check_WALL_BR_end - 2
         02:C3DA  AC 1C 23   			ldy.h	__check_WALL_BR_end - 2
 2587                        		__add.wm	_sgx_map_pxl_x
         02:C3DD  18         			clc
         02:C3DE  6D 61 23   			adc.l	_sgx_map_pxl_x
         02:C3E1  42         			say
         02:C3E2  6D 62 23   			adc.h	_sgx_map_pxl_x
         02:C3E5  42         			say
 2588                        		__st.wmq	map_pxl_x
         02:C3E6  85 FC      			sta.l	map_pxl_x
         02:C3E8  84 FD      			sty.h	map_pxl_x
 2589                        		__ld.wm		__check_WALL_BR_end - 4  /* player_COLL_Y */
         02:C3EA  AD 19 23   			lda.l	__check_WALL_BR_end - 4
         02:C3ED  AC 1A 23   			ldy.h	__check_WALL_BR_end - 4
 2590                        		__add.wm	_sgx_map_pxl_y
         02:C3F0  18         			clc
         02:C3F1  6D 63 23   			adc.l	_sgx_map_pxl_y
         02:C3F4  42         			say
         02:C3F5  6D 64 23   			adc.h	_sgx_map_pxl_y
         02:C3F8  42         			say
 2591                        		__st.wmq	map_pxl_y
         02:C3F9  85 FE      			sta.l	map_pxl_y
         02:C3FB  84 FF      			sty.h	map_pxl_y
 2592                        		__call		_get_map_block.2
         02:C3FD  20 9F FF   			call	_get_map_block.2
 2593                        	
 2594                        		.dbg	line,	"include\routines_LEVELS.c", 65; }
 2595    02:C400             	.LL5:
 2596                        		__return	1
         02:C400  AA         			tax
         02:C401  4C EF FF   			jmp	leave_proc
 2597                        		.dbg	clear
 2598                        		.endp
 2599                        		.pceas
 2600                        	
 2601                        		.dbg	line,	"include\routines_LEVELS.c", 68; int check_WALL_BL()
 2602                        		.dbg	line,	"include\routines_LEVELS.c", 69; {
 2603                        	;***********************
 2604                        	;***********************
 2605                        	
 2606                        		.hucc
 2607    02:C404             		.proc		_check_WALL_BL
 2608                        		__enter		_check_WALL_BL
 2609                        	
 2610                        		.dbg	line,	"include\routines_LEVELS.c", 70; int player_COLL_X;
 2611                        	
 2612                        		.dbg	line,	"include\routines_LEVELS.c", 71; int player_COLL_Y;
 2613                        	
 2614                        		.dbg	line,	"include\routines_LEVELS.c", 74; player_COLL_X = player_pos_x + 8;
 2615                        		__ld.wm		_player_pos_x
         02:C404  AD 13 23   			lda.l	_player_pos_x
         02:C407  AC 14 23   			ldy.h	_player_pos_x
 2616                        		__add.wi	8
         02:C40A  18         			clc
         02:C40B  69 08      			adc.l	#8
         02:C40D  90 01      			bcc	!+
         02:C40F  C8         			iny
         02:C410             	!:
 2617                        		__st.wmq	__check_WALL_BL_end - 2  /* player_COLL_X */
         02:C410  8D 1B 23   			sta.l	__check_WALL_BL_end - 2
         02:C413  8C 1C 23   			sty.h	__check_WALL_BL_end - 2
 2618                        	
 2619                        		.dbg	line,	"include\routines_LEVELS.c", 75; player_COLL_Y = player_pos_y + 31;
 2620                        		__ld.wm		_player_pos_y
         02:C416  AD 15 23   			lda.l	_player_pos_y
         02:C419  AC 16 23   			ldy.h	_player_pos_y
 2621                        		__add.wi	31
         02:C41C  18         			clc
         02:C41D  69 1F      			adc.l	#31
         02:C41F  90 01      			bcc	!+
         02:C421  C8         			iny
         02:C422             	!:
 2622                        		__st.wmq	__check_WALL_BL_end - 4  /* player_COLL_Y */
         02:C422  8D 19 23   			sta.l	__check_WALL_BL_end - 4
         02:C425  8C 1A 23   			sty.h	__check_WALL_BL_end - 4
 2623                        	
 2624                        		.dbg	line,	"include\routines_LEVELS.c", 78; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
 2625                        		__ld.wm		__check_WALL_BL_end - 2  /* player_COLL_X */
         02:C428  AD 1B 23   			lda.l	__check_WALL_BL_end - 2
         02:C42B  AC 1C 23   			ldy.h	__check_WALL_BL_end - 2
 2626                        		__add.wm	_sgx_map_pxl_x
         02:C42E  18         			clc
         02:C42F  6D 61 23   			adc.l	_sgx_map_pxl_x
         02:C432  42         			say
         02:C433  6D 62 23   			adc.h	_sgx_map_pxl_x
         02:C436  42         			say
 2627                        		__st.wmq	map_pxl_x
         02:C437  85 FC      			sta.l	map_pxl_x
         02:C439  84 FD      			sty.h	map_pxl_x
 2628                        		__ld.wm		__check_WALL_BL_end - 4  /* player_COLL_Y */
         02:C43B  AD 19 23   			lda.l	__check_WALL_BL_end - 4
         02:C43E  AC 1A 23   			ldy.h	__check_WALL_BL_end - 4
 2629                        		__add.wm	_sgx_map_pxl_y
         02:C441  18         			clc
         02:C442  6D 63 23   			adc.l	_sgx_map_pxl_y
         02:C445  42         			say
         02:C446  6D 64 23   			adc.h	_sgx_map_pxl_y
         02:C449  42         			say
 2630                        		__st.wmq	map_pxl_y
         02:C44A  85 FE      			sta.l	map_pxl_y
         02:C44C  84 FF      			sty.h	map_pxl_y
 2631                        		__call		_get_map_block.2
         02:C44E  20 9F FF   			call	_get_map_block.2
 2632                        	
 2633                        		.dbg	line,	"include\routines_LEVELS.c", 79; }
 2634    02:C451             	.LL6:
 2635                        		__return	1
         02:C451  AA         			tax
         02:C452  4C EF FF   			jmp	leave_proc
 2636                        		.dbg	clear
 2637                        		.endp
 2638                        		.pceas
 2639                        	
 2640                        		.dbg	line,	"include\routines_LEVELS.c", 82; int check_FLOOR_R()
 2641                        		.dbg	line,	"include\routines_LEVELS.c", 83; {
 2642                        	;***********************
 2643                        	;***********************
 2644                        	
 2645                        		.hucc
 2646    02:C455             		.proc		_check_FLOOR_R
 2647                        		__enter		_check_FLOOR_R
 2648                        	
 2649                        		.dbg	line,	"include\routines_LEVELS.c", 84; int player_COLL_X;
 2650                        	
 2651                        		.dbg	line,	"include\routines_LEVELS.c", 85; int player_COLL_Y;
 2652                        	
 2653                        		.dbg	line,	"include\routines_LEVELS.c", 88; player_COLL_X = player_pos_x + 11;
 2654                        		__ld.wm		_player_pos_x
         02:C455  AD 13 23   			lda.l	_player_pos_x
         02:C458  AC 14 23   			ldy.h	_player_pos_x
 2655                        		__add.wi	11
         02:C45B  18         			clc
         02:C45C  69 0B      			adc.l	#11
         02:C45E  90 01      			bcc	!+
         02:C460  C8         			iny
         02:C461             	!:
 2656                        		__st.wmq	__check_FLOOR_R_end - 2  /* player_COLL_X */
         02:C461  8D 1B 23   			sta.l	__check_FLOOR_R_end - 2
         02:C464  8C 1C 23   			sty.h	__check_FLOOR_R_end - 2
 2657                        	
 2658                        		.dbg	line,	"include\routines_LEVELS.c", 89; player_COLL_Y = player_pos_y + 32;
 2659                        		__ld.wm		_player_pos_y
         02:C467  AD 15 23   			lda.l	_player_pos_y
         02:C46A  AC 16 23   			ldy.h	_player_pos_y
 2660                        		__add.wi	32
         02:C46D  18         			clc
         02:C46E  69 20      			adc.l	#32
         02:C470  90 01      			bcc	!+
         02:C472  C8         			iny
         02:C473             	!:
 2661                        		__st.wmq	__check_FLOOR_R_end - 4  /* player_COLL_Y */
         02:C473  8D 19 23   			sta.l	__check_FLOOR_R_end - 4
         02:C476  8C 1A 23   			sty.h	__check_FLOOR_R_end - 4
 2662                        	
 2663                        		.dbg	line,	"include\routines_LEVELS.c", 92; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
 2664                        		__ld.wm		__check_FLOOR_R_end - 2  /* player_COLL_X */
         02:C479  AD 1B 23   			lda.l	__check_FLOOR_R_end - 2
         02:C47C  AC 1C 23   			ldy.h	__check_FLOOR_R_end - 2
 2665                        		__add.wm	_sgx_map_pxl_x
         02:C47F  18         			clc
         02:C480  6D 61 23   			adc.l	_sgx_map_pxl_x
         02:C483  42         			say
         02:C484  6D 62 23   			adc.h	_sgx_map_pxl_x
         02:C487  42         			say
 2666                        		__st.wmq	map_pxl_x
         02:C488  85 FC      			sta.l	map_pxl_x
         02:C48A  84 FD      			sty.h	map_pxl_x
 2667                        		__ld.wm		__check_FLOOR_R_end - 4  /* player_COLL_Y */
         02:C48C  AD 19 23   			lda.l	__check_FLOOR_R_end - 4
         02:C48F  AC 1A 23   			ldy.h	__check_FLOOR_R_end - 4
 2668                        		__add.wm	_sgx_map_pxl_y
         02:C492  18         			clc
         02:C493  6D 63 23   			adc.l	_sgx_map_pxl_y
         02:C496  42         			say
         02:C497  6D 64 23   			adc.h	_sgx_map_pxl_y
         02:C49A  42         			say
 2669                        		__st.wmq	map_pxl_y
         02:C49B  85 FE      			sta.l	map_pxl_y
         02:C49D  84 FF      			sty.h	map_pxl_y
 2670                        		__call		_get_map_block.2
         02:C49F  20 9F FF   			call	_get_map_block.2
 2671                        	
 2672                        		.dbg	line,	"include\routines_LEVELS.c", 93; }
 2673    02:C4A2             	.LL7:
 2674                        		__return	1
         02:C4A2  AA         			tax
         02:C4A3  4C EF FF   			jmp	leave_proc
 2675                        		.dbg	clear
 2676                        		.endp
 2677                        		.pceas
 2678                        	
 2679                        		.dbg	line,	"include\routines_LEVELS.c", 96; int check_FLOOR_L()
 2680                        		.dbg	line,	"include\routines_LEVELS.c", 97; {
 2681                        	;***********************
 2682                        	;***********************
 2683                        	
 2684                        		.hucc
 2685    02:C4A6             		.proc		_check_FLOOR_L
 2686                        		__enter		_check_FLOOR_L
 2687                        	
 2688                        		.dbg	line,	"include\routines_LEVELS.c", 98; int player_COLL_X;
 2689                        	
 2690                        		.dbg	line,	"include\routines_LEVELS.c", 99; int player_COLL_Y;
 2691                        	
 2692                        		.dbg	line,	"include\routines_LEVELS.c", 102; player_COLL_X = player_pos_x + 10;
 2693                        		__ld.wm		_player_pos_x
         02:C4A6  AD 13 23   			lda.l	_player_pos_x
         02:C4A9  AC 14 23   			ldy.h	_player_pos_x
 2694                        		__add.wi	10
         02:C4AC  18         			clc
         02:C4AD  69 0A      			adc.l	#10
         02:C4AF  90 01      			bcc	!+
         02:C4B1  C8         			iny
         02:C4B2             	!:
 2695                        		__st.wmq	__check_FLOOR_L_end - 2  /* player_COLL_X */
         02:C4B2  8D 1B 23   			sta.l	__check_FLOOR_L_end - 2
         02:C4B5  8C 1C 23   			sty.h	__check_FLOOR_L_end - 2
 2696                        	
 2697                        		.dbg	line,	"include\routines_LEVELS.c", 103; player_COLL_Y = player_pos_y + 32;
 2698                        		__ld.wm		_player_pos_y
         02:C4B8  AD 15 23   			lda.l	_player_pos_y
         02:C4BB  AC 16 23   			ldy.h	_player_pos_y
 2699                        		__add.wi	32
         02:C4BE  18         			clc
         02:C4BF  69 20      			adc.l	#32
         02:C4C1  90 01      			bcc	!+
         02:C4C3  C8         			iny
         02:C4C4             	!:
 2700                        		__st.wmq	__check_FLOOR_L_end - 4  /* player_COLL_Y */
         02:C4C4  8D 19 23   			sta.l	__check_FLOOR_L_end - 4
         02:C4C7  8C 1A 23   			sty.h	__check_FLOOR_L_end - 4
 2701                        	
 2702                        		.dbg	line,	"include\routines_LEVELS.c", 106; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
 2703                        		__ld.wm		__check_FLOOR_L_end - 2  /* player_COLL_X */
         02:C4CA  AD 1B 23   			lda.l	__check_FLOOR_L_end - 2
         02:C4CD  AC 1C 23   			ldy.h	__check_FLOOR_L_end - 2
 2704                        		__add.wm	_sgx_map_pxl_x
         02:C4D0  18         			clc
         02:C4D1  6D 61 23   			adc.l	_sgx_map_pxl_x
         02:C4D4  42         			say
         02:C4D5  6D 62 23   			adc.h	_sgx_map_pxl_x
         02:C4D8  42         			say
 2705                        		__st.wmq	map_pxl_x
         02:C4D9  85 FC      			sta.l	map_pxl_x
         02:C4DB  84 FD      			sty.h	map_pxl_x
 2706                        		__ld.wm		__check_FLOOR_L_end - 4  /* player_COLL_Y */
         02:C4DD  AD 19 23   			lda.l	__check_FLOOR_L_end - 4
         02:C4E0  AC 1A 23   			ldy.h	__check_FLOOR_L_end - 4
 2707                        		__add.wm	_sgx_map_pxl_y
         02:C4E3  18         			clc
         02:C4E4  6D 63 23   			adc.l	_sgx_map_pxl_y
         02:C4E7  42         			say
         02:C4E8  6D 64 23   			adc.h	_sgx_map_pxl_y
         02:C4EB  42         			say
 2708                        		__st.wmq	map_pxl_y
         02:C4EC  85 FE      			sta.l	map_pxl_y
         02:C4EE  84 FF      			sty.h	map_pxl_y
 2709                        		__call		_get_map_block.2
         02:C4F0  20 9F FF   			call	_get_map_block.2
 2710                        	
 2711                        		.dbg	line,	"include\routines_LEVELS.c", 107; }
 2712    02:C4F3             	.LL8:
 2713                        		__return	1
         02:C4F3  AA         			tax
         02:C4F4  4C EF FF   			jmp	leave_proc
 2714                        		.dbg	clear
 2715                        		.endp
 2716                        		.pceas
 2717                        	
 2718                        		.dbg	line,	"include\routines_LEVELS.c", 110; int check_LADDER(unsigned char x_offset , unsigned char y_offset)
 2719                        		.dbg	line,	"include\routines_LEVELS.c", 111; {
 2720                        	;***********************
 2721                        	;***********************
 2722                        	
 2723                        		.hucc
 2724    02:C2B3             		.proc		_check_LADDER
 2725                        		__enter		_check_LADDER
 2726                        	
 2727                        		.dbg	line,	"include\routines_LEVELS.c", 112; int player_COLL_X;
 2728                        	
 2729                        		.dbg	line,	"include\routines_LEVELS.c", 113; int player_COLL_Y;
 2730                        	
 2731                        		.dbg	line,	"include\routines_LEVELS.c", 116; player_COLL_X = player_pos_x + x_offset;
 2732                        		__ld.wm		_player_pos_x
         02:C2B3  AD 13 23   			lda.l	_player_pos_x
         02:C2B6  AC 14 23   			ldy.h	_player_pos_x
 2733                        		__add.us	2  /* x_offset */
         02:C2B9  A6 8D      			ldx	<__sp
         02:C2BB  18         			clc
         02:C2BC  75 0A      			adc	<__stack + 2, x
         02:C2BE  90 01      			bcc	!+
         02:C2C0  C8         			iny
         02:C2C1             	!:
 2734                        		__st.wmq	__check_LADDER_end - 2  /* player_COLL_X */
         02:C2C1  8D 1B 23   			sta.l	__check_LADDER_end - 2
         02:C2C4  8C 1C 23   			sty.h	__check_LADDER_end - 2
 2735                        	
 2736                        		.dbg	line,	"include\routines_LEVELS.c", 117; player_COLL_Y = player_pos_y + y_offset;
 2737                        		__ld.wm		_player_pos_y
         02:C2C7  AD 15 23   			lda.l	_player_pos_y
         02:C2CA  AC 16 23   			ldy.h	_player_pos_y
 2738                        		__add.us	0  /* y_offset */
         02:C2CD  A6 8D      			ldx	<__sp
         02:C2CF  18         			clc
         02:C2D0  75 08      			adc	<__stack + 0, x
         02:C2D2  90 01      			bcc	!+
         02:C2D4  C8         			iny
         02:C2D5             	!:
 2739                        		__st.wmq	__check_LADDER_end - 4  /* player_COLL_Y */
         02:C2D5  8D 19 23   			sta.l	__check_LADDER_end - 4
         02:C2D8  8C 1A 23   			sty.h	__check_LADDER_end - 4
 2740                        	
 2741                        		.dbg	line,	"include\routines_LEVELS.c", 120; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
 2742                        		__ld.wm		__check_LADDER_end - 2  /* player_COLL_X */
         02:C2DB  AD 1B 23   			lda.l	__check_LADDER_end - 2
         02:C2DE  AC 1C 23   			ldy.h	__check_LADDER_end - 2
 2743                        		__add.wm	_sgx_map_pxl_x
         02:C2E1  18         			clc
         02:C2E2  6D 61 23   			adc.l	_sgx_map_pxl_x
         02:C2E5  42         			say
         02:C2E6  6D 62 23   			adc.h	_sgx_map_pxl_x
         02:C2E9  42         			say
 2744                        		__st.wmq	map_pxl_x
         02:C2EA  85 FC      			sta.l	map_pxl_x
         02:C2EC  84 FD      			sty.h	map_pxl_x
 2745                        		__ld.wm		__check_LADDER_end - 4  /* player_COLL_Y */
         02:C2EE  AD 19 23   			lda.l	__check_LADDER_end - 4
         02:C2F1  AC 1A 23   			ldy.h	__check_LADDER_end - 4
 2746                        		__add.wm	_sgx_map_pxl_y
         02:C2F4  18         			clc
         02:C2F5  6D 63 23   			adc.l	_sgx_map_pxl_y
         02:C2F8  42         			say
         02:C2F9  6D 64 23   			adc.h	_sgx_map_pxl_y
         02:C2FC  42         			say
 2747                        		__st.wmq	map_pxl_y
         02:C2FD  85 FE      			sta.l	map_pxl_y
         02:C2FF  84 FF      			sty.h	map_pxl_y
 2748                        		__call		_get_map_block.2
         02:C301  20 9F FF   			call	_get_map_block.2
 2749                        	
 2750                        		.dbg	line,	"include\routines_LEVELS.c", 121; }
 2751    02:C304             	.LL9:
 2752                        		__modsp		4
         02:C304  AA         			tax
         02:C305  A5 8D      			lda	<__sp
         02:C307  18         			clc
         02:C308  69 04      			adc	#4
         02:C30A  85 8D      			sta	<__sp
         02:C30C  8A         			txa
 2753                        		__return	1
         02:C30D  AA         			tax
         02:C30E  4C EF FF   			jmp	leave_proc
 2754                        		.dbg	clear
 2755                        		.endp
 2756                        		.pceas
 2757                        	
 2758                        		.dbg	line,	"include\routines_LEVELS.c", 130; void scroll_BG()
 2759                        		.dbg	line,	"include\routines_LEVELS.c", 131; {
 2760                        	;***********************
 2761                        	;***********************
 2762                        	
 2763                        		.hucc
 2764    01:DFC9             		.proc		_scroll_BG
 2765                        		__enter		_scroll_BG
 2766                        	
 2767                        		.dbg	line,	"include\routines_LEVELS.c", 132; // UPDATE VDC2 BG //
 2768                        	
 2769                        		.dbg	line,	"include\routines_LEVELS.c", 133; sgx_scroll_map();
 2770                        		__call		_sgx_scroll_map
         01:DFC9  20 95 FF   			call	_sgx_scroll_map
 2771                        	
 2772                        		.dbg	line,	"include\routines_LEVELS.c", 135; //--------------------------------------------------------------------------------------//
 2773                        	
 2774                        		.dbg	line,	"include\routines_LEVELS.c", 136; //                                        VDC 2                                         //
 2775                        	
 2776                        		.dbg	line,	"include\routines_LEVELS.c", 137; //--------------------------------------------------------------------------------------//
 2777                        	
 2778                        		.dbg	line,	"include\routines_LEVELS.c", 139; sgx_scroll_split(0,   0, sgx_map_pxl_x & (BAT_SIZE_W - 1), sgx_map_pxl_y & (BAT_SIZE_H - 1), BKG_ON | SPR_ON);
 2779                        		__st.umiq	0, _al
         01:DFCC  64 F8      			stz	_al
 2780                        		__st.umiq	0, _ah
         01:DFCE  64 F9      			stz	_ah
 2781                        		__ld.wm		_sgx_map_pxl_x
         01:DFD0  AD 61 23   			lda.l	_sgx_map_pxl_x
         01:DFD3  AC 62 23   			ldy.h	_sgx_map_pxl_x
 2782                        		__and.wi	2047
         01:DFD6  29 FF      			and.l	#2047
         01:DFD8  42         			say
         01:DFD9  29 07      			and.h	#2047
         01:DFDB  42         			say
 2783                        		__st.wmq	_bx
         01:DFDC  85 FA      			sta.l	_bx
         01:DFDE  84 FB      			sty.h	_bx
 2784                        		__ld.wm		_sgx_map_pxl_y
         01:DFE0  AD 63 23   			lda.l	_sgx_map_pxl_y
         01:DFE3  AC 64 23   			ldy.h	_sgx_map_pxl_y
 2785                        		__and.wi	255
         01:DFE6  29 FF      			and	#255
         01:DFE8  C2         			cly
 2786                        		__st.wmq	_cx
         01:DFE9  85 FC      			sta.l	_cx
         01:DFEB  84 FD      			sty.h	_cx
 2787                        		__st.umiq	192, _dl
         01:DFED  A9 C0      			lda.l	#192
         01:DFEF  85 FE      			sta	_dl
 2788                        		__call		_sgx_scroll_split.5
         01:DFF1  20 8B FF   			call	_sgx_scroll_split.5
 2789                        	
 2790                        		.dbg	line,	"include\routines_LEVELS.c", 140; }
 2791    01:DFF4             	.LL10:
 2792                        		__return	0
         01:DFF4  4C EF FF   			jmp	leave_proc
 2793                        		.dbg	clear
 2794                        		.endp
 2795                        		.pceas
 2796                        	
 2797                        		.dbg	line,	"include\routines_LEVELS.c", 143; void recenter_CAMERA()
 2798                        		.dbg	line,	"include\routines_LEVELS.c", 144; {
 2799                        	;***********************
 2800                        	;***********************
 2801                        	
 2802                        		.hucc
 2803    09:DCF8             		.proc		_recenter_CAMERA
 2804                        		__enter		_recenter_CAMERA
 2805                        	
 2806                        		.dbg	line,	"include\routines_LEVELS.c", 145; signed char camera_y_move;
 2807                        	
 2808                        		.dbg	line,	"include\routines_LEVELS.c", 147; spr_set(player_id);
 2809                        		__ld.umq	_player_id
         09:DCF8  AD 0D 23   			lda	_player_id
 2810                        		__call		_spr_set.1
         09:DCFB  20 DD E7   			call	_spr_set.1
 2811                        	
 2812                        		.dbg	line,	"include\routines_LEVELS.c", 150; if(player_pos_y < 128)
 2813                        		__ld.wm		_player_pos_y
         09:DCFE  AD 15 23   			lda.l	_player_pos_y
         09:DD01  AC 16 23   			ldy.h	_player_pos_y
 2814                        		__slt_w.wi	128
         09:DD04  C9 80      			cmp.l	#128		; Subtract integer from Y:A.
         09:DD06  98         			tya
         09:DD07  E9 00      			sbc.h	#128
         09:DD09  50 02      			bvc	!+
         09:DD0B  49 80      			eor	#$80		; -ve if Y:A < integer (signed).
         09:DD0D  0A         	!:		asl	a
 2815                        		__bfalse	.LL12
         09:DD0E  90 65      			bcc	.LL12
 2816                        	
 2817                        		.dbg	line,	"include\routines_LEVELS.c", 151; {
 2818                        	
 2819                        		.dbg	line,	"include\routines_LEVELS.c", 152; player_pos_y += CAMERA_RECENTER_VELOCITY;
 2820                        		__add_st.wmiq	4, _player_pos_y
         09:DD10  18         			clc
         09:DD11  AD 15 23   			lda.l	_player_pos_y
         09:DD14  69 04      			adc.l	#4
         09:DD16  8D 15 23   			sta.l	_player_pos_y
         09:DD19  90 03      			bcc	!+
         09:DD1B  EE 16 23   			inc.h	_player_pos_y
         09:DD1E             	!:
 2821                        	
 2822                        		.dbg	line,	"include\routines_LEVELS.c", 154; if(player_pos_y > 128)
 2823                        		__ld.wm		_player_pos_y
         09:DD1E  AD 15 23   			lda.l	_player_pos_y
         09:DD21  AC 16 23   			ldy.h	_player_pos_y
 2824                        		__sgt_w.wi	128
         09:DD24  18         			clc			; Subtract integer+1 from Y:A.
         09:DD25  E9 80      			sbc.l	#128
         09:DD27  98         			tya
         09:DD28  E9 00      			sbc.h	#128
         09:DD2A  50 02      			bvc	!+
         09:DD2C  49 80      			eor	#$80		; +ve if Y:A > integer (signed).
         09:DD2E  49 80      	!:		eor	#$80
         09:DD30  0A         			asl	a
 2825                        		__bfalse	.LL13
         09:DD31  90 19      			bcc	.LL13
 2826                        	
 2827                        		.dbg	line,	"include\routines_LEVELS.c", 155; {
 2828                        	
 2829                        		.dbg	line,	"include\routines_LEVELS.c", 156; //camera_y_move = (128 - player_pos_y);
 2830                        	
 2831                        		.dbg	line,	"include\routines_LEVELS.c", 157; camera_y_move = (player_pos_y - 128);
 2832                        		__ld.wm		_player_pos_y
         09:DD33  AD 15 23   			lda.l	_player_pos_y
         09:DD36  AC 16 23   			ldy.h	_player_pos_y
 2833                        		__sub.wi	128
         09:DD39  38         			sec
         09:DD3A  E9 80      			sbc.l	#128
         09:DD3C  B0 01      			bcs	!+
         09:DD3E  88         			dey
         09:DD3F             	!:
 2834                        		__st.umq	__recenter_CAMERA_end - 1  /* camera_y_move */
         09:DD3F  8D 1C 23   			sta	__recenter_CAMERA_end - 1
 2835                        	
 2836                        		.dbg	line,	"include\routines_LEVELS.c", 159; player_pos_y = 128;
 2837                        		__st.wmiq	128, _player_pos_y
         09:DD42  A9 80      			lda.l	#128
         09:DD44  8D 15 23   			sta.l	_player_pos_y
         09:DD47  9C 16 23   			stz.h	_player_pos_y
 2838                        	
 2839                        		.dbg	line,	"include\routines_LEVELS.c", 160; }
 2840                        	
 2841                        		.dbg	line,	"include\routines_LEVELS.c", 162; else
 2842                        		__bra		.LL14
         09:DD4A  80 05      			bra	.LL14
 2843    09:DD4C             	.LL13:
 2844                        	
 2845                        		.dbg	line,	"include\routines_LEVELS.c", 163; {
 2846                        	
 2847                        		.dbg	line,	"include\routines_LEVELS.c", 164; camera_y_move = CAMERA_RECENTER_VELOCITY;
 2848                        		__st.umiq	4, __recenter_CAMERA_end - 1  /* camera_y_move */
         09:DD4C  A9 04      			lda.l	#4
         09:DD4E  8D 1C 23   			sta	__recenter_CAMERA_end - 1
 2849                        	
 2850                        		.dbg	line,	"include\routines_LEVELS.c", 165; }
 2851    09:DD51             	.LL14:
 2852                        	
 2853                        		.dbg	line,	"include\routines_LEVELS.c", 167; spr_y(player_pos_y);
 2854                        		__ld.wm		_player_pos_y
         09:DD51  AD 15 23   			lda.l	_player_pos_y
         09:DD54  AC 16 23   			ldy.h	_player_pos_y
 2855                        		__call		_spr_y.1
         09:DD57  20 19 E8   			call	_spr_y.1
 2856                        	
 2857                        		.dbg	line,	"include\routines_LEVELS.c", 169; sgx_map_pxl_y -= camera_y_move;
 2858                        		__ld.bm		__recenter_CAMERA_end - 1  /* camera_y_move */
         09:DD5A  AD 1C 23   			lda	__recenter_CAMERA_end - 1
         09:DD5D  C2         			cly
         09:DD5E  10 01      			bpl	!+
         09:DD60  88         			dey
         09:DD61             	!:
 2859                        		__isub_st.wmq	_sgx_map_pxl_y
         09:DD61  38         			sec
         09:DD62  49 FF      			eor	#$FF
         09:DD64  6D 63 23   			adc.l	_sgx_map_pxl_y
         09:DD67  8D 63 23   			sta.l	_sgx_map_pxl_y
         09:DD6A  98         			tya
         09:DD6B  49 FF      			eor	#$FF
         09:DD6D  6D 64 23   			adc.h	_sgx_map_pxl_y
         09:DD70  8D 64 23   			sta.h	_sgx_map_pxl_y
 2860                        	
 2861                        		.dbg	line,	"include\routines_LEVELS.c", 170; }
 2862                        	
 2863                        		.dbg	line,	"include\routines_LEVELS.c", 173; else if(player_pos_y > 128)
 2864                        		__bra		.LL15
         09:DD73  80 71      			bra	.LL15
 2865    09:DD75             	.LL12:
 2866                        		__ld.wm		_player_pos_y
         09:DD75  AD 15 23   			lda.l	_player_pos_y
         09:DD78  AC 16 23   			ldy.h	_player_pos_y
 2867                        		__sgt_w.wi	128
         09:DD7B  18         			clc			; Subtract integer+1 from Y:A.
         09:DD7C  E9 80      			sbc.l	#128
         09:DD7E  98         			tya
         09:DD7F  E9 00      			sbc.h	#128
         09:DD81  50 02      			bvc	!+
         09:DD83  49 80      			eor	#$80		; +ve if Y:A > integer (signed).
         09:DD85  49 80      	!:		eor	#$80
         09:DD87  0A         			asl	a
 2868                        		__bfalse	.LL16
         09:DD88  90 5C      			bcc	.LL16
 2869                        	
 2870                        		.dbg	line,	"include\routines_LEVELS.c", 174; {
 2871                        	
 2872                        		.dbg	line,	"include\routines_LEVELS.c", 175; player_pos_y -= CAMERA_RECENTER_VELOCITY;
 2873                        		__sub_st.wmiq	4, _player_pos_y
         09:DD8A  38         			sec
         09:DD8B  AD 15 23   			lda.l	_player_pos_y
         09:DD8E  E9 04      			sbc.l	#4
         09:DD90  8D 15 23   			sta.l	_player_pos_y
         09:DD93  B0 03      			bcs	!+
         09:DD95  CE 16 23   			dec.h	_player_pos_y
         09:DD98             	!:
 2874                        	
 2875                        		.dbg	line,	"include\routines_LEVELS.c", 177; if(player_pos_y < 128)
 2876                        		__ld.wm		_player_pos_y
         09:DD98  AD 15 23   			lda.l	_player_pos_y
         09:DD9B  AC 16 23   			ldy.h	_player_pos_y
 2877                        		__slt_w.wi	128
         09:DD9E  C9 80      			cmp.l	#128		; Subtract integer from Y:A.
         09:DDA0  98         			tya
         09:DDA1  E9 00      			sbc.h	#128
         09:DDA3  50 02      			bvc	!+
         09:DDA5  49 80      			eor	#$80		; -ve if Y:A < integer (signed).
         09:DDA7  0A         	!:		asl	a
 2878                        		__bfalse	.LL17
         09:DDA8  90 19      			bcc	.LL17
 2879                        	
 2880                        		.dbg	line,	"include\routines_LEVELS.c", 178; {
 2881                        	
 2882                        		.dbg	line,	"include\routines_LEVELS.c", 179; //camera_y_move = (player_pos_y - 128);
 2883                        	
 2884                        		.dbg	line,	"include\routines_LEVELS.c", 180; camera_y_move = (128 - player_pos_y);
 2885                        		__ld.wi		128
         09:DDAA  A9 80      			lda.l	#128
         09:DDAC  C2         			cly
 2886                        		__sub.wm	_player_pos_y
         09:DDAD  38         			sec
         09:DDAE  ED 15 23   			sbc.l	_player_pos_y
         09:DDB1  42         			say
         09:DDB2  ED 16 23   			sbc.h	_player_pos_y
         09:DDB5  42         			say
 2887                        		__st.umq	__recenter_CAMERA_end - 1  /* camera_y_move */
         09:DDB6  8D 1C 23   			sta	__recenter_CAMERA_end - 1
 2888                        	
 2889                        		.dbg	line,	"include\routines_LEVELS.c", 182; player_pos_y = 128;
 2890                        		__st.wmiq	128, _player_pos_y
         09:DDB9  A9 80      			lda.l	#128
         09:DDBB  8D 15 23   			sta.l	_player_pos_y
         09:DDBE  9C 16 23   			stz.h	_player_pos_y
 2891                        	
 2892                        		.dbg	line,	"include\routines_LEVELS.c", 183; }
 2893                        	
 2894                        		.dbg	line,	"include\routines_LEVELS.c", 185; else
 2895                        		__bra		.LL18
         09:DDC1  80 05      			bra	.LL18
 2896    09:DDC3             	.LL17:
 2897                        	
 2898                        		.dbg	line,	"include\routines_LEVELS.c", 186; {
 2899                        	
 2900                        		.dbg	line,	"include\routines_LEVELS.c", 187; camera_y_move = CAMERA_RECENTER_VELOCITY;
 2901                        		__st.umiq	4, __recenter_CAMERA_end - 1  /* camera_y_move */
         09:DDC3  A9 04      			lda.l	#4
         09:DDC5  8D 1C 23   			sta	__recenter_CAMERA_end - 1
 2902                        	
 2903                        		.dbg	line,	"include\routines_LEVELS.c", 188; }
 2904    09:DDC8             	.LL18:
 2905                        	
 2906                        		.dbg	line,	"include\routines_LEVELS.c", 190; spr_y(player_pos_y);
 2907                        		__ld.wm		_player_pos_y
         09:DDC8  AD 15 23   			lda.l	_player_pos_y
         09:DDCB  AC 16 23   			ldy.h	_player_pos_y
 2908                        		__call		_spr_y.1
         09:DDCE  20 19 E8   			call	_spr_y.1
 2909                        	
 2910                        		.dbg	line,	"include\routines_LEVELS.c", 192; sgx_map_pxl_y += camera_y_move;
 2911                        		__ld.bm		__recenter_CAMERA_end - 1  /* camera_y_move */
         09:DDD1  AD 1C 23   			lda	__recenter_CAMERA_end - 1
         09:DDD4  C2         			cly
         09:DDD5  10 01      			bpl	!+
         09:DDD7  88         			dey
         09:DDD8             	!:
 2912                        		__add_st.wmq	_sgx_map_pxl_y
         09:DDD8  18         			clc
         09:DDD9  6D 63 23   			adc.l	_sgx_map_pxl_y
         09:DDDC  8D 63 23   			sta.l	_sgx_map_pxl_y
         09:DDDF  98         			tya
         09:DDE0  6D 64 23   			adc.h	_sgx_map_pxl_y
         09:DDE3  8D 64 23   			sta.h	_sgx_map_pxl_y
 2913                        	
 2914                        		.dbg	line,	"include\routines_LEVELS.c", 193; }
 2915                        	
 2916                        		.dbg	line,	"include\routines_LEVELS.c", 194; //put_number(player_pos_y,3,0,0);
 2917                        	
 2918                        		.dbg	line,	"include\routines_LEVELS.c", 195; //put_number(sgx_map_pxl_y,3,0,1);
 2919                        	
 2920                        		.dbg	line,	"include\routines_LEVELS.c", 196; }
 2921    09:DDE6             	.LL16:
 2922    09:DDE6             	.LL15:
 2923    09:DDE6             	.LL11:
 2924                        		__return	0
         09:DDE6  4C EF FF   			jmp	leave_proc
 2925                        		.dbg	clear
 2926                        		.endp
 2927                        		.pceas
 2928                        	
 2929                        		.dbg	line,	"include\routines_LEVELS.c", 205; void joypad_BUTTONS()
 2930                        		.dbg	line,	"include\routines_LEVELS.c", 206; {
 2931                        	;***********************
 2932                        	;***********************
 2933                        	
 2934                        		.hucc
 2935    09:DEC8             		.proc		_joypad_BUTTONS
 2936                        		__enter		_joypad_BUTTONS
 2937                        	
 2938                        		.dbg	line,	"include\routines_LEVELS.c", 207; if(joytrg(JOYPAD_1) == JOY_I)
 2939                        		__ld.uiq	0
         09:DEC8  62         			cla
 2940                        		 _joytrg.1
         09:DEC9  AA         			tax
         09:DECA  BD 2D 22   			lda	joytrg, x
         09:DECD  BC DD 22   			ldy	joy6trg, x
 2941                        		__equ_w.wi	1
         09:DED0  C9 01      			cmp.l	#1
         09:DED2  D0 04      			bne	!false+
         09:DED4  C0 00      			cpy.h	#1
         09:DED6  F0 01      			beq	!+
         09:DED8  18         	!false:		clc
         09:DED9             	!:
 2942                        		__bfalse	.LL20
         09:DED9  B0 03 4C 99			bcc	.LL20
         09:DEDD  DF          
 2943                        	
 2944                        		.dbg	line,	"include\routines_LEVELS.c", 208; {
 2945                        	
 2946                        		.dbg	line,	"include\routines_LEVELS.c", 209; if(player_state == STATE_IDLE)
 2947                        		__not.um	_player_state
         09:DEDE  AD 0E 23   			lda	_player_state
         09:DEE1  18         			clc
         09:DEE2  D0 01      			bne	!+
         09:DEE4  38         			sec
         09:DEE5             	!:
 2948                        		__bfalse	.LL21
         09:DEE5  90 0B      			bcc	.LL21
 2949                        	
 2950                        		.dbg	line,	"include\routines_LEVELS.c", 210; {
 2951                        	
 2952                        		.dbg	line,	"include\routines_LEVELS.c", 211; player_counter_anim = 0;
 2953                        		__st.umiq	0, _player_counter_anim
         09:DEE7  9C 11 23   			stz	_player_counter_anim
 2954                        	
 2955                        		.dbg	line,	"include\routines_LEVELS.c", 213; player_state = STATE_JUMP;
 2956                        		__st.umiq	4, _player_state
         09:DEEA  A9 04      			lda.l	#4
         09:DEEC  8D 0E 23   			sta	_player_state
 2957                        	
 2958                        		.dbg	line,	"include\routines_LEVELS.c", 214; }
 2959                        	
 2960                        		.dbg	line,	"include\routines_LEVELS.c", 217; else if(player_state == STATE_WALK)
 2961                        		__bra		.LL22
         09:DEEF  4C 99 DF   			bra	.LL22
 2962    09:DEF2             	.LL21:
 2963                        		__ld.umq	_player_state
         09:DEF2  AD 0E 23   			lda	_player_state
 2964                        		__equ_b.uiq	1
         09:DEF5  C9 01      			cmp	#1
         09:DEF7  F0 01      			beq	!+
         09:DEF9  18         			clc
         09:DEFA             	!:
 2965                        		__bfalse	.LL23
         09:DEFA  90 13      			bcc	.LL23
 2966                        	
 2967                        		.dbg	line,	"include\routines_LEVELS.c", 218; {
 2968                        	
 2969                        		.dbg	line,	"include\routines_LEVELS.c", 219; player_counter_anim = 0;
 2970                        		__st.umiq	0, _player_counter_anim
         09:DEFC  9C 11 23   			stz	_player_counter_anim
 2971                        	
 2972                        		.dbg	line,	"include\routines_LEVELS.c", 221; player_state = STATE_JUMP_RIGHT + player_axis;
 2973                        		__ld.wi		5
         09:DEFF  A9 05      			lda.l	#5
         09:DF01  C2         			cly
 2974                        		__add.um	_player_axis
         09:DF02  18         			clc
         09:DF03  6D 0F 23   			adc	_player_axis
         09:DF06  90 01      			bcc	!+
         09:DF08  C8         			iny
         09:DF09             	!:
 2975                        		__st.umq	_player_state
         09:DF09  8D 0E 23   			sta	_player_state
 2976                        	
 2977                        		.dbg	line,	"include\routines_LEVELS.c", 222; }
 2978                        	
 2979                        		.dbg	line,	"include\routines_LEVELS.c", 225; else if(player_state == STATE_HANG || player_state == STATE_CLIMB_UP || player_state == STATE_CLIMB_DOWN)
 2980                        		__bra		.LL24
         09:DF0C  4C 99 DF   			bra	.LL24
 2981    09:DF0F             	.LL23:
 2982                        		__ld.umq	_player_state
         09:DF0F  AD 0E 23   			lda	_player_state
 2983                        		__equ_b.uiq	10
         09:DF12  C9 0A      			cmp	#10
         09:DF14  F0 01      			beq	!+
         09:DF16  18         			clc
         09:DF17             	!:
 2984                        		__btrue		.LL26
         09:DF17  B0 08      			bcs	.LL26
 2985                        		__ld.umq	_player_state
         09:DF19  AD 0E 23   			lda	_player_state
 2986                        		__equ_b.uiq	11
         09:DF1C  C9 0B      			cmp	#11
         09:DF1E  F0 01      			beq	!+
         09:DF20  18         			clc
         09:DF21             	!:
 2987    09:DF21             	.LL26:
 2988                        		__btrue		.LL27
         09:DF21  B0 08      			bcs	.LL27
 2989                        		__ld.umq	_player_state
         09:DF23  AD 0E 23   			lda	_player_state
 2990                        		__equ_b.uiq	12
         09:DF26  C9 0C      			cmp	#12
         09:DF28  F0 01      			beq	!+
         09:DF2A  18         			clc
         09:DF2B             	!:
 2991    09:DF2B             	.LL27:
 2992                        		__bfalse	.LL25
         09:DF2B  90 6C      			bcc	.LL25
 2993                        	
 2994                        		.dbg	line,	"include\routines_LEVELS.c", 226; {
 2995                        	
 2996                        		.dbg	line,	"include\routines_LEVELS.c", 227; if(joy(JOYPAD_1) & JOY_RIGHT)
 2997                        		__ld.uiq	0
         09:DF2D  62         			cla
 2998                        		 _joy.1
         09:DF2E  AA         			tax
         09:DF2F  BD 28 22   			lda	joynow, x
         09:DF32  BC D3 22   			ldy	joy6now, x
 2999                        		__tand.wi	32
         09:DF35  29 20      			and	#32
         09:DF37  C9 01      	!:		cmp	#1
 3000                        		__bfalse	.LL28
         09:DF39  90 0A      			bcc	.LL28
 3001                        	
 3002                        		.dbg	line,	"include\routines_LEVELS.c", 228; {
 3003                        	
 3004                        		.dbg	line,	"include\routines_LEVELS.c", 229; player_counter_anim = 0;
 3005                        		__st.umiq	0, _player_counter_anim
         09:DF3B  9C 11 23   			stz	_player_counter_anim
 3006                        	
 3007                        		.dbg	line,	"include\routines_LEVELS.c", 231; player_state = STATE_JUMP_RIGHT;
 3008                        		__st.umiq	5, _player_state
         09:DF3E  A9 05      			lda.l	#5
         09:DF40  8D 0E 23   			sta	_player_state
 3009                        	
 3010                        		.dbg	line,	"include\routines_LEVELS.c", 232; }
 3011                        	
 3012                        		.dbg	line,	"include\routines_LEVELS.c", 234; else if(joy(JOYPAD_1) & JOY_LEFT)
 3013                        		__bra		.LL29
         09:DF43  80 54      			bra	.LL29
 3014    09:DF45             	.LL28:
 3015                        		__ld.uiq	0
         09:DF45  62         			cla
 3016                        		 _joy.1
         09:DF46  AA         			tax
         09:DF47  BD 28 22   			lda	joynow, x
         09:DF4A  BC D3 22   			ldy	joy6now, x
 3017                        		__tand.wi	128
         09:DF4D  29 80      			and	#128
         09:DF4F  C9 01      	!:		cmp	#1
 3018                        		__bfalse	.LL30
         09:DF51  90 0A      			bcc	.LL30
 3019                        	
 3020                        		.dbg	line,	"include\routines_LEVELS.c", 235; {
 3021                        	
 3022                        		.dbg	line,	"include\routines_LEVELS.c", 236; player_counter_anim = 0;
 3023                        		__st.umiq	0, _player_counter_anim
         09:DF53  9C 11 23   			stz	_player_counter_anim
 3024                        	
 3025                        		.dbg	line,	"include\routines_LEVELS.c", 238; player_state = STATE_JUMP_LEFT;
 3026                        		__st.umiq	6, _player_state
         09:DF56  A9 06      			lda.l	#6
         09:DF58  8D 0E 23   			sta	_player_state
 3027                        	
 3028                        		.dbg	line,	"include\routines_LEVELS.c", 239; }
 3029                        	
 3030                        		.dbg	line,	"include\routines_LEVELS.c", 241; else if(joy(JOYPAD_1) & JOY_UP)
 3031                        		__bra		.LL31
         09:DF5B  80 3C      			bra	.LL31
 3032    09:DF5D             	.LL30:
 3033                        		__ld.uiq	0
         09:DF5D  62         			cla
 3034                        		 _joy.1
         09:DF5E  AA         			tax
         09:DF5F  BD 28 22   			lda	joynow, x
         09:DF62  BC D3 22   			ldy	joy6now, x
 3035                        		__tand.wi	16
         09:DF65  29 10      			and	#16
         09:DF67  C9 01      	!:		cmp	#1
 3036                        		__bfalse	.LL32
         09:DF69  90 2E      			bcc	.LL32
 3037                        	
 3038                        		.dbg	line,	"include\routines_LEVELS.c", 242; {
 3039                        	
 3040                        		.dbg	line,	"include\routines_LEVELS.c", 243; player_counter_anim = 0;
 3041                        		__st.umiq	0, _player_counter_anim
         09:DF6B  9C 11 23   			stz	_player_counter_anim
 3042                        	
 3043                        		.dbg	line,	"include\routines_LEVELS.c", 245; check_LADDER( 15 , 8 );
 3044                        		__ld.wi		15
         09:DF6E  A9 0F      			lda.l	#15
         09:DF70  C2         			cly
 3045                        		__pusharg.wr
         09:DF71  A6 8D      			ldx	<__sp
         09:DF73  CA         			dex
         09:DF74  CA         			dex
         09:DF75  95 08      			sta.l	<__stack, x
         09:DF77  94 09      			sty.h	<__stack, x
         09:DF79  86 8D      			stx	<__sp
 3046                        		__ld.wi		8
         09:DF7B  A9 08      			lda.l	#8
         09:DF7D  C2         			cly
 3047                        		__pusharg.wr
         09:DF7E  A6 8D      			ldx	<__sp
         09:DF80  CA         			dex
         09:DF81  CA         			dex
         09:DF82  95 08      			sta.l	<__stack, x
         09:DF84  94 09      			sty.h	<__stack, x
         09:DF86  86 8D      			stx	<__sp
 3048                        		__call		_check_LADDER
         09:DF88  20 81 FF   			call	_check_LADDER
 3049                        	
 3050                        		.dbg	line,	"include\routines_LEVELS.c", 247; if(map_blk_flag == TILE_EMPTY)
 3051                        		__not.um	_map_blk_flag
         09:DF8B  AD 82 28   			lda	_map_blk_flag
         09:DF8E  18         			clc
         09:DF8F  D0 01      			bne	!+
         09:DF91  38         			sec
         09:DF92             	!:
 3052                        		__bfalse	.LL33
         09:DF92  90 05      			bcc	.LL33
 3053                        	
 3054                        		.dbg	line,	"include\routines_LEVELS.c", 248; {
 3055                        	
 3056                        		.dbg	line,	"include\routines_LEVELS.c", 249; player_state = STATE_JUMP_LADDER;
 3057                        		__st.umiq	13, _player_state
         09:DF94  A9 0D      			lda.l	#13
         09:DF96  8D 0E 23   			sta	_player_state
 3058                        	
 3059                        		.dbg	line,	"include\routines_LEVELS.c", 250; }
 3060                        	
 3061                        		.dbg	line,	"include\routines_LEVELS.c", 251; }
 3062    09:DF99             	.LL33:
 3063                        	
 3064                        		.dbg	line,	"include\routines_LEVELS.c", 252; }
 3065    09:DF99             	.LL32:
 3066    09:DF99             	.LL31:
 3067    09:DF99             	.LL29:
 3068                        	
 3069                        		.dbg	line,	"include\routines_LEVELS.c", 253; }
 3070    09:DF99             	.LL25:
 3071    09:DF99             	.LL24:
 3072    09:DF99             	.LL22:
 3073                        	
 3074                        		.dbg	line,	"include\routines_LEVELS.c", 254; }
 3075    09:DF99             	.LL20:
 3076    09:DF99             	.LL19:
 3077                        		__return	0
         09:DF99  4C EF FF   			jmp	leave_proc
 3078                        		.dbg	clear
 3079                        		.endp
 3080                        		.pceas
 3081                        	
 3082                        		.dbg	line,	"include\routines_LEVELS.c", 257; void joypad_DIR()
 3083                        		.dbg	line,	"include\routines_LEVELS.c", 258; {
 3084                        	;***********************
 3085                        	;***********************
 3086                        	
 3087                        		.hucc
 3088    01:D90E             		.proc		_joypad_DIR
 3089                        		__enter		_joypad_DIR
 3090                        	
 3091                        		.dbg	line,	"include\routines_LEVELS.c", 259; //--------------------------------------------------------------------------------------//
 3092                        	
 3093                        		.dbg	line,	"include\routines_LEVELS.c", 260; //                                        NO DIR                                        //
 3094                        	
 3095                        		.dbg	line,	"include\routines_LEVELS.c", 261; //--------------------------------------------------------------------------------------//
 3096                        	
 3097                        		.dbg	line,	"include\routines_LEVELS.c", 263; if(! (joy(JOYPAD_1) & JOY_DIR_PRESSED) )
 3098                        		__ld.uiq	0
         01:D90E  62         			cla
 3099                        		 _joy.1
         01:D90F  AA         			tax
         01:D910  BD 28 22   			lda	joynow, x
         01:D913  BC D3 22   			ldy	joy6now, x
 3100                        		__nand.wi	240
         01:D916  18         			clc
         01:D917  29 F0      			and	#240
         01:D919  D0 01      			bne	!+
         01:D91B  38         			sec
         01:D91C             	!:
 3101                        		__bfalse	.LL35
         01:D91C  90 3C      			bcc	.LL35
 3102                        	
 3103                        		.dbg	line,	"include\routines_LEVELS.c", 264; {
 3104                        	
 3105                        		.dbg	line,	"include\routines_LEVELS.c", 265; if(player_state == STATE_WALK || player_state == STATE_CROUCH)
 3106                        		__ld.umq	_player_state
         01:D91E  AD 0E 23   			lda	_player_state
 3107                        		__equ_b.uiq	1
         01:D921  C9 01      			cmp	#1
         01:D923  F0 01      			beq	!+
         01:D925  18         			clc
         01:D926             	!:
 3108                        		__btrue		.LL37
         01:D926  B0 08      			bcs	.LL37
 3109                        		__ld.umq	_player_state
         01:D928  AD 0E 23   			lda	_player_state
 3110                        		__equ_b.uiq	7
         01:D92B  C9 07      			cmp	#7
         01:D92D  F0 01      			beq	!+
         01:D92F  18         			clc
         01:D930             	!:
 3111    01:D930             	.LL37:
 3112                        		__bfalse	.LL36
         01:D930  90 0A      			bcc	.LL36
 3113                        	
 3114                        		.dbg	line,	"include\routines_LEVELS.c", 266; {
 3115                        	
 3116                        		.dbg	line,	"include\routines_LEVELS.c", 267; player_counter_anim = 1;
 3117                        		__st.umiq	1, _player_counter_anim
         01:D932  A9 01      			lda.l	#1
         01:D934  8D 11 23   			sta	_player_counter_anim
 3118                        	
 3119                        		.dbg	line,	"include\routines_LEVELS.c", 268; player_state = STATE_IDLE;
 3120                        		__st.umiq	0, _player_state
         01:D937  9C 0E 23   			stz	_player_state
 3121                        	
 3122                        		.dbg	line,	"include\routines_LEVELS.c", 269; }
 3123                        	
 3124                        		.dbg	line,	"include\routines_LEVELS.c", 272; else if(player_state == STATE_CLIMB_UP || player_state == STATE_CLIMB_DOWN)
 3125                        		__bra		.LL38
         01:D93A  80 1E      			bra	.LL38
 3126    01:D93C             	.LL36:
 3127                        		__ld.umq	_player_state
         01:D93C  AD 0E 23   			lda	_player_state
 3128                        		__equ_b.uiq	11
         01:D93F  C9 0B      			cmp	#11
         01:D941  F0 01      			beq	!+
         01:D943  18         			clc
         01:D944             	!:
 3129                        		__btrue		.LL40
         01:D944  B0 08      			bcs	.LL40
 3130                        		__ld.umq	_player_state
         01:D946  AD 0E 23   			lda	_player_state
 3131                        		__equ_b.uiq	12
         01:D949  C9 0C      			cmp	#12
         01:D94B  F0 01      			beq	!+
         01:D94D  18         			clc
         01:D94E             	!:
 3132    01:D94E             	.LL40:
 3133                        		__bfalse	.LL39
         01:D94E  90 0A      			bcc	.LL39
 3134                        	
 3135                        		.dbg	line,	"include\routines_LEVELS.c", 273; {
 3136                        	
 3137                        		.dbg	line,	"include\routines_LEVELS.c", 274; player_counter_anim = 1;
 3138                        		__st.umiq	1, _player_counter_anim
         01:D950  A9 01      			lda.l	#1
         01:D952  8D 11 23   			sta	_player_counter_anim
 3139                        	
 3140                        		.dbg	line,	"include\routines_LEVELS.c", 275; player_state = STATE_HANG;
 3141                        		__st.umiq	10, _player_state
         01:D955  A9 0A      			lda.l	#10
         01:D957  8D 0E 23   			sta	_player_state
 3142                        	
 3143                        		.dbg	line,	"include\routines_LEVELS.c", 276; }
 3144                        	
 3145                        		.dbg	line,	"include\routines_LEVELS.c", 277; }
 3146    01:D95A             	.LL39:
 3147    01:D95A             	.LL38:
 3148                        	
 3149                        		.dbg	line,	"include\routines_LEVELS.c", 280; //--------------------------------------------------------------------------------------//
 3150                        	
 3151                        		.dbg	line,	"include\routines_LEVELS.c", 281; //                                     RIGHT BUTTON                                     //
 3152                        	
 3153                        		.dbg	line,	"include\routines_LEVELS.c", 282; //--------------------------------------------------------------------------------------//
 3154                        	
 3155                        		.dbg	line,	"include\routines_LEVELS.c", 284; if(joy(JOYPAD_1) & JOY_RIGHT)
 3156    01:D95A             	.LL35:
 3157                        		__ld.uiq	0
         01:D95A  62         			cla
 3158                        		 _joy.1
         01:D95B  AA         			tax
         01:D95C  BD 28 22   			lda	joynow, x
         01:D95F  BC D3 22   			ldy	joy6now, x
 3159                        		__tand.wi	32
         01:D962  29 20      			and	#32
         01:D964  C9 01      	!:		cmp	#1
 3160                        		__bfalse	.LL41
         01:D966  B0 03 4C 2B			bcc	.LL41
         01:D96A  DA          
 3161                        	
 3162                        		.dbg	line,	"include\routines_LEVELS.c", 285; {
 3163                        	
 3164                        		.dbg	line,	"include\routines_LEVELS.c", 286; if(player_state == STATE_IDLE || player_state == STATE_WALK)
 3165                        		__not.um	_player_state
         01:D96B  AD 0E 23   			lda	_player_state
         01:D96E  18         			clc
         01:D96F  D0 01      			bne	!+
         01:D971  38         			sec
         01:D972             	!:
 3166                        		__btrue		.LL43
         01:D972  B0 08      			bcs	.LL43
 3167                        		__ld.umq	_player_state
         01:D974  AD 0E 23   			lda	_player_state
 3168                        		__equ_b.uiq	1
         01:D977  C9 01      			cmp	#1
         01:D979  F0 01      			beq	!+
         01:D97B  18         			clc
         01:D97C             	!:
 3169    01:D97C             	.LL43:
 3170                        		__bfalse	.LL42
         01:D97C  90 2F      			bcc	.LL42
 3171                        	
 3172                        		.dbg	line,	"include\routines_LEVELS.c", 287; {
 3173                        	
 3174                        		.dbg	line,	"include\routines_LEVELS.c", 288; player_state = STATE_WALK;
 3175                        		__st.umiq	1, _player_state
         01:D97E  A9 01      			lda.l	#1
         01:D980  8D 0E 23   			sta	_player_state
 3176                        	
 3177                        		.dbg	line,	"include\routines_LEVELS.c", 289; player_axis = AXIS_RIGHT;
 3178                        		__st.umiq	0, _player_axis
         01:D983  9C 0F 23   			stz	_player_axis
 3179                        	
 3180                        		.dbg	line,	"include\routines_LEVELS.c", 291; if(player_previous_axis != player_axis)
 3181                        		__ld.umq	_player_previous_axis
         01:D986  AD 10 23   			lda	_player_previous_axis
 3182                        		__neq_b.umq	_player_axis
         01:D989  38         			sec
         01:D98A  4D 0F 23   			eor	_player_axis
         01:D98D  D0 01      			bne	!+
         01:D98F  18         			clc
         01:D990             	!:
 3183                        		__bfalse	.LL44
         01:D990  B0 03 4C E9			bcc	.LL44
         01:D994  DC          
 3184                        	
 3185                        		.dbg	line,	"include\routines_LEVELS.c", 292; {
 3186                        	
 3187                        		.dbg	line,	"include\routines_LEVELS.c", 293; player_previous_axis = player_axis;
 3188                        		__ld.um		_player_axis
         01:D995  AD 0F 23   			lda	_player_axis
         01:D998  C2         			cly
 3189                        		__st.umq	_player_previous_axis
         01:D999  8D 10 23   			sta	_player_previous_axis
 3190                        	
 3191                        		.dbg	line,	"include\routines_LEVELS.c", 295; spr_set(player_id);
 3192                        		__ld.umq	_player_id
         01:D99C  AD 0D 23   			lda	_player_id
 3193                        		__call		_spr_set.1
         01:D99F  20 DD E7   			call	_spr_set.1
 3194                        	
 3195                        		.dbg	line,	"include\routines_LEVELS.c", 296; spr_ctrl(FLIP_MAS, NO_FLIP_X);
 3196                        		__st.umiq	136, _al
         01:D9A2  A9 88      			lda.l	#136
         01:D9A4  85 F8      			sta	_al
 3197                        		__ld.uiq	0
         01:D9A6  62         			cla
 3198                        		__call		_spr_ctrl.2
         01:D9A7  20 3C E8   			call	_spr_ctrl.2
 3199                        	
 3200                        		.dbg	line,	"include\routines_LEVELS.c", 297; }
 3201                        	
 3202                        		.dbg	line,	"include\routines_LEVELS.c", 298; }
 3203    01:D9AA             	.LL44	.alias		.LL45
 3204                        	
 3205                        		.dbg	line,	"include\routines_LEVELS.c", 301; else if(player_state == STATE_JUMP || player_state == STATE_JUMP_LEFT || player_state == STATE_CROUCH || player_state == STATE_FALL || player_state == STATE_HANG)
 3206                        		__bra		.LL45
         01:D9AA  4C E9 DC   			bra	.LL45
 3207    01:D9AD             	.LL42:
 3208                        		__ld.umq	_player_state
         01:D9AD  AD 0E 23   			lda	_player_state
 3209                        		__equ_b.uiq	4
         01:D9B0  C9 04      			cmp	#4
         01:D9B2  F0 01      			beq	!+
         01:D9B4  18         			clc
         01:D9B5             	!:
 3210                        		__btrue		.LL47
         01:D9B5  B0 08      			bcs	.LL47
 3211                        		__ld.umq	_player_state
         01:D9B7  AD 0E 23   			lda	_player_state
 3212                        		__equ_b.uiq	6
         01:D9BA  C9 06      			cmp	#6
         01:D9BC  F0 01      			beq	!+
         01:D9BE  18         			clc
         01:D9BF             	!:
 3213    01:D9BF             	.LL47:
 3214                        		__btrue		.LL48
         01:D9BF  B0 08      			bcs	.LL48
 3215                        		__ld.umq	_player_state
         01:D9C1  AD 0E 23   			lda	_player_state
 3216                        		__equ_b.uiq	7
         01:D9C4  C9 07      			cmp	#7
         01:D9C6  F0 01      			beq	!+
         01:D9C8  18         			clc
         01:D9C9             	!:
 3217    01:D9C9             	.LL48:
 3218                        		__btrue		.LL49
         01:D9C9  B0 08      			bcs	.LL49
 3219                        		__ld.umq	_player_state
         01:D9CB  AD 0E 23   			lda	_player_state
 3220                        		__equ_b.uiq	9
         01:D9CE  C9 09      			cmp	#9
         01:D9D0  F0 01      			beq	!+
         01:D9D2  18         			clc
         01:D9D3             	!:
 3221    01:D9D3             	.LL49:
 3222                        		__btrue		.LL50
         01:D9D3  B0 08      			bcs	.LL50
 3223                        		__ld.umq	_player_state
         01:D9D5  AD 0E 23   			lda	_player_state
 3224                        		__equ_b.uiq	10
         01:D9D8  C9 0A      			cmp	#10
         01:D9DA  F0 01      			beq	!+
         01:D9DC  18         			clc
         01:D9DD             	!:
 3225    01:D9DD             	.LL50:
 3226                        		__bfalse	.LL46
         01:D9DD  90 28      			bcc	.LL46
 3227                        	
 3228                        		.dbg	line,	"include\routines_LEVELS.c", 302; {
 3229                        	
 3230                        		.dbg	line,	"include\routines_LEVELS.c", 303; if(player_axis == AXIS_LEFT)
 3231                        		__ld.umq	_player_axis
         01:D9DF  AD 0F 23   			lda	_player_axis
 3232                        		__equ_b.uiq	1
         01:D9E2  C9 01      			cmp	#1
         01:D9E4  F0 01      			beq	!+
         01:D9E6  18         			clc
         01:D9E7             	!:
 3233                        		__bfalse	.LL51
         01:D9E7  B0 03 4C E9			bcc	.LL51
         01:D9EB  DC          
 3234                        	
 3235                        		.dbg	line,	"include\routines_LEVELS.c", 304; {
 3236                        	
 3237                        		.dbg	line,	"include\routines_LEVELS.c", 305; player_axis = AXIS_RIGHT;
 3238                        		__st.umiq	0, _player_axis
         01:D9EC  9C 0F 23   			stz	_player_axis
 3239                        	
 3240                        		.dbg	line,	"include\routines_LEVELS.c", 306; player_previous_axis = player_axis;
 3241                        		__ld.um		_player_axis
         01:D9EF  AD 0F 23   			lda	_player_axis
         01:D9F2  C2         			cly
 3242                        		__st.umq	_player_previous_axis
         01:D9F3  8D 10 23   			sta	_player_previous_axis
 3243                        	
 3244                        		.dbg	line,	"include\routines_LEVELS.c", 308; spr_set(player_id);
 3245                        		__ld.umq	_player_id
         01:D9F6  AD 0D 23   			lda	_player_id
 3246                        		__call		_spr_set.1
         01:D9F9  20 DD E7   			call	_spr_set.1
 3247                        	
 3248                        		.dbg	line,	"include\routines_LEVELS.c", 309; spr_ctrl(FLIP_MAS, NO_FLIP_X);
 3249                        		__st.umiq	136, _al
         01:D9FC  A9 88      			lda.l	#136
         01:D9FE  85 F8      			sta	_al
 3250                        		__ld.uiq	0
         01:DA00  62         			cla
 3251                        		__call		_spr_ctrl.2
         01:DA01  20 3C E8   			call	_spr_ctrl.2
 3252                        	
 3253                        		.dbg	line,	"include\routines_LEVELS.c", 310; }
 3254                        	
 3255                        		.dbg	line,	"include\routines_LEVELS.c", 311; }
 3256    01:DA04             	.LL51	.alias		.LL52
 3257                        	
 3258                        		.dbg	line,	"include\routines_LEVELS.c", 314; else if(player_state == STATE_CLIMB_UP || player_state == STATE_CLIMB_DOWN)
 3259                        		__bra		.LL52
         01:DA04  4C E9 DC   			bra	.LL52
 3260    01:DA07             	.LL46:
 3261                        		__ld.umq	_player_state
         01:DA07  AD 0E 23   			lda	_player_state
 3262                        		__equ_b.uiq	11
         01:DA0A  C9 0B      			cmp	#11
         01:DA0C  F0 01      			beq	!+
         01:DA0E  18         			clc
         01:DA0F             	!:
 3263                        		__btrue		.LL54
         01:DA0F  B0 08      			bcs	.LL54
 3264                        		__ld.umq	_player_state
         01:DA11  AD 0E 23   			lda	_player_state
 3265                        		__equ_b.uiq	12
         01:DA14  C9 0C      			cmp	#12
         01:DA16  F0 01      			beq	!+
         01:DA18  18         			clc
         01:DA19             	!:
 3266    01:DA19             	.LL54:
 3267                        		__bfalse	.LL53
         01:DA19  B0 03 4C E9			bcc	.LL53
         01:DA1D  DC          
 3268                        	
 3269                        		.dbg	line,	"include\routines_LEVELS.c", 315; {
 3270                        	
 3271                        		.dbg	line,	"include\routines_LEVELS.c", 316; player_counter_anim = 1;
 3272                        		__st.umiq	1, _player_counter_anim
         01:DA1E  A9 01      			lda.l	#1
         01:DA20  8D 11 23   			sta	_player_counter_anim
 3273                        	
 3274                        		.dbg	line,	"include\routines_LEVELS.c", 317; player_state = STATE_HANG;
 3275                        		__st.umiq	10, _player_state
         01:DA23  A9 0A      			lda.l	#10
         01:DA25  8D 0E 23   			sta	_player_state
 3276                        	
 3277                        		.dbg	line,	"include\routines_LEVELS.c", 318; }
 3278                        	
 3279                        		.dbg	line,	"include\routines_LEVELS.c", 319; }
 3280    01:DA28             	.LL53	.alias		.LL55
 3281    01:DA28             	.LL52	.alias		.LL55
 3282    01:DA28             	.LL45	.alias		.LL55
 3283                        	
 3284                        		.dbg	line,	"include\routines_LEVELS.c", 322; //--------------------------------------------------------------------------------------//
 3285                        	
 3286                        		.dbg	line,	"include\routines_LEVELS.c", 323; //                                     LEFT BUTTON                                      //
 3287                        	
 3288                        		.dbg	line,	"include\routines_LEVELS.c", 324; //--------------------------------------------------------------------------------------//
 3289                        	
 3290                        		.dbg	line,	"include\routines_LEVELS.c", 326; else if(joy(JOYPAD_1) & JOY_LEFT)
 3291                        		__bra		.LL55
         01:DA28  4C E9 DC   			bra	.LL55
 3292    01:DA2B             	.LL41:
 3293                        		__ld.uiq	0
         01:DA2B  62         			cla
 3294                        		 _joy.1
         01:DA2C  AA         			tax
         01:DA2D  BD 28 22   			lda	joynow, x
         01:DA30  BC D3 22   			ldy	joy6now, x
 3295                        		__tand.wi	128
         01:DA33  29 80      			and	#128
         01:DA35  C9 01      	!:		cmp	#1
 3296                        		__bfalse	.LL56
         01:DA37  B0 03 4C 01			bcc	.LL56
         01:DA3B  DB          
 3297                        	
 3298                        		.dbg	line,	"include\routines_LEVELS.c", 327; {
 3299                        	
 3300                        		.dbg	line,	"include\routines_LEVELS.c", 328; if(player_state == STATE_IDLE || player_state == STATE_WALK)
 3301                        		__not.um	_player_state
         01:DA3C  AD 0E 23   			lda	_player_state
         01:DA3F  18         			clc
         01:DA40  D0 01      			bne	!+
         01:DA42  38         			sec
         01:DA43             	!:
 3302                        		__btrue		.LL58
         01:DA43  B0 08      			bcs	.LL58
 3303                        		__ld.umq	_player_state
         01:DA45  AD 0E 23   			lda	_player_state
 3304                        		__equ_b.uiq	1
         01:DA48  C9 01      			cmp	#1
         01:DA4A  F0 01      			beq	!+
         01:DA4C  18         			clc
         01:DA4D             	!:
 3305    01:DA4D             	.LL58:
 3306                        		__bfalse	.LL57
         01:DA4D  90 32      			bcc	.LL57
 3307                        	
 3308                        		.dbg	line,	"include\routines_LEVELS.c", 329; {
 3309                        	
 3310                        		.dbg	line,	"include\routines_LEVELS.c", 330; player_state = STATE_WALK;
 3311                        		__st.umiq	1, _player_state
         01:DA4F  A9 01      			lda.l	#1
         01:DA51  8D 0E 23   			sta	_player_state
 3312                        	
 3313                        		.dbg	line,	"include\routines_LEVELS.c", 331; player_axis = AXIS_LEFT;
 3314                        		__st.umiq	1, _player_axis
         01:DA54  A9 01      			lda.l	#1
         01:DA56  8D 0F 23   			sta	_player_axis
 3315                        	
 3316                        		.dbg	line,	"include\routines_LEVELS.c", 333; if(player_previous_axis != player_axis)
 3317                        		__ld.umq	_player_previous_axis
         01:DA59  AD 10 23   			lda	_player_previous_axis
 3318                        		__neq_b.umq	_player_axis
         01:DA5C  38         			sec
         01:DA5D  4D 0F 23   			eor	_player_axis
         01:DA60  D0 01      			bne	!+
         01:DA62  18         			clc
         01:DA63             	!:
 3319                        		__bfalse	.LL59
         01:DA63  B0 03 4C E9			bcc	.LL59
         01:DA67  DC          
 3320                        	
 3321                        		.dbg	line,	"include\routines_LEVELS.c", 334; {
 3322                        	
 3323                        		.dbg	line,	"include\routines_LEVELS.c", 335; player_previous_axis = player_axis;
 3324                        		__ld.um		_player_axis
         01:DA68  AD 0F 23   			lda	_player_axis
         01:DA6B  C2         			cly
 3325                        		__st.umq	_player_previous_axis
         01:DA6C  8D 10 23   			sta	_player_previous_axis
 3326                        	
 3327                        		.dbg	line,	"include\routines_LEVELS.c", 337; spr_set(player_id);
 3328                        		__ld.umq	_player_id
         01:DA6F  AD 0D 23   			lda	_player_id
 3329                        		__call		_spr_set.1
         01:DA72  20 DD E7   			call	_spr_set.1
 3330                        	
 3331                        		.dbg	line,	"include\routines_LEVELS.c", 338; spr_ctrl(FLIP_MAS, FLIP_X);
 3332                        		__st.umiq	136, _al
         01:DA75  A9 88      			lda.l	#136
         01:DA77  85 F8      			sta	_al
 3333                        		__ld.uiq	8
         01:DA79  A9 08      			lda	#8
 3334                        		__call		_spr_ctrl.2
         01:DA7B  20 3C E8   			call	_spr_ctrl.2
 3335                        	
 3336                        		.dbg	line,	"include\routines_LEVELS.c", 339; }
 3337                        	
 3338                        		.dbg	line,	"include\routines_LEVELS.c", 340; }
 3339    01:DA7E             	.LL59	.alias		.LL60
 3340                        	
 3341                        		.dbg	line,	"include\routines_LEVELS.c", 343; else if(player_state == STATE_JUMP || player_state == STATE_JUMP_RIGHT || player_state == STATE_CROUCH || player_state == STATE_FALL || player_state == STATE_HANG)
 3342                        		__bra		.LL60
         01:DA7E  4C E9 DC   			bra	.LL60
 3343    01:DA81             	.LL57:
 3344                        		__ld.umq	_player_state
         01:DA81  AD 0E 23   			lda	_player_state
 3345                        		__equ_b.uiq	4
         01:DA84  C9 04      			cmp	#4
         01:DA86  F0 01      			beq	!+
         01:DA88  18         			clc
         01:DA89             	!:
 3346                        		__btrue		.LL62
         01:DA89  B0 08      			bcs	.LL62
 3347                        		__ld.umq	_player_state
         01:DA8B  AD 0E 23   			lda	_player_state
 3348                        		__equ_b.uiq	5
         01:DA8E  C9 05      			cmp	#5
         01:DA90  F0 01      			beq	!+
         01:DA92  18         			clc
         01:DA93             	!:
 3349    01:DA93             	.LL62:
 3350                        		__btrue		.LL63
         01:DA93  B0 08      			bcs	.LL63
 3351                        		__ld.umq	_player_state
         01:DA95  AD 0E 23   			lda	_player_state
 3352                        		__equ_b.uiq	7
         01:DA98  C9 07      			cmp	#7
         01:DA9A  F0 01      			beq	!+
         01:DA9C  18         			clc
         01:DA9D             	!:
 3353    01:DA9D             	.LL63:
 3354                        		__btrue		.LL64
         01:DA9D  B0 08      			bcs	.LL64
 3355                        		__ld.umq	_player_state
         01:DA9F  AD 0E 23   			lda	_player_state
 3356                        		__equ_b.uiq	9
         01:DAA2  C9 09      			cmp	#9
         01:DAA4  F0 01      			beq	!+
         01:DAA6  18         			clc
         01:DAA7             	!:
 3357    01:DAA7             	.LL64:
 3358                        		__btrue		.LL65
         01:DAA7  B0 08      			bcs	.LL65
 3359                        		__ld.umq	_player_state
         01:DAA9  AD 0E 23   			lda	_player_state
 3360                        		__equ_b.uiq	10
         01:DAAC  C9 0A      			cmp	#10
         01:DAAE  F0 01      			beq	!+
         01:DAB0  18         			clc
         01:DAB1             	!:
 3361    01:DAB1             	.LL65:
 3362                        		__bfalse	.LL61
         01:DAB1  90 2A      			bcc	.LL61
 3363                        	
 3364                        		.dbg	line,	"include\routines_LEVELS.c", 344; {
 3365                        	
 3366                        		.dbg	line,	"include\routines_LEVELS.c", 345; if(player_axis == AXIS_RIGHT)
 3367                        		__not.um	_player_axis
         01:DAB3  AD 0F 23   			lda	_player_axis
         01:DAB6  18         			clc
         01:DAB7  D0 01      			bne	!+
         01:DAB9  38         			sec
         01:DABA             	!:
 3368                        		__bfalse	.LL66
         01:DABA  B0 03 4C E9			bcc	.LL66
         01:DABE  DC          
 3369                        	
 3370                        		.dbg	line,	"include\routines_LEVELS.c", 346; {
 3371                        	
 3372                        		.dbg	line,	"include\routines_LEVELS.c", 347; player_axis = AXIS_LEFT;
 3373                        		__st.umiq	1, _player_axis
         01:DABF  A9 01      			lda.l	#1
         01:DAC1  8D 0F 23   			sta	_player_axis
 3374                        	
 3375                        		.dbg	line,	"include\routines_LEVELS.c", 348; player_previous_axis = player_axis;
 3376                        		__ld.um		_player_axis
         01:DAC4  AD 0F 23   			lda	_player_axis
         01:DAC7  C2         			cly
 3377                        		__st.umq	_player_previous_axis
         01:DAC8  8D 10 23   			sta	_player_previous_axis
 3378                        	
 3379                        		.dbg	line,	"include\routines_LEVELS.c", 350; spr_set(player_id);
 3380                        		__ld.umq	_player_id
         01:DACB  AD 0D 23   			lda	_player_id
 3381                        		__call		_spr_set.1
         01:DACE  20 DD E7   			call	_spr_set.1
 3382                        	
 3383                        		.dbg	line,	"include\routines_LEVELS.c", 351; spr_ctrl(FLIP_MAS, FLIP_X);
 3384                        		__st.umiq	136, _al
         01:DAD1  A9 88      			lda.l	#136
         01:DAD3  85 F8      			sta	_al
 3385                        		__ld.uiq	8
         01:DAD5  A9 08      			lda	#8
 3386                        		__call		_spr_ctrl.2
         01:DAD7  20 3C E8   			call	_spr_ctrl.2
 3387                        	
 3388                        		.dbg	line,	"include\routines_LEVELS.c", 352; }
 3389                        	
 3390                        		.dbg	line,	"include\routines_LEVELS.c", 353; }
 3391    01:DADA             	.LL66	.alias		.LL67
 3392                        	
 3393                        		.dbg	line,	"include\routines_LEVELS.c", 356; else if(player_state == STATE_CLIMB_UP || player_state == STATE_CLIMB_DOWN)
 3394                        		__bra		.LL67
         01:DADA  4C E9 DC   			bra	.LL67
 3395    01:DADD             	.LL61:
 3396                        		__ld.umq	_player_state
         01:DADD  AD 0E 23   			lda	_player_state
 3397                        		__equ_b.uiq	11
         01:DAE0  C9 0B      			cmp	#11
         01:DAE2  F0 01      			beq	!+
         01:DAE4  18         			clc
         01:DAE5             	!:
 3398                        		__btrue		.LL69
         01:DAE5  B0 08      			bcs	.LL69
 3399                        		__ld.umq	_player_state
         01:DAE7  AD 0E 23   			lda	_player_state
 3400                        		__equ_b.uiq	12
         01:DAEA  C9 0C      			cmp	#12
         01:DAEC  F0 01      			beq	!+
         01:DAEE  18         			clc
         01:DAEF             	!:
 3401    01:DAEF             	.LL69:
 3402                        		__bfalse	.LL68
         01:DAEF  B0 03 4C E9			bcc	.LL68
         01:DAF3  DC          
 3403                        	
 3404                        		.dbg	line,	"include\routines_LEVELS.c", 357; {
 3405                        	
 3406                        		.dbg	line,	"include\routines_LEVELS.c", 358; player_counter_anim = 1;
 3407                        		__st.umiq	1, _player_counter_anim
         01:DAF4  A9 01      			lda.l	#1
         01:DAF6  8D 11 23   			sta	_player_counter_anim
 3408                        	
 3409                        		.dbg	line,	"include\routines_LEVELS.c", 359; player_state = STATE_HANG;
 3410                        		__st.umiq	10, _player_state
         01:DAF9  A9 0A      			lda.l	#10
         01:DAFB  8D 0E 23   			sta	_player_state
 3411                        	
 3412                        		.dbg	line,	"include\routines_LEVELS.c", 360; }
 3413                        	
 3414                        		.dbg	line,	"include\routines_LEVELS.c", 361; }
 3415    01:DAFE             	.LL68	.alias		.LL70
 3416    01:DAFE             	.LL67	.alias		.LL70
 3417    01:DAFE             	.LL60	.alias		.LL70
 3418                        	
 3419                        		.dbg	line,	"include\routines_LEVELS.c", 364; //--------------------------------------------------------------------------------------//
 3420                        	
 3421                        		.dbg	line,	"include\routines_LEVELS.c", 365; //                                      UP BUTTON                                       //
 3422                        	
 3423                        		.dbg	line,	"include\routines_LEVELS.c", 366; //--------------------------------------------------------------------------------------//
 3424                        	
 3425                        		.dbg	line,	"include\routines_LEVELS.c", 368; else if(joy(JOYPAD_1) & JOY_UP)
 3426                        		__bra		.LL70
         01:DAFE  4C E9 DC   			bra	.LL70
 3427    01:DB01             	.LL56:
 3428                        		__ld.uiq	0
         01:DB01  62         			cla
 3429                        		 _joy.1
         01:DB02  AA         			tax
         01:DB03  BD 28 22   			lda	joynow, x
         01:DB06  BC D3 22   			ldy	joy6now, x
 3430                        		__tand.wi	16
         01:DB09  29 10      			and	#16
         01:DB0B  C9 01      	!:		cmp	#1
 3431                        		__bfalse	.LL71
         01:DB0D  B0 03 4C D6			bcc	.LL71
         01:DB11  DB          
 3432                        	
 3433                        		.dbg	line,	"include\routines_LEVELS.c", 369; {
 3434                        	
 3435                        		.dbg	line,	"include\routines_LEVELS.c", 370; if(player_state == STATE_HANG || player_state == STATE_CLIMB_UP || player_state == STATE_CLIMB_DOWN)
 3436                        		__ld.umq	_player_state
         01:DB12  AD 0E 23   			lda	_player_state
 3437                        		__equ_b.uiq	10
         01:DB15  C9 0A      			cmp	#10
         01:DB17  F0 01      			beq	!+
         01:DB19  18         			clc
         01:DB1A             	!:
 3438                        		__btrue		.LL73
         01:DB1A  B0 08      			bcs	.LL73
 3439                        		__ld.umq	_player_state
         01:DB1C  AD 0E 23   			lda	_player_state
 3440                        		__equ_b.uiq	11
         01:DB1F  C9 0B      			cmp	#11
         01:DB21  F0 01      			beq	!+
         01:DB23  18         			clc
         01:DB24             	!:
 3441    01:DB24             	.LL73:
 3442                        		__btrue		.LL74
         01:DB24  B0 08      			bcs	.LL74
 3443                        		__ld.umq	_player_state
         01:DB26  AD 0E 23   			lda	_player_state
 3444                        		__equ_b.uiq	12
         01:DB29  C9 0C      			cmp	#12
         01:DB2B  F0 01      			beq	!+
         01:DB2D  18         			clc
         01:DB2E             	!:
 3445    01:DB2E             	.LL74:
 3446                        		__bfalse	.LL72
         01:DB2E  B0 03 4C E9			bcc	.LL72
         01:DB32  DC          
 3447                        	
 3448                        		.dbg	line,	"include\routines_LEVELS.c", 371; {
 3449                        	
 3450                        		.dbg	line,	"include\routines_LEVELS.c", 372; unsigned char i;
 3451                        	
 3452                        		.dbg	line,	"include\routines_LEVELS.c", 374; check_LADDER( 15 , 8 );
 3453                        		__ld.wi		15
         01:DB33  A9 0F      			lda.l	#15
         01:DB35  C2         			cly
 3454                        		__pusharg.wr
         01:DB36  A6 8D      			ldx	<__sp
         01:DB38  CA         			dex
         01:DB39  CA         			dex
         01:DB3A  95 08      			sta.l	<__stack, x
         01:DB3C  94 09      			sty.h	<__stack, x
         01:DB3E  86 8D      			stx	<__sp
 3455                        		__ld.wi		8
         01:DB40  A9 08      			lda.l	#8
         01:DB42  C2         			cly
 3456                        		__pusharg.wr
         01:DB43  A6 8D      			ldx	<__sp
         01:DB45  CA         			dex
         01:DB46  CA         			dex
         01:DB47  95 08      			sta.l	<__stack, x
         01:DB49  94 09      			sty.h	<__stack, x
         01:DB4B  86 8D      			stx	<__sp
 3457                        		__call		_check_LADDER
         01:DB4D  20 81 FF   			call	_check_LADDER
 3458                        	
 3459                        		.dbg	line,	"include\routines_LEVELS.c", 376; if(map_blk_flag == TILE_EMPTY)
 3460                        		__not.um	_map_blk_flag
         01:DB50  AD 82 28   			lda	_map_blk_flag
         01:DB53  18         			clc
         01:DB54  D0 01      			bne	!+
         01:DB56  38         			sec
         01:DB57             	!:
 3461                        		__bfalse	.LL75
         01:DB57  90 67      			bcc	.LL75
 3462                        	
 3463                        		.dbg	line,	"include\routines_LEVELS.c", 377; {
 3464                        	
 3465                        		.dbg	line,	"include\routines_LEVELS.c", 378; for(i=1 ; i<3 ; i++)
 3466                        		__st.umiq	1, __joypad_DIR_end - 1  /* i */
         01:DB59  A9 01      			lda.l	#1
         01:DB5B  8D 01 23   			sta	__joypad_DIR_end - 1
 3467    01:DB5E             	.LL76:
 3468                        		__ld.umq	__joypad_DIR_end - 1  /* i */
         01:DB5E  AD 01 23   			lda	__joypad_DIR_end - 1
 3469                        		__ult_b.uiq	3
         01:DB61  C9 03      			cmp	#3		; Subtract integer from A.
         01:DB63  6A         			ror	a		; CC if A < integer.
         01:DB64  49 80      			eor	#$80
         01:DB66  2A         			rol	a
 3470                        		__btrue		.LL78
         01:DB67  B0 07      			bcs	.LL78
 3471                        		__bra		.LL79
         01:DB69  80 63      			bra	.LL79
 3472    01:DB6B             	.LL77:
 3473                        		__inc.umq	__joypad_DIR_end - 1  /* i */
         01:DB6B  EE 01 23   			inc	__joypad_DIR_end - 1
 3474                        		__bra		.LL76
         01:DB6E  80 EE      			bra	.LL76
 3475    01:DB70             	.LL78:
 3476                        	
 3477                        		.dbg	line,	"include\routines_LEVELS.c", 379; {
 3478                        	
 3479                        		.dbg	line,	"include\routines_LEVELS.c", 380; check_LADDER( 15 , 8 + i );
 3480                        		__ld.wi		15
         01:DB70  A9 0F      			lda.l	#15
         01:DB72  C2         			cly
 3481                        		__pusharg.wr
         01:DB73  A6 8D      			ldx	<__sp
         01:DB75  CA         			dex
         01:DB76  CA         			dex
         01:DB77  95 08      			sta.l	<__stack, x
         01:DB79  94 09      			sty.h	<__stack, x
         01:DB7B  86 8D      			stx	<__sp
 3482                        		__ld.wi		8
         01:DB7D  A9 08      			lda.l	#8
         01:DB7F  C2         			cly
 3483                        		__add.um	__joypad_DIR_end - 1  /* i */
         01:DB80  18         			clc
         01:DB81  6D 01 23   			adc	__joypad_DIR_end - 1
         01:DB84  90 01      			bcc	!+
         01:DB86  C8         			iny
         01:DB87             	!:
 3484                        		__pusharg.wr
         01:DB87  A6 8D      			ldx	<__sp
         01:DB89  CA         			dex
         01:DB8A  CA         			dex
         01:DB8B  95 08      			sta.l	<__stack, x
         01:DB8D  94 09      			sty.h	<__stack, x
         01:DB8F  86 8D      			stx	<__sp
 3485                        		__call		_check_LADDER
         01:DB91  20 81 FF   			call	_check_LADDER
 3486                        	
 3487                        		.dbg	line,	"include\routines_LEVELS.c", 382; if(map_blk_flag == TILE_LADDER)
 3488                        		__ld.umq	_map_blk_flag
         01:DB94  AD 82 28   			lda	_map_blk_flag
 3489                        		__equ_b.uiq	2
         01:DB97  C9 02      			cmp	#2
         01:DB99  F0 01      			beq	!+
         01:DB9B  18         			clc
         01:DB9C             	!:
 3490                        		__bfalse	.LL80
         01:DB9C  90 CD      			bcc	.LL80
 3491                        	
 3492                        		.dbg	line,	"include\routines_LEVELS.c", 383; {
 3493                        	
 3494                        		.dbg	line,	"include\routines_LEVELS.c", 384; sgx_map_pxl_y -= (2 - i);
 3495                        		__ld.wi		2
         01:DB9E  A9 02      			lda.l	#2
         01:DBA0  C2         			cly
 3496                        		__sub.um	__joypad_DIR_end - 1  /* i */
         01:DBA1  38         			sec
         01:DBA2  ED 01 23   			sbc	__joypad_DIR_end - 1
         01:DBA5  B0 01      			bcs	!+
         01:DBA7  88         			dey
         01:DBA8             	!:
 3497                        		__isub_st.wmq	_sgx_map_pxl_y
         01:DBA8  38         			sec
         01:DBA9  49 FF      			eor	#$FF
         01:DBAB  6D 63 23   			adc.l	_sgx_map_pxl_y
         01:DBAE  8D 63 23   			sta.l	_sgx_map_pxl_y
         01:DBB1  98         			tya
         01:DBB2  49 FF      			eor	#$FF
         01:DBB4  6D 64 23   			adc.h	_sgx_map_pxl_y
         01:DBB7  8D 64 23   			sta.h	_sgx_map_pxl_y
 3498                        	
 3499                        		.dbg	line,	"include\routines_LEVELS.c", 385; break;
 3500                        		__bra		.LL79
         01:DBBA  80 12      			bra	.LL79
 3501                        	
 3502                        		.dbg	line,	"include\routines_LEVELS.c", 386; }
 3503                        	
 3504                        		.dbg	line,	"include\routines_LEVELS.c", 387; }
 3505    01:DBBC             	.LL80	.alias		.LL77
 3506                        		__bra		.LL77
         01:DBBC  80 AD      			bra	.LL77
 3507    01:DBBE             	.LL79	.alias		.LL81
 3508                        	
 3509                        		.dbg	line,	"include\routines_LEVELS.c", 388; }
 3510                        	
 3511                        		.dbg	line,	"include\routines_LEVELS.c", 390; else
 3512                        		__bra		.LL81
         01:DBBE  80 0E      			bra	.LL81
 3513    01:DBC0             	.LL75:
 3514                        	
 3515                        		.dbg	line,	"include\routines_LEVELS.c", 391; {
 3516                        	
 3517                        		.dbg	line,	"include\routines_LEVELS.c", 392; sgx_map_pxl_y -= 2;
 3518                        		__sub_st.wmiq	2, _sgx_map_pxl_y
         01:DBC0  38         			sec
         01:DBC1  AD 63 23   			lda.l	_sgx_map_pxl_y
         01:DBC4  E9 02      			sbc.l	#2
         01:DBC6  8D 63 23   			sta.l	_sgx_map_pxl_y
         01:DBC9  B0 03      			bcs	!+
         01:DBCB  CE 64 23   			dec.h	_sgx_map_pxl_y
         01:DBCE             	!:
 3519                        	
 3520                        		.dbg	line,	"include\routines_LEVELS.c", 393; }
 3521    01:DBCE             	.LL81:
 3522                        	
 3523                        		.dbg	line,	"include\routines_LEVELS.c", 395; player_state = STATE_CLIMB_UP;
 3524                        		__st.umiq	11, _player_state
         01:DBCE  A9 0B      			lda.l	#11
         01:DBD0  8D 0E 23   			sta	_player_state
 3525                        	
 3526                        		.dbg	line,	"include\routines_LEVELS.c", 396; }
 3527                        	
 3528                        		.dbg	line,	"include\routines_LEVELS.c", 397; }
 3529    01:DBD3             	.LL72	.alias		.LL82
 3530                        	
 3531                        		.dbg	line,	"include\routines_LEVELS.c", 400; //--------------------------------------------------------------------------------------//
 3532                        	
 3533                        		.dbg	line,	"include\routines_LEVELS.c", 401; //                                     DOWN BUTTON                                      //
 3534                        	
 3535                        		.dbg	line,	"include\routines_LEVELS.c", 402; //--------------------------------------------------------------------------------------//
 3536                        	
 3537                        		.dbg	line,	"include\routines_LEVELS.c", 404; else if(joy(JOYPAD_1) & JOY_DOWN)
 3538                        		__bra		.LL82
         01:DBD3  4C E9 DC   			bra	.LL82
 3539    01:DBD6             	.LL71:
 3540                        		__ld.uiq	0
         01:DBD6  62         			cla
 3541                        		 _joy.1
         01:DBD7  AA         			tax
         01:DBD8  BD 28 22   			lda	joynow, x
         01:DBDB  BC D3 22   			ldy	joy6now, x
 3542                        		__tand.wi	64
         01:DBDE  29 40      			and	#64
         01:DBE0  C9 01      	!:		cmp	#1
 3543                        		__bfalse	.LL83
         01:DBE2  B0 03 4C E9			bcc	.LL83
         01:DBE6  DC          
 3544                        	
 3545                        		.dbg	line,	"include\routines_LEVELS.c", 405; {
 3546                        	
 3547                        		.dbg	line,	"include\routines_LEVELS.c", 406; if(player_state == STATE_IDLE || player_state == STATE_WALK)
 3548                        		__not.um	_player_state
         01:DBE7  AD 0E 23   			lda	_player_state
         01:DBEA  18         			clc
         01:DBEB  D0 01      			bne	!+
         01:DBED  38         			sec
         01:DBEE             	!:
 3549                        		__btrue		.LL85
         01:DBEE  B0 08      			bcs	.LL85
 3550                        		__ld.umq	_player_state
         01:DBF0  AD 0E 23   			lda	_player_state
 3551                        		__equ_b.uiq	1
         01:DBF3  C9 01      			cmp	#1
         01:DBF5  F0 01      			beq	!+
         01:DBF7  18         			clc
         01:DBF8             	!:
 3552    01:DBF8             	.LL85:
 3553                        		__bfalse	.LL84
         01:DBF8  90 0D      			bcc	.LL84
 3554                        	
 3555                        		.dbg	line,	"include\routines_LEVELS.c", 407; {
 3556                        	
 3557                        		.dbg	line,	"include\routines_LEVELS.c", 408; player_counter_anim = 1;
 3558                        		__st.umiq	1, _player_counter_anim
         01:DBFA  A9 01      			lda.l	#1
         01:DBFC  8D 11 23   			sta	_player_counter_anim
 3559                        	
 3560                        		.dbg	line,	"include\routines_LEVELS.c", 409; player_state = STATE_CROUCH;
 3561                        		__st.umiq	7, _player_state
         01:DBFF  A9 07      			lda.l	#7
         01:DC01  8D 0E 23   			sta	_player_state
 3562                        	
 3563                        		.dbg	line,	"include\routines_LEVELS.c", 410; }
 3564                        	
 3565                        		.dbg	line,	"include\routines_LEVELS.c", 413; else if(player_state == STATE_HANG || player_state == STATE_CLIMB_UP || player_state == STATE_CLIMB_DOWN)
 3566                        		__bra		.LL86
         01:DC04  4C E9 DC   			bra	.LL86
 3567    01:DC07             	.LL84:
 3568                        		__ld.umq	_player_state
         01:DC07  AD 0E 23   			lda	_player_state
 3569                        		__equ_b.uiq	10
         01:DC0A  C9 0A      			cmp	#10
         01:DC0C  F0 01      			beq	!+
         01:DC0E  18         			clc
         01:DC0F             	!:
 3570                        		__btrue		.LL88
         01:DC0F  B0 08      			bcs	.LL88
 3571                        		__ld.umq	_player_state
         01:DC11  AD 0E 23   			lda	_player_state
 3572                        		__equ_b.uiq	11
         01:DC14  C9 0B      			cmp	#11
         01:DC16  F0 01      			beq	!+
         01:DC18  18         			clc
         01:DC19             	!:
 3573    01:DC19             	.LL88:
 3574                        		__btrue		.LL89
         01:DC19  B0 08      			bcs	.LL89
 3575                        		__ld.umq	_player_state
         01:DC1B  AD 0E 23   			lda	_player_state
 3576                        		__equ_b.uiq	12
         01:DC1E  C9 0C      			cmp	#12
         01:DC20  F0 01      			beq	!+
         01:DC22  18         			clc
         01:DC23             	!:
 3577    01:DC23             	.LL89:
 3578                        		__bfalse	.LL87
         01:DC23  B0 03 4C E9			bcc	.LL87
         01:DC27  DC          
 3579                        	
 3580                        		.dbg	line,	"include\routines_LEVELS.c", 414; {
 3581                        	
 3582                        		.dbg	line,	"include\routines_LEVELS.c", 415; unsigned char i;
 3583                        	
 3584                        		.dbg	line,	"include\routines_LEVELS.c", 417; check_LADDER( 15 , 10 );
 3585                        		__ld.wi		15
         01:DC28  A9 0F      			lda.l	#15
         01:DC2A  C2         			cly
 3586                        		__pusharg.wr
         01:DC2B  A6 8D      			ldx	<__sp
         01:DC2D  CA         			dex
         01:DC2E  CA         			dex
         01:DC2F  95 08      			sta.l	<__stack, x
         01:DC31  94 09      			sty.h	<__stack, x
         01:DC33  86 8D      			stx	<__sp
 3587                        		__ld.wi		10
         01:DC35  A9 0A      			lda.l	#10
         01:DC37  C2         			cly
 3588                        		__pusharg.wr
         01:DC38  A6 8D      			ldx	<__sp
         01:DC3A  CA         			dex
         01:DC3B  CA         			dex
         01:DC3C  95 08      			sta.l	<__stack, x
         01:DC3E  94 09      			sty.h	<__stack, x
         01:DC40  86 8D      			stx	<__sp
 3589                        		__call		_check_LADDER
         01:DC42  20 81 FF   			call	_check_LADDER
 3590                        	
 3591                        		.dbg	line,	"include\routines_LEVELS.c", 419; if(map_blk_flag == TILE_EMPTY)
 3592                        		__not.um	_map_blk_flag
         01:DC45  AD 82 28   			lda	_map_blk_flag
         01:DC48  18         			clc
         01:DC49  D0 01      			bne	!+
         01:DC4B  38         			sec
         01:DC4C             	!:
 3593                        		__bfalse	.LL90
         01:DC4C  B0 03 4C D6			bcc	.LL90
         01:DC50  DC          
 3594                        	
 3595                        		.dbg	line,	"include\routines_LEVELS.c", 420; {
 3596                        	
 3597                        		.dbg	line,	"include\routines_LEVELS.c", 421; for(i=1 ; i<3 ; i++)
 3598                        		__st.umiq	1, __joypad_DIR_end - 2  /* i */
         01:DC51  A9 01      			lda.l	#1
         01:DC53  8D 00 23   			sta	__joypad_DIR_end - 2
 3599    01:DC56             	.LL91:
 3600                        		__ld.umq	__joypad_DIR_end - 2  /* i */
         01:DC56  AD 00 23   			lda	__joypad_DIR_end - 2
 3601                        		__ult_b.uiq	3
         01:DC59  C9 03      			cmp	#3		; Subtract integer from A.
         01:DC5B  6A         			ror	a		; CC if A < integer.
         01:DC5C  49 80      			eor	#$80
         01:DC5E  2A         			rol	a
 3602                        		__btrue		.LL93
         01:DC5F  B0 08      			bcs	.LL93
 3603                        		__bra		.LL94
         01:DC61  4C E9 DC   			bra	.LL94
 3604    01:DC64             	.LL92:
 3605                        		__inc.umq	__joypad_DIR_end - 2  /* i */
         01:DC64  EE 00 23   			inc	__joypad_DIR_end - 2
 3606                        		__bra		.LL91
         01:DC67  80 ED      			bra	.LL91
 3607    01:DC69             	.LL93:
 3608                        	
 3609                        		.dbg	line,	"include\routines_LEVELS.c", 422; {
 3610                        	
 3611                        		.dbg	line,	"include\routines_LEVELS.c", 423; check_LADDER( 15 , 22 + i );
 3612                        		__ld.wi		15
         01:DC69  A9 0F      			lda.l	#15
         01:DC6B  C2         			cly
 3613                        		__pusharg.wr
         01:DC6C  A6 8D      			ldx	<__sp
         01:DC6E  CA         			dex
         01:DC6F  CA         			dex
         01:DC70  95 08      			sta.l	<__stack, x
         01:DC72  94 09      			sty.h	<__stack, x
         01:DC74  86 8D      			stx	<__sp
 3614                        		__ld.wi		22
         01:DC76  A9 16      			lda.l	#22
         01:DC78  C2         			cly
 3615                        		__add.um	__joypad_DIR_end - 2  /* i */
         01:DC79  18         			clc
         01:DC7A  6D 00 23   			adc	__joypad_DIR_end - 2
         01:DC7D  90 01      			bcc	!+
         01:DC7F  C8         			iny
         01:DC80             	!:
 3616                        		__pusharg.wr
         01:DC80  A6 8D      			ldx	<__sp
         01:DC82  CA         			dex
         01:DC83  CA         			dex
         01:DC84  95 08      			sta.l	<__stack, x
         01:DC86  94 09      			sty.h	<__stack, x
         01:DC88  86 8D      			stx	<__sp
 3617                        		__call		_check_LADDER
         01:DC8A  20 81 FF   			call	_check_LADDER
 3618                        	
 3619                        		.dbg	line,	"include\routines_LEVELS.c", 425; if(map_blk_flag == TILE_LADDER)
 3620                        		__ld.umq	_map_blk_flag
         01:DC8D  AD 82 28   			lda	_map_blk_flag
 3621                        		__equ_b.uiq	2
         01:DC90  C9 02      			cmp	#2
         01:DC92  F0 01      			beq	!+
         01:DC94  18         			clc
         01:DC95             	!:
 3622                        		__bfalse	.LL95
         01:DC95  90 1A      			bcc	.LL95
 3623                        	
 3624                        		.dbg	line,	"include\routines_LEVELS.c", 426; {
 3625                        	
 3626                        		.dbg	line,	"include\routines_LEVELS.c", 427; sgx_map_pxl_y += (2 - i);
 3627                        		__ld.wi		2
         01:DC97  A9 02      			lda.l	#2
         01:DC99  C2         			cly
 3628                        		__sub.um	__joypad_DIR_end - 2  /* i */
         01:DC9A  38         			sec
         01:DC9B  ED 00 23   			sbc	__joypad_DIR_end - 2
         01:DC9E  B0 01      			bcs	!+
         01:DCA0  88         			dey
         01:DCA1             	!:
 3629                        		__add_st.wmq	_sgx_map_pxl_y
         01:DCA1  18         			clc
         01:DCA2  6D 63 23   			adc.l	_sgx_map_pxl_y
         01:DCA5  8D 63 23   			sta.l	_sgx_map_pxl_y
         01:DCA8  98         			tya
         01:DCA9  6D 64 23   			adc.h	_sgx_map_pxl_y
         01:DCAC  8D 64 23   			sta.h	_sgx_map_pxl_y
 3630                        	
 3631                        		.dbg	line,	"include\routines_LEVELS.c", 428; break;
 3632                        		__bra		.LL94
         01:DCAF  80 38      			bra	.LL94
 3633                        	
 3634                        		.dbg	line,	"include\routines_LEVELS.c", 429; }
 3635                        	
 3636                        		.dbg	line,	"include\routines_LEVELS.c", 431; else
 3637    01:DCB1             	.LL95:
 3638                        	
 3639                        		.dbg	line,	"include\routines_LEVELS.c", 432; {
 3640                        	
 3641                        		.dbg	line,	"include\routines_LEVELS.c", 433; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_224 , TILES_16);
 3642                        		__st.wmiq	18432, _di
         01:DCB1  64 F0      			stz.l	_di
         01:DCB3  A9 48      			lda.h	#18432
         01:DCB5  85 F1      			sta.h	_di
 3643                        		__farptr	_tiles_SPR_PLAYER + 7168 + 512, _bp_bank, _bp
         01:DCB7  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 7168 + 512))
         01:DCB9  85 EC      			sta.l	_bp
         01:DCBB  A9 78      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 7168 + 512))
         01:DCBD  85 ED      			sta.h	_bp
         01:DCBF  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 7168 + 512)
         01:DCC1  85 02      			sta	_bp_bank
 3644                        		__st.wmiq	256, _ax
         01:DCC3  64 F8      			stz.l	_ax
         01:DCC5  A9 01      			lda.h	#256
         01:DCC7  85 F9      			sta.h	_ax
 3645                        		 _load_vram.3
         01:DCC9  82         			clx				; Offset to PCE VDC.
         01:DCCA  20 77 FF   			call	load_vram_x
 3646                        	
 3647                        		.dbg	line,	"include\routines_LEVELS.c", 434; player_state = STATE_FALL;
 3648                        		__st.umiq	9, _player_state
         01:DCCD  A9 09      			lda.l	#9
         01:DCCF  8D 0E 23   			sta	_player_state
 3649                        	
 3650                        		.dbg	line,	"include\routines_LEVELS.c", 435; }
 3651    01:DCD2             	.LL96	.alias		.LL92
 3652                        	
 3653                        		.dbg	line,	"include\routines_LEVELS.c", 436; }
 3654                        		__bra		.LL92
         01:DCD2  80 90      			bra	.LL92
 3655    01:DCD4             	.LL94	.alias		.LL97
 3656                        	
 3657                        		.dbg	line,	"include\routines_LEVELS.c", 437; }
 3658                        	
 3659                        		.dbg	line,	"include\routines_LEVELS.c", 439; else
 3660                        		__bra		.LL97
         01:DCD4  80 13      			bra	.LL97
 3661    01:DCD6             	.LL90:
 3662                        	
 3663                        		.dbg	line,	"include\routines_LEVELS.c", 440; {
 3664                        	
 3665                        		.dbg	line,	"include\routines_LEVELS.c", 441; sgx_map_pxl_y += 2;
 3666                        		__add_st.wmiq	2, _sgx_map_pxl_y
         01:DCD6  18         			clc
         01:DCD7  AD 63 23   			lda.l	_sgx_map_pxl_y
         01:DCDA  69 02      			adc.l	#2
         01:DCDC  8D 63 23   			sta.l	_sgx_map_pxl_y
         01:DCDF  90 03      			bcc	!+
         01:DCE1  EE 64 23   			inc.h	_sgx_map_pxl_y
         01:DCE4             	!:
 3667                        	
 3668                        		.dbg	line,	"include\routines_LEVELS.c", 442; player_state = STATE_CLIMB_DOWN;
 3669                        		__st.umiq	12, _player_state
         01:DCE4  A9 0C      			lda.l	#12
         01:DCE6  8D 0E 23   			sta	_player_state
 3670                        	
 3671                        		.dbg	line,	"include\routines_LEVELS.c", 443; }
 3672    01:DCE9             	.LL97:
 3673                        	
 3674                        		.dbg	line,	"include\routines_LEVELS.c", 444; }
 3675                        	
 3676                        		.dbg	line,	"include\routines_LEVELS.c", 445; }
 3677    01:DCE9             	.LL87:
 3678    01:DCE9             	.LL86:
 3679                        	
 3680                        		.dbg	line,	"include\routines_LEVELS.c", 446; }
 3681    01:DCE9             	.LL83:
 3682    01:DCE9             	.LL82:
 3683    01:DCE9             	.LL70:
 3684    01:DCE9             	.LL55:
 3685    01:DCE9             	.LL34:
 3686                        		__return	0
         01:DCE9  4C EF FF   			jmp	leave_proc
 3687                        		.dbg	clear
 3688                        		.endp
 3689               7CA0     		.data
 3690               2300     		.bss
 3691    F8:2300             	__joypad_DIR_loc:
 3692    F8:2300             			ds	2
 3693    F8:2302             	__joypad_DIR_end:
 3694               E309     		.code
 3695                        		.pceas
 3696                        	
 3697                        		.dbg	line,	"include\routines_LEVELS.c", 455; void update_PLAYER()
 3698                        		.dbg	line,	"include\routines_LEVELS.c", 456; {
 3699                        	;***********************
 3700                        	;***********************
 3701                        	
 3702                        		.hucc
 3703    01:C04A             		.proc		_update_PLAYER
 3704                        		__enter		_update_PLAYER
 3705                        	
 3706                        		.dbg	line,	"include\routines_LEVELS.c", 457; if(player_state == STATE_IDLE)
 3707                        		__not.um	_player_state
         01:C04A  AD 0E 23   			lda	_player_state
         01:C04D  18         			clc
         01:C04E  D0 01      			bne	!+
         01:C050  38         			sec
         01:C051             	!:
 3708                        		__bfalse	.LL99
         01:C051  90 2F      			bcc	.LL99
 3709                        	
 3710                        		.dbg	line,	"include\routines_LEVELS.c", 458; {
 3711                        	
 3712                        		.dbg	line,	"include\routines_LEVELS.c", 459; if(player_counter_anim == 1)
 3713                        		__ld.umq	_player_counter_anim
         01:C053  AD 11 23   			lda	_player_counter_anim
 3714                        		__equ_b.uiq	1
         01:C056  C9 01      			cmp	#1
         01:C058  F0 01      			beq	!+
         01:C05A  18         			clc
         01:C05B             	!:
 3715                        		__bfalse	.LL100
         01:C05B  90 1F      			bcc	.LL100
 3716                        	
 3717                        		.dbg	line,	"include\routines_LEVELS.c", 460; {
 3718                        	
 3719                        		.dbg	line,	"include\routines_LEVELS.c", 461; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
 3720                        		__st.wmiq	18432, _di
         01:C05D  64 F0      			stz.l	_di
         01:C05F  A9 48      			lda.h	#18432
         01:C061  85 F1      			sta.h	_di
 3721                        		__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
         01:C063  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C065  85 EC      			sta.l	_bp
         01:C067  A9 7A      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C069  85 ED      			sta.h	_bp
         01:C06B  A9 0B      			lda	#bank(_tiles_SPR_PLAYER)
         01:C06D  85 02      			sta	_bp_bank
 3722                        		__st.wmiq	256, _ax
         01:C06F  64 F8      			stz.l	_ax
         01:C071  A9 01      			lda.h	#256
         01:C073  85 F9      			sta.h	_ax
 3723                        		 _load_vram.3
         01:C075  82         			clx				; Offset to PCE VDC.
         01:C076  20 77 FF   			call	load_vram_x
 3724                        	
 3725                        		.dbg	line,	"include\routines_LEVELS.c", 463; player_counter_anim = 0;
 3726                        		__st.umiq	0, _player_counter_anim
         01:C079  9C 11 23   			stz	_player_counter_anim
 3727                        	
 3728                        		.dbg	line,	"include\routines_LEVELS.c", 464; }
 3729                        	
 3730                        		.dbg	line,	"include\routines_LEVELS.c", 466; recenter_CAMERA();
 3731    01:C07C             	.LL100:
 3732                        		__call		_recenter_CAMERA
         01:C07C  20 6D FF   			call	_recenter_CAMERA
 3733                        	
 3734                        		.dbg	line,	"include\routines_LEVELS.c", 467; }
 3735                        	
 3736                        		.dbg	line,	"include\routines_LEVELS.c", 470; else if(player_state == STATE_WALK)
 3737                        		__bra		.LL101
         01:C07F  4C A1 D0   			bra	.LL101
 3738    01:C082             	.LL99:
 3739                        		__ld.umq	_player_state
         01:C082  AD 0E 23   			lda	_player_state
 3740                        		__equ_b.uiq	1
         01:C085  C9 01      			cmp	#1
         01:C087  F0 01      			beq	!+
         01:C089  18         			clc
         01:C08A             	!:
 3741                        		__bfalse	.LL102
         01:C08A  B0 03 4C 95			bcc	.LL102
         01:C08E  C2          
 3742                        	
 3743                        		.dbg	line,	"include\routines_LEVELS.c", 471; {
 3744                        	
 3745                        		.dbg	line,	"include\routines_LEVELS.c", 472; recenter_CAMERA();
 3746                        		__call		_recenter_CAMERA
         01:C08F  20 6D FF   			call	_recenter_CAMERA
 3747                        	
 3748                        		.dbg	line,	"include\routines_LEVELS.c", 475; if(player_axis == AXIS_RIGHT)
 3749                        		__not.um	_player_axis
         01:C092  AD 0F 23   			lda	_player_axis
         01:C095  18         			clc
         01:C096  D0 01      			bne	!+
         01:C098  38         			sec
         01:C099             	!:
 3750                        		__bfalse	.LL103
         01:C099  90 49      			bcc	.LL103
 3751                        	
 3752                        		.dbg	line,	"include\routines_LEVELS.c", 476; {
 3753                        	
 3754                        		.dbg	line,	"include\routines_LEVELS.c", 477; // CHECK COLLISION WITH FLOOR //
 3755                        	
 3756                        		.dbg	line,	"include\routines_LEVELS.c", 478; check_FLOOR_L();
 3757                        		__call		_check_FLOOR_L
         01:C09B  20 63 FF   			call	_check_FLOOR_L
 3758                        	
 3759                        		.dbg	line,	"include\routines_LEVELS.c", 480; if(map_blk_flag == TILE_EMPTY)
 3760                        		__not.um	_map_blk_flag
         01:C09E  AD 82 28   			lda	_map_blk_flag
         01:C0A1  18         			clc
         01:C0A2  D0 01      			bne	!+
         01:C0A4  38         			sec
         01:C0A5             	!:
 3761                        		__bfalse	.LL104
         01:C0A5  90 21      			bcc	.LL104
 3762                        	
 3763                        		.dbg	line,	"include\routines_LEVELS.c", 481; {
 3764                        	
 3765                        		.dbg	line,	"include\routines_LEVELS.c", 482; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
 3766                        		__st.wmiq	18432, _di
         01:C0A7  64 F0      			stz.l	_di
         01:C0A9  A9 48      			lda.h	#18432
         01:C0AB  85 F1      			sta.h	_di
 3767                        		__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
         01:C0AD  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C0AF  85 EC      			sta.l	_bp
         01:C0B1  A9 7A      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C0B3  85 ED      			sta.h	_bp
         01:C0B5  A9 0B      			lda	#bank(_tiles_SPR_PLAYER)
         01:C0B7  85 02      			sta	_bp_bank
 3768                        		__st.wmiq	256, _ax
         01:C0B9  64 F8      			stz.l	_ax
         01:C0BB  A9 01      			lda.h	#256
         01:C0BD  85 F9      			sta.h	_ax
 3769                        		 _load_vram.3
         01:C0BF  82         			clx				; Offset to PCE VDC.
         01:C0C0  20 77 FF   			call	load_vram_x
 3770                        	
 3771                        		.dbg	line,	"include\routines_LEVELS.c", 484; player_state = STATE_FALL;
 3772                        		__st.umiq	9, _player_state
         01:C0C3  A9 09      			lda.l	#9
         01:C0C5  8D 0E 23   			sta	_player_state
 3773                        	
 3774                        		.dbg	line,	"include\routines_LEVELS.c", 485; }
 3775                        	
 3776                        		.dbg	line,	"include\routines_LEVELS.c", 489; // CHECK COLLISION WITH WALLS //
 3777                        	
 3778                        		.dbg	line,	"include\routines_LEVELS.c", 490; check_WALL_BR();
 3779    01:C0C8             	.LL104:
 3780                        		__call		_check_WALL_BR
         01:C0C8  20 59 FF   			call	_check_WALL_BR
 3781                        	
 3782                        		.dbg	line,	"include\routines_LEVELS.c", 492; if(map_blk_flag == TILE_EMPTY)
 3783                        		__not.um	_map_blk_flag
         01:C0CB  AD 82 28   			lda	_map_blk_flag
         01:C0CE  18         			clc
         01:C0CF  D0 01      			bne	!+
         01:C0D1  38         			sec
         01:C0D2             	!:
 3784                        		__bfalse	.LL105
         01:C0D2  90 61      			bcc	.LL105
 3785                        	
 3786                        		.dbg	line,	"include\routines_LEVELS.c", 493; {
 3787                        	
 3788                        		.dbg	line,	"include\routines_LEVELS.c", 494; sgx_map_pxl_x += 2;
 3789                        		__add_st.wmiq	2, _sgx_map_pxl_x
         01:C0D4  18         			clc
         01:C0D5  AD 61 23   			lda.l	_sgx_map_pxl_x
         01:C0D8  69 02      			adc.l	#2
         01:C0DA  8D 61 23   			sta.l	_sgx_map_pxl_x
         01:C0DD  90 03      			bcc	!+
         01:C0DF  EE 62 23   			inc.h	_sgx_map_pxl_x
         01:C0E2             	!:
 3790                        	
 3791                        		.dbg	line,	"include\routines_LEVELS.c", 495; }
 3792                        	
 3793                        		.dbg	line,	"include\routines_LEVELS.c", 496; }
 3794    01:C0E2             	.LL105	.alias		.LL106
 3795                        	
 3796                        		.dbg	line,	"include\routines_LEVELS.c", 499; else if(player_axis == AXIS_LEFT)
 3797                        		__bra		.LL106
         01:C0E2  80 51      			bra	.LL106
 3798    01:C0E4             	.LL103:
 3799                        		__ld.umq	_player_axis
         01:C0E4  AD 0F 23   			lda	_player_axis
 3800                        		__equ_b.uiq	1
         01:C0E7  C9 01      			cmp	#1
         01:C0E9  F0 01      			beq	!+
         01:C0EB  18         			clc
         01:C0EC             	!:
 3801                        		__bfalse	.LL107
         01:C0EC  90 47      			bcc	.LL107
 3802                        	
 3803                        		.dbg	line,	"include\routines_LEVELS.c", 500; {
 3804                        	
 3805                        		.dbg	line,	"include\routines_LEVELS.c", 501; // CHECK COLLISION WITH FLOOR //
 3806                        	
 3807                        		.dbg	line,	"include\routines_LEVELS.c", 502; check_FLOOR_R();
 3808                        		__call		_check_FLOOR_R
         01:C0EE  20 4F FF   			call	_check_FLOOR_R
 3809                        	
 3810                        		.dbg	line,	"include\routines_LEVELS.c", 504; if(map_blk_flag == TILE_EMPTY)
 3811                        		__not.um	_map_blk_flag
         01:C0F1  AD 82 28   			lda	_map_blk_flag
         01:C0F4  18         			clc
         01:C0F5  D0 01      			bne	!+
         01:C0F7  38         			sec
         01:C0F8             	!:
 3812                        		__bfalse	.LL108
         01:C0F8  90 21      			bcc	.LL108
 3813                        	
 3814                        		.dbg	line,	"include\routines_LEVELS.c", 505; {
 3815                        	
 3816                        		.dbg	line,	"include\routines_LEVELS.c", 506; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
 3817                        		__st.wmiq	18432, _di
         01:C0FA  64 F0      			stz.l	_di
         01:C0FC  A9 48      			lda.h	#18432
         01:C0FE  85 F1      			sta.h	_di
 3818                        		__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
         01:C100  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C102  85 EC      			sta.l	_bp
         01:C104  A9 7A      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C106  85 ED      			sta.h	_bp
         01:C108  A9 0B      			lda	#bank(_tiles_SPR_PLAYER)
         01:C10A  85 02      			sta	_bp_bank
 3819                        		__st.wmiq	256, _ax
         01:C10C  64 F8      			stz.l	_ax
         01:C10E  A9 01      			lda.h	#256
         01:C110  85 F9      			sta.h	_ax
 3820                        		 _load_vram.3
         01:C112  82         			clx				; Offset to PCE VDC.
         01:C113  20 77 FF   			call	load_vram_x
 3821                        	
 3822                        		.dbg	line,	"include\routines_LEVELS.c", 508; player_state = STATE_FALL;
 3823                        		__st.umiq	9, _player_state
         01:C116  A9 09      			lda.l	#9
         01:C118  8D 0E 23   			sta	_player_state
 3824                        	
 3825                        		.dbg	line,	"include\routines_LEVELS.c", 509; }
 3826                        	
 3827                        		.dbg	line,	"include\routines_LEVELS.c", 512; // CHECK COLLISION WITH BG //
 3828                        	
 3829                        		.dbg	line,	"include\routines_LEVELS.c", 513; check_WALL_BL();
 3830    01:C11B             	.LL108:
 3831                        		__call		_check_WALL_BL
         01:C11B  20 45 FF   			call	_check_WALL_BL
 3832                        	
 3833                        		.dbg	line,	"include\routines_LEVELS.c", 515; if(map_blk_flag == TILE_EMPTY)
 3834                        		__not.um	_map_blk_flag
         01:C11E  AD 82 28   			lda	_map_blk_flag
         01:C121  18         			clc
         01:C122  D0 01      			bne	!+
         01:C124  38         			sec
         01:C125             	!:
 3835                        		__bfalse	.LL109
         01:C125  90 0E      			bcc	.LL109
 3836                        	
 3837                        		.dbg	line,	"include\routines_LEVELS.c", 516; {
 3838                        	
 3839                        		.dbg	line,	"include\routines_LEVELS.c", 517; sgx_map_pxl_x -= 2;
 3840                        		__sub_st.wmiq	2, _sgx_map_pxl_x
         01:C127  38         			sec
         01:C128  AD 61 23   			lda.l	_sgx_map_pxl_x
         01:C12B  E9 02      			sbc.l	#2
         01:C12D  8D 61 23   			sta.l	_sgx_map_pxl_x
         01:C130  B0 03      			bcs	!+
         01:C132  CE 62 23   			dec.h	_sgx_map_pxl_x
         01:C135             	!:
 3841                        	
 3842                        		.dbg	line,	"include\routines_LEVELS.c", 518; }
 3843                        	
 3844                        		.dbg	line,	"include\routines_LEVELS.c", 519; }
 3845    01:C135             	.LL109:
 3846                        	
 3847                        		.dbg	line,	"include\routines_LEVELS.c", 524; spr_set(player_id);
 3848    01:C135             	.LL107:
 3849    01:C135             	.LL106:
 3850                        		__ld.umq	_player_id
         01:C135  AD 0D 23   			lda	_player_id
 3851                        		__call		_spr_set.1
         01:C138  20 DD E7   			call	_spr_set.1
 3852                        	
 3853                        		.dbg	line,	"include\routines_LEVELS.c", 527; // UPDATE PLAYER TILES //
 3854                        	
 3855                        		.dbg	line,	"include\routines_LEVELS.c", 528; if(player_counter_anim == 0)
 3856                        		__not.um	_player_counter_anim
         01:C13B  AD 11 23   			lda	_player_counter_anim
         01:C13E  18         			clc
         01:C13F  D0 01      			bne	!+
         01:C141  38         			sec
         01:C142             	!:
 3857                        		__bfalse	.LL110
         01:C142  90 1F      			bcc	.LL110
 3858                        	
 3859                        		.dbg	line,	"include\routines_LEVELS.c", 529; {
 3860                        	
 3861                        		.dbg	line,	"include\routines_LEVELS.c", 530; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
 3862                        		__st.wmiq	18432, _di
         01:C144  64 F0      			stz.l	_di
         01:C146  A9 48      			lda.h	#18432
         01:C148  85 F1      			sta.h	_di
 3863                        		__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
         01:C14A  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C14C  85 EC      			sta.l	_bp
         01:C14E  A9 7A      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C150  85 ED      			sta.h	_bp
         01:C152  A9 0B      			lda	#bank(_tiles_SPR_PLAYER)
         01:C154  85 02      			sta	_bp_bank
 3864                        		__st.wmiq	256, _ax
         01:C156  64 F8      			stz.l	_ax
         01:C158  A9 01      			lda.h	#256
         01:C15A  85 F9      			sta.h	_ax
 3865                        		 _load_vram.3
         01:C15C  82         			clx				; Offset to PCE VDC.
         01:C15D  20 77 FF   			call	load_vram_x
 3866                        	
 3867                        		.dbg	line,	"include\routines_LEVELS.c", 531; }
 3868                        	
 3869                        		.dbg	line,	"include\routines_LEVELS.c", 534; else if(player_counter_anim == 2)
 3870                        		__bra		.LL111
         01:C160  4C 8F C2   			bra	.LL111
 3871    01:C163             	.LL110:
 3872                        		__ld.umq	_player_counter_anim
         01:C163  AD 11 23   			lda	_player_counter_anim
 3873                        		__equ_b.uiq	2
         01:C166  C9 02      			cmp	#2
         01:C168  F0 01      			beq	!+
         01:C16A  18         			clc
         01:C16B             	!:
 3874                        		__bfalse	.LL112
         01:C16B  90 1F      			bcc	.LL112
 3875                        	
 3876                        		.dbg	line,	"include\routines_LEVELS.c", 535; {
 3877                        	
 3878                        		.dbg	line,	"include\routines_LEVELS.c", 536; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + OFFSET_PLAYER_WALK_1 , TILES_16);
 3879                        		__st.wmiq	18432, _di
         01:C16D  64 F0      			stz.l	_di
         01:C16F  A9 48      			lda.h	#18432
         01:C171  85 F1      			sta.h	_di
 3880                        		__farptr	_tiles_SPR_PLAYER + 512, _bp_bank, _bp
         01:C173  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 512))
         01:C175  85 EC      			sta.l	_bp
         01:C177  A9 7C      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 512))
         01:C179  85 ED      			sta.h	_bp
         01:C17B  A9 0B      			lda	#bank(_tiles_SPR_PLAYER + 512)
         01:C17D  85 02      			sta	_bp_bank
 3881                        		__st.wmiq	256, _ax
         01:C17F  64 F8      			stz.l	_ax
         01:C181  A9 01      			lda.h	#256
         01:C183  85 F9      			sta.h	_ax
 3882                        		 _load_vram.3
         01:C185  82         			clx				; Offset to PCE VDC.
         01:C186  20 77 FF   			call	load_vram_x
 3883                        	
 3884                        		.dbg	line,	"include\routines_LEVELS.c", 537; }
 3885                        	
 3886                        		.dbg	line,	"include\routines_LEVELS.c", 540; else if(player_counter_anim == 5)
 3887                        		__bra		.LL113
         01:C189  4C 8F C2   			bra	.LL113
 3888    01:C18C             	.LL112:
 3889                        		__ld.umq	_player_counter_anim
         01:C18C  AD 11 23   			lda	_player_counter_anim
 3890                        		__equ_b.uiq	5
         01:C18F  C9 05      			cmp	#5
         01:C191  F0 01      			beq	!+
         01:C193  18         			clc
         01:C194             	!:
 3891                        		__bfalse	.LL114
         01:C194  90 1F      			bcc	.LL114
 3892                        	
 3893                        		.dbg	line,	"include\routines_LEVELS.c", 541; {
 3894                        	
 3895                        		.dbg	line,	"include\routines_LEVELS.c", 542; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + OFFSET_PLAYER_WALK_2 , TILES_16);
 3896                        		__st.wmiq	18432, _di
         01:C196  64 F0      			stz.l	_di
         01:C198  A9 48      			lda.h	#18432
         01:C19A  85 F1      			sta.h	_di
 3897                        		__farptr	_tiles_SPR_PLAYER + 1024, _bp_bank, _bp
         01:C19C  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 1024))
         01:C19E  85 EC      			sta.l	_bp
         01:C1A0  A9 7E      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 1024))
         01:C1A2  85 ED      			sta.h	_bp
         01:C1A4  A9 0B      			lda	#bank(_tiles_SPR_PLAYER + 1024)
         01:C1A6  85 02      			sta	_bp_bank
 3898                        		__st.wmiq	256, _ax
         01:C1A8  64 F8      			stz.l	_ax
         01:C1AA  A9 01      			lda.h	#256
         01:C1AC  85 F9      			sta.h	_ax
 3899                        		 _load_vram.3
         01:C1AE  82         			clx				; Offset to PCE VDC.
         01:C1AF  20 77 FF   			call	load_vram_x
 3900                        	
 3901                        		.dbg	line,	"include\routines_LEVELS.c", 543; }
 3902                        	
 3903                        		.dbg	line,	"include\routines_LEVELS.c", 546; else if(player_counter_anim == 8)
 3904                        		__bra		.LL115
         01:C1B2  4C 8F C2   			bra	.LL115
 3905    01:C1B5             	.LL114:
 3906                        		__ld.umq	_player_counter_anim
         01:C1B5  AD 11 23   			lda	_player_counter_anim
 3907                        		__equ_b.uiq	8
         01:C1B8  C9 08      			cmp	#8
         01:C1BA  F0 01      			beq	!+
         01:C1BC  18         			clc
         01:C1BD             	!:
 3908                        		__bfalse	.LL116
         01:C1BD  90 1F      			bcc	.LL116
 3909                        	
 3910                        		.dbg	line,	"include\routines_LEVELS.c", 547; {
 3911                        	
 3912                        		.dbg	line,	"include\routines_LEVELS.c", 548; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + OFFSET_PLAYER_WALK_3 , TILES_16);
 3913                        		__st.wmiq	18432, _di
         01:C1BF  64 F0      			stz.l	_di
         01:C1C1  A9 48      			lda.h	#18432
         01:C1C3  85 F1      			sta.h	_di
 3914                        		__farptr	_tiles_SPR_PLAYER + 1536, _bp_bank, _bp
         01:C1C5  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 1536))
         01:C1C7  85 EC      			sta.l	_bp
         01:C1C9  A9 60      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 1536))
         01:C1CB  85 ED      			sta.h	_bp
         01:C1CD  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 1536)
         01:C1CF  85 02      			sta	_bp_bank
 3915                        		__st.wmiq	256, _ax
         01:C1D1  64 F8      			stz.l	_ax
         01:C1D3  A9 01      			lda.h	#256
         01:C1D5  85 F9      			sta.h	_ax
 3916                        		 _load_vram.3
         01:C1D7  82         			clx				; Offset to PCE VDC.
         01:C1D8  20 77 FF   			call	load_vram_x
 3917                        	
 3918                        		.dbg	line,	"include\routines_LEVELS.c", 549; }
 3919                        	
 3920                        		.dbg	line,	"include\routines_LEVELS.c", 552; else if(player_counter_anim == 11)
 3921                        		__bra		.LL117
         01:C1DB  4C 8F C2   			bra	.LL117
 3922    01:C1DE             	.LL116:
 3923                        		__ld.umq	_player_counter_anim
         01:C1DE  AD 11 23   			lda	_player_counter_anim
 3924                        		__equ_b.uiq	11
         01:C1E1  C9 0B      			cmp	#11
         01:C1E3  F0 01      			beq	!+
         01:C1E5  18         			clc
         01:C1E6             	!:
 3925                        		__bfalse	.LL118
         01:C1E6  90 1F      			bcc	.LL118
 3926                        	
 3927                        		.dbg	line,	"include\routines_LEVELS.c", 553; {
 3928                        	
 3929                        		.dbg	line,	"include\routines_LEVELS.c", 554; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
 3930                        		__st.wmiq	18432, _di
         01:C1E8  64 F0      			stz.l	_di
         01:C1EA  A9 48      			lda.h	#18432
         01:C1EC  85 F1      			sta.h	_di
 3931                        		__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
         01:C1EE  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C1F0  85 EC      			sta.l	_bp
         01:C1F2  A9 7A      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C1F4  85 ED      			sta.h	_bp
         01:C1F6  A9 0B      			lda	#bank(_tiles_SPR_PLAYER)
         01:C1F8  85 02      			sta	_bp_bank
 3932                        		__st.wmiq	256, _ax
         01:C1FA  64 F8      			stz.l	_ax
         01:C1FC  A9 01      			lda.h	#256
         01:C1FE  85 F9      			sta.h	_ax
 3933                        		 _load_vram.3
         01:C200  82         			clx				; Offset to PCE VDC.
         01:C201  20 77 FF   			call	load_vram_x
 3934                        	
 3935                        		.dbg	line,	"include\routines_LEVELS.c", 555; }
 3936                        	
 3937                        		.dbg	line,	"include\routines_LEVELS.c", 558; else if(player_counter_anim == 14)
 3938                        		__bra		.LL119
         01:C204  4C 8F C2   			bra	.LL119
 3939    01:C207             	.LL118:
 3940                        		__ld.umq	_player_counter_anim
         01:C207  AD 11 23   			lda	_player_counter_anim
 3941                        		__equ_b.uiq	14
         01:C20A  C9 0E      			cmp	#14
         01:C20C  F0 01      			beq	!+
         01:C20E  18         			clc
         01:C20F             	!:
 3942                        		__bfalse	.LL120
         01:C20F  90 1E      			bcc	.LL120
 3943                        	
 3944                        		.dbg	line,	"include\routines_LEVELS.c", 559; {
 3945                        	
 3946                        		.dbg	line,	"include\routines_LEVELS.c", 560; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + OFFSET_PLAYER_WALK_4 , TILES_16);
 3947                        		__st.wmiq	18432, _di
         01:C211  64 F0      			stz.l	_di
         01:C213  A9 48      			lda.h	#18432
         01:C215  85 F1      			sta.h	_di
 3948                        		__farptr	_tiles_SPR_PLAYER + 2048, _bp_bank, _bp
         01:C217  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 2048))
         01:C219  85 EC      			sta.l	_bp
         01:C21B  A9 62      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 2048))
         01:C21D  85 ED      			sta.h	_bp
         01:C21F  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 2048)
         01:C221  85 02      			sta	_bp_bank
 3949                        		__st.wmiq	256, _ax
         01:C223  64 F8      			stz.l	_ax
         01:C225  A9 01      			lda.h	#256
         01:C227  85 F9      			sta.h	_ax
 3950                        		 _load_vram.3
         01:C229  82         			clx				; Offset to PCE VDC.
         01:C22A  20 77 FF   			call	load_vram_x
 3951                        	
 3952                        		.dbg	line,	"include\routines_LEVELS.c", 561; }
 3953                        	
 3954                        		.dbg	line,	"include\routines_LEVELS.c", 564; else if(player_counter_anim == 17)
 3955                        		__bra		.LL121
         01:C22D  80 60      			bra	.LL121
 3956    01:C22F             	.LL120:
 3957                        		__ld.umq	_player_counter_anim
         01:C22F  AD 11 23   			lda	_player_counter_anim
 3958                        		__equ_b.uiq	17
         01:C232  C9 11      			cmp	#17
         01:C234  F0 01      			beq	!+
         01:C236  18         			clc
         01:C237             	!:
 3959                        		__bfalse	.LL122
         01:C237  90 1E      			bcc	.LL122
 3960                        	
 3961                        		.dbg	line,	"include\routines_LEVELS.c", 565; {
 3962                        	
 3963                        		.dbg	line,	"include\routines_LEVELS.c", 566; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + OFFSET_PLAYER_WALK_5 , TILES_16);
 3964                        		__st.wmiq	18432, _di
         01:C239  64 F0      			stz.l	_di
         01:C23B  A9 48      			lda.h	#18432
         01:C23D  85 F1      			sta.h	_di
 3965                        		__farptr	_tiles_SPR_PLAYER + 2560, _bp_bank, _bp
         01:C23F  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 2560))
         01:C241  85 EC      			sta.l	_bp
         01:C243  A9 64      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 2560))
         01:C245  85 ED      			sta.h	_bp
         01:C247  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 2560)
         01:C249  85 02      			sta	_bp_bank
 3966                        		__st.wmiq	256, _ax
         01:C24B  64 F8      			stz.l	_ax
         01:C24D  A9 01      			lda.h	#256
         01:C24F  85 F9      			sta.h	_ax
 3967                        		 _load_vram.3
         01:C251  82         			clx				; Offset to PCE VDC.
         01:C252  20 77 FF   			call	load_vram_x
 3968                        	
 3969                        		.dbg	line,	"include\routines_LEVELS.c", 567; }
 3970                        	
 3971                        		.dbg	line,	"include\routines_LEVELS.c", 570; else if(player_counter_anim == 20)
 3972                        		__bra		.LL123
         01:C255  80 38      			bra	.LL123
 3973    01:C257             	.LL122:
 3974                        		__ld.umq	_player_counter_anim
         01:C257  AD 11 23   			lda	_player_counter_anim
 3975                        		__equ_b.uiq	20
         01:C25A  C9 14      			cmp	#20
         01:C25C  F0 01      			beq	!+
         01:C25E  18         			clc
         01:C25F             	!:
 3976                        		__bfalse	.LL124
         01:C25F  90 1E      			bcc	.LL124
 3977                        	
 3978                        		.dbg	line,	"include\routines_LEVELS.c", 571; {
 3979                        	
 3980                        		.dbg	line,	"include\routines_LEVELS.c", 572; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + OFFSET_PLAYER_WALK_6 , TILES_16);
 3981                        		__st.wmiq	18432, _di
         01:C261  64 F0      			stz.l	_di
         01:C263  A9 48      			lda.h	#18432
         01:C265  85 F1      			sta.h	_di
 3982                        		__farptr	_tiles_SPR_PLAYER + 3072, _bp_bank, _bp
         01:C267  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3072))
         01:C269  85 EC      			sta.l	_bp
         01:C26B  A9 66      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3072))
         01:C26D  85 ED      			sta.h	_bp
         01:C26F  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 3072)
         01:C271  85 02      			sta	_bp_bank
 3983                        		__st.wmiq	256, _ax
         01:C273  64 F8      			stz.l	_ax
         01:C275  A9 01      			lda.h	#256
         01:C277  85 F9      			sta.h	_ax
 3984                        		 _load_vram.3
         01:C279  82         			clx				; Offset to PCE VDC.
         01:C27A  20 77 FF   			call	load_vram_x
 3985                        	
 3986                        		.dbg	line,	"include\routines_LEVELS.c", 573; }
 3987                        	
 3988                        		.dbg	line,	"include\routines_LEVELS.c", 576; else if(player_counter_anim == 22)
 3989                        		__bra		.LL125
         01:C27D  80 10      			bra	.LL125
 3990    01:C27F             	.LL124:
 3991                        		__ld.umq	_player_counter_anim
         01:C27F  AD 11 23   			lda	_player_counter_anim
 3992                        		__equ_b.uiq	22
         01:C282  C9 16      			cmp	#22
         01:C284  F0 01      			beq	!+
         01:C286  18         			clc
         01:C287             	!:
 3993                        		__bfalse	.LL126
         01:C287  90 06      			bcc	.LL126
 3994                        	
 3995                        		.dbg	line,	"include\routines_LEVELS.c", 577; {
 3996                        	
 3997                        		.dbg	line,	"include\routines_LEVELS.c", 578; player_counter_anim = 0;
 3998                        		__st.umiq	0, _player_counter_anim
         01:C289  9C 11 23   			stz	_player_counter_anim
 3999                        	
 4000                        		.dbg	line,	"include\routines_LEVELS.c", 580; return;
 4001                        		__bra		.LL98
         01:C28C  4C A1 D0   			bra	.LL98
 4002                        	
 4003                        		.dbg	line,	"include\routines_LEVELS.c", 581; }
 4004                        	
 4005                        		.dbg	line,	"include\routines_LEVELS.c", 584; player_counter_anim += 1;
 4006    01:C28F             	.LL126:
 4007    01:C28F             	.LL125:
 4008    01:C28F             	.LL123:
 4009    01:C28F             	.LL121:
 4010    01:C28F             	.LL119:
 4011    01:C28F             	.LL117:
 4012    01:C28F             	.LL115:
 4013    01:C28F             	.LL113:
 4014    01:C28F             	.LL111:
 4015                        		__add_st.umiq	1, _player_counter_anim
         01:C28F  EE 11 23   			inc	_player_counter_anim
 4016                        	
 4017                        		.dbg	line,	"include\routines_LEVELS.c", 586; }
 4018                        	
 4019                        		.dbg	line,	"include\routines_LEVELS.c", 589; else if(player_state == STATE_JUMP)
 4020                        		__bra		.LL127
         01:C292  4C A1 D0   			bra	.LL127
 4021    01:C295             	.LL102:
 4022                        		__ld.umq	_player_state
         01:C295  AD 0E 23   			lda	_player_state
 4023                        		__equ_b.uiq	4
         01:C298  C9 04      			cmp	#4
         01:C29A  F0 01      			beq	!+
         01:C29C  18         			clc
         01:C29D             	!:
 4024                        		__bfalse	.LL128
         01:C29D  B0 03 4C 68			bcc	.LL128
         01:C2A1  C4          
 4025                        	
 4026                        		.dbg	line,	"include\routines_LEVELS.c", 590; {
 4027                        	
 4028                        		.dbg	line,	"include\routines_LEVELS.c", 591; unsigned char i;
 4029                        	
 4030                        		.dbg	line,	"include\routines_LEVELS.c", 592; i = 1;
 4031                        		__st.umiq	1, __update_PLAYER_end - 1  /* i */
         01:C2A2  A9 01      			lda.l	#1
         01:C2A4  8D 09 23   			sta	__update_PLAYER_end - 1
 4032                        	
 4033                        		.dbg	line,	"include\routines_LEVELS.c", 595; if(player_counter_anim == 0)
 4034                        		__not.um	_player_counter_anim
         01:C2A7  AD 11 23   			lda	_player_counter_anim
         01:C2AA  18         			clc
         01:C2AB  D0 01      			bne	!+
         01:C2AD  38         			sec
         01:C2AE             	!:
 4035                        		__bfalse	.LL129
         01:C2AE  90 21      			bcc	.LL129
 4036                        	
 4037                        		.dbg	line,	"include\routines_LEVELS.c", 596; {
 4038                        	
 4039                        		.dbg	line,	"include\routines_LEVELS.c", 597; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_112 , TILES_16);
 4040                        		__st.wmiq	18432, _di
         01:C2B0  64 F0      			stz.l	_di
         01:C2B2  A9 48      			lda.h	#18432
         01:C2B4  85 F1      			sta.h	_di
 4041                        		__farptr	_tiles_SPR_PLAYER + 3584, _bp_bank, _bp
         01:C2B6  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3584))
         01:C2B8  85 EC      			sta.l	_bp
         01:C2BA  A9 68      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3584))
         01:C2BC  85 ED      			sta.h	_bp
         01:C2BE  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 3584)
         01:C2C0  85 02      			sta	_bp_bank
 4042                        		__st.wmiq	256, _ax
         01:C2C2  64 F8      			stz.l	_ax
         01:C2C4  A9 01      			lda.h	#256
         01:C2C6  85 F9      			sta.h	_ax
 4043                        		 _load_vram.3
         01:C2C8  82         			clx				; Offset to PCE VDC.
         01:C2C9  20 77 FF   			call	load_vram_x
 4044                        	
 4045                        		.dbg	line,	"include\routines_LEVELS.c", 599; player_counter_anim = 1;
 4046                        		__st.umiq	1, _player_counter_anim
         01:C2CC  A9 01      			lda.l	#1
         01:C2CE  8D 11 23   			sta	_player_counter_anim
 4047                        	
 4048                        		.dbg	line,	"include\routines_LEVELS.c", 600; }
 4049                        	
 4050                        		.dbg	line,	"include\routines_LEVELS.c", 603; player_pos_y += TABLE_PLAYER_JUMP_V[player_index_jump];
 4051    01:C2D1             	.LL129:
 4052                        		__ldx.umq	_player_index_jump
         01:C2D1  AE 12 23   			ldx	_player_index_jump
 4053                        		__ld.bax	_TABLE_PLAYER_JUMP_V
         01:C2D4  BD 1D 60   			lda	_TABLE_PLAYER_JUMP_V, x
         01:C2D7  C2         			cly
         01:C2D8  10 01      			bpl	!+
         01:C2DA  88         			dey
         01:C2DB             	!:
 4054                        		__add_st.wmq	_player_pos_y
         01:C2DB  18         			clc
         01:C2DC  6D 15 23   			adc.l	_player_pos_y
         01:C2DF  8D 15 23   			sta.l	_player_pos_y
         01:C2E2  98         			tya
         01:C2E3  6D 16 23   			adc.h	_player_pos_y
         01:C2E6  8D 16 23   			sta.h	_player_pos_y
 4055                        	
 4056                        		.dbg	line,	"include\routines_LEVELS.c", 605; spr_set(player_id);
 4057                        		__ld.umq	_player_id
         01:C2E9  AD 0D 23   			lda	_player_id
 4058                        		__call		_spr_set.1
         01:C2EC  20 DD E7   			call	_spr_set.1
 4059                        	
 4060                        		.dbg	line,	"include\routines_LEVELS.c", 606; spr_y(player_pos_y);
 4061                        		__ld.wm		_player_pos_y
         01:C2EF  AD 15 23   			lda.l	_player_pos_y
         01:C2F2  AC 16 23   			ldy.h	_player_pos_y
 4062                        		__call		_spr_y.1
         01:C2F5  20 19 E8   			call	_spr_y.1
 4063                        	
 4064                        		.dbg	line,	"include\routines_LEVELS.c", 610; if(player_index_jump < 34)
 4065                        		__ld.umq	_player_index_jump
         01:C2F8  AD 12 23   			lda	_player_index_jump
 4066                        		__ult_b.uiq	34
         01:C2FB  C9 22      			cmp	#34		; Subtract integer from A.
         01:C2FD  6A         			ror	a		; CC if A < integer.
         01:C2FE  49 80      			eor	#$80
         01:C300  2A         			rol	a
 4067                        		__bfalse	.LL130
         01:C301  90 03      			bcc	.LL130
 4068                        	
 4069                        		.dbg	line,	"include\routines_LEVELS.c", 611; {
 4070                        	
 4071                        		.dbg	line,	"include\routines_LEVELS.c", 612; player_index_jump += 1;
 4072                        		__add_st.umiq	1, _player_index_jump
         01:C303  EE 12 23   			inc	_player_index_jump
 4073                        	
 4074                        		.dbg	line,	"include\routines_LEVELS.c", 613; }
 4075                        	
 4076                        		.dbg	line,	"include\routines_LEVELS.c", 616; // CHECK COLLISION WITH FLOOR //
 4077                        	
 4078                        		.dbg	line,	"include\routines_LEVELS.c", 617; if(player_axis == AXIS_RIGHT)
 4079    01:C306             	.LL130:
 4080                        		__not.um	_player_axis
         01:C306  AD 0F 23   			lda	_player_axis
         01:C309  18         			clc
         01:C30A  D0 01      			bne	!+
         01:C30C  38         			sec
         01:C30D             	!:
 4081                        		__bfalse	.LL131
         01:C30D  90 05      			bcc	.LL131
 4082                        	
 4083                        		.dbg	line,	"include\routines_LEVELS.c", 618; {
 4084                        	
 4085                        		.dbg	line,	"include\routines_LEVELS.c", 619; check_FLOOR_R();
 4086                        		__call		_check_FLOOR_R
         01:C30F  20 4F FF   			call	_check_FLOOR_R
 4087                        	
 4088                        		.dbg	line,	"include\routines_LEVELS.c", 620; }
 4089                        	
 4090                        		.dbg	line,	"include\routines_LEVELS.c", 622; else
 4091                        		__bra		.LL132
         01:C312  80 03      			bra	.LL132
 4092    01:C314             	.LL131:
 4093                        	
 4094                        		.dbg	line,	"include\routines_LEVELS.c", 623; {
 4095                        	
 4096                        		.dbg	line,	"include\routines_LEVELS.c", 624; check_FLOOR_L();
 4097                        		__call		_check_FLOOR_L
         01:C314  20 63 FF   			call	_check_FLOOR_L
 4098                        	
 4099                        		.dbg	line,	"include\routines_LEVELS.c", 625; }
 4100    01:C317             	.LL132:
 4101                        	
 4102                        		.dbg	line,	"include\routines_LEVELS.c", 628; if(map_blk_flag == TILE_BG)
 4103                        		__ld.umq	_map_blk_flag
         01:C317  AD 82 28   			lda	_map_blk_flag
 4104                        		__equ_b.uiq	1
         01:C31A  C9 01      			cmp	#1
         01:C31C  F0 01      			beq	!+
         01:C31E  18         			clc
         01:C31F             	!:
 4105                        		__bfalse	.LL133
         01:C31F  B0 03 4C E0			bcc	.LL133
         01:C323  C3          
 4106                        	
 4107                        		.dbg	line,	"include\routines_LEVELS.c", 629; {
 4108                        	
 4109                        		.dbg	line,	"include\routines_LEVELS.c", 630; // CALCULATE HOW MANY PIXELS THE PLAYER MOVED INTO THE GROUND //
 4110                        	
 4111                        		.dbg	line,	"include\routines_LEVELS.c", 631; for(i=1; i<11 ; i++ )
 4112                        		__st.umiq	1, __update_PLAYER_end - 1  /* i */
         01:C324  A9 01      			lda.l	#1
         01:C326  8D 09 23   			sta	__update_PLAYER_end - 1
 4113    01:C329             	.LL134:
 4114                        		__ld.umq	__update_PLAYER_end - 1  /* i */
         01:C329  AD 09 23   			lda	__update_PLAYER_end - 1
 4115                        		__ult_b.uiq	11
         01:C32C  C9 0B      			cmp	#11		; Subtract integer from A.
         01:C32E  6A         			ror	a		; CC if A < integer.
         01:C32F  49 80      			eor	#$80
         01:C331  2A         			rol	a
 4116                        		__btrue		.LL136
         01:C332  B0 08      			bcs	.LL136
 4117                        		__bra		.LL137
         01:C334  4C D2 C3   			bra	.LL137
 4118    01:C337             	.LL135:
 4119                        		__inc.umq	__update_PLAYER_end - 1  /* i */
         01:C337  EE 09 23   			inc	__update_PLAYER_end - 1
 4120                        		__bra		.LL134
         01:C33A  80 ED      			bra	.LL134
 4121    01:C33C             	.LL136:
 4122                        	
 4123                        		.dbg	line,	"include\routines_LEVELS.c", 632; {
 4124                        	
 4125                        		.dbg	line,	"include\routines_LEVELS.c", 633; if(player_axis == AXIS_RIGHT)
 4126                        		__not.um	_player_axis
         01:C33C  AD 0F 23   			lda	_player_axis
         01:C33F  18         			clc
         01:C340  D0 01      			bne	!+
         01:C342  38         			sec
         01:C343             	!:
 4127                        		__bfalse	.LL138
         01:C343  90 20      			bcc	.LL138
 4128                        	
 4129                        		.dbg	line,	"include\routines_LEVELS.c", 634; {
 4130                        	
 4131                        		.dbg	line,	"include\routines_LEVELS.c", 635; check_BG( 11 , i);
 4132                        		__ld.wi		11
         01:C345  A9 0B      			lda.l	#11
         01:C347  C2         			cly
 4133                        		__pusharg.wr
         01:C348  A6 8D      			ldx	<__sp
         01:C34A  CA         			dex
         01:C34B  CA         			dex
         01:C34C  95 08      			sta.l	<__stack, x
         01:C34E  94 09      			sty.h	<__stack, x
         01:C350  86 8D      			stx	<__sp
 4134                        		__ld.um		__update_PLAYER_end - 1  /* i */
         01:C352  AD 09 23   			lda	__update_PLAYER_end - 1
         01:C355  C2         			cly
 4135                        		__pusharg.wr
         01:C356  A6 8D      			ldx	<__sp
         01:C358  CA         			dex
         01:C359  CA         			dex
         01:C35A  95 08      			sta.l	<__stack, x
         01:C35C  94 09      			sty.h	<__stack, x
         01:C35E  86 8D      			stx	<__sp
 4136                        		__call		_check_BG
         01:C360  20 3B FF   			call	_check_BG
 4137                        	
 4138                        		.dbg	line,	"include\routines_LEVELS.c", 636; }
 4139                        	
 4140                        		.dbg	line,	"include\routines_LEVELS.c", 638; else
 4141                        		__bra		.LL139
         01:C363  80 1E      			bra	.LL139
 4142    01:C365             	.LL138:
 4143                        	
 4144                        		.dbg	line,	"include\routines_LEVELS.c", 639; {
 4145                        	
 4146                        		.dbg	line,	"include\routines_LEVELS.c", 640; check_BG( 10 , i);
 4147                        		__ld.wi		10
         01:C365  A9 0A      			lda.l	#10
         01:C367  C2         			cly
 4148                        		__pusharg.wr
         01:C368  A6 8D      			ldx	<__sp
         01:C36A  CA         			dex
         01:C36B  CA         			dex
         01:C36C  95 08      			sta.l	<__stack, x
         01:C36E  94 09      			sty.h	<__stack, x
         01:C370  86 8D      			stx	<__sp
 4149                        		__ld.um		__update_PLAYER_end - 1  /* i */
         01:C372  AD 09 23   			lda	__update_PLAYER_end - 1
         01:C375  C2         			cly
 4150                        		__pusharg.wr
         01:C376  A6 8D      			ldx	<__sp
         01:C378  CA         			dex
         01:C379  CA         			dex
         01:C37A  95 08      			sta.l	<__stack, x
         01:C37C  94 09      			sty.h	<__stack, x
         01:C37E  86 8D      			stx	<__sp
 4151                        		__call		_check_BG
         01:C380  20 3B FF   			call	_check_BG
 4152                        	
 4153                        		.dbg	line,	"include\routines_LEVELS.c", 641; }
 4154    01:C383             	.LL139:
 4155                        	
 4156                        		.dbg	line,	"include\routines_LEVELS.c", 644; if(map_blk_flag == TILE_EMPTY)
 4157                        		__not.um	_map_blk_flag
         01:C383  AD 82 28   			lda	_map_blk_flag
         01:C386  18         			clc
         01:C387  D0 01      			bne	!+
         01:C389  38         			sec
         01:C38A             	!:
 4158                        		__bfalse	.LL140
         01:C38A  90 AB      			bcc	.LL140
 4159                        	
 4160                        		.dbg	line,	"include\routines_LEVELS.c", 645; {
 4161                        	
 4162                        		.dbg	line,	"include\routines_LEVELS.c", 646; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
 4163                        		__st.wmiq	18432, _di
         01:C38C  64 F0      			stz.l	_di
         01:C38E  A9 48      			lda.h	#18432
         01:C390  85 F1      			sta.h	_di
 4164                        		__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
         01:C392  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C394  85 EC      			sta.l	_bp
         01:C396  A9 7A      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C398  85 ED      			sta.h	_bp
         01:C39A  A9 0B      			lda	#bank(_tiles_SPR_PLAYER)
         01:C39C  85 02      			sta	_bp_bank
 4165                        		__st.wmiq	256, _ax
         01:C39E  64 F8      			stz.l	_ax
         01:C3A0  A9 01      			lda.h	#256
         01:C3A2  85 F9      			sta.h	_ax
 4166                        		 _load_vram.3
         01:C3A4  82         			clx				; Offset to PCE VDC.
         01:C3A5  20 77 FF   			call	load_vram_x
 4167                        	
 4168                        		.dbg	line,	"include\routines_LEVELS.c", 648; player_pos_y -= (i - 1);
 4169                        		__ld.um		__update_PLAYER_end - 1  /* i */
         01:C3A8  AD 09 23   			lda	__update_PLAYER_end - 1
         01:C3AB  C2         			cly
 4170                        		__sub.wi	1
         01:C3AC  38         			sec
         01:C3AD  E9 01      			sbc.l	#1
         01:C3AF  B0 01      			bcs	!+
         01:C3B1  88         			dey
         01:C3B2             	!:
 4171                        		__isub_st.wmq	_player_pos_y
         01:C3B2  38         			sec
         01:C3B3  49 FF      			eor	#$FF
         01:C3B5  6D 15 23   			adc.l	_player_pos_y
         01:C3B8  8D 15 23   			sta.l	_player_pos_y
         01:C3BB  98         			tya
         01:C3BC  49 FF      			eor	#$FF
         01:C3BE  6D 16 23   			adc.h	_player_pos_y
         01:C3C1  8D 16 23   			sta.h	_player_pos_y
 4172                        	
 4173                        		.dbg	line,	"include\routines_LEVELS.c", 649; spr_y(player_pos_y);
 4174                        		__ld.wm		_player_pos_y
         01:C3C4  AD 15 23   			lda.l	_player_pos_y
         01:C3C7  AC 16 23   			ldy.h	_player_pos_y
 4175                        		__call		_spr_y.1
         01:C3CA  20 19 E8   			call	_spr_y.1
 4176                        	
 4177                        		.dbg	line,	"include\routines_LEVELS.c", 650; break;
 4178                        		__bra		.LL137
         01:C3CD  80 03      			bra	.LL137
 4179                        	
 4180                        		.dbg	line,	"include\routines_LEVELS.c", 651; }
 4181                        	
 4182                        		.dbg	line,	"include\routines_LEVELS.c", 653; }
 4183    01:C3CF             	.LL140	.alias		.LL135
 4184                        		__bra		.LL135
         01:C3CF  4C 37 C3   			bra	.LL135
 4185    01:C3D2             	.LL137:
 4186                        	
 4187                        		.dbg	line,	"include\routines_LEVELS.c", 655; player_counter_anim = 1;
 4188                        		__st.umiq	1, _player_counter_anim
         01:C3D2  A9 01      			lda.l	#1
         01:C3D4  8D 11 23   			sta	_player_counter_anim
 4189                        	
 4190                        		.dbg	line,	"include\routines_LEVELS.c", 656; player_index_jump = 0;
 4191                        		__st.umiq	0, _player_index_jump
         01:C3D7  9C 12 23   			stz	_player_index_jump
 4192                        	
 4193                        		.dbg	line,	"include\routines_LEVELS.c", 657; player_state = STATE_IDLE;
 4194                        		__st.umiq	0, _player_state
         01:C3DA  9C 0E 23   			stz	_player_state
 4195                        	
 4196                        		.dbg	line,	"include\routines_LEVELS.c", 658; return;
 4197                        		__bra		.LL98
         01:C3DD  4C A1 D0   			bra	.LL98
 4198                        	
 4199                        		.dbg	line,	"include\routines_LEVELS.c", 659; }
 4200                        	
 4201                        		.dbg	line,	"include\routines_LEVELS.c", 662; // CHECK COLLISION WITH LADDERS //
 4202                        	
 4203                        		.dbg	line,	"include\routines_LEVELS.c", 663; check_LADDER( 16 , 16 );
 4204    01:C3E0             	.LL133:
 4205                        		__ld.wi		16
         01:C3E0  A9 10      			lda.l	#16
         01:C3E2  C2         			cly
 4206                        		__pusharg.wr
         01:C3E3  A6 8D      			ldx	<__sp
         01:C3E5  CA         			dex
         01:C3E6  CA         			dex
         01:C3E7  95 08      			sta.l	<__stack, x
         01:C3E9  94 09      			sty.h	<__stack, x
         01:C3EB  86 8D      			stx	<__sp
 4207                        		__ld.wi		16
         01:C3ED  A9 10      			lda.l	#16
         01:C3EF  C2         			cly
 4208                        		__pusharg.wr
         01:C3F0  A6 8D      			ldx	<__sp
         01:C3F2  CA         			dex
         01:C3F3  CA         			dex
         01:C3F4  95 08      			sta.l	<__stack, x
         01:C3F6  94 09      			sty.h	<__stack, x
         01:C3F8  86 8D      			stx	<__sp
 4209                        		__call		_check_LADDER
         01:C3FA  20 81 FF   			call	_check_LADDER
 4210                        	
 4211                        		.dbg	line,	"include\routines_LEVELS.c", 665; // IF PLAYER HITS THE LADDER //
 4212                        	
 4213                        		.dbg	line,	"include\routines_LEVELS.c", 666; if(map_blk_flag == TILE_LADDER)
 4214                        		__ld.umq	_map_blk_flag
         01:C3FD  AD 82 28   			lda	_map_blk_flag
 4215                        		__equ_b.uiq	2
         01:C400  C9 02      			cmp	#2
         01:C402  F0 01      			beq	!+
         01:C404  18         			clc
         01:C405             	!:
 4216                        		__bfalse	.LL141
         01:C405  B0 03 4C A1			bcc	.LL141
         01:C409  D0          
 4217                        	
 4218                        		.dbg	line,	"include\routines_LEVELS.c", 667; {
 4219                        	
 4220                        		.dbg	line,	"include\routines_LEVELS.c", 668; // CAMERA GOES 8 PX BACKWARD //
 4221                        	
 4222                        		.dbg	line,	"include\routines_LEVELS.c", 669; sgx_map_pxl_x = ( (sgx_map_pxl_x >> 3) << 3 );
 4223                        		__ld.wm		_sgx_map_pxl_x
         01:C40A  AD 61 23   			lda.l	_sgx_map_pxl_x
         01:C40D  AC 62 23   			ldy.h	_sgx_map_pxl_x
 4224                        		__lsr.wi	3
         01:C410  84 00      			sty	__temp
         01:C412  20 3A E2   			jsr	lsrw3
 4225                        		__asl.wi	3
         01:C415  84 00      			sty	__temp
         01:C417  20 D7 E1   			jsr	aslw3
 4226                        		__st.wmq	_sgx_map_pxl_x
         01:C41A  8D 61 23   			sta.l	_sgx_map_pxl_x
         01:C41D  8C 62 23   			sty.h	_sgx_map_pxl_x
 4227                        	
 4228                        		.dbg	line,	"include\routines_LEVELS.c", 671; // SO WE UPDATE THE MAP //
 4229                        	
 4230                        		.dbg	line,	"include\routines_LEVELS.c", 672; sgx_scroll_map();
 4231                        		__call		_sgx_scroll_map
         01:C420  20 95 FF   			call	_sgx_scroll_map
 4232                        	
 4233                        		.dbg	line,	"include\routines_LEVELS.c", 674; // CHECK IF THE PLAYER STANDS RIGHT TO THE LADDER //
 4234                        	
 4235                        		.dbg	line,	"include\routines_LEVELS.c", 675; check_LADDER( 31 , 16 );
 4236                        		__ld.wi		31
         01:C423  A9 1F      			lda.l	#31
         01:C425  C2         			cly
 4237                        		__pusharg.wr
         01:C426  A6 8D      			ldx	<__sp
         01:C428  CA         			dex
         01:C429  CA         			dex
         01:C42A  95 08      			sta.l	<__stack, x
         01:C42C  94 09      			sty.h	<__stack, x
         01:C42E  86 8D      			stx	<__sp
 4238                        		__ld.wi		16
         01:C430  A9 10      			lda.l	#16
         01:C432  C2         			cly
 4239                        		__pusharg.wr
         01:C433  A6 8D      			ldx	<__sp
         01:C435  CA         			dex
         01:C436  CA         			dex
         01:C437  95 08      			sta.l	<__stack, x
         01:C439  94 09      			sty.h	<__stack, x
         01:C43B  86 8D      			stx	<__sp
 4240                        		__call		_check_LADDER
         01:C43D  20 81 FF   			call	_check_LADDER
 4241                        	
 4242                        		.dbg	line,	"include\routines_LEVELS.c", 677; if(map_blk_flag == TILE_LADDER)
 4243                        		__ld.umq	_map_blk_flag
         01:C440  AD 82 28   			lda	_map_blk_flag
 4244                        		__equ_b.uiq	2
         01:C443  C9 02      			cmp	#2
         01:C445  F0 01      			beq	!+
         01:C447  18         			clc
         01:C448             	!:
 4245                        		__bfalse	.LL142
         01:C448  90 0E      			bcc	.LL142
 4246                        	
 4247                        		.dbg	line,	"include\routines_LEVELS.c", 678; {
 4248                        	
 4249                        		.dbg	line,	"include\routines_LEVELS.c", 679; sgx_map_pxl_x += 8;
 4250                        		__add_st.wmiq	8, _sgx_map_pxl_x
         01:C44A  18         			clc
         01:C44B  AD 61 23   			lda.l	_sgx_map_pxl_x
         01:C44E  69 08      			adc.l	#8
         01:C450  8D 61 23   			sta.l	_sgx_map_pxl_x
         01:C453  90 03      			bcc	!+
         01:C455  EE 62 23   			inc.h	_sgx_map_pxl_x
         01:C458             	!:
 4251                        	
 4252                        		.dbg	line,	"include\routines_LEVELS.c", 680; }
 4253                        	
 4254                        		.dbg	line,	"include\routines_LEVELS.c", 682; player_counter_anim = 1;
 4255    01:C458             	.LL142:
 4256                        		__st.umiq	1, _player_counter_anim
         01:C458  A9 01      			lda.l	#1
         01:C45A  8D 11 23   			sta	_player_counter_anim
 4257                        	
 4258                        		.dbg	line,	"include\routines_LEVELS.c", 683; player_index_jump = 0;
 4259                        		__st.umiq	0, _player_index_jump
         01:C45D  9C 12 23   			stz	_player_index_jump
 4260                        	
 4261                        		.dbg	line,	"include\routines_LEVELS.c", 684; player_state = STATE_HANG;
 4262                        		__st.umiq	10, _player_state
         01:C460  A9 0A      			lda.l	#10
         01:C462  8D 0E 23   			sta	_player_state
 4263                        	
 4264                        		.dbg	line,	"include\routines_LEVELS.c", 685; }
 4265                        	
 4266                        		.dbg	line,	"include\routines_LEVELS.c", 686; }
 4267    01:C465             	.LL141	.alias		.LL143
 4268                        	
 4269                        		.dbg	line,	"include\routines_LEVELS.c", 689; else if(player_state == STATE_JUMP_RIGHT)
 4270                        		__bra		.LL143
         01:C465  4C A1 D0   			bra	.LL143
 4271    01:C468             	.LL128:
 4272                        		__ld.umq	_player_state
         01:C468  AD 0E 23   			lda	_player_state
 4273                        		__equ_b.uiq	5
         01:C46B  C9 05      			cmp	#5
         01:C46D  F0 01      			beq	!+
         01:C46F  18         			clc
         01:C470             	!:
 4274                        		__bfalse	.LL144
         01:C470  B0 03 4C DC			bcc	.LL144
         01:C474  C6          
 4275                        	
 4276                        		.dbg	line,	"include\routines_LEVELS.c", 690; {
 4277                        	
 4278                        		.dbg	line,	"include\routines_LEVELS.c", 691; unsigned char i, camera_y_move;
 4279                        	
 4280                        		.dbg	line,	"include\routines_LEVELS.c", 692; i = 1;
 4281                        		__st.umiq	1, __update_PLAYER_end - 2  /* i */
         01:C475  A9 01      			lda.l	#1
         01:C477  8D 08 23   			sta	__update_PLAYER_end - 2
 4282                        	
 4283                        		.dbg	line,	"include\routines_LEVELS.c", 695; // UPDATE PLAYER TILES //
 4284                        	
 4285                        		.dbg	line,	"include\routines_LEVELS.c", 696; if(player_counter_anim == 0)
 4286                        		__not.um	_player_counter_anim
         01:C47A  AD 11 23   			lda	_player_counter_anim
         01:C47D  18         			clc
         01:C47E  D0 01      			bne	!+
         01:C480  38         			sec
         01:C481             	!:
 4287                        		__bfalse	.LL145
         01:C481  90 21      			bcc	.LL145
 4288                        	
 4289                        		.dbg	line,	"include\routines_LEVELS.c", 697; {
 4290                        	
 4291                        		.dbg	line,	"include\routines_LEVELS.c", 698; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_112 , TILES_16);
 4292                        		__st.wmiq	18432, _di
         01:C483  64 F0      			stz.l	_di
         01:C485  A9 48      			lda.h	#18432
         01:C487  85 F1      			sta.h	_di
 4293                        		__farptr	_tiles_SPR_PLAYER + 3584, _bp_bank, _bp
         01:C489  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3584))
         01:C48B  85 EC      			sta.l	_bp
         01:C48D  A9 68      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3584))
         01:C48F  85 ED      			sta.h	_bp
         01:C491  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 3584)
         01:C493  85 02      			sta	_bp_bank
 4294                        		__st.wmiq	256, _ax
         01:C495  64 F8      			stz.l	_ax
         01:C497  A9 01      			lda.h	#256
         01:C499  85 F9      			sta.h	_ax
 4295                        		 _load_vram.3
         01:C49B  82         			clx				; Offset to PCE VDC.
         01:C49C  20 77 FF   			call	load_vram_x
 4296                        	
 4297                        		.dbg	line,	"include\routines_LEVELS.c", 700; player_counter_anim = 1;
 4298                        		__st.umiq	1, _player_counter_anim
         01:C49F  A9 01      			lda.l	#1
         01:C4A1  8D 11 23   			sta	_player_counter_anim
 4299                        	
 4300                        		.dbg	line,	"include\routines_LEVELS.c", 701; }
 4301                        	
 4302                        		.dbg	line,	"include\routines_LEVELS.c", 704; // SELECT PLAYER SPRITE //
 4303                        	
 4304                        		.dbg	line,	"include\routines_LEVELS.c", 705; spr_set(player_id);
 4305    01:C4A4             	.LL145:
 4306                        		__ld.umq	_player_id
         01:C4A4  AD 0D 23   			lda	_player_id
 4307                        		__call		_spr_set.1
         01:C4A7  20 DD E7   			call	_spr_set.1
 4308                        	
 4309                        		.dbg	line,	"include\routines_LEVELS.c", 708; //--------------------------------------------------------------------------------------//
 4310                        	
 4311                        		.dbg	line,	"include\routines_LEVELS.c", 709; //                                        H MOVE                                        //
 4312                        	
 4313                        		.dbg	line,	"include\routines_LEVELS.c", 710; //--------------------------------------------------------------------------------------//
 4314                        	
 4315                        		.dbg	line,	"include\routines_LEVELS.c", 712; // CHECK COLLISION WITH RIGHT WALL //
 4316                        	
 4317                        		.dbg	line,	"include\routines_LEVELS.c", 713; // IF THE PLAYER HAS NOT YET COLLIDED WITH A WALL //
 4318                        	
 4319                        		.dbg	line,	"include\routines_LEVELS.c", 714; //if(collision_side == FALSE)
 4320                        	
 4321                        		.dbg	line,	"include\routines_LEVELS.c", 715; //{
 4322                        	
 4323                        		.dbg	line,	"include\routines_LEVELS.c", 716; check_WALL_BR();
 4324                        		__call		_check_WALL_BR
         01:C4AA  20 59 FF   			call	_check_WALL_BR
 4325                        	
 4326                        		.dbg	line,	"include\routines_LEVELS.c", 718; if(map_blk_flag != TILE_BG)
 4327                        		__ld.umq	_map_blk_flag
         01:C4AD  AD 82 28   			lda	_map_blk_flag
 4328                        		__neq_b.uiq	1
         01:C4B0  38         			sec
         01:C4B1  49 01      			eor	#1
         01:C4B3  D0 01      			bne	!+
         01:C4B5  18         			clc
         01:C4B6             	!:
 4329                        		__bfalse	.LL146
         01:C4B6  90 22      			bcc	.LL146
 4330                        	
 4331                        		.dbg	line,	"include\routines_LEVELS.c", 719; {
 4332                        	
 4333                        		.dbg	line,	"include\routines_LEVELS.c", 720; check_WALL_TR();
 4334                        		__call		_check_WALL_TR
         01:C4B8  20 31 FF   			call	_check_WALL_TR
 4335                        	
 4336                        		.dbg	line,	"include\routines_LEVELS.c", 722; if(map_blk_flag == TILE_BG)
 4337                        		__ld.umq	_map_blk_flag
         01:C4BB  AD 82 28   			lda	_map_blk_flag
 4338                        		__equ_b.uiq	1
         01:C4BE  C9 01      			cmp	#1
         01:C4C0  F0 01      			beq	!+
         01:C4C2  18         			clc
         01:C4C3             	!:
 4339                        		__bfalse	.LL147
         01:C4C3  90 07      			bcc	.LL147
 4340                        	
 4341                        		.dbg	line,	"include\routines_LEVELS.c", 723; {
 4342                        	
 4343                        		.dbg	line,	"include\routines_LEVELS.c", 724; player_state = STATE_FALL;
 4344                        		__st.umiq	9, _player_state
         01:C4C5  A9 09      			lda.l	#9
         01:C4C7  8D 0E 23   			sta	_player_state
 4345                        	
 4346                        		.dbg	line,	"include\routines_LEVELS.c", 725; }
 4347                        	
 4348                        		.dbg	line,	"include\routines_LEVELS.c", 727; else
 4349                        		__bra		.LL148
         01:C4CA  80 0E      			bra	.LL148
 4350    01:C4CC             	.LL147:
 4351                        	
 4352                        		.dbg	line,	"include\routines_LEVELS.c", 728; {
 4353                        	
 4354                        		.dbg	line,	"include\routines_LEVELS.c", 729; sgx_map_pxl_x += 2;
 4355                        		__add_st.wmiq	2, _sgx_map_pxl_x
         01:C4CC  18         			clc
         01:C4CD  AD 61 23   			lda.l	_sgx_map_pxl_x
         01:C4D0  69 02      			adc.l	#2
         01:C4D2  8D 61 23   			sta.l	_sgx_map_pxl_x
         01:C4D5  90 03      			bcc	!+
         01:C4D7  EE 62 23   			inc.h	_sgx_map_pxl_x
         01:C4DA             	!:
 4356                        	
 4357                        		.dbg	line,	"include\routines_LEVELS.c", 730; }
 4358    01:C4DA             	.LL148:
 4359                        	
 4360                        		.dbg	line,	"include\routines_LEVELS.c", 731; }
 4361                        	
 4362                        		.dbg	line,	"include\routines_LEVELS.c", 732; //}
 4363                        	
 4364                        		.dbg	line,	"include\routines_LEVELS.c", 735; //--------------------------------------------------------------------------------------//
 4365                        	
 4366                        		.dbg	line,	"include\routines_LEVELS.c", 736; //                                        V MOVE                                        //
 4367                        	
 4368                        		.dbg	line,	"include\routines_LEVELS.c", 737; //--------------------------------------------------------------------------------------//
 4369                        	
 4370                        		.dbg	line,	"include\routines_LEVELS.c", 739; // UPDATE PLAYER Y POSITION //
 4371                        	
 4372                        		.dbg	line,	"include\routines_LEVELS.c", 740; player_pos_y += TABLE_PLAYER_JUMP_V[player_index_jump];
 4373    01:C4DA             	.LL146:
 4374                        		__ldx.umq	_player_index_jump
         01:C4DA  AE 12 23   			ldx	_player_index_jump
 4375                        		__ld.bax	_TABLE_PLAYER_JUMP_V
         01:C4DD  BD 1D 60   			lda	_TABLE_PLAYER_JUMP_V, x
         01:C4E0  C2         			cly
         01:C4E1  10 01      			bpl	!+
         01:C4E3  88         			dey
         01:C4E4             	!:
 4376                        		__add_st.wmq	_player_pos_y
         01:C4E4  18         			clc
         01:C4E5  6D 15 23   			adc.l	_player_pos_y
         01:C4E8  8D 15 23   			sta.l	_player_pos_y
         01:C4EB  98         			tya
         01:C4EC  6D 16 23   			adc.h	_player_pos_y
         01:C4EF  8D 16 23   			sta.h	_player_pos_y
 4377                        	
 4378                        		.dbg	line,	"include\routines_LEVELS.c", 743; // IF PLAYER GOES BELOW ITS BASE Y POSITION //
 4379                        	
 4380                        		.dbg	line,	"include\routines_LEVELS.c", 744; if(player_pos_y >= PLAYER_BASE_Y_POS)
 4381                        		__ld.wm		_player_pos_y
         01:C4F2  AD 15 23   			lda.l	_player_pos_y
         01:C4F5  AC 16 23   			ldy.h	_player_pos_y
 4382                        		__sge_w.wi	128
         01:C4F8  C9 80      			cmp.l	#128		; Subtract integer from Y:A.
         01:C4FA  98         			tya
         01:C4FB  E9 00      			sbc.h	#128
         01:C4FD  50 02      			bvc	!+
         01:C4FF  49 80      			eor	#$80		; +ve if Y:A >= integer (signed).
         01:C501  49 80      	!:		eor	#$80
         01:C503  0A         			asl	a
 4383                        		__bfalse	.LL149
         01:C504  90 4E      			bcc	.LL149
 4384                        	
 4385                        		.dbg	line,	"include\routines_LEVELS.c", 745; {
 4386                        	
 4387                        		.dbg	line,	"include\routines_LEVELS.c", 746; // THE CAMERA MOVES //
 4388                        	
 4389                        		.dbg	line,	"include\routines_LEVELS.c", 747; // CALCULATE HOW MANY PIXELS THE CAMERA HAS TO MOVE DOWN //
 4390                        	
 4391                        		.dbg	line,	"include\routines_LEVELS.c", 748; camera_y_move = player_pos_y - PLAYER_BASE_Y_POS;
 4392                        		__ld.wm		_player_pos_y
         01:C506  AD 15 23   			lda.l	_player_pos_y
         01:C509  AC 16 23   			ldy.h	_player_pos_y
 4393                        		__sub.wi	128
         01:C50C  38         			sec
         01:C50D  E9 80      			sbc.l	#128
         01:C50F  B0 01      			bcs	!+
         01:C511  88         			dey
         01:C512             	!:
 4394                        		__st.umq	__update_PLAYER_end - 3  /* camera_y_move */
         01:C512  8D 07 23   			sta	__update_PLAYER_end - 3
 4395                        	
 4396                        		.dbg	line,	"include\routines_LEVELS.c", 749; sgx_map_pxl_y += camera_y_move;
 4397                        		__ld.um		__update_PLAYER_end - 3  /* camera_y_move */
         01:C515  AD 07 23   			lda	__update_PLAYER_end - 3
         01:C518  C2         			cly
 4398                        		__add_st.wmq	_sgx_map_pxl_y
         01:C519  18         			clc
         01:C51A  6D 63 23   			adc.l	_sgx_map_pxl_y
         01:C51D  8D 63 23   			sta.l	_sgx_map_pxl_y
         01:C520  98         			tya
         01:C521  6D 64 23   			adc.h	_sgx_map_pxl_y
         01:C524  8D 64 23   			sta.h	_sgx_map_pxl_y
 4399                        	
 4400                        		.dbg	line,	"include\routines_LEVELS.c", 751; // IF THE CAMERA HAS REACHED ITS MAX (LOWEST) POSITION //
 4401                        	
 4402                        		.dbg	line,	"include\routines_LEVELS.c", 752; if(sgx_map_pxl_y > camera_max_y_position)
 4403                        		__ld.wm		_sgx_map_pxl_y
         01:C527  AD 63 23   			lda.l	_sgx_map_pxl_y
         01:C52A  AC 64 23   			ldy.h	_sgx_map_pxl_y
 4404                        		__ugt_w.wm	_camera_max_y_position
         01:C52D  18         			clc			; Subtract memory+1 from Y:A.
         01:C52E  ED 17 23   			sbc.l	_camera_max_y_position
         01:C531  98         			tya
         01:C532  ED 18 23   			sbc.h	_camera_max_y_position		; CS if Y:A > memory.
 4405                        		__bfalse	.LL150
         01:C535  90 0C      			bcc	.LL150
 4406                        	
 4407                        		.dbg	line,	"include\routines_LEVELS.c", 753; {
 4408                        	
 4409                        		.dbg	line,	"include\routines_LEVELS.c", 754; // THE CAMERA CAN NOT MOVE LOWER //
 4410                        	
 4411                        		.dbg	line,	"include\routines_LEVELS.c", 755; sgx_map_pxl_y = camera_max_y_position;
 4412                        		__ld.wm		_camera_max_y_position
         01:C537  AD 17 23   			lda.l	_camera_max_y_position
         01:C53A  AC 18 23   			ldy.h	_camera_max_y_position
 4413                        		__st.wmq	_sgx_map_pxl_y
         01:C53D  8D 63 23   			sta.l	_sgx_map_pxl_y
         01:C540  8C 64 23   			sty.h	_sgx_map_pxl_y
 4414                        	
 4415                        		.dbg	line,	"include\routines_LEVELS.c", 756; }
 4416                        	
 4417                        		.dbg	line,	"include\routines_LEVELS.c", 758; // THE PLAYER STAYS AT ITS BASE Y POSITION //
 4418                        	
 4419                        		.dbg	line,	"include\routines_LEVELS.c", 759; player_pos_y = PLAYER_BASE_Y_POS;
 4420    01:C543             	.LL150:
 4421                        		__st.wmiq	128, _player_pos_y
         01:C543  A9 80      			lda.l	#128
         01:C545  8D 15 23   			sta.l	_player_pos_y
         01:C548  9C 16 23   			stz.h	_player_pos_y
 4422                        	
 4423                        		.dbg	line,	"include\routines_LEVELS.c", 761; spr_y(player_pos_y);
 4424                        		__ld.wm		_player_pos_y
         01:C54B  AD 15 23   			lda.l	_player_pos_y
         01:C54E  AC 16 23   			ldy.h	_player_pos_y
 4425                        		__call		_spr_y.1
         01:C551  20 19 E8   			call	_spr_y.1
 4426                        	
 4427                        		.dbg	line,	"include\routines_LEVELS.c", 762; }
 4428                        	
 4429                        		.dbg	line,	"include\routines_LEVELS.c", 765; // UPDATE JUMP INDEX IN THE ARRAY //
 4430                        	
 4431                        		.dbg	line,	"include\routines_LEVELS.c", 766; // ARRAY MAX ENTRY : 34 //
 4432                        	
 4433                        		.dbg	line,	"include\routines_LEVELS.c", 767; if(player_index_jump < 34)
 4434    01:C554             	.LL149:
 4435                        		__ld.umq	_player_index_jump
         01:C554  AD 12 23   			lda	_player_index_jump
 4436                        		__ult_b.uiq	34
         01:C557  C9 22      			cmp	#34		; Subtract integer from A.
         01:C559  6A         			ror	a		; CC if A < integer.
         01:C55A  49 80      			eor	#$80
         01:C55C  2A         			rol	a
 4437                        		__bfalse	.LL151
         01:C55D  90 03      			bcc	.LL151
 4438                        	
 4439                        		.dbg	line,	"include\routines_LEVELS.c", 768; {
 4440                        	
 4441                        		.dbg	line,	"include\routines_LEVELS.c", 769; player_index_jump += 1;
 4442                        		__add_st.umiq	1, _player_index_jump
         01:C55F  EE 12 23   			inc	_player_index_jump
 4443                        	
 4444                        		.dbg	line,	"include\routines_LEVELS.c", 770; }
 4445                        	
 4446                        		.dbg	line,	"include\routines_LEVELS.c", 773; // CHECK COLLISION WITH THE FLOOR //
 4447                        	
 4448                        		.dbg	line,	"include\routines_LEVELS.c", 774; check_FLOOR_R();
 4449    01:C562             	.LL151:
 4450                        		__call		_check_FLOOR_R
         01:C562  20 4F FF   			call	_check_FLOOR_R
 4451                        	
 4452                        		.dbg	line,	"include\routines_LEVELS.c", 777; if(map_blk_flag == TILE_BG)
 4453                        		__ld.umq	_map_blk_flag
         01:C565  AD 82 28   			lda	_map_blk_flag
 4454                        		__equ_b.uiq	1
         01:C568  C9 01      			cmp	#1
         01:C56A  F0 01      			beq	!+
         01:C56C  18         			clc
         01:C56D             	!:
 4455                        		__bfalse	.LL152
         01:C56D  B0 03 4C 43			bcc	.LL152
         01:C571  C6          
 4456                        	
 4457                        		.dbg	line,	"include\routines_LEVELS.c", 778; {
 4458                        	
 4459                        		.dbg	line,	"include\routines_LEVELS.c", 779; // CALCULATE HOW MANY PIXELS THE PLAYER MOVED INTO THE GROUND //
 4460                        	
 4461                        		.dbg	line,	"include\routines_LEVELS.c", 780; for(i=1; i<11 ; i++)
 4462                        		__st.umiq	1, __update_PLAYER_end - 2  /* i */
         01:C572  A9 01      			lda.l	#1
         01:C574  8D 08 23   			sta	__update_PLAYER_end - 2
 4463    01:C577             	.LL153:
 4464                        		__ld.umq	__update_PLAYER_end - 2  /* i */
         01:C577  AD 08 23   			lda	__update_PLAYER_end - 2
 4465                        		__ult_b.uiq	11
         01:C57A  C9 0B      			cmp	#11		; Subtract integer from A.
         01:C57C  6A         			ror	a		; CC if A < integer.
         01:C57D  49 80      			eor	#$80
         01:C57F  2A         			rol	a
 4466                        		__btrue		.LL155
         01:C580  B0 08      			bcs	.LL155
 4467                        		__bra		.LL156
         01:C582  4C 2C C6   			bra	.LL156
 4468    01:C585             	.LL154:
 4469                        		__inc.umq	__update_PLAYER_end - 2  /* i */
         01:C585  EE 08 23   			inc	__update_PLAYER_end - 2
 4470                        		__bra		.LL153
         01:C588  80 ED      			bra	.LL153
 4471    01:C58A             	.LL155:
 4472                        	
 4473                        		.dbg	line,	"include\routines_LEVELS.c", 781; {
 4474                        	
 4475                        		.dbg	line,	"include\routines_LEVELS.c", 782; if(player_axis == AXIS_RIGHT)
 4476                        		__not.um	_player_axis
         01:C58A  AD 0F 23   			lda	_player_axis
         01:C58D  18         			clc
         01:C58E  D0 01      			bne	!+
         01:C590  38         			sec
         01:C591             	!:
 4477                        		__bfalse	.LL157
         01:C591  90 20      			bcc	.LL157
 4478                        	
 4479                        		.dbg	line,	"include\routines_LEVELS.c", 783; {
 4480                        	
 4481                        		.dbg	line,	"include\routines_LEVELS.c", 784; check_BG( 11 , i);
 4482                        		__ld.wi		11
         01:C593  A9 0B      			lda.l	#11
         01:C595  C2         			cly
 4483                        		__pusharg.wr
         01:C596  A6 8D      			ldx	<__sp
         01:C598  CA         			dex
         01:C599  CA         			dex
         01:C59A  95 08      			sta.l	<__stack, x
         01:C59C  94 09      			sty.h	<__stack, x
         01:C59E  86 8D      			stx	<__sp
 4484                        		__ld.um		__update_PLAYER_end - 2  /* i */
         01:C5A0  AD 08 23   			lda	__update_PLAYER_end - 2
         01:C5A3  C2         			cly
 4485                        		__pusharg.wr
         01:C5A4  A6 8D      			ldx	<__sp
         01:C5A6  CA         			dex
         01:C5A7  CA         			dex
         01:C5A8  95 08      			sta.l	<__stack, x
         01:C5AA  94 09      			sty.h	<__stack, x
         01:C5AC  86 8D      			stx	<__sp
 4486                        		__call		_check_BG
         01:C5AE  20 3B FF   			call	_check_BG
 4487                        	
 4488                        		.dbg	line,	"include\routines_LEVELS.c", 785; }
 4489                        	
 4490                        		.dbg	line,	"include\routines_LEVELS.c", 787; else
 4491                        		__bra		.LL158
         01:C5B1  80 1E      			bra	.LL158
 4492    01:C5B3             	.LL157:
 4493                        	
 4494                        		.dbg	line,	"include\routines_LEVELS.c", 788; {
 4495                        	
 4496                        		.dbg	line,	"include\routines_LEVELS.c", 789; check_BG( 10 , i);
 4497                        		__ld.wi		10
         01:C5B3  A9 0A      			lda.l	#10
         01:C5B5  C2         			cly
 4498                        		__pusharg.wr
         01:C5B6  A6 8D      			ldx	<__sp
         01:C5B8  CA         			dex
         01:C5B9  CA         			dex
         01:C5BA  95 08      			sta.l	<__stack, x
         01:C5BC  94 09      			sty.h	<__stack, x
         01:C5BE  86 8D      			stx	<__sp
 4499                        		__ld.um		__update_PLAYER_end - 2  /* i */
         01:C5C0  AD 08 23   			lda	__update_PLAYER_end - 2
         01:C5C3  C2         			cly
 4500                        		__pusharg.wr
         01:C5C4  A6 8D      			ldx	<__sp
         01:C5C6  CA         			dex
         01:C5C7  CA         			dex
         01:C5C8  95 08      			sta.l	<__stack, x
         01:C5CA  94 09      			sty.h	<__stack, x
         01:C5CC  86 8D      			stx	<__sp
 4501                        		__call		_check_BG
         01:C5CE  20 3B FF   			call	_check_BG
 4502                        	
 4503                        		.dbg	line,	"include\routines_LEVELS.c", 790; }
 4504    01:C5D1             	.LL158:
 4505                        	
 4506                        		.dbg	line,	"include\routines_LEVELS.c", 793; if(map_blk_flag == TILE_EMPTY)
 4507                        		__not.um	_map_blk_flag
         01:C5D1  AD 82 28   			lda	_map_blk_flag
         01:C5D4  18         			clc
         01:C5D5  D0 01      			bne	!+
         01:C5D7  38         			sec
         01:C5D8             	!:
 4508                        		__bfalse	.LL159
         01:C5D8  90 AB      			bcc	.LL159
 4509                        	
 4510                        		.dbg	line,	"include\routines_LEVELS.c", 794; {
 4511                        	
 4512                        		.dbg	line,	"include\routines_LEVELS.c", 795; if(player_pos_y != PLAYER_BASE_Y_POS)
 4513                        		__ld.wm		_player_pos_y
         01:C5DA  AD 15 23   			lda.l	_player_pos_y
         01:C5DD  AC 16 23   			ldy.h	_player_pos_y
 4514                        		__neq_w.wi	128
         01:C5E0  38         			sec
         01:C5E1  49 80      			eor.l	#128
         01:C5E3  D0 06      			bne	!+
         01:C5E5  98         			tya
         01:C5E6  49 00      			eor.h	#128
         01:C5E8  D0 01      			bne	!+
         01:C5EA  18         			clc
         01:C5EB             	!:
 4515                        		__bfalse	.LL160
         01:C5EB  90 1E      			bcc	.LL160
 4516                        	
 4517                        		.dbg	line,	"include\routines_LEVELS.c", 796; {
 4518                        	
 4519                        		.dbg	line,	"include\routines_LEVELS.c", 797; player_pos_y -= (i - 1);
 4520                        		__ld.um		__update_PLAYER_end - 2  /* i */
         01:C5ED  AD 08 23   			lda	__update_PLAYER_end - 2
         01:C5F0  C2         			cly
 4521                        		__sub.wi	1
         01:C5F1  38         			sec
         01:C5F2  E9 01      			sbc.l	#1
         01:C5F4  B0 01      			bcs	!+
         01:C5F6  88         			dey
         01:C5F7             	!:
 4522                        		__isub_st.wmq	_player_pos_y
         01:C5F7  38         			sec
         01:C5F8  49 FF      			eor	#$FF
         01:C5FA  6D 15 23   			adc.l	_player_pos_y
         01:C5FD  8D 15 23   			sta.l	_player_pos_y
         01:C600  98         			tya
         01:C601  49 FF      			eor	#$FF
         01:C603  6D 16 23   			adc.h	_player_pos_y
         01:C606  8D 16 23   			sta.h	_player_pos_y
 4523                        	
 4524                        		.dbg	line,	"include\routines_LEVELS.c", 798; }
 4525                        	
 4526                        		.dbg	line,	"include\routines_LEVELS.c", 800; else
 4527                        		__bra		.LL161
         01:C609  80 21      			bra	.LL161
 4528    01:C60B             	.LL160:
 4529                        	
 4530                        		.dbg	line,	"include\routines_LEVELS.c", 801; {
 4531                        	
 4532                        		.dbg	line,	"include\routines_LEVELS.c", 802; sgx_map_pxl_y -= (i - 1);
 4533                        		__ld.um		__update_PLAYER_end - 2  /* i */
         01:C60B  AD 08 23   			lda	__update_PLAYER_end - 2
         01:C60E  C2         			cly
 4534                        		__sub.wi	1
         01:C60F  38         			sec
         01:C610  E9 01      			sbc.l	#1
         01:C612  B0 01      			bcs	!+
         01:C614  88         			dey
         01:C615             	!:
 4535                        		__isub_st.wmq	_sgx_map_pxl_y
         01:C615  38         			sec
         01:C616  49 FF      			eor	#$FF
         01:C618  6D 63 23   			adc.l	_sgx_map_pxl_y
         01:C61B  8D 63 23   			sta.l	_sgx_map_pxl_y
         01:C61E  98         			tya
         01:C61F  49 FF      			eor	#$FF
         01:C621  6D 64 23   			adc.h	_sgx_map_pxl_y
         01:C624  8D 64 23   			sta.h	_sgx_map_pxl_y
 4536                        	
 4537                        		.dbg	line,	"include\routines_LEVELS.c", 803; }
 4538    01:C627             	.LL161	.alias		.LL156
 4539                        	
 4540                        		.dbg	line,	"include\routines_LEVELS.c", 805; break;
 4541                        		__bra		.LL156
         01:C627  80 03      			bra	.LL156
 4542                        	
 4543                        		.dbg	line,	"include\routines_LEVELS.c", 806; }
 4544                        	
 4545                        		.dbg	line,	"include\routines_LEVELS.c", 807; }
 4546    01:C629             	.LL159	.alias		.LL154
 4547                        		__bra		.LL154
         01:C629  4C 85 C5   			bra	.LL154
 4548    01:C62C             	.LL156:
 4549                        	
 4550                        		.dbg	line,	"include\routines_LEVELS.c", 809; // SET PLAYER SPRITE NEW POSITION //
 4551                        	
 4552                        		.dbg	line,	"include\routines_LEVELS.c", 810; spr_y(player_pos_y);
 4553                        		__ld.wm		_player_pos_y
         01:C62C  AD 15 23   			lda.l	_player_pos_y
         01:C62F  AC 16 23   			ldy.h	_player_pos_y
 4554                        		__call		_spr_y.1
         01:C632  20 19 E8   			call	_spr_y.1
 4555                        	
 4556                        		.dbg	line,	"include\routines_LEVELS.c", 812; player_counter_anim = 1;
 4557                        		__st.umiq	1, _player_counter_anim
         01:C635  A9 01      			lda.l	#1
         01:C637  8D 11 23   			sta	_player_counter_anim
 4558                        	
 4559                        		.dbg	line,	"include\routines_LEVELS.c", 813; player_index_jump = 0;
 4560                        		__st.umiq	0, _player_index_jump
         01:C63A  9C 12 23   			stz	_player_index_jump
 4561                        	
 4562                        		.dbg	line,	"include\routines_LEVELS.c", 814; player_state = STATE_IDLE;
 4563                        		__st.umiq	0, _player_state
         01:C63D  9C 0E 23   			stz	_player_state
 4564                        	
 4565                        		.dbg	line,	"include\routines_LEVELS.c", 815; return;
 4566                        		__bra		.LL98
         01:C640  4C A1 D0   			bra	.LL98
 4567                        	
 4568                        		.dbg	line,	"include\routines_LEVELS.c", 816; }
 4569                        	
 4570                        		.dbg	line,	"include\routines_LEVELS.c", 819; // CHECK COLLISION WITH LADDERS //
 4571                        	
 4572                        		.dbg	line,	"include\routines_LEVELS.c", 820; if(player_index_jump > 4)
 4573    01:C643             	.LL152:
 4574                        		__ld.umq	_player_index_jump
         01:C643  AD 12 23   			lda	_player_index_jump
 4575                        		__ugt_b.uiq	4
         01:C646  18         			clc			; Subtract integer+1 from A.
         01:C647  E9 04      			sbc	#4		; CS if A > integer.
 4576                        		__bfalse	.LL162
         01:C649  B0 03 4C D0			bcc	.LL162
         01:C64D  C6          
 4577                        	
 4578                        		.dbg	line,	"include\routines_LEVELS.c", 821; {
 4579                        	
 4580                        		.dbg	line,	"include\routines_LEVELS.c", 822; check_LADDER( 16 , 16 );
 4581                        		__ld.wi		16
         01:C64E  A9 10      			lda.l	#16
         01:C650  C2         			cly
 4582                        		__pusharg.wr
         01:C651  A6 8D      			ldx	<__sp
         01:C653  CA         			dex
         01:C654  CA         			dex
         01:C655  95 08      			sta.l	<__stack, x
         01:C657  94 09      			sty.h	<__stack, x
         01:C659  86 8D      			stx	<__sp
 4583                        		__ld.wi		16
         01:C65B  A9 10      			lda.l	#16
         01:C65D  C2         			cly
 4584                        		__pusharg.wr
         01:C65E  A6 8D      			ldx	<__sp
         01:C660  CA         			dex
         01:C661  CA         			dex
         01:C662  95 08      			sta.l	<__stack, x
         01:C664  94 09      			sty.h	<__stack, x
         01:C666  86 8D      			stx	<__sp
 4585                        		__call		_check_LADDER
         01:C668  20 81 FF   			call	_check_LADDER
 4586                        	
 4587                        		.dbg	line,	"include\routines_LEVELS.c", 824; // IF PLAYER HITS THE LADDER //
 4588                        	
 4589                        		.dbg	line,	"include\routines_LEVELS.c", 825; if(map_blk_flag == TILE_LADDER)
 4590                        		__ld.umq	_map_blk_flag
         01:C66B  AD 82 28   			lda	_map_blk_flag
 4591                        		__equ_b.uiq	2
         01:C66E  C9 02      			cmp	#2
         01:C670  F0 01      			beq	!+
         01:C672  18         			clc
         01:C673             	!:
 4592                        		__bfalse	.LL163
         01:C673  90 5B      			bcc	.LL163
 4593                        	
 4594                        		.dbg	line,	"include\routines_LEVELS.c", 826; {
 4595                        	
 4596                        		.dbg	line,	"include\routines_LEVELS.c", 827; // CAMERA GOES 8 PX BACKWARD //
 4597                        	
 4598                        		.dbg	line,	"include\routines_LEVELS.c", 828; sgx_map_pxl_x = ( (sgx_map_pxl_x >> 3) << 3 );
 4599                        		__ld.wm		_sgx_map_pxl_x
         01:C675  AD 61 23   			lda.l	_sgx_map_pxl_x
         01:C678  AC 62 23   			ldy.h	_sgx_map_pxl_x
 4600                        		__lsr.wi	3
         01:C67B  84 00      			sty	__temp
         01:C67D  20 3A E2   			jsr	lsrw3
 4601                        		__asl.wi	3
         01:C680  84 00      			sty	__temp
         01:C682  20 D7 E1   			jsr	aslw3
 4602                        		__st.wmq	_sgx_map_pxl_x
         01:C685  8D 61 23   			sta.l	_sgx_map_pxl_x
         01:C688  8C 62 23   			sty.h	_sgx_map_pxl_x
 4603                        	
 4604                        		.dbg	line,	"include\routines_LEVELS.c", 830; // SO WE UPDATE THE MAP //
 4605                        	
 4606                        		.dbg	line,	"include\routines_LEVELS.c", 831; sgx_scroll_map();
 4607                        		__call		_sgx_scroll_map
         01:C68B  20 95 FF   			call	_sgx_scroll_map
 4608                        	
 4609                        		.dbg	line,	"include\routines_LEVELS.c", 833; // CHECK IF THE PLAYER STANDS RIGHT TO THE LADDER //
 4610                        	
 4611                        		.dbg	line,	"include\routines_LEVELS.c", 834; check_LADDER( 31 , 16 );
 4612                        		__ld.wi		31
         01:C68E  A9 1F      			lda.l	#31
         01:C690  C2         			cly
 4613                        		__pusharg.wr
         01:C691  A6 8D      			ldx	<__sp
         01:C693  CA         			dex
         01:C694  CA         			dex
         01:C695  95 08      			sta.l	<__stack, x
         01:C697  94 09      			sty.h	<__stack, x
         01:C699  86 8D      			stx	<__sp
 4614                        		__ld.wi		16
         01:C69B  A9 10      			lda.l	#16
         01:C69D  C2         			cly
 4615                        		__pusharg.wr
         01:C69E  A6 8D      			ldx	<__sp
         01:C6A0  CA         			dex
         01:C6A1  CA         			dex
         01:C6A2  95 08      			sta.l	<__stack, x
         01:C6A4  94 09      			sty.h	<__stack, x
         01:C6A6  86 8D      			stx	<__sp
 4616                        		__call		_check_LADDER
         01:C6A8  20 81 FF   			call	_check_LADDER
 4617                        	
 4618                        		.dbg	line,	"include\routines_LEVELS.c", 836; if(map_blk_flag == TILE_LADDER)
 4619                        		__ld.umq	_map_blk_flag
         01:C6AB  AD 82 28   			lda	_map_blk_flag
 4620                        		__equ_b.uiq	2
         01:C6AE  C9 02      			cmp	#2
         01:C6B0  F0 01      			beq	!+
         01:C6B2  18         			clc
         01:C6B3             	!:
 4621                        		__bfalse	.LL164
         01:C6B3  90 0E      			bcc	.LL164
 4622                        	
 4623                        		.dbg	line,	"include\routines_LEVELS.c", 837; {
 4624                        	
 4625                        		.dbg	line,	"include\routines_LEVELS.c", 838; sgx_map_pxl_x += 8;
 4626                        		__add_st.wmiq	8, _sgx_map_pxl_x
         01:C6B5  18         			clc
         01:C6B6  AD 61 23   			lda.l	_sgx_map_pxl_x
         01:C6B9  69 08      			adc.l	#8
         01:C6BB  8D 61 23   			sta.l	_sgx_map_pxl_x
         01:C6BE  90 03      			bcc	!+
         01:C6C0  EE 62 23   			inc.h	_sgx_map_pxl_x
         01:C6C3             	!:
 4627                        	
 4628                        		.dbg	line,	"include\routines_LEVELS.c", 839; }
 4629                        	
 4630                        		.dbg	line,	"include\routines_LEVELS.c", 841; player_counter_anim = 1;
 4631    01:C6C3             	.LL164:
 4632                        		__st.umiq	1, _player_counter_anim
         01:C6C3  A9 01      			lda.l	#1
         01:C6C5  8D 11 23   			sta	_player_counter_anim
 4633                        	
 4634                        		.dbg	line,	"include\routines_LEVELS.c", 842; player_index_jump = 0;
 4635                        		__st.umiq	0, _player_index_jump
         01:C6C8  9C 12 23   			stz	_player_index_jump
 4636                        	
 4637                        		.dbg	line,	"include\routines_LEVELS.c", 843; player_state = STATE_HANG;
 4638                        		__st.umiq	10, _player_state
         01:C6CB  A9 0A      			lda.l	#10
         01:C6CD  8D 0E 23   			sta	_player_state
 4639                        	
 4640                        		.dbg	line,	"include\routines_LEVELS.c", 844; }
 4641                        	
 4642                        		.dbg	line,	"include\routines_LEVELS.c", 845; }
 4643    01:C6D0             	.LL163:
 4644                        	
 4645                        		.dbg	line,	"include\routines_LEVELS.c", 848; // SET PLAYER SPRITE NEW POSITION //
 4646                        	
 4647                        		.dbg	line,	"include\routines_LEVELS.c", 849; spr_y(player_pos_y);
 4648    01:C6D0             	.LL162:
 4649                        		__ld.wm		_player_pos_y
         01:C6D0  AD 15 23   			lda.l	_player_pos_y
         01:C6D3  AC 16 23   			ldy.h	_player_pos_y
 4650                        		__call		_spr_y.1
         01:C6D6  20 19 E8   			call	_spr_y.1
 4651                        	
 4652                        		.dbg	line,	"include\routines_LEVELS.c", 850; }
 4653                        	
 4654                        		.dbg	line,	"include\routines_LEVELS.c", 853; else if(player_state == STATE_JUMP_LEFT)
 4655                        		__bra		.LL165
         01:C6D9  4C A1 D0   			bra	.LL165
 4656    01:C6DC             	.LL144:
 4657                        		__ld.umq	_player_state
         01:C6DC  AD 0E 23   			lda	_player_state
 4658                        		__equ_b.uiq	6
         01:C6DF  C9 06      			cmp	#6
         01:C6E1  F0 01      			beq	!+
         01:C6E3  18         			clc
         01:C6E4             	!:
 4659                        		__bfalse	.LL166
         01:C6E4  B0 03 4C 50			bcc	.LL166
         01:C6E8  C9          
 4660                        	
 4661                        		.dbg	line,	"include\routines_LEVELS.c", 854; {
 4662                        	
 4663                        		.dbg	line,	"include\routines_LEVELS.c", 855; unsigned char i, camera_y_move;
 4664                        	
 4665                        		.dbg	line,	"include\routines_LEVELS.c", 856; i = 1;
 4666                        		__st.umiq	1, __update_PLAYER_end - 4  /* i */
         01:C6E9  A9 01      			lda.l	#1
         01:C6EB  8D 06 23   			sta	__update_PLAYER_end - 4
 4667                        	
 4668                        		.dbg	line,	"include\routines_LEVELS.c", 859; // UPDATE PLAYER TILES //
 4669                        	
 4670                        		.dbg	line,	"include\routines_LEVELS.c", 860; if(player_counter_anim == 0)
 4671                        		__not.um	_player_counter_anim
         01:C6EE  AD 11 23   			lda	_player_counter_anim
         01:C6F1  18         			clc
         01:C6F2  D0 01      			bne	!+
         01:C6F4  38         			sec
         01:C6F5             	!:
 4672                        		__bfalse	.LL167
         01:C6F5  90 21      			bcc	.LL167
 4673                        	
 4674                        		.dbg	line,	"include\routines_LEVELS.c", 861; {
 4675                        	
 4676                        		.dbg	line,	"include\routines_LEVELS.c", 862; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_112 , TILES_16);
 4677                        		__st.wmiq	18432, _di
         01:C6F7  64 F0      			stz.l	_di
         01:C6F9  A9 48      			lda.h	#18432
         01:C6FB  85 F1      			sta.h	_di
 4678                        		__farptr	_tiles_SPR_PLAYER + 3584, _bp_bank, _bp
         01:C6FD  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3584))
         01:C6FF  85 EC      			sta.l	_bp
         01:C701  A9 68      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3584))
         01:C703  85 ED      			sta.h	_bp
         01:C705  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 3584)
         01:C707  85 02      			sta	_bp_bank
 4679                        		__st.wmiq	256, _ax
         01:C709  64 F8      			stz.l	_ax
         01:C70B  A9 01      			lda.h	#256
         01:C70D  85 F9      			sta.h	_ax
 4680                        		 _load_vram.3
         01:C70F  82         			clx				; Offset to PCE VDC.
         01:C710  20 77 FF   			call	load_vram_x
 4681                        	
 4682                        		.dbg	line,	"include\routines_LEVELS.c", 864; player_counter_anim = 1;
 4683                        		__st.umiq	1, _player_counter_anim
         01:C713  A9 01      			lda.l	#1
         01:C715  8D 11 23   			sta	_player_counter_anim
 4684                        	
 4685                        		.dbg	line,	"include\routines_LEVELS.c", 865; }
 4686                        	
 4687                        		.dbg	line,	"include\routines_LEVELS.c", 868; // SELECT PLAYER SPRITE //
 4688                        	
 4689                        		.dbg	line,	"include\routines_LEVELS.c", 869; spr_set(player_id);
 4690    01:C718             	.LL167:
 4691                        		__ld.umq	_player_id
         01:C718  AD 0D 23   			lda	_player_id
 4692                        		__call		_spr_set.1
         01:C71B  20 DD E7   			call	_spr_set.1
 4693                        	
 4694                        		.dbg	line,	"include\routines_LEVELS.c", 872; //--------------------------------------------------------------------------------------//
 4695                        	
 4696                        		.dbg	line,	"include\routines_LEVELS.c", 873; //                                        H MOVE                                        //
 4697                        	
 4698                        		.dbg	line,	"include\routines_LEVELS.c", 874; //--------------------------------------------------------------------------------------//
 4699                        	
 4700                        		.dbg	line,	"include\routines_LEVELS.c", 876; // CHECK COLLISION LEFT WALL //
 4701                        	
 4702                        		.dbg	line,	"include\routines_LEVELS.c", 877; // IF THE PLAYER HAS NOT YET COLLIDED WITH A WALL //
 4703                        	
 4704                        		.dbg	line,	"include\routines_LEVELS.c", 878; //if(collision_side == FALSE)
 4705                        	
 4706                        		.dbg	line,	"include\routines_LEVELS.c", 879; //{
 4707                        	
 4708                        		.dbg	line,	"include\routines_LEVELS.c", 880; check_WALL_BL();
 4709                        		__call		_check_WALL_BL
         01:C71E  20 45 FF   			call	_check_WALL_BL
 4710                        	
 4711                        		.dbg	line,	"include\routines_LEVELS.c", 882; if(map_blk_flag != TILE_BG)
 4712                        		__ld.umq	_map_blk_flag
         01:C721  AD 82 28   			lda	_map_blk_flag
 4713                        		__neq_b.uiq	1
         01:C724  38         			sec
         01:C725  49 01      			eor	#1
         01:C727  D0 01      			bne	!+
         01:C729  18         			clc
         01:C72A             	!:
 4714                        		__bfalse	.LL168
         01:C72A  90 22      			bcc	.LL168
 4715                        	
 4716                        		.dbg	line,	"include\routines_LEVELS.c", 883; {
 4717                        	
 4718                        		.dbg	line,	"include\routines_LEVELS.c", 884; check_WALL_TL();
 4719                        		__call		_check_WALL_TL
         01:C72C  20 27 FF   			call	_check_WALL_TL
 4720                        	
 4721                        		.dbg	line,	"include\routines_LEVELS.c", 886; if(map_blk_flag == TILE_BG)
 4722                        		__ld.umq	_map_blk_flag
         01:C72F  AD 82 28   			lda	_map_blk_flag
 4723                        		__equ_b.uiq	1
         01:C732  C9 01      			cmp	#1
         01:C734  F0 01      			beq	!+
         01:C736  18         			clc
         01:C737             	!:
 4724                        		__bfalse	.LL169
         01:C737  90 07      			bcc	.LL169
 4725                        	
 4726                        		.dbg	line,	"include\routines_LEVELS.c", 887; {
 4727                        	
 4728                        		.dbg	line,	"include\routines_LEVELS.c", 888; player_state = STATE_FALL;
 4729                        		__st.umiq	9, _player_state
         01:C739  A9 09      			lda.l	#9
         01:C73B  8D 0E 23   			sta	_player_state
 4730                        	
 4731                        		.dbg	line,	"include\routines_LEVELS.c", 889; }
 4732                        	
 4733                        		.dbg	line,	"include\routines_LEVELS.c", 891; else
 4734                        		__bra		.LL170
         01:C73E  80 0E      			bra	.LL170
 4735    01:C740             	.LL169:
 4736                        	
 4737                        		.dbg	line,	"include\routines_LEVELS.c", 892; {
 4738                        	
 4739                        		.dbg	line,	"include\routines_LEVELS.c", 893; sgx_map_pxl_x -= 2;
 4740                        		__sub_st.wmiq	2, _sgx_map_pxl_x
         01:C740  38         			sec
         01:C741  AD 61 23   			lda.l	_sgx_map_pxl_x
         01:C744  E9 02      			sbc.l	#2
         01:C746  8D 61 23   			sta.l	_sgx_map_pxl_x
         01:C749  B0 03      			bcs	!+
         01:C74B  CE 62 23   			dec.h	_sgx_map_pxl_x
         01:C74E             	!:
 4741                        	
 4742                        		.dbg	line,	"include\routines_LEVELS.c", 894; }
 4743    01:C74E             	.LL170:
 4744                        	
 4745                        		.dbg	line,	"include\routines_LEVELS.c", 895; }
 4746                        	
 4747                        		.dbg	line,	"include\routines_LEVELS.c", 896; //}
 4748                        	
 4749                        		.dbg	line,	"include\routines_LEVELS.c", 899; //--------------------------------------------------------------------------------------//
 4750                        	
 4751                        		.dbg	line,	"include\routines_LEVELS.c", 900; //                                        V MOVE                                        //
 4752                        	
 4753                        		.dbg	line,	"include\routines_LEVELS.c", 901; //--------------------------------------------------------------------------------------//
 4754                        	
 4755                        		.dbg	line,	"include\routines_LEVELS.c", 903; // UPDATE PLAYER Y POSITION //
 4756                        	
 4757                        		.dbg	line,	"include\routines_LEVELS.c", 904; player_pos_y += TABLE_PLAYER_JUMP_V[player_index_jump];
 4758    01:C74E             	.LL168:
 4759                        		__ldx.umq	_player_index_jump
         01:C74E  AE 12 23   			ldx	_player_index_jump
 4760                        		__ld.bax	_TABLE_PLAYER_JUMP_V
         01:C751  BD 1D 60   			lda	_TABLE_PLAYER_JUMP_V, x
         01:C754  C2         			cly
         01:C755  10 01      			bpl	!+
         01:C757  88         			dey
         01:C758             	!:
 4761                        		__add_st.wmq	_player_pos_y
         01:C758  18         			clc
         01:C759  6D 15 23   			adc.l	_player_pos_y
         01:C75C  8D 15 23   			sta.l	_player_pos_y
         01:C75F  98         			tya
         01:C760  6D 16 23   			adc.h	_player_pos_y
         01:C763  8D 16 23   			sta.h	_player_pos_y
 4762                        	
 4763                        		.dbg	line,	"include\routines_LEVELS.c", 907; // IF PLAYER GOES BELOW ITS BASE Y POSITION //
 4764                        	
 4765                        		.dbg	line,	"include\routines_LEVELS.c", 908; if(player_pos_y >= PLAYER_BASE_Y_POS)
 4766                        		__ld.wm		_player_pos_y
         01:C766  AD 15 23   			lda.l	_player_pos_y
         01:C769  AC 16 23   			ldy.h	_player_pos_y
 4767                        		__sge_w.wi	128
         01:C76C  C9 80      			cmp.l	#128		; Subtract integer from Y:A.
         01:C76E  98         			tya
         01:C76F  E9 00      			sbc.h	#128
         01:C771  50 02      			bvc	!+
         01:C773  49 80      			eor	#$80		; +ve if Y:A >= integer (signed).
         01:C775  49 80      	!:		eor	#$80
         01:C777  0A         			asl	a
 4768                        		__bfalse	.LL171
         01:C778  90 4E      			bcc	.LL171
 4769                        	
 4770                        		.dbg	line,	"include\routines_LEVELS.c", 909; {
 4771                        	
 4772                        		.dbg	line,	"include\routines_LEVELS.c", 910; // THE CAMERA MOVES //
 4773                        	
 4774                        		.dbg	line,	"include\routines_LEVELS.c", 911; // CALCULATE HOW MANY PIXELS THE CAMERA HAS TO MOVE DOWN //
 4775                        	
 4776                        		.dbg	line,	"include\routines_LEVELS.c", 912; camera_y_move = player_pos_y - PLAYER_BASE_Y_POS;
 4777                        		__ld.wm		_player_pos_y
         01:C77A  AD 15 23   			lda.l	_player_pos_y
         01:C77D  AC 16 23   			ldy.h	_player_pos_y
 4778                        		__sub.wi	128
         01:C780  38         			sec
         01:C781  E9 80      			sbc.l	#128
         01:C783  B0 01      			bcs	!+
         01:C785  88         			dey
         01:C786             	!:
 4779                        		__st.umq	__update_PLAYER_end - 5  /* camera_y_move */
         01:C786  8D 05 23   			sta	__update_PLAYER_end - 5
 4780                        	
 4781                        		.dbg	line,	"include\routines_LEVELS.c", 913; sgx_map_pxl_y += camera_y_move;
 4782                        		__ld.um		__update_PLAYER_end - 5  /* camera_y_move */
         01:C789  AD 05 23   			lda	__update_PLAYER_end - 5
         01:C78C  C2         			cly
 4783                        		__add_st.wmq	_sgx_map_pxl_y
         01:C78D  18         			clc
         01:C78E  6D 63 23   			adc.l	_sgx_map_pxl_y
         01:C791  8D 63 23   			sta.l	_sgx_map_pxl_y
         01:C794  98         			tya
         01:C795  6D 64 23   			adc.h	_sgx_map_pxl_y
         01:C798  8D 64 23   			sta.h	_sgx_map_pxl_y
 4784                        	
 4785                        		.dbg	line,	"include\routines_LEVELS.c", 915; // IF THE CAMERA HAS REACHED ITS MAX (LOWEST) POSITION //
 4786                        	
 4787                        		.dbg	line,	"include\routines_LEVELS.c", 916; if(sgx_map_pxl_y > camera_max_y_position)
 4788                        		__ld.wm		_sgx_map_pxl_y
         01:C79B  AD 63 23   			lda.l	_sgx_map_pxl_y
         01:C79E  AC 64 23   			ldy.h	_sgx_map_pxl_y
 4789                        		__ugt_w.wm	_camera_max_y_position
         01:C7A1  18         			clc			; Subtract memory+1 from Y:A.
         01:C7A2  ED 17 23   			sbc.l	_camera_max_y_position
         01:C7A5  98         			tya
         01:C7A6  ED 18 23   			sbc.h	_camera_max_y_position		; CS if Y:A > memory.
 4790                        		__bfalse	.LL172
         01:C7A9  90 0C      			bcc	.LL172
 4791                        	
 4792                        		.dbg	line,	"include\routines_LEVELS.c", 917; {
 4793                        	
 4794                        		.dbg	line,	"include\routines_LEVELS.c", 918; // THE CAMERA CAN NOT MOVE LOWER //
 4795                        	
 4796                        		.dbg	line,	"include\routines_LEVELS.c", 919; sgx_map_pxl_y = camera_max_y_position;
 4797                        		__ld.wm		_camera_max_y_position
         01:C7AB  AD 17 23   			lda.l	_camera_max_y_position
         01:C7AE  AC 18 23   			ldy.h	_camera_max_y_position
 4798                        		__st.wmq	_sgx_map_pxl_y
         01:C7B1  8D 63 23   			sta.l	_sgx_map_pxl_y
         01:C7B4  8C 64 23   			sty.h	_sgx_map_pxl_y
 4799                        	
 4800                        		.dbg	line,	"include\routines_LEVELS.c", 920; }
 4801                        	
 4802                        		.dbg	line,	"include\routines_LEVELS.c", 922; // THE PLAYER STAYS AT ITS BASE Y POSITION //
 4803                        	
 4804                        		.dbg	line,	"include\routines_LEVELS.c", 923; player_pos_y = PLAYER_BASE_Y_POS;
 4805    01:C7B7             	.LL172:
 4806                        		__st.wmiq	128, _player_pos_y
         01:C7B7  A9 80      			lda.l	#128
         01:C7B9  8D 15 23   			sta.l	_player_pos_y
         01:C7BC  9C 16 23   			stz.h	_player_pos_y
 4807                        	
 4808                        		.dbg	line,	"include\routines_LEVELS.c", 925; spr_y(player_pos_y);
 4809                        		__ld.wm		_player_pos_y
         01:C7BF  AD 15 23   			lda.l	_player_pos_y
         01:C7C2  AC 16 23   			ldy.h	_player_pos_y
 4810                        		__call		_spr_y.1
         01:C7C5  20 19 E8   			call	_spr_y.1
 4811                        	
 4812                        		.dbg	line,	"include\routines_LEVELS.c", 926; }
 4813                        	
 4814                        		.dbg	line,	"include\routines_LEVELS.c", 929; // UPDATE JUMP INDEX IN THE ARRAY //
 4815                        	
 4816                        		.dbg	line,	"include\routines_LEVELS.c", 930; // ARRAY MAX ENTRY : 34 //
 4817                        	
 4818                        		.dbg	line,	"include\routines_LEVELS.c", 931; if(player_index_jump < 34)
 4819    01:C7C8             	.LL171:
 4820                        		__ld.umq	_player_index_jump
         01:C7C8  AD 12 23   			lda	_player_index_jump
 4821                        		__ult_b.uiq	34
         01:C7CB  C9 22      			cmp	#34		; Subtract integer from A.
         01:C7CD  6A         			ror	a		; CC if A < integer.
         01:C7CE  49 80      			eor	#$80
         01:C7D0  2A         			rol	a
 4822                        		__bfalse	.LL173
         01:C7D1  90 03      			bcc	.LL173
 4823                        	
 4824                        		.dbg	line,	"include\routines_LEVELS.c", 932; {
 4825                        	
 4826                        		.dbg	line,	"include\routines_LEVELS.c", 933; player_index_jump += 1;
 4827                        		__add_st.umiq	1, _player_index_jump
         01:C7D3  EE 12 23   			inc	_player_index_jump
 4828                        	
 4829                        		.dbg	line,	"include\routines_LEVELS.c", 934; }
 4830                        	
 4831                        		.dbg	line,	"include\routines_LEVELS.c", 937; // CHECK COLLISION WITH THE FLOOR //
 4832                        	
 4833                        		.dbg	line,	"include\routines_LEVELS.c", 938; check_FLOOR_L();
 4834    01:C7D6             	.LL173:
 4835                        		__call		_check_FLOOR_L
         01:C7D6  20 63 FF   			call	_check_FLOOR_L
 4836                        	
 4837                        		.dbg	line,	"include\routines_LEVELS.c", 941; if(map_blk_flag == TILE_BG)
 4838                        		__ld.umq	_map_blk_flag
         01:C7D9  AD 82 28   			lda	_map_blk_flag
 4839                        		__equ_b.uiq	1
         01:C7DC  C9 01      			cmp	#1
         01:C7DE  F0 01      			beq	!+
         01:C7E0  18         			clc
         01:C7E1             	!:
 4840                        		__bfalse	.LL174
         01:C7E1  B0 03 4C B7			bcc	.LL174
         01:C7E5  C8          
 4841                        	
 4842                        		.dbg	line,	"include\routines_LEVELS.c", 942; {
 4843                        	
 4844                        		.dbg	line,	"include\routines_LEVELS.c", 943; // CALCULATE HOW MANY PIXELS THE PLAYER MOVED INTO THE GROUND //
 4845                        	
 4846                        		.dbg	line,	"include\routines_LEVELS.c", 944; for(i=1; i<11 ; i++ )
 4847                        		__st.umiq	1, __update_PLAYER_end - 4  /* i */
         01:C7E6  A9 01      			lda.l	#1
         01:C7E8  8D 06 23   			sta	__update_PLAYER_end - 4
 4848    01:C7EB             	.LL175:
 4849                        		__ld.umq	__update_PLAYER_end - 4  /* i */
         01:C7EB  AD 06 23   			lda	__update_PLAYER_end - 4
 4850                        		__ult_b.uiq	11
         01:C7EE  C9 0B      			cmp	#11		; Subtract integer from A.
         01:C7F0  6A         			ror	a		; CC if A < integer.
         01:C7F1  49 80      			eor	#$80
         01:C7F3  2A         			rol	a
 4851                        		__btrue		.LL177
         01:C7F4  B0 08      			bcs	.LL177
 4852                        		__bra		.LL178
         01:C7F6  4C A0 C8   			bra	.LL178
 4853    01:C7F9             	.LL176:
 4854                        		__inc.umq	__update_PLAYER_end - 4  /* i */
         01:C7F9  EE 06 23   			inc	__update_PLAYER_end - 4
 4855                        		__bra		.LL175
         01:C7FC  80 ED      			bra	.LL175
 4856    01:C7FE             	.LL177:
 4857                        	
 4858                        		.dbg	line,	"include\routines_LEVELS.c", 945; {
 4859                        	
 4860                        		.dbg	line,	"include\routines_LEVELS.c", 946; if(player_axis == AXIS_RIGHT)
 4861                        		__not.um	_player_axis
         01:C7FE  AD 0F 23   			lda	_player_axis
         01:C801  18         			clc
         01:C802  D0 01      			bne	!+
         01:C804  38         			sec
         01:C805             	!:
 4862                        		__bfalse	.LL179
         01:C805  90 20      			bcc	.LL179
 4863                        	
 4864                        		.dbg	line,	"include\routines_LEVELS.c", 947; {
 4865                        	
 4866                        		.dbg	line,	"include\routines_LEVELS.c", 948; check_BG( 11 , i);
 4867                        		__ld.wi		11
         01:C807  A9 0B      			lda.l	#11
         01:C809  C2         			cly
 4868                        		__pusharg.wr
         01:C80A  A6 8D      			ldx	<__sp
         01:C80C  CA         			dex
         01:C80D  CA         			dex
         01:C80E  95 08      			sta.l	<__stack, x
         01:C810  94 09      			sty.h	<__stack, x
         01:C812  86 8D      			stx	<__sp
 4869                        		__ld.um		__update_PLAYER_end - 4  /* i */
         01:C814  AD 06 23   			lda	__update_PLAYER_end - 4
         01:C817  C2         			cly
 4870                        		__pusharg.wr
         01:C818  A6 8D      			ldx	<__sp
         01:C81A  CA         			dex
         01:C81B  CA         			dex
         01:C81C  95 08      			sta.l	<__stack, x
         01:C81E  94 09      			sty.h	<__stack, x
         01:C820  86 8D      			stx	<__sp
 4871                        		__call		_check_BG
         01:C822  20 3B FF   			call	_check_BG
 4872                        	
 4873                        		.dbg	line,	"include\routines_LEVELS.c", 949; }
 4874                        	
 4875                        		.dbg	line,	"include\routines_LEVELS.c", 951; else
 4876                        		__bra		.LL180
         01:C825  80 1E      			bra	.LL180
 4877    01:C827             	.LL179:
 4878                        	
 4879                        		.dbg	line,	"include\routines_LEVELS.c", 952; {
 4880                        	
 4881                        		.dbg	line,	"include\routines_LEVELS.c", 953; check_BG( 10 , i);
 4882                        		__ld.wi		10
         01:C827  A9 0A      			lda.l	#10
         01:C829  C2         			cly
 4883                        		__pusharg.wr
         01:C82A  A6 8D      			ldx	<__sp
         01:C82C  CA         			dex
         01:C82D  CA         			dex
         01:C82E  95 08      			sta.l	<__stack, x
         01:C830  94 09      			sty.h	<__stack, x
         01:C832  86 8D      			stx	<__sp
 4884                        		__ld.um		__update_PLAYER_end - 4  /* i */
         01:C834  AD 06 23   			lda	__update_PLAYER_end - 4
         01:C837  C2         			cly
 4885                        		__pusharg.wr
         01:C838  A6 8D      			ldx	<__sp
         01:C83A  CA         			dex
         01:C83B  CA         			dex
         01:C83C  95 08      			sta.l	<__stack, x
         01:C83E  94 09      			sty.h	<__stack, x
         01:C840  86 8D      			stx	<__sp
 4886                        		__call		_check_BG
         01:C842  20 3B FF   			call	_check_BG
 4887                        	
 4888                        		.dbg	line,	"include\routines_LEVELS.c", 954; }
 4889    01:C845             	.LL180:
 4890                        	
 4891                        		.dbg	line,	"include\routines_LEVELS.c", 957; if(map_blk_flag == TILE_EMPTY)
 4892                        		__not.um	_map_blk_flag
         01:C845  AD 82 28   			lda	_map_blk_flag
         01:C848  18         			clc
         01:C849  D0 01      			bne	!+
         01:C84B  38         			sec
         01:C84C             	!:
 4893                        		__bfalse	.LL181
         01:C84C  90 AB      			bcc	.LL181
 4894                        	
 4895                        		.dbg	line,	"include\routines_LEVELS.c", 958; {
 4896                        	
 4897                        		.dbg	line,	"include\routines_LEVELS.c", 959; if(player_pos_y != PLAYER_BASE_Y_POS)
 4898                        		__ld.wm		_player_pos_y
         01:C84E  AD 15 23   			lda.l	_player_pos_y
         01:C851  AC 16 23   			ldy.h	_player_pos_y
 4899                        		__neq_w.wi	128
         01:C854  38         			sec
         01:C855  49 80      			eor.l	#128
         01:C857  D0 06      			bne	!+
         01:C859  98         			tya
         01:C85A  49 00      			eor.h	#128
         01:C85C  D0 01      			bne	!+
         01:C85E  18         			clc
         01:C85F             	!:
 4900                        		__bfalse	.LL182
         01:C85F  90 1E      			bcc	.LL182
 4901                        	
 4902                        		.dbg	line,	"include\routines_LEVELS.c", 960; {
 4903                        	
 4904                        		.dbg	line,	"include\routines_LEVELS.c", 961; player_pos_y -= (i - 1);
 4905                        		__ld.um		__update_PLAYER_end - 4  /* i */
         01:C861  AD 06 23   			lda	__update_PLAYER_end - 4
         01:C864  C2         			cly
 4906                        		__sub.wi	1
         01:C865  38         			sec
         01:C866  E9 01      			sbc.l	#1
         01:C868  B0 01      			bcs	!+
         01:C86A  88         			dey
         01:C86B             	!:
 4907                        		__isub_st.wmq	_player_pos_y
         01:C86B  38         			sec
         01:C86C  49 FF      			eor	#$FF
         01:C86E  6D 15 23   			adc.l	_player_pos_y
         01:C871  8D 15 23   			sta.l	_player_pos_y
         01:C874  98         			tya
         01:C875  49 FF      			eor	#$FF
         01:C877  6D 16 23   			adc.h	_player_pos_y
         01:C87A  8D 16 23   			sta.h	_player_pos_y
 4908                        	
 4909                        		.dbg	line,	"include\routines_LEVELS.c", 962; }
 4910                        	
 4911                        		.dbg	line,	"include\routines_LEVELS.c", 964; else
 4912                        		__bra		.LL183
         01:C87D  80 21      			bra	.LL183
 4913    01:C87F             	.LL182:
 4914                        	
 4915                        		.dbg	line,	"include\routines_LEVELS.c", 965; {
 4916                        	
 4917                        		.dbg	line,	"include\routines_LEVELS.c", 966; sgx_map_pxl_y -= (i - 1);
 4918                        		__ld.um		__update_PLAYER_end - 4  /* i */
         01:C87F  AD 06 23   			lda	__update_PLAYER_end - 4
         01:C882  C2         			cly
 4919                        		__sub.wi	1
         01:C883  38         			sec
         01:C884  E9 01      			sbc.l	#1
         01:C886  B0 01      			bcs	!+
         01:C888  88         			dey
         01:C889             	!:
 4920                        		__isub_st.wmq	_sgx_map_pxl_y
         01:C889  38         			sec
         01:C88A  49 FF      			eor	#$FF
         01:C88C  6D 63 23   			adc.l	_sgx_map_pxl_y
         01:C88F  8D 63 23   			sta.l	_sgx_map_pxl_y
         01:C892  98         			tya
         01:C893  49 FF      			eor	#$FF
         01:C895  6D 64 23   			adc.h	_sgx_map_pxl_y
         01:C898  8D 64 23   			sta.h	_sgx_map_pxl_y
 4921                        	
 4922                        		.dbg	line,	"include\routines_LEVELS.c", 967; }
 4923    01:C89B             	.LL183	.alias		.LL178
 4924                        	
 4925                        		.dbg	line,	"include\routines_LEVELS.c", 969; break;
 4926                        		__bra		.LL178
         01:C89B  80 03      			bra	.LL178
 4927                        	
 4928                        		.dbg	line,	"include\routines_LEVELS.c", 970; }
 4929                        	
 4930                        		.dbg	line,	"include\routines_LEVELS.c", 971; }
 4931    01:C89D             	.LL181	.alias		.LL176
 4932                        		__bra		.LL176
         01:C89D  4C F9 C7   			bra	.LL176
 4933    01:C8A0             	.LL178:
 4934                        	
 4935                        		.dbg	line,	"include\routines_LEVELS.c", 973; // SET PLAYER SPRITE NEW POSITION //
 4936                        	
 4937                        		.dbg	line,	"include\routines_LEVELS.c", 974; spr_y(player_pos_y);
 4938                        		__ld.wm		_player_pos_y
         01:C8A0  AD 15 23   			lda.l	_player_pos_y
         01:C8A3  AC 16 23   			ldy.h	_player_pos_y
 4939                        		__call		_spr_y.1
         01:C8A6  20 19 E8   			call	_spr_y.1
 4940                        	
 4941                        		.dbg	line,	"include\routines_LEVELS.c", 976; player_counter_anim = 1;
 4942                        		__st.umiq	1, _player_counter_anim
         01:C8A9  A9 01      			lda.l	#1
         01:C8AB  8D 11 23   			sta	_player_counter_anim
 4943                        	
 4944                        		.dbg	line,	"include\routines_LEVELS.c", 977; player_index_jump = 0;
 4945                        		__st.umiq	0, _player_index_jump
         01:C8AE  9C 12 23   			stz	_player_index_jump
 4946                        	
 4947                        		.dbg	line,	"include\routines_LEVELS.c", 978; player_state = STATE_IDLE;
 4948                        		__st.umiq	0, _player_state
         01:C8B1  9C 0E 23   			stz	_player_state
 4949                        	
 4950                        		.dbg	line,	"include\routines_LEVELS.c", 979; return;
 4951                        		__bra		.LL98
         01:C8B4  4C A1 D0   			bra	.LL98
 4952                        	
 4953                        		.dbg	line,	"include\routines_LEVELS.c", 980; }
 4954                        	
 4955                        		.dbg	line,	"include\routines_LEVELS.c", 983; // CHECK COLLISION WITH LADDERS //
 4956                        	
 4957                        		.dbg	line,	"include\routines_LEVELS.c", 984; if(player_index_jump > 4)
 4958    01:C8B7             	.LL174:
 4959                        		__ld.umq	_player_index_jump
         01:C8B7  AD 12 23   			lda	_player_index_jump
 4960                        		__ugt_b.uiq	4
         01:C8BA  18         			clc			; Subtract integer+1 from A.
         01:C8BB  E9 04      			sbc	#4		; CS if A > integer.
 4961                        		__bfalse	.LL184
         01:C8BD  B0 03 4C 44			bcc	.LL184
         01:C8C1  C9          
 4962                        	
 4963                        		.dbg	line,	"include\routines_LEVELS.c", 985; {
 4964                        	
 4965                        		.dbg	line,	"include\routines_LEVELS.c", 986; check_LADDER( 16 , 16 );
 4966                        		__ld.wi		16
         01:C8C2  A9 10      			lda.l	#16
         01:C8C4  C2         			cly
 4967                        		__pusharg.wr
         01:C8C5  A6 8D      			ldx	<__sp
         01:C8C7  CA         			dex
         01:C8C8  CA         			dex
         01:C8C9  95 08      			sta.l	<__stack, x
         01:C8CB  94 09      			sty.h	<__stack, x
         01:C8CD  86 8D      			stx	<__sp
 4968                        		__ld.wi		16
         01:C8CF  A9 10      			lda.l	#16
         01:C8D1  C2         			cly
 4969                        		__pusharg.wr
         01:C8D2  A6 8D      			ldx	<__sp
         01:C8D4  CA         			dex
         01:C8D5  CA         			dex
         01:C8D6  95 08      			sta.l	<__stack, x
         01:C8D8  94 09      			sty.h	<__stack, x
         01:C8DA  86 8D      			stx	<__sp
 4970                        		__call		_check_LADDER
         01:C8DC  20 81 FF   			call	_check_LADDER
 4971                        	
 4972                        		.dbg	line,	"include\routines_LEVELS.c", 988; if(map_blk_flag == TILE_LADDER)
 4973                        		__ld.umq	_map_blk_flag
         01:C8DF  AD 82 28   			lda	_map_blk_flag
 4974                        		__equ_b.uiq	2
         01:C8E2  C9 02      			cmp	#2
         01:C8E4  F0 01      			beq	!+
         01:C8E6  18         			clc
         01:C8E7             	!:
 4975                        		__bfalse	.LL185
         01:C8E7  90 5B      			bcc	.LL185
 4976                        	
 4977                        		.dbg	line,	"include\routines_LEVELS.c", 989; {
 4978                        	
 4979                        		.dbg	line,	"include\routines_LEVELS.c", 990; // CAMERA GOES 8 PX BACKWARD //
 4980                        	
 4981                        		.dbg	line,	"include\routines_LEVELS.c", 991; sgx_map_pxl_x = ( (sgx_map_pxl_x >> 3) << 3 );
 4982                        		__ld.wm		_sgx_map_pxl_x
         01:C8E9  AD 61 23   			lda.l	_sgx_map_pxl_x
         01:C8EC  AC 62 23   			ldy.h	_sgx_map_pxl_x
 4983                        		__lsr.wi	3
         01:C8EF  84 00      			sty	__temp
         01:C8F1  20 3A E2   			jsr	lsrw3
 4984                        		__asl.wi	3
         01:C8F4  84 00      			sty	__temp
         01:C8F6  20 D7 E1   			jsr	aslw3
 4985                        		__st.wmq	_sgx_map_pxl_x
         01:C8F9  8D 61 23   			sta.l	_sgx_map_pxl_x
         01:C8FC  8C 62 23   			sty.h	_sgx_map_pxl_x
 4986                        	
 4987                        		.dbg	line,	"include\routines_LEVELS.c", 993; // SO WE UPDATE THE MAP //
 4988                        	
 4989                        		.dbg	line,	"include\routines_LEVELS.c", 994; sgx_scroll_map();
 4990                        		__call		_sgx_scroll_map
         01:C8FF  20 95 FF   			call	_sgx_scroll_map
 4991                        	
 4992                        		.dbg	line,	"include\routines_LEVELS.c", 996; // CHECK IF THE PLAYER STANDS RIGHT TO THE LADDER //
 4993                        	
 4994                        		.dbg	line,	"include\routines_LEVELS.c", 997; check_LADDER( 31 , 16 );
 4995                        		__ld.wi		31
         01:C902  A9 1F      			lda.l	#31
         01:C904  C2         			cly
 4996                        		__pusharg.wr
         01:C905  A6 8D      			ldx	<__sp
         01:C907  CA         			dex
         01:C908  CA         			dex
         01:C909  95 08      			sta.l	<__stack, x
         01:C90B  94 09      			sty.h	<__stack, x
         01:C90D  86 8D      			stx	<__sp
 4997                        		__ld.wi		16
         01:C90F  A9 10      			lda.l	#16
         01:C911  C2         			cly
 4998                        		__pusharg.wr
         01:C912  A6 8D      			ldx	<__sp
         01:C914  CA         			dex
         01:C915  CA         			dex
         01:C916  95 08      			sta.l	<__stack, x
         01:C918  94 09      			sty.h	<__stack, x
         01:C91A  86 8D      			stx	<__sp
 4999                        		__call		_check_LADDER
         01:C91C  20 81 FF   			call	_check_LADDER
 5000                        	
 5001                        		.dbg	line,	"include\routines_LEVELS.c", 999; if(map_blk_flag == TILE_LADDER)
 5002                        		__ld.umq	_map_blk_flag
         01:C91F  AD 82 28   			lda	_map_blk_flag
 5003                        		__equ_b.uiq	2
         01:C922  C9 02      			cmp	#2
         01:C924  F0 01      			beq	!+
         01:C926  18         			clc
         01:C927             	!:
 5004                        		__bfalse	.LL186
         01:C927  90 0E      			bcc	.LL186
 5005                        	
 5006                        		.dbg	line,	"include\routines_LEVELS.c", 1000; {
 5007                        	
 5008                        		.dbg	line,	"include\routines_LEVELS.c", 1001; sgx_map_pxl_x += 8;
 5009                        		__add_st.wmiq	8, _sgx_map_pxl_x
         01:C929  18         			clc
         01:C92A  AD 61 23   			lda.l	_sgx_map_pxl_x
         01:C92D  69 08      			adc.l	#8
         01:C92F  8D 61 23   			sta.l	_sgx_map_pxl_x
         01:C932  90 03      			bcc	!+
         01:C934  EE 62 23   			inc.h	_sgx_map_pxl_x
         01:C937             	!:
 5010                        	
 5011                        		.dbg	line,	"include\routines_LEVELS.c", 1002; }
 5012                        	
 5013                        		.dbg	line,	"include\routines_LEVELS.c", 1004; /*else
 5014                        	
 5015                        		.dbg	line,	"include\routines_LEVELS.c", 1005; {
 5016                        	
 5017                        		.dbg	line,	"include\routines_LEVELS.c", 1006; // CHECK IF THE PLAYER STANDS LEFT TO THE LADDER //
 5018                        	
 5019                        		.dbg	line,	"include\routines_LEVELS.c", 1007; check_LADDER( 8 , 16 );
 5020                        	
 5021                        		.dbg	line,	"include\routines_LEVELS.c", 1009; if(map_blk_flag == TILE_LADDER)
 5022                        	
 5023                        		.dbg	line,	"include\routines_LEVELS.c", 1010; {
 5024                        	
 5025                        		.dbg	line,	"include\routines_LEVELS.c", 1011; sgx_map_pxl_x -= 8;
 5026                        	
 5027                        		.dbg	line,	"include\routines_LEVELS.c", 1012; }
 5028                        	
 5029                        		.dbg	line,	"include\routines_LEVELS.c", 1013; }*/
 5030                        	
 5031                        		.dbg	line,	"include\routines_LEVELS.c", 1015; player_counter_anim = 1;
 5032    01:C937             	.LL186:
 5033                        		__st.umiq	1, _player_counter_anim
         01:C937  A9 01      			lda.l	#1
         01:C939  8D 11 23   			sta	_player_counter_anim
 5034                        	
 5035                        		.dbg	line,	"include\routines_LEVELS.c", 1016; player_index_jump = 0;
 5036                        		__st.umiq	0, _player_index_jump
         01:C93C  9C 12 23   			stz	_player_index_jump
 5037                        	
 5038                        		.dbg	line,	"include\routines_LEVELS.c", 1017; player_state = STATE_HANG;
 5039                        		__st.umiq	10, _player_state
         01:C93F  A9 0A      			lda.l	#10
         01:C941  8D 0E 23   			sta	_player_state
 5040                        	
 5041                        		.dbg	line,	"include\routines_LEVELS.c", 1018; }
 5042                        	
 5043                        		.dbg	line,	"include\routines_LEVELS.c", 1019; }
 5044    01:C944             	.LL185:
 5045                        	
 5046                        		.dbg	line,	"include\routines_LEVELS.c", 1022; // SET PLAYER SPRITE NEW POSITION //
 5047                        	
 5048                        		.dbg	line,	"include\routines_LEVELS.c", 1023; spr_y(player_pos_y);
 5049    01:C944             	.LL184:
 5050                        		__ld.wm		_player_pos_y
         01:C944  AD 15 23   			lda.l	_player_pos_y
         01:C947  AC 16 23   			ldy.h	_player_pos_y
 5051                        		__call		_spr_y.1
         01:C94A  20 19 E8   			call	_spr_y.1
 5052                        	
 5053                        		.dbg	line,	"include\routines_LEVELS.c", 1024; }
 5054                        	
 5055                        		.dbg	line,	"include\routines_LEVELS.c", 1027; else if(player_state == STATE_CROUCH)
 5056                        		__bra		.LL187
         01:C94D  4C A1 D0   			bra	.LL187
 5057    01:C950             	.LL166:
 5058                        		__ld.umq	_player_state
         01:C950  AD 0E 23   			lda	_player_state
 5059                        		__equ_b.uiq	7
         01:C953  C9 07      			cmp	#7
         01:C955  F0 01      			beq	!+
         01:C957  18         			clc
         01:C958             	!:
 5060                        		__bfalse	.LL188
         01:C958  90 2F      			bcc	.LL188
 5061                        	
 5062                        		.dbg	line,	"include\routines_LEVELS.c", 1028; {
 5063                        	
 5064                        		.dbg	line,	"include\routines_LEVELS.c", 1029; if(player_counter_anim == 1)
 5065                        		__ld.umq	_player_counter_anim
         01:C95A  AD 11 23   			lda	_player_counter_anim
 5066                        		__equ_b.uiq	1
         01:C95D  C9 01      			cmp	#1
         01:C95F  F0 01      			beq	!+
         01:C961  18         			clc
         01:C962             	!:
 5067                        		__bfalse	.LL189
         01:C962  90 1F      			bcc	.LL189
 5068                        	
 5069                        		.dbg	line,	"include\routines_LEVELS.c", 1030; {
 5070                        	
 5071                        		.dbg	line,	"include\routines_LEVELS.c", 1031; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_128 , TILES_16);
 5072                        		__st.wmiq	18432, _di
         01:C964  64 F0      			stz.l	_di
         01:C966  A9 48      			lda.h	#18432
         01:C968  85 F1      			sta.h	_di
 5073                        		__farptr	_tiles_SPR_PLAYER + 4096, _bp_bank, _bp
         01:C96A  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 4096))
         01:C96C  85 EC      			sta.l	_bp
         01:C96E  A9 6A      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 4096))
         01:C970  85 ED      			sta.h	_bp
         01:C972  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 4096)
         01:C974  85 02      			sta	_bp_bank
 5074                        		__st.wmiq	256, _ax
         01:C976  64 F8      			stz.l	_ax
         01:C978  A9 01      			lda.h	#256
         01:C97A  85 F9      			sta.h	_ax
 5075                        		 _load_vram.3
         01:C97C  82         			clx				; Offset to PCE VDC.
         01:C97D  20 77 FF   			call	load_vram_x
 5076                        	
 5077                        		.dbg	line,	"include\routines_LEVELS.c", 1033; player_counter_anim = 0;
 5078                        		__st.umiq	0, _player_counter_anim
         01:C980  9C 11 23   			stz	_player_counter_anim
 5079                        	
 5080                        		.dbg	line,	"include\routines_LEVELS.c", 1034; }
 5081                        	
 5082                        		.dbg	line,	"include\routines_LEVELS.c", 1036; recenter_CAMERA();
 5083    01:C983             	.LL189:
 5084                        		__call		_recenter_CAMERA
         01:C983  20 6D FF   			call	_recenter_CAMERA
 5085                        	
 5086                        		.dbg	line,	"include\routines_LEVELS.c", 1037; }
 5087                        	
 5088                        		.dbg	line,	"include\routines_LEVELS.c", 1040; else if(player_state == STATE_FALL)
 5089                        		__bra		.LL190
         01:C986  4C A1 D0   			bra	.LL190
 5090    01:C989             	.LL188:
 5091                        		__ld.umq	_player_state
         01:C989  AD 0E 23   			lda	_player_state
 5092                        		__equ_b.uiq	9
         01:C98C  C9 09      			cmp	#9
         01:C98E  F0 01      			beq	!+
         01:C990  18         			clc
         01:C991             	!:
 5093                        		__bfalse	.LL191
         01:C991  B0 03 4C 69			bcc	.LL191
         01:C995  CC          
 5094                        	
 5095                        		.dbg	line,	"include\routines_LEVELS.c", 1041; {
 5096                        	
 5097                        		.dbg	line,	"include\routines_LEVELS.c", 1042; unsigned char i, camera_y_move;
 5098                        	
 5099                        		.dbg	line,	"include\routines_LEVELS.c", 1043; i = 1;
 5100                        		__st.umiq	1, __update_PLAYER_end - 6  /* i */
         01:C996  A9 01      			lda.l	#1
         01:C998  8D 04 23   			sta	__update_PLAYER_end - 6
 5101                        	
 5102                        		.dbg	line,	"include\routines_LEVELS.c", 1046; spr_set(player_id);
 5103                        		__ld.umq	_player_id
         01:C99B  AD 0D 23   			lda	_player_id
 5104                        		__call		_spr_set.1
         01:C99E  20 DD E7   			call	_spr_set.1
 5105                        	
 5106                        		.dbg	line,	"include\routines_LEVELS.c", 1049; //--------------------------------------------------------------------------------------//
 5107                        	
 5108                        		.dbg	line,	"include\routines_LEVELS.c", 1050; //                                        V MOVE                                        //
 5109                        	
 5110                        		.dbg	line,	"include\routines_LEVELS.c", 1051; //--------------------------------------------------------------------------------------//
 5111                        	
 5112                        		.dbg	line,	"include\routines_LEVELS.c", 1053; // UPDATE PLAYER Y POSITION //
 5113                        	
 5114                        		.dbg	line,	"include\routines_LEVELS.c", 1054; player_pos_y += 4;
 5115                        		__add_st.wmiq	4, _player_pos_y
         01:C9A1  18         			clc
         01:C9A2  AD 15 23   			lda.l	_player_pos_y
         01:C9A5  69 04      			adc.l	#4
         01:C9A7  8D 15 23   			sta.l	_player_pos_y
         01:C9AA  90 03      			bcc	!+
         01:C9AC  EE 16 23   			inc.h	_player_pos_y
         01:C9AF             	!:
 5116                        	
 5117                        		.dbg	line,	"include\routines_LEVELS.c", 1057; // IF PLAYER GOES BELOW ITS BASE Y POSITION //
 5118                        	
 5119                        		.dbg	line,	"include\routines_LEVELS.c", 1058; if(player_pos_y >= PLAYER_BASE_Y_POS)
 5120                        		__ld.wm		_player_pos_y
         01:C9AF  AD 15 23   			lda.l	_player_pos_y
         01:C9B2  AC 16 23   			ldy.h	_player_pos_y
 5121                        		__sge_w.wi	128
         01:C9B5  C9 80      			cmp.l	#128		; Subtract integer from Y:A.
         01:C9B7  98         			tya
         01:C9B8  E9 00      			sbc.h	#128
         01:C9BA  50 02      			bvc	!+
         01:C9BC  49 80      			eor	#$80		; +ve if Y:A >= integer (signed).
         01:C9BE  49 80      	!:		eor	#$80
         01:C9C0  0A         			asl	a
 5122                        		__bfalse	.LL192
         01:C9C1  90 45      			bcc	.LL192
 5123                        	
 5124                        		.dbg	line,	"include\routines_LEVELS.c", 1059; {
 5125                        	
 5126                        		.dbg	line,	"include\routines_LEVELS.c", 1060; // THE CAMERA MOVES //
 5127                        	
 5128                        		.dbg	line,	"include\routines_LEVELS.c", 1061; // CALCULATE HOW MANY PIXELS THE CAMERA HAS TO MOVE DOWN //
 5129                        	
 5130                        		.dbg	line,	"include\routines_LEVELS.c", 1062; camera_y_move = player_pos_y - PLAYER_BASE_Y_POS;
 5131                        		__ld.wm		_player_pos_y
         01:C9C3  AD 15 23   			lda.l	_player_pos_y
         01:C9C6  AC 16 23   			ldy.h	_player_pos_y
 5132                        		__sub.wi	128
         01:C9C9  38         			sec
         01:C9CA  E9 80      			sbc.l	#128
         01:C9CC  B0 01      			bcs	!+
         01:C9CE  88         			dey
         01:C9CF             	!:
 5133                        		__st.umq	__update_PLAYER_end - 7  /* camera_y_move */
         01:C9CF  8D 03 23   			sta	__update_PLAYER_end - 7
 5134                        	
 5135                        		.dbg	line,	"include\routines_LEVELS.c", 1063; sgx_map_pxl_y += camera_y_move;
 5136                        		__ld.um		__update_PLAYER_end - 7  /* camera_y_move */
         01:C9D2  AD 03 23   			lda	__update_PLAYER_end - 7
         01:C9D5  C2         			cly
 5137                        		__add_st.wmq	_sgx_map_pxl_y
         01:C9D6  18         			clc
         01:C9D7  6D 63 23   			adc.l	_sgx_map_pxl_y
         01:C9DA  8D 63 23   			sta.l	_sgx_map_pxl_y
         01:C9DD  98         			tya
         01:C9DE  6D 64 23   			adc.h	_sgx_map_pxl_y
         01:C9E1  8D 64 23   			sta.h	_sgx_map_pxl_y
 5138                        	
 5139                        		.dbg	line,	"include\routines_LEVELS.c", 1065; // IF THE CAMERA HAS REACHED ITS MAX (LOWEST) POSITION //
 5140                        	
 5141                        		.dbg	line,	"include\routines_LEVELS.c", 1066; if(sgx_map_pxl_y > camera_max_y_position)
 5142                        		__ld.wm		_sgx_map_pxl_y
         01:C9E4  AD 63 23   			lda.l	_sgx_map_pxl_y
         01:C9E7  AC 64 23   			ldy.h	_sgx_map_pxl_y
 5143                        		__ugt_w.wm	_camera_max_y_position
         01:C9EA  18         			clc			; Subtract memory+1 from Y:A.
         01:C9EB  ED 17 23   			sbc.l	_camera_max_y_position
         01:C9EE  98         			tya
         01:C9EF  ED 18 23   			sbc.h	_camera_max_y_position		; CS if Y:A > memory.
 5144                        		__bfalse	.LL193
         01:C9F2  90 0C      			bcc	.LL193
 5145                        	
 5146                        		.dbg	line,	"include\routines_LEVELS.c", 1067; {
 5147                        	
 5148                        		.dbg	line,	"include\routines_LEVELS.c", 1068; // THE CAMERA CAN NOT MOVE LOWER //
 5149                        	
 5150                        		.dbg	line,	"include\routines_LEVELS.c", 1069; sgx_map_pxl_y = camera_max_y_position;
 5151                        		__ld.wm		_camera_max_y_position
         01:C9F4  AD 17 23   			lda.l	_camera_max_y_position
         01:C9F7  AC 18 23   			ldy.h	_camera_max_y_position
 5152                        		__st.wmq	_sgx_map_pxl_y
         01:C9FA  8D 63 23   			sta.l	_sgx_map_pxl_y
         01:C9FD  8C 64 23   			sty.h	_sgx_map_pxl_y
 5153                        	
 5154                        		.dbg	line,	"include\routines_LEVELS.c", 1070; }
 5155                        	
 5156                        		.dbg	line,	"include\routines_LEVELS.c", 1072; // THE PLAYER STAYS AT ITS BASE Y POSITION //
 5157                        	
 5158                        		.dbg	line,	"include\routines_LEVELS.c", 1073; player_pos_y = PLAYER_BASE_Y_POS;
 5159    01:CA00             	.LL193:
 5160                        		__st.wmiq	128, _player_pos_y
         01:CA00  A9 80      			lda.l	#128
         01:CA02  8D 15 23   			sta.l	_player_pos_y
         01:CA05  9C 16 23   			stz.h	_player_pos_y
 5161                        	
 5162                        		.dbg	line,	"include\routines_LEVELS.c", 1074; }
 5163                        	
 5164                        		.dbg	line,	"include\routines_LEVELS.c", 1077; // UPDATE JUMP INDEX IN THE ARRAY //
 5165                        	
 5166                        		.dbg	line,	"include\routines_LEVELS.c", 1078; // ARRAY MAX ENTRY : 34 //
 5167                        	
 5168                        		.dbg	line,	"include\routines_LEVELS.c", 1079; if(player_index_jump < 34)
 5169    01:CA08             	.LL192:
 5170                        		__ld.umq	_player_index_jump
         01:CA08  AD 12 23   			lda	_player_index_jump
 5171                        		__ult_b.uiq	34
         01:CA0B  C9 22      			cmp	#34		; Subtract integer from A.
         01:CA0D  6A         			ror	a		; CC if A < integer.
         01:CA0E  49 80      			eor	#$80
         01:CA10  2A         			rol	a
 5172                        		__bfalse	.LL194
         01:CA11  90 03      			bcc	.LL194
 5173                        	
 5174                        		.dbg	line,	"include\routines_LEVELS.c", 1080; {
 5175                        	
 5176                        		.dbg	line,	"include\routines_LEVELS.c", 1081; player_index_jump += 1;
 5177                        		__add_st.umiq	1, _player_index_jump
         01:CA13  EE 12 23   			inc	_player_index_jump
 5178                        	
 5179                        		.dbg	line,	"include\routines_LEVELS.c", 1082; }
 5180                        	
 5181                        		.dbg	line,	"include\routines_LEVELS.c", 1085; check_FLOOR_R();
 5182    01:CA16             	.LL194:
 5183                        		__call		_check_FLOOR_R
         01:CA16  20 4F FF   			call	_check_FLOOR_R
 5184                        	
 5185                        		.dbg	line,	"include\routines_LEVELS.c", 1088; if(map_blk_flag == TILE_BG)
 5186                        		__ld.umq	_map_blk_flag
         01:CA19  AD 82 28   			lda	_map_blk_flag
 5187                        		__equ_b.uiq	1
         01:CA1C  C9 01      			cmp	#1
         01:CA1E  F0 01      			beq	!+
         01:CA20  18         			clc
         01:CA21             	!:
 5188                        		__bfalse	.LL195
         01:CA21  B0 03 4C F7			bcc	.LL195
         01:CA25  CA          
 5189                        	
 5190                        		.dbg	line,	"include\routines_LEVELS.c", 1089; {
 5191                        	
 5192                        		.dbg	line,	"include\routines_LEVELS.c", 1090; // CALCULATE HOW MANY PIXELS THE PLAYER MOVED INTO THE GROUND //
 5193                        	
 5194                        		.dbg	line,	"include\routines_LEVELS.c", 1091; for(i=1; i<11 ; i++ )
 5195                        		__st.umiq	1, __update_PLAYER_end - 6  /* i */
         01:CA26  A9 01      			lda.l	#1
         01:CA28  8D 04 23   			sta	__update_PLAYER_end - 6
 5196    01:CA2B             	.LL196:
 5197                        		__ld.umq	__update_PLAYER_end - 6  /* i */
         01:CA2B  AD 04 23   			lda	__update_PLAYER_end - 6
 5198                        		__ult_b.uiq	11
         01:CA2E  C9 0B      			cmp	#11		; Subtract integer from A.
         01:CA30  6A         			ror	a		; CC if A < integer.
         01:CA31  49 80      			eor	#$80
         01:CA33  2A         			rol	a
 5199                        		__btrue		.LL198
         01:CA34  B0 08      			bcs	.LL198
 5200                        		__bra		.LL199
         01:CA36  4C E0 CA   			bra	.LL199
 5201    01:CA39             	.LL197:
 5202                        		__inc.umq	__update_PLAYER_end - 6  /* i */
         01:CA39  EE 04 23   			inc	__update_PLAYER_end - 6
 5203                        		__bra		.LL196
         01:CA3C  80 ED      			bra	.LL196
 5204    01:CA3E             	.LL198:
 5205                        	
 5206                        		.dbg	line,	"include\routines_LEVELS.c", 1092; {
 5207                        	
 5208                        		.dbg	line,	"include\routines_LEVELS.c", 1093; if(player_axis == AXIS_RIGHT)
 5209                        		__not.um	_player_axis
         01:CA3E  AD 0F 23   			lda	_player_axis
         01:CA41  18         			clc
         01:CA42  D0 01      			bne	!+
         01:CA44  38         			sec
         01:CA45             	!:
 5210                        		__bfalse	.LL200
         01:CA45  90 20      			bcc	.LL200
 5211                        	
 5212                        		.dbg	line,	"include\routines_LEVELS.c", 1094; {
 5213                        	
 5214                        		.dbg	line,	"include\routines_LEVELS.c", 1095; check_BG( 20 , i);
 5215                        		__ld.wi		20
         01:CA47  A9 14      			lda.l	#20
         01:CA49  C2         			cly
 5216                        		__pusharg.wr
         01:CA4A  A6 8D      			ldx	<__sp
         01:CA4C  CA         			dex
         01:CA4D  CA         			dex
         01:CA4E  95 08      			sta.l	<__stack, x
         01:CA50  94 09      			sty.h	<__stack, x
         01:CA52  86 8D      			stx	<__sp
 5217                        		__ld.um		__update_PLAYER_end - 6  /* i */
         01:CA54  AD 04 23   			lda	__update_PLAYER_end - 6
         01:CA57  C2         			cly
 5218                        		__pusharg.wr
         01:CA58  A6 8D      			ldx	<__sp
         01:CA5A  CA         			dex
         01:CA5B  CA         			dex
         01:CA5C  95 08      			sta.l	<__stack, x
         01:CA5E  94 09      			sty.h	<__stack, x
         01:CA60  86 8D      			stx	<__sp
 5219                        		__call		_check_BG
         01:CA62  20 3B FF   			call	_check_BG
 5220                        	
 5221                        		.dbg	line,	"include\routines_LEVELS.c", 1096; }
 5222                        	
 5223                        		.dbg	line,	"include\routines_LEVELS.c", 1098; else
 5224                        		__bra		.LL201
         01:CA65  80 1E      			bra	.LL201
 5225    01:CA67             	.LL200:
 5226                        	
 5227                        		.dbg	line,	"include\routines_LEVELS.c", 1099; {
 5228                        	
 5229                        		.dbg	line,	"include\routines_LEVELS.c", 1100; check_BG( 10 , i);
 5230                        		__ld.wi		10
         01:CA67  A9 0A      			lda.l	#10
         01:CA69  C2         			cly
 5231                        		__pusharg.wr
         01:CA6A  A6 8D      			ldx	<__sp
         01:CA6C  CA         			dex
         01:CA6D  CA         			dex
         01:CA6E  95 08      			sta.l	<__stack, x
         01:CA70  94 09      			sty.h	<__stack, x
         01:CA72  86 8D      			stx	<__sp
 5232                        		__ld.um		__update_PLAYER_end - 6  /* i */
         01:CA74  AD 04 23   			lda	__update_PLAYER_end - 6
         01:CA77  C2         			cly
 5233                        		__pusharg.wr
         01:CA78  A6 8D      			ldx	<__sp
         01:CA7A  CA         			dex
         01:CA7B  CA         			dex
         01:CA7C  95 08      			sta.l	<__stack, x
         01:CA7E  94 09      			sty.h	<__stack, x
         01:CA80  86 8D      			stx	<__sp
 5234                        		__call		_check_BG
         01:CA82  20 3B FF   			call	_check_BG
 5235                        	
 5236                        		.dbg	line,	"include\routines_LEVELS.c", 1101; }
 5237    01:CA85             	.LL201:
 5238                        	
 5239                        		.dbg	line,	"include\routines_LEVELS.c", 1104; if(map_blk_flag == TILE_EMPTY)
 5240                        		__not.um	_map_blk_flag
         01:CA85  AD 82 28   			lda	_map_blk_flag
         01:CA88  18         			clc
         01:CA89  D0 01      			bne	!+
         01:CA8B  38         			sec
         01:CA8C             	!:
 5241                        		__bfalse	.LL202
         01:CA8C  90 AB      			bcc	.LL202
 5242                        	
 5243                        		.dbg	line,	"include\routines_LEVELS.c", 1105; {
 5244                        	
 5245                        		.dbg	line,	"include\routines_LEVELS.c", 1106; if(player_pos_y != PLAYER_BASE_Y_POS)
 5246                        		__ld.wm		_player_pos_y
         01:CA8E  AD 15 23   			lda.l	_player_pos_y
         01:CA91  AC 16 23   			ldy.h	_player_pos_y
 5247                        		__neq_w.wi	128
         01:CA94  38         			sec
         01:CA95  49 80      			eor.l	#128
         01:CA97  D0 06      			bne	!+
         01:CA99  98         			tya
         01:CA9A  49 00      			eor.h	#128
         01:CA9C  D0 01      			bne	!+
         01:CA9E  18         			clc
         01:CA9F             	!:
 5248                        		__bfalse	.LL203
         01:CA9F  90 1E      			bcc	.LL203
 5249                        	
 5250                        		.dbg	line,	"include\routines_LEVELS.c", 1107; {
 5251                        	
 5252                        		.dbg	line,	"include\routines_LEVELS.c", 1108; player_pos_y -= (i - 1);
 5253                        		__ld.um		__update_PLAYER_end - 6  /* i */
         01:CAA1  AD 04 23   			lda	__update_PLAYER_end - 6
         01:CAA4  C2         			cly
 5254                        		__sub.wi	1
         01:CAA5  38         			sec
         01:CAA6  E9 01      			sbc.l	#1
         01:CAA8  B0 01      			bcs	!+
         01:CAAA  88         			dey
         01:CAAB             	!:
 5255                        		__isub_st.wmq	_player_pos_y
         01:CAAB  38         			sec
         01:CAAC  49 FF      			eor	#$FF
         01:CAAE  6D 15 23   			adc.l	_player_pos_y
         01:CAB1  8D 15 23   			sta.l	_player_pos_y
         01:CAB4  98         			tya
         01:CAB5  49 FF      			eor	#$FF
         01:CAB7  6D 16 23   			adc.h	_player_pos_y
         01:CABA  8D 16 23   			sta.h	_player_pos_y
 5256                        	
 5257                        		.dbg	line,	"include\routines_LEVELS.c", 1109; }
 5258                        	
 5259                        		.dbg	line,	"include\routines_LEVELS.c", 1111; else
 5260                        		__bra		.LL204
         01:CABD  80 21      			bra	.LL204
 5261    01:CABF             	.LL203:
 5262                        	
 5263                        		.dbg	line,	"include\routines_LEVELS.c", 1112; {
 5264                        	
 5265                        		.dbg	line,	"include\routines_LEVELS.c", 1113; sgx_map_pxl_y -= (i - 1);
 5266                        		__ld.um		__update_PLAYER_end - 6  /* i */
         01:CABF  AD 04 23   			lda	__update_PLAYER_end - 6
         01:CAC2  C2         			cly
 5267                        		__sub.wi	1
         01:CAC3  38         			sec
         01:CAC4  E9 01      			sbc.l	#1
         01:CAC6  B0 01      			bcs	!+
         01:CAC8  88         			dey
         01:CAC9             	!:
 5268                        		__isub_st.wmq	_sgx_map_pxl_y
         01:CAC9  38         			sec
         01:CACA  49 FF      			eor	#$FF
         01:CACC  6D 63 23   			adc.l	_sgx_map_pxl_y
         01:CACF  8D 63 23   			sta.l	_sgx_map_pxl_y
         01:CAD2  98         			tya
         01:CAD3  49 FF      			eor	#$FF
         01:CAD5  6D 64 23   			adc.h	_sgx_map_pxl_y
         01:CAD8  8D 64 23   			sta.h	_sgx_map_pxl_y
 5269                        	
 5270                        		.dbg	line,	"include\routines_LEVELS.c", 1114; }
 5271    01:CADB             	.LL204	.alias		.LL199
 5272                        	
 5273                        		.dbg	line,	"include\routines_LEVELS.c", 1117; break;
 5274                        		__bra		.LL199
         01:CADB  80 03      			bra	.LL199
 5275                        	
 5276                        		.dbg	line,	"include\routines_LEVELS.c", 1118; }
 5277                        	
 5278                        		.dbg	line,	"include\routines_LEVELS.c", 1120; }
 5279    01:CADD             	.LL202	.alias		.LL197
 5280                        		__bra		.LL197
         01:CADD  4C 39 CA   			bra	.LL197
 5281    01:CAE0             	.LL199:
 5282                        	
 5283                        		.dbg	line,	"include\routines_LEVELS.c", 1122; spr_y(player_pos_y);
 5284                        		__ld.wm		_player_pos_y
         01:CAE0  AD 15 23   			lda.l	_player_pos_y
         01:CAE3  AC 16 23   			ldy.h	_player_pos_y
 5285                        		__call		_spr_y.1
         01:CAE6  20 19 E8   			call	_spr_y.1
 5286                        	
 5287                        		.dbg	line,	"include\routines_LEVELS.c", 1124; player_counter_anim = 1;
 5288                        		__st.umiq	1, _player_counter_anim
         01:CAE9  A9 01      			lda.l	#1
         01:CAEB  8D 11 23   			sta	_player_counter_anim
 5289                        	
 5290                        		.dbg	line,	"include\routines_LEVELS.c", 1125; player_index_jump = 0;
 5291                        		__st.umiq	0, _player_index_jump
         01:CAEE  9C 12 23   			stz	_player_index_jump
 5292                        	
 5293                        		.dbg	line,	"include\routines_LEVELS.c", 1126; player_state = STATE_IDLE;
 5294                        		__st.umiq	0, _player_state
         01:CAF1  9C 0E 23   			stz	_player_state
 5295                        	
 5296                        		.dbg	line,	"include\routines_LEVELS.c", 1127; return;
 5297                        		__bra		.LL98
         01:CAF4  4C A1 D0   			bra	.LL98
 5298                        	
 5299                        		.dbg	line,	"include\routines_LEVELS.c", 1128; }
 5300                        	
 5301                        		.dbg	line,	"include\routines_LEVELS.c", 1131; check_FLOOR_L();
 5302    01:CAF7             	.LL195:
 5303                        		__call		_check_FLOOR_L
         01:CAF7  20 63 FF   			call	_check_FLOOR_L
 5304                        	
 5305                        		.dbg	line,	"include\routines_LEVELS.c", 1134; if(map_blk_flag == TILE_BG)
 5306                        		__ld.umq	_map_blk_flag
         01:CAFA  AD 82 28   			lda	_map_blk_flag
 5307                        		__equ_b.uiq	1
         01:CAFD  C9 01      			cmp	#1
         01:CAFF  F0 01      			beq	!+
         01:CB01  18         			clc
         01:CB02             	!:
 5308                        		__bfalse	.LL205
         01:CB02  B0 03 4C D8			bcc	.LL205
         01:CB06  CB          
 5309                        	
 5310                        		.dbg	line,	"include\routines_LEVELS.c", 1135; {
 5311                        	
 5312                        		.dbg	line,	"include\routines_LEVELS.c", 1136; // CALCULATE HOW MANY PIXELS THE PLAYER MOVED INTO THE GROUND //
 5313                        	
 5314                        		.dbg	line,	"include\routines_LEVELS.c", 1137; for(i=1; i<11 ; i++ )
 5315                        		__st.umiq	1, __update_PLAYER_end - 6  /* i */
         01:CB07  A9 01      			lda.l	#1
         01:CB09  8D 04 23   			sta	__update_PLAYER_end - 6
 5316    01:CB0C             	.LL206:
 5317                        		__ld.umq	__update_PLAYER_end - 6  /* i */
         01:CB0C  AD 04 23   			lda	__update_PLAYER_end - 6
 5318                        		__ult_b.uiq	11
         01:CB0F  C9 0B      			cmp	#11		; Subtract integer from A.
         01:CB11  6A         			ror	a		; CC if A < integer.
         01:CB12  49 80      			eor	#$80
         01:CB14  2A         			rol	a
 5319                        		__btrue		.LL208
         01:CB15  B0 08      			bcs	.LL208
 5320                        		__bra		.LL209
         01:CB17  4C C1 CB   			bra	.LL209
 5321    01:CB1A             	.LL207:
 5322                        		__inc.umq	__update_PLAYER_end - 6  /* i */
         01:CB1A  EE 04 23   			inc	__update_PLAYER_end - 6
 5323                        		__bra		.LL206
         01:CB1D  80 ED      			bra	.LL206
 5324    01:CB1F             	.LL208:
 5325                        	
 5326                        		.dbg	line,	"include\routines_LEVELS.c", 1138; {
 5327                        	
 5328                        		.dbg	line,	"include\routines_LEVELS.c", 1139; if(player_axis == AXIS_RIGHT)
 5329                        		__not.um	_player_axis
         01:CB1F  AD 0F 23   			lda	_player_axis
         01:CB22  18         			clc
         01:CB23  D0 01      			bne	!+
         01:CB25  38         			sec
         01:CB26             	!:
 5330                        		__bfalse	.LL210
         01:CB26  90 20      			bcc	.LL210
 5331                        	
 5332                        		.dbg	line,	"include\routines_LEVELS.c", 1140; {
 5333                        	
 5334                        		.dbg	line,	"include\routines_LEVELS.c", 1141; check_BG( 11 , i);
 5335                        		__ld.wi		11
         01:CB28  A9 0B      			lda.l	#11
         01:CB2A  C2         			cly
 5336                        		__pusharg.wr
         01:CB2B  A6 8D      			ldx	<__sp
         01:CB2D  CA         			dex
         01:CB2E  CA         			dex
         01:CB2F  95 08      			sta.l	<__stack, x
         01:CB31  94 09      			sty.h	<__stack, x
         01:CB33  86 8D      			stx	<__sp
 5337                        		__ld.um		__update_PLAYER_end - 6  /* i */
         01:CB35  AD 04 23   			lda	__update_PLAYER_end - 6
         01:CB38  C2         			cly
 5338                        		__pusharg.wr
         01:CB39  A6 8D      			ldx	<__sp
         01:CB3B  CA         			dex
         01:CB3C  CA         			dex
         01:CB3D  95 08      			sta.l	<__stack, x
         01:CB3F  94 09      			sty.h	<__stack, x
         01:CB41  86 8D      			stx	<__sp
 5339                        		__call		_check_BG
         01:CB43  20 3B FF   			call	_check_BG
 5340                        	
 5341                        		.dbg	line,	"include\routines_LEVELS.c", 1142; }
 5342                        	
 5343                        		.dbg	line,	"include\routines_LEVELS.c", 1144; else
 5344                        		__bra		.LL211
         01:CB46  80 1E      			bra	.LL211
 5345    01:CB48             	.LL210:
 5346                        	
 5347                        		.dbg	line,	"include\routines_LEVELS.c", 1145; {
 5348                        	
 5349                        		.dbg	line,	"include\routines_LEVELS.c", 1146; check_BG( 10 , i);
 5350                        		__ld.wi		10
         01:CB48  A9 0A      			lda.l	#10
         01:CB4A  C2         			cly
 5351                        		__pusharg.wr
         01:CB4B  A6 8D      			ldx	<__sp
         01:CB4D  CA         			dex
         01:CB4E  CA         			dex
         01:CB4F  95 08      			sta.l	<__stack, x
         01:CB51  94 09      			sty.h	<__stack, x
         01:CB53  86 8D      			stx	<__sp
 5352                        		__ld.um		__update_PLAYER_end - 6  /* i */
         01:CB55  AD 04 23   			lda	__update_PLAYER_end - 6
         01:CB58  C2         			cly
 5353                        		__pusharg.wr
         01:CB59  A6 8D      			ldx	<__sp
         01:CB5B  CA         			dex
         01:CB5C  CA         			dex
         01:CB5D  95 08      			sta.l	<__stack, x
         01:CB5F  94 09      			sty.h	<__stack, x
         01:CB61  86 8D      			stx	<__sp
 5354                        		__call		_check_BG
         01:CB63  20 3B FF   			call	_check_BG
 5355                        	
 5356                        		.dbg	line,	"include\routines_LEVELS.c", 1147; }
 5357    01:CB66             	.LL211:
 5358                        	
 5359                        		.dbg	line,	"include\routines_LEVELS.c", 1150; if(map_blk_flag == TILE_EMPTY)
 5360                        		__not.um	_map_blk_flag
         01:CB66  AD 82 28   			lda	_map_blk_flag
         01:CB69  18         			clc
         01:CB6A  D0 01      			bne	!+
         01:CB6C  38         			sec
         01:CB6D             	!:
 5361                        		__bfalse	.LL212
         01:CB6D  90 AB      			bcc	.LL212
 5362                        	
 5363                        		.dbg	line,	"include\routines_LEVELS.c", 1151; {
 5364                        	
 5365                        		.dbg	line,	"include\routines_LEVELS.c", 1152; if(player_pos_y != PLAYER_BASE_Y_POS)
 5366                        		__ld.wm		_player_pos_y
         01:CB6F  AD 15 23   			lda.l	_player_pos_y
         01:CB72  AC 16 23   			ldy.h	_player_pos_y
 5367                        		__neq_w.wi	128
         01:CB75  38         			sec
         01:CB76  49 80      			eor.l	#128
         01:CB78  D0 06      			bne	!+
         01:CB7A  98         			tya
         01:CB7B  49 00      			eor.h	#128
         01:CB7D  D0 01      			bne	!+
         01:CB7F  18         			clc
         01:CB80             	!:
 5368                        		__bfalse	.LL213
         01:CB80  90 1E      			bcc	.LL213
 5369                        	
 5370                        		.dbg	line,	"include\routines_LEVELS.c", 1153; {
 5371                        	
 5372                        		.dbg	line,	"include\routines_LEVELS.c", 1154; player_pos_y -= (i - 1);
 5373                        		__ld.um		__update_PLAYER_end - 6  /* i */
         01:CB82  AD 04 23   			lda	__update_PLAYER_end - 6
         01:CB85  C2         			cly
 5374                        		__sub.wi	1
         01:CB86  38         			sec
         01:CB87  E9 01      			sbc.l	#1
         01:CB89  B0 01      			bcs	!+
         01:CB8B  88         			dey
         01:CB8C             	!:
 5375                        		__isub_st.wmq	_player_pos_y
         01:CB8C  38         			sec
         01:CB8D  49 FF      			eor	#$FF
         01:CB8F  6D 15 23   			adc.l	_player_pos_y
         01:CB92  8D 15 23   			sta.l	_player_pos_y
         01:CB95  98         			tya
         01:CB96  49 FF      			eor	#$FF
         01:CB98  6D 16 23   			adc.h	_player_pos_y
         01:CB9B  8D 16 23   			sta.h	_player_pos_y
 5376                        	
 5377                        		.dbg	line,	"include\routines_LEVELS.c", 1155; }
 5378                        	
 5379                        		.dbg	line,	"include\routines_LEVELS.c", 1157; else
 5380                        		__bra		.LL214
         01:CB9E  80 21      			bra	.LL214
 5381    01:CBA0             	.LL213:
 5382                        	
 5383                        		.dbg	line,	"include\routines_LEVELS.c", 1158; {
 5384                        	
 5385                        		.dbg	line,	"include\routines_LEVELS.c", 1159; sgx_map_pxl_y -= (i - 1);
 5386                        		__ld.um		__update_PLAYER_end - 6  /* i */
         01:CBA0  AD 04 23   			lda	__update_PLAYER_end - 6
         01:CBA3  C2         			cly
 5387                        		__sub.wi	1
         01:CBA4  38         			sec
         01:CBA5  E9 01      			sbc.l	#1
         01:CBA7  B0 01      			bcs	!+
         01:CBA9  88         			dey
         01:CBAA             	!:
 5388                        		__isub_st.wmq	_sgx_map_pxl_y
         01:CBAA  38         			sec
         01:CBAB  49 FF      			eor	#$FF
         01:CBAD  6D 63 23   			adc.l	_sgx_map_pxl_y
         01:CBB0  8D 63 23   			sta.l	_sgx_map_pxl_y
         01:CBB3  98         			tya
         01:CBB4  49 FF      			eor	#$FF
         01:CBB6  6D 64 23   			adc.h	_sgx_map_pxl_y
         01:CBB9  8D 64 23   			sta.h	_sgx_map_pxl_y
 5389                        	
 5390                        		.dbg	line,	"include\routines_LEVELS.c", 1160; }
 5391    01:CBBC             	.LL214	.alias		.LL209
 5392                        	
 5393                        		.dbg	line,	"include\routines_LEVELS.c", 1163; break;
 5394                        		__bra		.LL209
         01:CBBC  80 03      			bra	.LL209
 5395                        	
 5396                        		.dbg	line,	"include\routines_LEVELS.c", 1164; }
 5397                        	
 5398                        		.dbg	line,	"include\routines_LEVELS.c", 1166; }
 5399    01:CBBE             	.LL212	.alias		.LL207
 5400                        		__bra		.LL207
         01:CBBE  4C 1A CB   			bra	.LL207
 5401    01:CBC1             	.LL209:
 5402                        	
 5403                        		.dbg	line,	"include\routines_LEVELS.c", 1168; spr_y(player_pos_y);
 5404                        		__ld.wm		_player_pos_y
         01:CBC1  AD 15 23   			lda.l	_player_pos_y
         01:CBC4  AC 16 23   			ldy.h	_player_pos_y
 5405                        		__call		_spr_y.1
         01:CBC7  20 19 E8   			call	_spr_y.1
 5406                        	
 5407                        		.dbg	line,	"include\routines_LEVELS.c", 1170; player_counter_anim = 1;
 5408                        		__st.umiq	1, _player_counter_anim
         01:CBCA  A9 01      			lda.l	#1
         01:CBCC  8D 11 23   			sta	_player_counter_anim
 5409                        	
 5410                        		.dbg	line,	"include\routines_LEVELS.c", 1171; player_index_jump = 0;
 5411                        		__st.umiq	0, _player_index_jump
         01:CBCF  9C 12 23   			stz	_player_index_jump
 5412                        	
 5413                        		.dbg	line,	"include\routines_LEVELS.c", 1172; player_state = STATE_IDLE;
 5414                        		__st.umiq	0, _player_state
         01:CBD2  9C 0E 23   			stz	_player_state
 5415                        	
 5416                        		.dbg	line,	"include\routines_LEVELS.c", 1173; return;
 5417                        		__bra		.LL98
         01:CBD5  4C A1 D0   			bra	.LL98
 5418                        	
 5419                        		.dbg	line,	"include\routines_LEVELS.c", 1174; }
 5420                        	
 5421                        		.dbg	line,	"include\routines_LEVELS.c", 1177; check_LADDER( 16 , 16 );
 5422    01:CBD8             	.LL205:
 5423                        		__ld.wi		16
         01:CBD8  A9 10      			lda.l	#16
         01:CBDA  C2         			cly
 5424                        		__pusharg.wr
         01:CBDB  A6 8D      			ldx	<__sp
         01:CBDD  CA         			dex
         01:CBDE  CA         			dex
         01:CBDF  95 08      			sta.l	<__stack, x
         01:CBE1  94 09      			sty.h	<__stack, x
         01:CBE3  86 8D      			stx	<__sp
 5425                        		__ld.wi		16
         01:CBE5  A9 10      			lda.l	#16
         01:CBE7  C2         			cly
 5426                        		__pusharg.wr
         01:CBE8  A6 8D      			ldx	<__sp
         01:CBEA  CA         			dex
         01:CBEB  CA         			dex
         01:CBEC  95 08      			sta.l	<__stack, x
         01:CBEE  94 09      			sty.h	<__stack, x
         01:CBF0  86 8D      			stx	<__sp
 5427                        		__call		_check_LADDER
         01:CBF2  20 81 FF   			call	_check_LADDER
 5428                        	
 5429                        		.dbg	line,	"include\routines_LEVELS.c", 1179; // IF PLAYER HITS THE LADDER //
 5430                        	
 5431                        		.dbg	line,	"include\routines_LEVELS.c", 1180; if(map_blk_flag == TILE_LADDER)
 5432                        		__ld.umq	_map_blk_flag
         01:CBF5  AD 82 28   			lda	_map_blk_flag
 5433                        		__equ_b.uiq	2
         01:CBF8  C9 02      			cmp	#2
         01:CBFA  F0 01      			beq	!+
         01:CBFC  18         			clc
         01:CBFD             	!:
 5434                        		__bfalse	.LL215
         01:CBFD  90 5E      			bcc	.LL215
 5435                        	
 5436                        		.dbg	line,	"include\routines_LEVELS.c", 1181; {
 5437                        	
 5438                        		.dbg	line,	"include\routines_LEVELS.c", 1182; // CAMERA GOES 8 PX BACKWARD //
 5439                        	
 5440                        		.dbg	line,	"include\routines_LEVELS.c", 1183; sgx_map_pxl_x = ( (sgx_map_pxl_x >> 3) << 3 );
 5441                        		__ld.wm		_sgx_map_pxl_x
         01:CBFF  AD 61 23   			lda.l	_sgx_map_pxl_x
         01:CC02  AC 62 23   			ldy.h	_sgx_map_pxl_x
 5442                        		__lsr.wi	3
         01:CC05  84 00      			sty	__temp
         01:CC07  20 3A E2   			jsr	lsrw3
 5443                        		__asl.wi	3
         01:CC0A  84 00      			sty	__temp
         01:CC0C  20 D7 E1   			jsr	aslw3
 5444                        		__st.wmq	_sgx_map_pxl_x
         01:CC0F  8D 61 23   			sta.l	_sgx_map_pxl_x
         01:CC12  8C 62 23   			sty.h	_sgx_map_pxl_x
 5445                        	
 5446                        		.dbg	line,	"include\routines_LEVELS.c", 1185; // SO WE UPDATE THE MAP //
 5447                        	
 5448                        		.dbg	line,	"include\routines_LEVELS.c", 1186; sgx_scroll_map();
 5449                        		__call		_sgx_scroll_map
         01:CC15  20 95 FF   			call	_sgx_scroll_map
 5450                        	
 5451                        		.dbg	line,	"include\routines_LEVELS.c", 1188; // CHECK IF THE PLAYER STANDS RIGHT TO THE LADDER //
 5452                        	
 5453                        		.dbg	line,	"include\routines_LEVELS.c", 1189; check_LADDER( 31 , 16 );
 5454                        		__ld.wi		31
         01:CC18  A9 1F      			lda.l	#31
         01:CC1A  C2         			cly
 5455                        		__pusharg.wr
         01:CC1B  A6 8D      			ldx	<__sp
         01:CC1D  CA         			dex
         01:CC1E  CA         			dex
         01:CC1F  95 08      			sta.l	<__stack, x
         01:CC21  94 09      			sty.h	<__stack, x
         01:CC23  86 8D      			stx	<__sp
 5456                        		__ld.wi		16
         01:CC25  A9 10      			lda.l	#16
         01:CC27  C2         			cly
 5457                        		__pusharg.wr
         01:CC28  A6 8D      			ldx	<__sp
         01:CC2A  CA         			dex
         01:CC2B  CA         			dex
         01:CC2C  95 08      			sta.l	<__stack, x
         01:CC2E  94 09      			sty.h	<__stack, x
         01:CC30  86 8D      			stx	<__sp
 5458                        		__call		_check_LADDER
         01:CC32  20 81 FF   			call	_check_LADDER
 5459                        	
 5460                        		.dbg	line,	"include\routines_LEVELS.c", 1191; if(map_blk_flag == TILE_LADDER)
 5461                        		__ld.umq	_map_blk_flag
         01:CC35  AD 82 28   			lda	_map_blk_flag
 5462                        		__equ_b.uiq	2
         01:CC38  C9 02      			cmp	#2
         01:CC3A  F0 01      			beq	!+
         01:CC3C  18         			clc
         01:CC3D             	!:
 5463                        		__bfalse	.LL216
         01:CC3D  90 0E      			bcc	.LL216
 5464                        	
 5465                        		.dbg	line,	"include\routines_LEVELS.c", 1192; {
 5466                        	
 5467                        		.dbg	line,	"include\routines_LEVELS.c", 1193; sgx_map_pxl_x += 8;
 5468                        		__add_st.wmiq	8, _sgx_map_pxl_x
         01:CC3F  18         			clc
         01:CC40  AD 61 23   			lda.l	_sgx_map_pxl_x
         01:CC43  69 08      			adc.l	#8
         01:CC45  8D 61 23   			sta.l	_sgx_map_pxl_x
         01:CC48  90 03      			bcc	!+
         01:CC4A  EE 62 23   			inc.h	_sgx_map_pxl_x
         01:CC4D             	!:
 5469                        	
 5470                        		.dbg	line,	"include\routines_LEVELS.c", 1194; }
 5471                        	
 5472                        		.dbg	line,	"include\routines_LEVELS.c", 1196; player_counter_anim = 1;
 5473    01:CC4D             	.LL216:
 5474                        		__st.umiq	1, _player_counter_anim
         01:CC4D  A9 01      			lda.l	#1
         01:CC4F  8D 11 23   			sta	_player_counter_anim
 5475                        	
 5476                        		.dbg	line,	"include\routines_LEVELS.c", 1197; player_index_jump = 0;
 5477                        		__st.umiq	0, _player_index_jump
         01:CC52  9C 12 23   			stz	_player_index_jump
 5478                        	
 5479                        		.dbg	line,	"include\routines_LEVELS.c", 1198; player_state = STATE_HANG;
 5480                        		__st.umiq	10, _player_state
         01:CC55  A9 0A      			lda.l	#10
         01:CC57  8D 0E 23   			sta	_player_state
 5481                        	
 5482                        		.dbg	line,	"include\routines_LEVELS.c", 1199; return;
 5483                        		__bra		.LL98
         01:CC5A  4C A1 D0   			bra	.LL98
 5484                        	
 5485                        		.dbg	line,	"include\routines_LEVELS.c", 1200; }
 5486                        	
 5487                        		.dbg	line,	"include\routines_LEVELS.c", 1203; spr_y(player_pos_y);
 5488    01:CC5D             	.LL215:
 5489                        		__ld.wm		_player_pos_y
         01:CC5D  AD 15 23   			lda.l	_player_pos_y
         01:CC60  AC 16 23   			ldy.h	_player_pos_y
 5490                        		__call		_spr_y.1
         01:CC63  20 19 E8   			call	_spr_y.1
 5491                        	
 5492                        		.dbg	line,	"include\routines_LEVELS.c", 1204; }
 5493                        	
 5494                        		.dbg	line,	"include\routines_LEVELS.c", 1207; else if(player_state == STATE_HANG)
 5495                        		__bra		.LL217
         01:CC66  4C A1 D0   			bra	.LL217
 5496    01:CC69             	.LL191:
 5497                        		__ld.umq	_player_state
         01:CC69  AD 0E 23   			lda	_player_state
 5498                        		__equ_b.uiq	10
         01:CC6C  C9 0A      			cmp	#10
         01:CC6E  F0 01      			beq	!+
         01:CC70  18         			clc
         01:CC71             	!:
 5499                        		__bfalse	.LL218
         01:CC71  90 32      			bcc	.LL218
 5500                        	
 5501                        		.dbg	line,	"include\routines_LEVELS.c", 1208; {
 5502                        	
 5503                        		.dbg	line,	"include\routines_LEVELS.c", 1209; recenter_CAMERA();
 5504                        		__call		_recenter_CAMERA
         01:CC73  20 6D FF   			call	_recenter_CAMERA
 5505                        	
 5506                        		.dbg	line,	"include\routines_LEVELS.c", 1211; if(player_counter_anim == 1)
 5507                        		__ld.umq	_player_counter_anim
         01:CC76  AD 11 23   			lda	_player_counter_anim
 5508                        		__equ_b.uiq	1
         01:CC79  C9 01      			cmp	#1
         01:CC7B  F0 01      			beq	!+
         01:CC7D  18         			clc
         01:CC7E             	!:
 5509                        		__bfalse	.LL219
         01:CC7E  B0 03 4C A1			bcc	.LL219
         01:CC82  D0          
 5510                        	
 5511                        		.dbg	line,	"include\routines_LEVELS.c", 1212; {
 5512                        	
 5513                        		.dbg	line,	"include\routines_LEVELS.c", 1213; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_144 , TILES_16);
 5514                        		__st.wmiq	18432, _di
         01:CC83  64 F0      			stz.l	_di
         01:CC85  A9 48      			lda.h	#18432
         01:CC87  85 F1      			sta.h	_di
 5515                        		__farptr	_tiles_SPR_PLAYER + 4608, _bp_bank, _bp
         01:CC89  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 4608))
         01:CC8B  85 EC      			sta.l	_bp
         01:CC8D  A9 6C      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 4608))
         01:CC8F  85 ED      			sta.h	_bp
         01:CC91  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 4608)
         01:CC93  85 02      			sta	_bp_bank
 5516                        		__st.wmiq	256, _ax
         01:CC95  64 F8      			stz.l	_ax
         01:CC97  A9 01      			lda.h	#256
         01:CC99  85 F9      			sta.h	_ax
 5517                        		 _load_vram.3
         01:CC9B  82         			clx				; Offset to PCE VDC.
         01:CC9C  20 77 FF   			call	load_vram_x
 5518                        	
 5519                        		.dbg	line,	"include\routines_LEVELS.c", 1215; player_counter_anim = 0;
 5520                        		__st.umiq	0, _player_counter_anim
         01:CC9F  9C 11 23   			stz	_player_counter_anim
 5521                        	
 5522                        		.dbg	line,	"include\routines_LEVELS.c", 1216; }
 5523                        	
 5524                        		.dbg	line,	"include\routines_LEVELS.c", 1217; }
 5525    01:CCA2             	.LL219	.alias		.LL220
 5526                        	
 5527                        		.dbg	line,	"include\routines_LEVELS.c", 1220; else if(player_state == STATE_CLIMB_UP)
 5528                        		__bra		.LL220
         01:CCA2  4C A1 D0   			bra	.LL220
 5529    01:CCA5             	.LL218:
 5530                        		__ld.umq	_player_state
         01:CCA5  AD 0E 23   			lda	_player_state
 5531                        		__equ_b.uiq	11
         01:CCA8  C9 0B      			cmp	#11
         01:CCAA  F0 01      			beq	!+
         01:CCAC  18         			clc
         01:CCAD             	!:
 5532                        		__bfalse	.LL221
         01:CCAD  B0 03 4C B7			bcc	.LL221
         01:CCB1  CD          
 5533                        	
 5534                        		.dbg	line,	"include\routines_LEVELS.c", 1221; {
 5535                        	
 5536                        		.dbg	line,	"include\routines_LEVELS.c", 1222; if(player_counter_anim == 0)
 5537                        		__not.um	_player_counter_anim
         01:CCB2  AD 11 23   			lda	_player_counter_anim
         01:CCB5  18         			clc
         01:CCB6  D0 01      			bne	!+
         01:CCB8  38         			sec
         01:CCB9             	!:
 5538                        		__bfalse	.LL222
         01:CCB9  90 1F      			bcc	.LL222
 5539                        	
 5540                        		.dbg	line,	"include\routines_LEVELS.c", 1223; {
 5541                        	
 5542                        		.dbg	line,	"include\routines_LEVELS.c", 1224; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_160 , TILES_16);
 5543                        		__st.wmiq	18432, _di
         01:CCBB  64 F0      			stz.l	_di
         01:CCBD  A9 48      			lda.h	#18432
         01:CCBF  85 F1      			sta.h	_di
 5544                        		__farptr	_tiles_SPR_PLAYER + 5120, _bp_bank, _bp
         01:CCC1  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5120))
         01:CCC3  85 EC      			sta.l	_bp
         01:CCC5  A9 6E      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5120))
         01:CCC7  85 ED      			sta.h	_bp
         01:CCC9  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 5120)
         01:CCCB  85 02      			sta	_bp_bank
 5545                        		__st.wmiq	256, _ax
         01:CCCD  64 F8      			stz.l	_ax
         01:CCCF  A9 01      			lda.h	#256
         01:CCD1  85 F9      			sta.h	_ax
 5546                        		 _load_vram.3
         01:CCD3  82         			clx				; Offset to PCE VDC.
         01:CCD4  20 77 FF   			call	load_vram_x
 5547                        	
 5548                        		.dbg	line,	"include\routines_LEVELS.c", 1225; }
 5549                        	
 5550                        		.dbg	line,	"include\routines_LEVELS.c", 1227; else if(player_counter_anim == 3)
 5551                        		__bra		.LL223
         01:CCD7  4C A1 CD   			bra	.LL223
 5552    01:CCDA             	.LL222:
 5553                        		__ld.umq	_player_counter_anim
         01:CCDA  AD 11 23   			lda	_player_counter_anim
 5554                        		__equ_b.uiq	3
         01:CCDD  C9 03      			cmp	#3
         01:CCDF  F0 01      			beq	!+
         01:CCE1  18         			clc
         01:CCE2             	!:
 5555                        		__bfalse	.LL224
         01:CCE2  90 1F      			bcc	.LL224
 5556                        	
 5557                        		.dbg	line,	"include\routines_LEVELS.c", 1228; {
 5558                        	
 5559                        		.dbg	line,	"include\routines_LEVELS.c", 1229; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_176 , TILES_16);
 5560                        		__st.wmiq	18432, _di
         01:CCE4  64 F0      			stz.l	_di
         01:CCE6  A9 48      			lda.h	#18432
         01:CCE8  85 F1      			sta.h	_di
 5561                        		__farptr	_tiles_SPR_PLAYER + 5632, _bp_bank, _bp
         01:CCEA  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5632))
         01:CCEC  85 EC      			sta.l	_bp
         01:CCEE  A9 70      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5632))
         01:CCF0  85 ED      			sta.h	_bp
         01:CCF2  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 5632)
         01:CCF4  85 02      			sta	_bp_bank
 5562                        		__st.wmiq	256, _ax
         01:CCF6  64 F8      			stz.l	_ax
         01:CCF8  A9 01      			lda.h	#256
         01:CCFA  85 F9      			sta.h	_ax
 5563                        		 _load_vram.3
         01:CCFC  82         			clx				; Offset to PCE VDC.
         01:CCFD  20 77 FF   			call	load_vram_x
 5564                        	
 5565                        		.dbg	line,	"include\routines_LEVELS.c", 1230; }
 5566                        	
 5567                        		.dbg	line,	"include\routines_LEVELS.c", 1232; else if(player_counter_anim == 6)
 5568                        		__bra		.LL225
         01:CD00  4C A1 CD   			bra	.LL225
 5569    01:CD03             	.LL224:
 5570                        		__ld.umq	_player_counter_anim
         01:CD03  AD 11 23   			lda	_player_counter_anim
 5571                        		__equ_b.uiq	6
         01:CD06  C9 06      			cmp	#6
         01:CD08  F0 01      			beq	!+
         01:CD0A  18         			clc
         01:CD0B             	!:
 5572                        		__bfalse	.LL226
         01:CD0B  90 1E      			bcc	.LL226
 5573                        	
 5574                        		.dbg	line,	"include\routines_LEVELS.c", 1233; {
 5575                        	
 5576                        		.dbg	line,	"include\routines_LEVELS.c", 1234; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_192 , TILES_16);
 5577                        		__st.wmiq	18432, _di
         01:CD0D  64 F0      			stz.l	_di
         01:CD0F  A9 48      			lda.h	#18432
         01:CD11  85 F1      			sta.h	_di
 5578                        		__farptr	_tiles_SPR_PLAYER + 6144, _bp_bank, _bp
         01:CD13  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6144))
         01:CD15  85 EC      			sta.l	_bp
         01:CD17  A9 72      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6144))
         01:CD19  85 ED      			sta.h	_bp
         01:CD1B  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 6144)
         01:CD1D  85 02      			sta	_bp_bank
 5579                        		__st.wmiq	256, _ax
         01:CD1F  64 F8      			stz.l	_ax
         01:CD21  A9 01      			lda.h	#256
         01:CD23  85 F9      			sta.h	_ax
 5580                        		 _load_vram.3
         01:CD25  82         			clx				; Offset to PCE VDC.
         01:CD26  20 77 FF   			call	load_vram_x
 5581                        	
 5582                        		.dbg	line,	"include\routines_LEVELS.c", 1235; }
 5583                        	
 5584                        		.dbg	line,	"include\routines_LEVELS.c", 1237; else if(player_counter_anim == 9)
 5585                        		__bra		.LL227
         01:CD29  80 76      			bra	.LL227
 5586    01:CD2B             	.LL226:
 5587                        		__ld.umq	_player_counter_anim
         01:CD2B  AD 11 23   			lda	_player_counter_anim
 5588                        		__equ_b.uiq	9
         01:CD2E  C9 09      			cmp	#9
         01:CD30  F0 01      			beq	!+
         01:CD32  18         			clc
         01:CD33             	!:
 5589                        		__bfalse	.LL228
         01:CD33  90 1E      			bcc	.LL228
 5590                        	
 5591                        		.dbg	line,	"include\routines_LEVELS.c", 1238; {
 5592                        	
 5593                        		.dbg	line,	"include\routines_LEVELS.c", 1239; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_208 , TILES_16);
 5594                        		__st.wmiq	18432, _di
         01:CD35  64 F0      			stz.l	_di
         01:CD37  A9 48      			lda.h	#18432
         01:CD39  85 F1      			sta.h	_di
 5595                        		__farptr	_tiles_SPR_PLAYER + 6656, _bp_bank, _bp
         01:CD3B  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6656))
         01:CD3D  85 EC      			sta.l	_bp
         01:CD3F  A9 74      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6656))
         01:CD41  85 ED      			sta.h	_bp
         01:CD43  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 6656)
         01:CD45  85 02      			sta	_bp_bank
 5596                        		__st.wmiq	256, _ax
         01:CD47  64 F8      			stz.l	_ax
         01:CD49  A9 01      			lda.h	#256
         01:CD4B  85 F9      			sta.h	_ax
 5597                        		 _load_vram.3
         01:CD4D  82         			clx				; Offset to PCE VDC.
         01:CD4E  20 77 FF   			call	load_vram_x
 5598                        	
 5599                        		.dbg	line,	"include\routines_LEVELS.c", 1240; }
 5600                        	
 5601                        		.dbg	line,	"include\routines_LEVELS.c", 1242; else if(player_counter_anim == 12)
 5602                        		__bra		.LL229
         01:CD51  80 4E      			bra	.LL229
 5603    01:CD53             	.LL228:
 5604                        		__ld.umq	_player_counter_anim
         01:CD53  AD 11 23   			lda	_player_counter_anim
 5605                        		__equ_b.uiq	12
         01:CD56  C9 0C      			cmp	#12
         01:CD58  F0 01      			beq	!+
         01:CD5A  18         			clc
         01:CD5B             	!:
 5606                        		__bfalse	.LL230
         01:CD5B  90 1E      			bcc	.LL230
 5607                        	
 5608                        		.dbg	line,	"include\routines_LEVELS.c", 1243; {
 5609                        	
 5610                        		.dbg	line,	"include\routines_LEVELS.c", 1244; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_192 , TILES_16);
 5611                        		__st.wmiq	18432, _di
         01:CD5D  64 F0      			stz.l	_di
         01:CD5F  A9 48      			lda.h	#18432
         01:CD61  85 F1      			sta.h	_di
 5612                        		__farptr	_tiles_SPR_PLAYER + 6144, _bp_bank, _bp
         01:CD63  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6144))
         01:CD65  85 EC      			sta.l	_bp
         01:CD67  A9 72      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6144))
         01:CD69  85 ED      			sta.h	_bp
         01:CD6B  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 6144)
         01:CD6D  85 02      			sta	_bp_bank
 5613                        		__st.wmiq	256, _ax
         01:CD6F  64 F8      			stz.l	_ax
         01:CD71  A9 01      			lda.h	#256
         01:CD73  85 F9      			sta.h	_ax
 5614                        		 _load_vram.3
         01:CD75  82         			clx				; Offset to PCE VDC.
         01:CD76  20 77 FF   			call	load_vram_x
 5615                        	
 5616                        		.dbg	line,	"include\routines_LEVELS.c", 1245; }
 5617                        	
 5618                        		.dbg	line,	"include\routines_LEVELS.c", 1247; else if(player_counter_anim == 15)
 5619                        		__bra		.LL231
         01:CD79  80 26      			bra	.LL231
 5620    01:CD7B             	.LL230:
 5621                        		__ld.umq	_player_counter_anim
         01:CD7B  AD 11 23   			lda	_player_counter_anim
 5622                        		__equ_b.uiq	15
         01:CD7E  C9 0F      			cmp	#15
         01:CD80  F0 01      			beq	!+
         01:CD82  18         			clc
         01:CD83             	!:
 5623                        		__bfalse	.LL232
         01:CD83  90 1C      			bcc	.LL232
 5624                        	
 5625                        		.dbg	line,	"include\routines_LEVELS.c", 1248; {
 5626                        	
 5627                        		.dbg	line,	"include\routines_LEVELS.c", 1249; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_176 , TILES_16);
 5628                        		__st.wmiq	18432, _di
         01:CD85  64 F0      			stz.l	_di
         01:CD87  A9 48      			lda.h	#18432
         01:CD89  85 F1      			sta.h	_di
 5629                        		__farptr	_tiles_SPR_PLAYER + 5632, _bp_bank, _bp
         01:CD8B  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5632))
         01:CD8D  85 EC      			sta.l	_bp
         01:CD8F  A9 70      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5632))
         01:CD91  85 ED      			sta.h	_bp
         01:CD93  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 5632)
         01:CD95  85 02      			sta	_bp_bank
 5630                        		__st.wmiq	256, _ax
         01:CD97  64 F8      			stz.l	_ax
         01:CD99  A9 01      			lda.h	#256
         01:CD9B  85 F9      			sta.h	_ax
 5631                        		 _load_vram.3
         01:CD9D  82         			clx				; Offset to PCE VDC.
         01:CD9E  20 77 FF   			call	load_vram_x
 5632                        	
 5633                        		.dbg	line,	"include\routines_LEVELS.c", 1250; }
 5634                        	
 5635                        		.dbg	line,	"include\routines_LEVELS.c", 1253; player_counter_anim += 1;
 5636    01:CDA1             	.LL232:
 5637    01:CDA1             	.LL231:
 5638    01:CDA1             	.LL229:
 5639    01:CDA1             	.LL227:
 5640    01:CDA1             	.LL225:
 5641    01:CDA1             	.LL223:
 5642                        		__add_st.umiq	1, _player_counter_anim
         01:CDA1  EE 11 23   			inc	_player_counter_anim
 5643                        	
 5644                        		.dbg	line,	"include\routines_LEVELS.c", 1255; if(player_counter_anim == 17)
 5645                        		__ld.umq	_player_counter_anim
         01:CDA4  AD 11 23   			lda	_player_counter_anim
 5646                        		__equ_b.uiq	17
         01:CDA7  C9 11      			cmp	#17
         01:CDA9  F0 01      			beq	!+
         01:CDAB  18         			clc
         01:CDAC             	!:
 5647                        		__bfalse	.LL233
         01:CDAC  90 03      			bcc	.LL233
 5648                        	
 5649                        		.dbg	line,	"include\routines_LEVELS.c", 1256; {
 5650                        	
 5651                        		.dbg	line,	"include\routines_LEVELS.c", 1257; player_counter_anim = 0;
 5652                        		__st.umiq	0, _player_counter_anim
         01:CDAE  9C 11 23   			stz	_player_counter_anim
 5653                        	
 5654                        		.dbg	line,	"include\routines_LEVELS.c", 1258; }
 5655                        	
 5656                        		.dbg	line,	"include\routines_LEVELS.c", 1260; recenter_CAMERA();
 5657    01:CDB1             	.LL233:
 5658                        		__call		_recenter_CAMERA
         01:CDB1  20 6D FF   			call	_recenter_CAMERA
 5659                        	
 5660                        		.dbg	line,	"include\routines_LEVELS.c", 1261; }
 5661                        	
 5662                        		.dbg	line,	"include\routines_LEVELS.c", 1264; else if(player_state == STATE_CLIMB_DOWN)
 5663                        		__bra		.LL234
         01:CDB4  4C A1 D0   			bra	.LL234
 5664    01:CDB7             	.LL221:
 5665                        		__ld.umq	_player_state
         01:CDB7  AD 0E 23   			lda	_player_state
 5666                        		__equ_b.uiq	12
         01:CDBA  C9 0C      			cmp	#12
         01:CDBC  F0 01      			beq	!+
         01:CDBE  18         			clc
         01:CDBF             	!:
 5667                        		__bfalse	.LL235
         01:CDBF  B0 03 4C C9			bcc	.LL235
         01:CDC3  CE          
 5668                        	
 5669                        		.dbg	line,	"include\routines_LEVELS.c", 1265; {
 5670                        	
 5671                        		.dbg	line,	"include\routines_LEVELS.c", 1266; if(player_counter_anim == 0)
 5672                        		__not.um	_player_counter_anim
         01:CDC4  AD 11 23   			lda	_player_counter_anim
         01:CDC7  18         			clc
         01:CDC8  D0 01      			bne	!+
         01:CDCA  38         			sec
         01:CDCB             	!:
 5673                        		__bfalse	.LL236
         01:CDCB  90 1F      			bcc	.LL236
 5674                        	
 5675                        		.dbg	line,	"include\routines_LEVELS.c", 1267; {
 5676                        	
 5677                        		.dbg	line,	"include\routines_LEVELS.c", 1268; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_176 , TILES_16);
 5678                        		__st.wmiq	18432, _di
         01:CDCD  64 F0      			stz.l	_di
         01:CDCF  A9 48      			lda.h	#18432
         01:CDD1  85 F1      			sta.h	_di
 5679                        		__farptr	_tiles_SPR_PLAYER + 5632, _bp_bank, _bp
         01:CDD3  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5632))
         01:CDD5  85 EC      			sta.l	_bp
         01:CDD7  A9 70      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5632))
         01:CDD9  85 ED      			sta.h	_bp
         01:CDDB  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 5632)
         01:CDDD  85 02      			sta	_bp_bank
 5680                        		__st.wmiq	256, _ax
         01:CDDF  64 F8      			stz.l	_ax
         01:CDE1  A9 01      			lda.h	#256
         01:CDE3  85 F9      			sta.h	_ax
 5681                        		 _load_vram.3
         01:CDE5  82         			clx				; Offset to PCE VDC.
         01:CDE6  20 77 FF   			call	load_vram_x
 5682                        	
 5683                        		.dbg	line,	"include\routines_LEVELS.c", 1269; }
 5684                        	
 5685                        		.dbg	line,	"include\routines_LEVELS.c", 1271; else if(player_counter_anim == 3)
 5686                        		__bra		.LL237
         01:CDE9  4C B3 CE   			bra	.LL237
 5687    01:CDEC             	.LL236:
 5688                        		__ld.umq	_player_counter_anim
         01:CDEC  AD 11 23   			lda	_player_counter_anim
 5689                        		__equ_b.uiq	3
         01:CDEF  C9 03      			cmp	#3
         01:CDF1  F0 01      			beq	!+
         01:CDF3  18         			clc
         01:CDF4             	!:
 5690                        		__bfalse	.LL238
         01:CDF4  90 1F      			bcc	.LL238
 5691                        	
 5692                        		.dbg	line,	"include\routines_LEVELS.c", 1272; {
 5693                        	
 5694                        		.dbg	line,	"include\routines_LEVELS.c", 1273; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_192 , TILES_16);
 5695                        		__st.wmiq	18432, _di
         01:CDF6  64 F0      			stz.l	_di
         01:CDF8  A9 48      			lda.h	#18432
         01:CDFA  85 F1      			sta.h	_di
 5696                        		__farptr	_tiles_SPR_PLAYER + 6144, _bp_bank, _bp
         01:CDFC  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6144))
         01:CDFE  85 EC      			sta.l	_bp
         01:CE00  A9 72      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6144))
         01:CE02  85 ED      			sta.h	_bp
         01:CE04  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 6144)
         01:CE06  85 02      			sta	_bp_bank
 5697                        		__st.wmiq	256, _ax
         01:CE08  64 F8      			stz.l	_ax
         01:CE0A  A9 01      			lda.h	#256
         01:CE0C  85 F9      			sta.h	_ax
 5698                        		 _load_vram.3
         01:CE0E  82         			clx				; Offset to PCE VDC.
         01:CE0F  20 77 FF   			call	load_vram_x
 5699                        	
 5700                        		.dbg	line,	"include\routines_LEVELS.c", 1274; }
 5701                        	
 5702                        		.dbg	line,	"include\routines_LEVELS.c", 1276; else if(player_counter_anim == 6)
 5703                        		__bra		.LL239
         01:CE12  4C B3 CE   			bra	.LL239
 5704    01:CE15             	.LL238:
 5705                        		__ld.umq	_player_counter_anim
         01:CE15  AD 11 23   			lda	_player_counter_anim
 5706                        		__equ_b.uiq	6
         01:CE18  C9 06      			cmp	#6
         01:CE1A  F0 01      			beq	!+
         01:CE1C  18         			clc
         01:CE1D             	!:
 5707                        		__bfalse	.LL240
         01:CE1D  90 1E      			bcc	.LL240
 5708                        	
 5709                        		.dbg	line,	"include\routines_LEVELS.c", 1277; {
 5710                        	
 5711                        		.dbg	line,	"include\routines_LEVELS.c", 1278; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_208 , TILES_16);
 5712                        		__st.wmiq	18432, _di
         01:CE1F  64 F0      			stz.l	_di
         01:CE21  A9 48      			lda.h	#18432
         01:CE23  85 F1      			sta.h	_di
 5713                        		__farptr	_tiles_SPR_PLAYER + 6656, _bp_bank, _bp
         01:CE25  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6656))
         01:CE27  85 EC      			sta.l	_bp
         01:CE29  A9 74      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6656))
         01:CE2B  85 ED      			sta.h	_bp
         01:CE2D  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 6656)
         01:CE2F  85 02      			sta	_bp_bank
 5714                        		__st.wmiq	256, _ax
         01:CE31  64 F8      			stz.l	_ax
         01:CE33  A9 01      			lda.h	#256
         01:CE35  85 F9      			sta.h	_ax
 5715                        		 _load_vram.3
         01:CE37  82         			clx				; Offset to PCE VDC.
         01:CE38  20 77 FF   			call	load_vram_x
 5716                        	
 5717                        		.dbg	line,	"include\routines_LEVELS.c", 1279; }
 5718                        	
 5719                        		.dbg	line,	"include\routines_LEVELS.c", 1281; else if(player_counter_anim == 9)
 5720                        		__bra		.LL241
         01:CE3B  80 76      			bra	.LL241
 5721    01:CE3D             	.LL240:
 5722                        		__ld.umq	_player_counter_anim
         01:CE3D  AD 11 23   			lda	_player_counter_anim
 5723                        		__equ_b.uiq	9
         01:CE40  C9 09      			cmp	#9
         01:CE42  F0 01      			beq	!+
         01:CE44  18         			clc
         01:CE45             	!:
 5724                        		__bfalse	.LL242
         01:CE45  90 1E      			bcc	.LL242
 5725                        	
 5726                        		.dbg	line,	"include\routines_LEVELS.c", 1282; {
 5727                        	
 5728                        		.dbg	line,	"include\routines_LEVELS.c", 1283; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_192 , TILES_16);
 5729                        		__st.wmiq	18432, _di
         01:CE47  64 F0      			stz.l	_di
         01:CE49  A9 48      			lda.h	#18432
         01:CE4B  85 F1      			sta.h	_di
 5730                        		__farptr	_tiles_SPR_PLAYER + 6144, _bp_bank, _bp
         01:CE4D  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6144))
         01:CE4F  85 EC      			sta.l	_bp
         01:CE51  A9 72      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6144))
         01:CE53  85 ED      			sta.h	_bp
         01:CE55  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 6144)
         01:CE57  85 02      			sta	_bp_bank
 5731                        		__st.wmiq	256, _ax
         01:CE59  64 F8      			stz.l	_ax
         01:CE5B  A9 01      			lda.h	#256
         01:CE5D  85 F9      			sta.h	_ax
 5732                        		 _load_vram.3
         01:CE5F  82         			clx				; Offset to PCE VDC.
         01:CE60  20 77 FF   			call	load_vram_x
 5733                        	
 5734                        		.dbg	line,	"include\routines_LEVELS.c", 1284; }
 5735                        	
 5736                        		.dbg	line,	"include\routines_LEVELS.c", 1286; else if(player_counter_anim == 12)
 5737                        		__bra		.LL243
         01:CE63  80 4E      			bra	.LL243
 5738    01:CE65             	.LL242:
 5739                        		__ld.umq	_player_counter_anim
         01:CE65  AD 11 23   			lda	_player_counter_anim
 5740                        		__equ_b.uiq	12
         01:CE68  C9 0C      			cmp	#12
         01:CE6A  F0 01      			beq	!+
         01:CE6C  18         			clc
         01:CE6D             	!:
 5741                        		__bfalse	.LL244
         01:CE6D  90 1E      			bcc	.LL244
 5742                        	
 5743                        		.dbg	line,	"include\routines_LEVELS.c", 1287; {
 5744                        	
 5745                        		.dbg	line,	"include\routines_LEVELS.c", 1288; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_176 , TILES_16);
 5746                        		__st.wmiq	18432, _di
         01:CE6F  64 F0      			stz.l	_di
         01:CE71  A9 48      			lda.h	#18432
         01:CE73  85 F1      			sta.h	_di
 5747                        		__farptr	_tiles_SPR_PLAYER + 5632, _bp_bank, _bp
         01:CE75  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5632))
         01:CE77  85 EC      			sta.l	_bp
         01:CE79  A9 70      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5632))
         01:CE7B  85 ED      			sta.h	_bp
         01:CE7D  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 5632)
         01:CE7F  85 02      			sta	_bp_bank
 5748                        		__st.wmiq	256, _ax
         01:CE81  64 F8      			stz.l	_ax
         01:CE83  A9 01      			lda.h	#256
         01:CE85  85 F9      			sta.h	_ax
 5749                        		 _load_vram.3
         01:CE87  82         			clx				; Offset to PCE VDC.
         01:CE88  20 77 FF   			call	load_vram_x
 5750                        	
 5751                        		.dbg	line,	"include\routines_LEVELS.c", 1289; }
 5752                        	
 5753                        		.dbg	line,	"include\routines_LEVELS.c", 1291; else if(player_counter_anim == 15)
 5754                        		__bra		.LL245
         01:CE8B  80 26      			bra	.LL245
 5755    01:CE8D             	.LL244:
 5756                        		__ld.umq	_player_counter_anim
         01:CE8D  AD 11 23   			lda	_player_counter_anim
 5757                        		__equ_b.uiq	15
         01:CE90  C9 0F      			cmp	#15
         01:CE92  F0 01      			beq	!+
         01:CE94  18         			clc
         01:CE95             	!:
 5758                        		__bfalse	.LL246
         01:CE95  90 1C      			bcc	.LL246
 5759                        	
 5760                        		.dbg	line,	"include\routines_LEVELS.c", 1292; {
 5761                        	
 5762                        		.dbg	line,	"include\routines_LEVELS.c", 1293; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_160 , TILES_16);
 5763                        		__st.wmiq	18432, _di
         01:CE97  64 F0      			stz.l	_di
         01:CE99  A9 48      			lda.h	#18432
         01:CE9B  85 F1      			sta.h	_di
 5764                        		__farptr	_tiles_SPR_PLAYER + 5120, _bp_bank, _bp
         01:CE9D  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5120))
         01:CE9F  85 EC      			sta.l	_bp
         01:CEA1  A9 6E      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5120))
         01:CEA3  85 ED      			sta.h	_bp
         01:CEA5  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 5120)
         01:CEA7  85 02      			sta	_bp_bank
 5765                        		__st.wmiq	256, _ax
         01:CEA9  64 F8      			stz.l	_ax
         01:CEAB  A9 01      			lda.h	#256
         01:CEAD  85 F9      			sta.h	_ax
 5766                        		 _load_vram.3
         01:CEAF  82         			clx				; Offset to PCE VDC.
         01:CEB0  20 77 FF   			call	load_vram_x
 5767                        	
 5768                        		.dbg	line,	"include\routines_LEVELS.c", 1294; }
 5769                        	
 5770                        		.dbg	line,	"include\routines_LEVELS.c", 1297; player_counter_anim += 1;
 5771    01:CEB3             	.LL246:
 5772    01:CEB3             	.LL245:
 5773    01:CEB3             	.LL243:
 5774    01:CEB3             	.LL241:
 5775    01:CEB3             	.LL239:
 5776    01:CEB3             	.LL237:
 5777                        		__add_st.umiq	1, _player_counter_anim
         01:CEB3  EE 11 23   			inc	_player_counter_anim
 5778                        	
 5779                        		.dbg	line,	"include\routines_LEVELS.c", 1299; if(player_counter_anim == 17)
 5780                        		__ld.umq	_player_counter_anim
         01:CEB6  AD 11 23   			lda	_player_counter_anim
 5781                        		__equ_b.uiq	17
         01:CEB9  C9 11      			cmp	#17
         01:CEBB  F0 01      			beq	!+
         01:CEBD  18         			clc
         01:CEBE             	!:
 5782                        		__bfalse	.LL247
         01:CEBE  90 03      			bcc	.LL247
 5783                        	
 5784                        		.dbg	line,	"include\routines_LEVELS.c", 1300; {
 5785                        	
 5786                        		.dbg	line,	"include\routines_LEVELS.c", 1301; player_counter_anim = 0;
 5787                        		__st.umiq	0, _player_counter_anim
         01:CEC0  9C 11 23   			stz	_player_counter_anim
 5788                        	
 5789                        		.dbg	line,	"include\routines_LEVELS.c", 1302; }
 5790                        	
 5791                        		.dbg	line,	"include\routines_LEVELS.c", 1304; recenter_CAMERA();
 5792    01:CEC3             	.LL247:
 5793                        		__call		_recenter_CAMERA
         01:CEC3  20 6D FF   			call	_recenter_CAMERA
 5794                        	
 5795                        		.dbg	line,	"include\routines_LEVELS.c", 1305; }
 5796                        	
 5797                        		.dbg	line,	"include\routines_LEVELS.c", 1308; else if(player_state == STATE_JUMP_LADDER)
 5798                        		__bra		.LL248
         01:CEC6  4C A1 D0   			bra	.LL248
 5799    01:CEC9             	.LL235:
 5800                        		__ld.umq	_player_state
         01:CEC9  AD 0E 23   			lda	_player_state
 5801                        		__equ_b.uiq	13
         01:CECC  C9 0D      			cmp	#13
         01:CECE  F0 01      			beq	!+
         01:CED0  18         			clc
         01:CED1             	!:
 5802                        		__bfalse	.LL249
         01:CED1  B0 03 4C A1			bcc	.LL249
         01:CED5  D0          
 5803                        	
 5804                        		.dbg	line,	"include\routines_LEVELS.c", 1309; {
 5805                        	
 5806                        		.dbg	line,	"include\routines_LEVELS.c", 1310; unsigned char i;
 5807                        	
 5808                        		.dbg	line,	"include\routines_LEVELS.c", 1311; i = 1;
 5809                        		__st.umiq	1, __update_PLAYER_end - 8  /* i */
         01:CED6  A9 01      			lda.l	#1
         01:CED8  8D 02 23   			sta	__update_PLAYER_end - 8
 5810                        	
 5811                        		.dbg	line,	"include\routines_LEVELS.c", 1314; if(player_counter_anim == 0)
 5812                        		__not.um	_player_counter_anim
         01:CEDB  AD 11 23   			lda	_player_counter_anim
         01:CEDE  18         			clc
         01:CEDF  D0 01      			bne	!+
         01:CEE1  38         			sec
         01:CEE2             	!:
 5813                        		__bfalse	.LL250
         01:CEE2  90 21      			bcc	.LL250
 5814                        	
 5815                        		.dbg	line,	"include\routines_LEVELS.c", 1315; {
 5816                        	
 5817                        		.dbg	line,	"include\routines_LEVELS.c", 1316; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_112 , TILES_16);
 5818                        		__st.wmiq	18432, _di
         01:CEE4  64 F0      			stz.l	_di
         01:CEE6  A9 48      			lda.h	#18432
         01:CEE8  85 F1      			sta.h	_di
 5819                        		__farptr	_tiles_SPR_PLAYER + 3584, _bp_bank, _bp
         01:CEEA  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3584))
         01:CEEC  85 EC      			sta.l	_bp
         01:CEEE  A9 68      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3584))
         01:CEF0  85 ED      			sta.h	_bp
         01:CEF2  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 3584)
         01:CEF4  85 02      			sta	_bp_bank
 5820                        		__st.wmiq	256, _ax
         01:CEF6  64 F8      			stz.l	_ax
         01:CEF8  A9 01      			lda.h	#256
         01:CEFA  85 F9      			sta.h	_ax
 5821                        		 _load_vram.3
         01:CEFC  82         			clx				; Offset to PCE VDC.
         01:CEFD  20 77 FF   			call	load_vram_x
 5822                        	
 5823                        		.dbg	line,	"include\routines_LEVELS.c", 1318; player_counter_anim = 1;
 5824                        		__st.umiq	1, _player_counter_anim
         01:CF00  A9 01      			lda.l	#1
         01:CF02  8D 11 23   			sta	_player_counter_anim
 5825                        	
 5826                        		.dbg	line,	"include\routines_LEVELS.c", 1319; }
 5827                        	
 5828                        		.dbg	line,	"include\routines_LEVELS.c", 1322; player_pos_y += TABLE_PLAYER_JUMP_V[player_index_jump];
 5829    01:CF05             	.LL250:
 5830                        		__ldx.umq	_player_index_jump
         01:CF05  AE 12 23   			ldx	_player_index_jump
 5831                        		__ld.bax	_TABLE_PLAYER_JUMP_V
         01:CF08  BD 1D 60   			lda	_TABLE_PLAYER_JUMP_V, x
         01:CF0B  C2         			cly
         01:CF0C  10 01      			bpl	!+
         01:CF0E  88         			dey
         01:CF0F             	!:
 5832                        		__add_st.wmq	_player_pos_y
         01:CF0F  18         			clc
         01:CF10  6D 15 23   			adc.l	_player_pos_y
         01:CF13  8D 15 23   			sta.l	_player_pos_y
         01:CF16  98         			tya
         01:CF17  6D 16 23   			adc.h	_player_pos_y
         01:CF1A  8D 16 23   			sta.h	_player_pos_y
 5833                        	
 5834                        		.dbg	line,	"include\routines_LEVELS.c", 1324; spr_set(player_id);
 5835                        		__ld.umq	_player_id
         01:CF1D  AD 0D 23   			lda	_player_id
 5836                        		__call		_spr_set.1
         01:CF20  20 DD E7   			call	_spr_set.1
 5837                        	
 5838                        		.dbg	line,	"include\routines_LEVELS.c", 1325; spr_y(player_pos_y);
 5839                        		__ld.wm		_player_pos_y
         01:CF23  AD 15 23   			lda.l	_player_pos_y
         01:CF26  AC 16 23   			ldy.h	_player_pos_y
 5840                        		__call		_spr_y.1
         01:CF29  20 19 E8   			call	_spr_y.1
 5841                        	
 5842                        		.dbg	line,	"include\routines_LEVELS.c", 1329; if(player_index_jump < 34)
 5843                        		__ld.umq	_player_index_jump
         01:CF2C  AD 12 23   			lda	_player_index_jump
 5844                        		__ult_b.uiq	34
         01:CF2F  C9 22      			cmp	#34		; Subtract integer from A.
         01:CF31  6A         			ror	a		; CC if A < integer.
         01:CF32  49 80      			eor	#$80
         01:CF34  2A         			rol	a
 5845                        		__bfalse	.LL251
         01:CF35  90 03      			bcc	.LL251
 5846                        	
 5847                        		.dbg	line,	"include\routines_LEVELS.c", 1330; {
 5848                        	
 5849                        		.dbg	line,	"include\routines_LEVELS.c", 1331; player_index_jump += 1;
 5850                        		__add_st.umiq	1, _player_index_jump
         01:CF37  EE 12 23   			inc	_player_index_jump
 5851                        	
 5852                        		.dbg	line,	"include\routines_LEVELS.c", 1332; }
 5853                        	
 5854                        		.dbg	line,	"include\routines_LEVELS.c", 1335; // CHECK COLLISION WITH FLOOR //
 5855                        	
 5856                        		.dbg	line,	"include\routines_LEVELS.c", 1336; if(player_axis == AXIS_RIGHT)
 5857    01:CF3A             	.LL251:
 5858                        		__not.um	_player_axis
         01:CF3A  AD 0F 23   			lda	_player_axis
         01:CF3D  18         			clc
         01:CF3E  D0 01      			bne	!+
         01:CF40  38         			sec
         01:CF41             	!:
 5859                        		__bfalse	.LL252
         01:CF41  90 05      			bcc	.LL252
 5860                        	
 5861                        		.dbg	line,	"include\routines_LEVELS.c", 1337; {
 5862                        	
 5863                        		.dbg	line,	"include\routines_LEVELS.c", 1338; check_FLOOR_R();
 5864                        		__call		_check_FLOOR_R
         01:CF43  20 4F FF   			call	_check_FLOOR_R
 5865                        	
 5866                        		.dbg	line,	"include\routines_LEVELS.c", 1339; }
 5867                        	
 5868                        		.dbg	line,	"include\routines_LEVELS.c", 1341; else
 5869                        		__bra		.LL253
         01:CF46  80 03      			bra	.LL253
 5870    01:CF48             	.LL252:
 5871                        	
 5872                        		.dbg	line,	"include\routines_LEVELS.c", 1342; {
 5873                        	
 5874                        		.dbg	line,	"include\routines_LEVELS.c", 1343; check_FLOOR_L();
 5875                        		__call		_check_FLOOR_L
         01:CF48  20 63 FF   			call	_check_FLOOR_L
 5876                        	
 5877                        		.dbg	line,	"include\routines_LEVELS.c", 1344; }
 5878    01:CF4B             	.LL253:
 5879                        	
 5880                        		.dbg	line,	"include\routines_LEVELS.c", 1347; if(map_blk_flag == TILE_BG)
 5881                        		__ld.umq	_map_blk_flag
         01:CF4B  AD 82 28   			lda	_map_blk_flag
 5882                        		__equ_b.uiq	1
         01:CF4E  C9 01      			cmp	#1
         01:CF50  F0 01      			beq	!+
         01:CF52  18         			clc
         01:CF53             	!:
 5883                        		__bfalse	.LL254
         01:CF53  B0 03 4C 14			bcc	.LL254
         01:CF57  D0          
 5884                        	
 5885                        		.dbg	line,	"include\routines_LEVELS.c", 1348; {
 5886                        	
 5887                        		.dbg	line,	"include\routines_LEVELS.c", 1349; // CALCULATE HOW MANY PIXELS THE PLAYER MOVED INTO THE GROUND //
 5888                        	
 5889                        		.dbg	line,	"include\routines_LEVELS.c", 1350; for(i=1; i<11 ; i++ )
 5890                        		__st.umiq	1, __update_PLAYER_end - 8  /* i */
         01:CF58  A9 01      			lda.l	#1
         01:CF5A  8D 02 23   			sta	__update_PLAYER_end - 8
 5891    01:CF5D             	.LL255:
 5892                        		__ld.umq	__update_PLAYER_end - 8  /* i */
         01:CF5D  AD 02 23   			lda	__update_PLAYER_end - 8
 5893                        		__ult_b.uiq	11
         01:CF60  C9 0B      			cmp	#11		; Subtract integer from A.
         01:CF62  6A         			ror	a		; CC if A < integer.
         01:CF63  49 80      			eor	#$80
         01:CF65  2A         			rol	a
 5894                        		__btrue		.LL257
         01:CF66  B0 08      			bcs	.LL257
 5895                        		__bra		.LL258
         01:CF68  4C 06 D0   			bra	.LL258
 5896    01:CF6B             	.LL256:
 5897                        		__inc.umq	__update_PLAYER_end - 8  /* i */
         01:CF6B  EE 02 23   			inc	__update_PLAYER_end - 8
 5898                        		__bra		.LL255
         01:CF6E  80 ED      			bra	.LL255
 5899    01:CF70             	.LL257:
 5900                        	
 5901                        		.dbg	line,	"include\routines_LEVELS.c", 1351; {
 5902                        	
 5903                        		.dbg	line,	"include\routines_LEVELS.c", 1352; if(player_axis == AXIS_RIGHT)
 5904                        		__not.um	_player_axis
         01:CF70  AD 0F 23   			lda	_player_axis
         01:CF73  18         			clc
         01:CF74  D0 01      			bne	!+
         01:CF76  38         			sec
         01:CF77             	!:
 5905                        		__bfalse	.LL259
         01:CF77  90 20      			bcc	.LL259
 5906                        	
 5907                        		.dbg	line,	"include\routines_LEVELS.c", 1353; {
 5908                        	
 5909                        		.dbg	line,	"include\routines_LEVELS.c", 1354; check_BG( 11 , i);
 5910                        		__ld.wi		11
         01:CF79  A9 0B      			lda.l	#11
         01:CF7B  C2         			cly
 5911                        		__pusharg.wr
         01:CF7C  A6 8D      			ldx	<__sp
         01:CF7E  CA         			dex
         01:CF7F  CA         			dex
         01:CF80  95 08      			sta.l	<__stack, x
         01:CF82  94 09      			sty.h	<__stack, x
         01:CF84  86 8D      			stx	<__sp
 5912                        		__ld.um		__update_PLAYER_end - 8  /* i */
         01:CF86  AD 02 23   			lda	__update_PLAYER_end - 8
         01:CF89  C2         			cly
 5913                        		__pusharg.wr
         01:CF8A  A6 8D      			ldx	<__sp
         01:CF8C  CA         			dex
         01:CF8D  CA         			dex
         01:CF8E  95 08      			sta.l	<__stack, x
         01:CF90  94 09      			sty.h	<__stack, x
         01:CF92  86 8D      			stx	<__sp
 5914                        		__call		_check_BG
         01:CF94  20 3B FF   			call	_check_BG
 5915                        	
 5916                        		.dbg	line,	"include\routines_LEVELS.c", 1355; }
 5917                        	
 5918                        		.dbg	line,	"include\routines_LEVELS.c", 1357; else
 5919                        		__bra		.LL260
         01:CF97  80 1E      			bra	.LL260
 5920    01:CF99             	.LL259:
 5921                        	
 5922                        		.dbg	line,	"include\routines_LEVELS.c", 1358; {
 5923                        	
 5924                        		.dbg	line,	"include\routines_LEVELS.c", 1359; check_BG( 10 , i);
 5925                        		__ld.wi		10
         01:CF99  A9 0A      			lda.l	#10
         01:CF9B  C2         			cly
 5926                        		__pusharg.wr
         01:CF9C  A6 8D      			ldx	<__sp
         01:CF9E  CA         			dex
         01:CF9F  CA         			dex
         01:CFA0  95 08      			sta.l	<__stack, x
         01:CFA2  94 09      			sty.h	<__stack, x
         01:CFA4  86 8D      			stx	<__sp
 5927                        		__ld.um		__update_PLAYER_end - 8  /* i */
         01:CFA6  AD 02 23   			lda	__update_PLAYER_end - 8
         01:CFA9  C2         			cly
 5928                        		__pusharg.wr
         01:CFAA  A6 8D      			ldx	<__sp
         01:CFAC  CA         			dex
         01:CFAD  CA         			dex
         01:CFAE  95 08      			sta.l	<__stack, x
         01:CFB0  94 09      			sty.h	<__stack, x
         01:CFB2  86 8D      			stx	<__sp
 5929                        		__call		_check_BG
         01:CFB4  20 3B FF   			call	_check_BG
 5930                        	
 5931                        		.dbg	line,	"include\routines_LEVELS.c", 1360; }
 5932    01:CFB7             	.LL260:
 5933                        	
 5934                        		.dbg	line,	"include\routines_LEVELS.c", 1363; if(map_blk_flag == TILE_EMPTY)
 5935                        		__not.um	_map_blk_flag
         01:CFB7  AD 82 28   			lda	_map_blk_flag
         01:CFBA  18         			clc
         01:CFBB  D0 01      			bne	!+
         01:CFBD  38         			sec
         01:CFBE             	!:
 5936                        		__bfalse	.LL261
         01:CFBE  90 AB      			bcc	.LL261
 5937                        	
 5938                        		.dbg	line,	"include\routines_LEVELS.c", 1364; {
 5939                        	
 5940                        		.dbg	line,	"include\routines_LEVELS.c", 1365; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
 5941                        		__st.wmiq	18432, _di
         01:CFC0  64 F0      			stz.l	_di
         01:CFC2  A9 48      			lda.h	#18432
         01:CFC4  85 F1      			sta.h	_di
 5942                        		__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
         01:CFC6  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:CFC8  85 EC      			sta.l	_bp
         01:CFCA  A9 7A      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:CFCC  85 ED      			sta.h	_bp
         01:CFCE  A9 0B      			lda	#bank(_tiles_SPR_PLAYER)
         01:CFD0  85 02      			sta	_bp_bank
 5943                        		__st.wmiq	256, _ax
         01:CFD2  64 F8      			stz.l	_ax
         01:CFD4  A9 01      			lda.h	#256
         01:CFD6  85 F9      			sta.h	_ax
 5944                        		 _load_vram.3
         01:CFD8  82         			clx				; Offset to PCE VDC.
         01:CFD9  20 77 FF   			call	load_vram_x
 5945                        	
 5946                        		.dbg	line,	"include\routines_LEVELS.c", 1367; player_pos_y -= (i - 1);
 5947                        		__ld.um		__update_PLAYER_end - 8  /* i */
         01:CFDC  AD 02 23   			lda	__update_PLAYER_end - 8
         01:CFDF  C2         			cly
 5948                        		__sub.wi	1
         01:CFE0  38         			sec
         01:CFE1  E9 01      			sbc.l	#1
         01:CFE3  B0 01      			bcs	!+
         01:CFE5  88         			dey
         01:CFE6             	!:
 5949                        		__isub_st.wmq	_player_pos_y
         01:CFE6  38         			sec
         01:CFE7  49 FF      			eor	#$FF
         01:CFE9  6D 15 23   			adc.l	_player_pos_y
         01:CFEC  8D 15 23   			sta.l	_player_pos_y
         01:CFEF  98         			tya
         01:CFF0  49 FF      			eor	#$FF
         01:CFF2  6D 16 23   			adc.h	_player_pos_y
         01:CFF5  8D 16 23   			sta.h	_player_pos_y
 5950                        	
 5951                        		.dbg	line,	"include\routines_LEVELS.c", 1368; spr_y(player_pos_y);
 5952                        		__ld.wm		_player_pos_y
         01:CFF8  AD 15 23   			lda.l	_player_pos_y
         01:CFFB  AC 16 23   			ldy.h	_player_pos_y
 5953                        		__call		_spr_y.1
         01:CFFE  20 19 E8   			call	_spr_y.1
 5954                        	
 5955                        		.dbg	line,	"include\routines_LEVELS.c", 1369; break;
 5956                        		__bra		.LL258
         01:D001  80 03      			bra	.LL258
 5957                        	
 5958                        		.dbg	line,	"include\routines_LEVELS.c", 1370; }
 5959                        	
 5960                        		.dbg	line,	"include\routines_LEVELS.c", 1372; }
 5961    01:D003             	.LL261	.alias		.LL256
 5962                        		__bra		.LL256
         01:D003  4C 6B CF   			bra	.LL256
 5963    01:D006             	.LL258:
 5964                        	
 5965                        		.dbg	line,	"include\routines_LEVELS.c", 1374; player_counter_anim = 1;
 5966                        		__st.umiq	1, _player_counter_anim
         01:D006  A9 01      			lda.l	#1
         01:D008  8D 11 23   			sta	_player_counter_anim
 5967                        	
 5968                        		.dbg	line,	"include\routines_LEVELS.c", 1375; player_index_jump = 0;
 5969                        		__st.umiq	0, _player_index_jump
         01:D00B  9C 12 23   			stz	_player_index_jump
 5970                        	
 5971                        		.dbg	line,	"include\routines_LEVELS.c", 1376; player_state = STATE_IDLE;
 5972                        		__st.umiq	0, _player_state
         01:D00E  9C 0E 23   			stz	_player_state
 5973                        	
 5974                        		.dbg	line,	"include\routines_LEVELS.c", 1377; return;
 5975                        		__bra		.LL98
         01:D011  4C A1 D0   			bra	.LL98
 5976                        	
 5977                        		.dbg	line,	"include\routines_LEVELS.c", 1378; }
 5978                        	
 5979                        		.dbg	line,	"include\routines_LEVELS.c", 1381; if(player_index_jump > 18)
 5980    01:D014             	.LL254:
 5981                        		__ld.umq	_player_index_jump
         01:D014  AD 12 23   			lda	_player_index_jump
 5982                        		__ugt_b.uiq	18
         01:D017  18         			clc			; Subtract integer+1 from A.
         01:D018  E9 12      			sbc	#18		; CS if A > integer.
 5983                        		__bfalse	.LL262
         01:D01A  B0 03 4C A1			bcc	.LL262
         01:D01E  D0          
 5984                        	
 5985                        		.dbg	line,	"include\routines_LEVELS.c", 1382; {
 5986                        	
 5987                        		.dbg	line,	"include\routines_LEVELS.c", 1383; // CHECK COLLISION WITH LADDERS //
 5988                        	
 5989                        		.dbg	line,	"include\routines_LEVELS.c", 1384; check_LADDER( 16 , 8 );
 5990                        		__ld.wi		16
         01:D01F  A9 10      			lda.l	#16
         01:D021  C2         			cly
 5991                        		__pusharg.wr
         01:D022  A6 8D      			ldx	<__sp
         01:D024  CA         			dex
         01:D025  CA         			dex
         01:D026  95 08      			sta.l	<__stack, x
         01:D028  94 09      			sty.h	<__stack, x
         01:D02A  86 8D      			stx	<__sp
 5992                        		__ld.wi		8
         01:D02C  A9 08      			lda.l	#8
         01:D02E  C2         			cly
 5993                        		__pusharg.wr
         01:D02F  A6 8D      			ldx	<__sp
         01:D031  CA         			dex
         01:D032  CA         			dex
         01:D033  95 08      			sta.l	<__stack, x
         01:D035  94 09      			sty.h	<__stack, x
         01:D037  86 8D      			stx	<__sp
 5994                        		__call		_check_LADDER
         01:D039  20 81 FF   			call	_check_LADDER
 5995                        	
 5996                        		.dbg	line,	"include\routines_LEVELS.c", 1386; // IF PLAYER HITS THE LADDER //
 5997                        	
 5998                        		.dbg	line,	"include\routines_LEVELS.c", 1387; if(map_blk_flag == TILE_LADDER)
 5999                        		__ld.umq	_map_blk_flag
         01:D03C  AD 82 28   			lda	_map_blk_flag
 6000                        		__equ_b.uiq	2
         01:D03F  C9 02      			cmp	#2
         01:D041  F0 01      			beq	!+
         01:D043  18         			clc
         01:D044             	!:
 6001                        		__bfalse	.LL263
         01:D044  90 5B      			bcc	.LL263
 6002                        	
 6003                        		.dbg	line,	"include\routines_LEVELS.c", 1388; {
 6004                        	
 6005                        		.dbg	line,	"include\routines_LEVELS.c", 1389; // CAMERA GOES 8 PX BACKWARD //
 6006                        	
 6007                        		.dbg	line,	"include\routines_LEVELS.c", 1390; sgx_map_pxl_x = ( (sgx_map_pxl_x >> 3) << 3 );
 6008                        		__ld.wm		_sgx_map_pxl_x
         01:D046  AD 61 23   			lda.l	_sgx_map_pxl_x
         01:D049  AC 62 23   			ldy.h	_sgx_map_pxl_x
 6009                        		__lsr.wi	3
         01:D04C  84 00      			sty	__temp
         01:D04E  20 3A E2   			jsr	lsrw3
 6010                        		__asl.wi	3
         01:D051  84 00      			sty	__temp
         01:D053  20 D7 E1   			jsr	aslw3
 6011                        		__st.wmq	_sgx_map_pxl_x
         01:D056  8D 61 23   			sta.l	_sgx_map_pxl_x
         01:D059  8C 62 23   			sty.h	_sgx_map_pxl_x
 6012                        	
 6013                        		.dbg	line,	"include\routines_LEVELS.c", 1392; // SO WE UPDATE THE MAP //
 6014                        	
 6015                        		.dbg	line,	"include\routines_LEVELS.c", 1393; sgx_scroll_map();
 6016                        		__call		_sgx_scroll_map
         01:D05C  20 95 FF   			call	_sgx_scroll_map
 6017                        	
 6018                        		.dbg	line,	"include\routines_LEVELS.c", 1395; // CHECK IF THE PLAYER STANDS RIGHT TO THE LADDER //
 6019                        	
 6020                        		.dbg	line,	"include\routines_LEVELS.c", 1396; check_LADDER( 31 , 8 );
 6021                        		__ld.wi		31
         01:D05F  A9 1F      			lda.l	#31
         01:D061  C2         			cly
 6022                        		__pusharg.wr
         01:D062  A6 8D      			ldx	<__sp
         01:D064  CA         			dex
         01:D065  CA         			dex
         01:D066  95 08      			sta.l	<__stack, x
         01:D068  94 09      			sty.h	<__stack, x
         01:D06A  86 8D      			stx	<__sp
 6023                        		__ld.wi		8
         01:D06C  A9 08      			lda.l	#8
         01:D06E  C2         			cly
 6024                        		__pusharg.wr
         01:D06F  A6 8D      			ldx	<__sp
         01:D071  CA         			dex
         01:D072  CA         			dex
         01:D073  95 08      			sta.l	<__stack, x
         01:D075  94 09      			sty.h	<__stack, x
         01:D077  86 8D      			stx	<__sp
 6025                        		__call		_check_LADDER
         01:D079  20 81 FF   			call	_check_LADDER
 6026                        	
 6027                        		.dbg	line,	"include\routines_LEVELS.c", 1398; if(map_blk_flag == TILE_LADDER)
 6028                        		__ld.umq	_map_blk_flag
         01:D07C  AD 82 28   			lda	_map_blk_flag
 6029                        		__equ_b.uiq	2
         01:D07F  C9 02      			cmp	#2
         01:D081  F0 01      			beq	!+
         01:D083  18         			clc
         01:D084             	!:
 6030                        		__bfalse	.LL264
         01:D084  90 0E      			bcc	.LL264
 6031                        	
 6032                        		.dbg	line,	"include\routines_LEVELS.c", 1399; {
 6033                        	
 6034                        		.dbg	line,	"include\routines_LEVELS.c", 1400; sgx_map_pxl_x += 8;
 6035                        		__add_st.wmiq	8, _sgx_map_pxl_x
         01:D086  18         			clc
         01:D087  AD 61 23   			lda.l	_sgx_map_pxl_x
         01:D08A  69 08      			adc.l	#8
         01:D08C  8D 61 23   			sta.l	_sgx_map_pxl_x
         01:D08F  90 03      			bcc	!+
         01:D091  EE 62 23   			inc.h	_sgx_map_pxl_x
         01:D094             	!:
 6036                        	
 6037                        		.dbg	line,	"include\routines_LEVELS.c", 1401; }
 6038                        	
 6039                        		.dbg	line,	"include\routines_LEVELS.c", 1403; player_counter_anim = 1;
 6040    01:D094             	.LL264:
 6041                        		__st.umiq	1, _player_counter_anim
         01:D094  A9 01      			lda.l	#1
         01:D096  8D 11 23   			sta	_player_counter_anim
 6042                        	
 6043                        		.dbg	line,	"include\routines_LEVELS.c", 1404; player_index_jump = 0;
 6044                        		__st.umiq	0, _player_index_jump
         01:D099  9C 12 23   			stz	_player_index_jump
 6045                        	
 6046                        		.dbg	line,	"include\routines_LEVELS.c", 1405; player_state = STATE_HANG;
 6047                        		__st.umiq	10, _player_state
         01:D09C  A9 0A      			lda.l	#10
         01:D09E  8D 0E 23   			sta	_player_state
 6048                        	
 6049                        		.dbg	line,	"include\routines_LEVELS.c", 1406; }
 6050                        	
 6051                        		.dbg	line,	"include\routines_LEVELS.c", 1407; }
 6052    01:D0A1             	.LL263:
 6053                        	
 6054                        		.dbg	line,	"include\routines_LEVELS.c", 1408; }
 6055    01:D0A1             	.LL262:
 6056                        	
 6057                        		.dbg	line,	"include\routines_LEVELS.c", 1409; }
 6058    01:D0A1             	.LL249:
 6059    01:D0A1             	.LL248:
 6060    01:D0A1             	.LL234:
 6061    01:D0A1             	.LL220:
 6062    01:D0A1             	.LL217:
 6063    01:D0A1             	.LL190:
 6064    01:D0A1             	.LL187:
 6065    01:D0A1             	.LL165:
 6066    01:D0A1             	.LL143:
 6067    01:D0A1             	.LL127:
 6068    01:D0A1             	.LL101:
 6069    01:D0A1             	.LL98:
 6070                        		__return	0
         01:D0A1  4C EF FF   			jmp	leave_proc
 6071                        		.dbg	clear
 6072                        		.endp
 6073               7CA0     		.data
 6074               2302     		.bss
 6075    F8:2302             	__update_PLAYER_loc:
 6076    F8:2302             			ds	8
 6077    F8:230A             	__update_PLAYER_end:
 6078               E309     		.code
 6079                        		.pceas
 6080                        	
 6081                        		.dbg	line,	"main.c", 22; #include "include/init.c"
 6082                        		.dbg	line,	"include\init.c", 1; #include "huc.h"
 6083                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
 6084                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
 6085                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
 6086                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
 6087                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
 6088                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
 6089                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
 6090                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
 6091                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
 6092                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
 6093                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
 6094                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 6095                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 6096                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 6097                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
 6098                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
 6099                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
 6100                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
 6101                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
 6102                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
 6103                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
 6104                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
 6105                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
 6106                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
 6107                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
 6108                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
 6109                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
 6110                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
 6111                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
 6112                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
 6113                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
 6114                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
 6115                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
 6116                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
 6117                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
 6118                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
 6119                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
 6120                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
 6121                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
 6122                        		.dbg	line,	"include\init.c", 2; #include "hucc-scroll.h"
 6123                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 1; #ifndef _hucc_scroll_h
 6124                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 2; #define _hucc_scroll_h
 6125                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 4; /****************************************************************************
 6126                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 5; ; ***************************************************************************
 6127                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 6; ;
 6128                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 7; ; hucc-scroll.h
 6129                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 8; ;
 6130                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 9; ; Routines for a fast split-screen scrolling system.
 6131                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 10; ;
 6132                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 11; ; Copyright John Brandwood 2024.
 6133                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 12; ;
 6134                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 6135                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 6136                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 6137                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 16; ;
 6138                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 17; ; ***************************************************************************
 6139                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 18; ; ***************************************************************************
 6140                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 19; ;
 6141                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 20; ; The maximum number of splits for each screen layer is set in your project's
 6142                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 21; ; "hucc-config.inc" file, with the library having a limit of 128-per-layer.
 6143                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 22; ;
 6144                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 23; ; Your first active split must be defined to start at screen line 0, and then
 6145                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 24; ; the rest of the active splits must be in increasing line order to match the
 6146                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 25; ; way that the PC Engine displays the output image.
 6147                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 26; ;
 6148                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 27; ; You can have disabled splits interleaved with your active splits.
 6149                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 28; ;
 6150                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 29; ; Splits that are normally disabled can be used to create full screen effects
 6151                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 30; ; such as bouncing the screen up and down by adding blank areas at the top or
 6152                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 31; ; bottom of the screen, and then rapidly changing the height of those areas.
 6153                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 32; ;
 6154                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 33; ; ***************************************************************************
 6155                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 34; ; **************************************************************************/
 6156                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 36; // *************
 6157                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 37; // VDC bits for display_flags ...
 6158                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 38; // *************
 6159                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 40; #ifndef BKG_OFF
 6160                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 41; #define BKG_OFF 0x00
 6161                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 42; #endif
 6162                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 44; #ifndef SPR_OFF
 6163                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 45; #define SPR_OFF 0x00
 6164                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 46; #endif
 6165                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 48; #ifndef BKG_ON
 6166                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 49; #define BKG_ON 0x80
 6167                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 50; #endif
 6168                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 52; #ifndef SPR_ON
 6169                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 53; #define SPR_ON 0x40
 6170                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 54; #endif
 6171                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 56; // *************
 6172                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 57; // Functions in hucc-scroll.asm ...
 6173                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 58; // *************
 6174                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 60; #ifdef __HUCC__
 6175                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 62; #asmdef	HUCC_USES_NEW_SCROLL 1
 6176                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 64; extern void __fastcall scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
 6177                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 65; extern void __fastcall sgx_scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
 6178                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 67; extern void __fastcall disable_split( unsigned char index<acc> );
 6179                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 68; extern void __fastcall sgx_disable_split( unsigned char index<acc> );
 6180                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 70; extern void __fastcall __macro disable_all_splits( void );
 6181                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 71; extern void __fastcall __macro sgx_disable_all_splits( void );
 6182                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 73; #asm
 6183                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 74; .macro	_disable_all_splits
 6184                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 75; ldy	#HUCC_PCE_SPLITS - 1
 6185                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 76; !loop:		tya
 6186                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 77; call	_disable_split.1
 6187                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 78; dey
 6188                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 79; bpl	!loop-
 6189                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 80; .endm
 6190                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 82; .macro	_sgx_disable_all_splits
 6191                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 83; ldy	#HUCC_SGX_SPLITS - 1
 6192                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 84; !loop:		tya
 6193                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 85; call	_sgx_disable_split.1
 6194                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 86; dey
 6195                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 87; bpl	!loop-
 6196                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 88; .endm
 6197                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 89; #endasm
 6198                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 91; #endif // __HUCC__
 6199                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 93; #endif // _hucc_scroll_h
 6200                        		.dbg	line,	"include\init.c", 3; #include "hucc-chrmap.h"
 6201                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 1; #ifndef _hucc_chrmap_h
 6202                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 2; #define _hucc_chrmap_h
 6203                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 4; /****************************************************************************
 6204                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 5; ; ***************************************************************************
 6205                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 6; ;
 6206                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 7; ; hucc-chrmap.h
 6207                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 8; ;
 6208                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 9; ; A simple map system based on 8x8 characters (aka "tiles") in BAT format.
 6209                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 10; ;
 6210                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 11; ; Copyright John Brandwood 2025.
 6211                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 12; ;
 6212                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 6213                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 6214                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 6215                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 16; ;
 6216                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 17; ; ***************************************************************************
 6217                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 18; ; ***************************************************************************
 6218                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 19; ;
 6219                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 20; ; The maximum X and Y size for chrmaps is 256 characters (2048 pixels).
 6220                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 21; ;
 6221                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 22; ; The maximum total size for a chrmap is 16KBytes, which allows for maps up
 6222                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 23; ; to 256x32 tiles (2048x256 pixels).
 6223                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 24; ;
 6224                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 25; ; ***************************************************************************
 6225                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 26; ; **************************************************************************/
 6226                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 28; // *************
 6227                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 29; // This code extends the blkmap library ...
 6228                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 30; // *************
 6229                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 32; #include "hucc-blkmap.h"
 6230                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 34; // *************
 6231                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 35; // Functions in chrmap.asm ...
 6232                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 36; // *************
 6233                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 38; #ifdef __HUCC__
 6234                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 40; #asmdef	HUCC_USES_CHRMAP 1
 6235                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 42; extern void __fastcall __nop set_chrmap( unsigned char __far *chrmap<vdc_map_bank:vdc_map_addr>, unsigned char tiles_w<vdc_map_line_w> );
 6236                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 44; extern void __fastcall draw_bat( void );
 6237                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 45; extern void __fastcall scroll_bat( void );
 6238                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 47; extern void __fastcall blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 6239                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 49; #ifdef _SGX
 6240                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 51; extern void __fastcall __nop sgx_set_chrmap( unsigned char __far *chrmap<sgx_map_bank:sgx_map_addr>, unsigned char tiles_w<sgx_map_line_w> );
 6241                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 53; extern void __fastcall sgx_draw_bat( void );
 6242                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 54; extern void __fastcall sgx_scroll_bat( void );
 6243                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 56; extern void __fastcall sgx_blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 6244                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 58; #endif
 6245                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 60; #endif // __HUCC__
 6246                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 62; #endif // _hucc_chrmap_h
 6247                        		.dbg	line,	"include\init.c", 4; #include "hucc-blkmap.h"
 6248                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 1; #ifndef _hucc_blkmap_h
 6249                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 2; #define _hucc_blkmap_h
 6250                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 4; /****************************************************************************
 6251                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 5; ; ***************************************************************************
 6252                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 6; ;
 6253                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 7; ; hucc-blkmap.h
 6254                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 8; ;
 6255                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 9; ; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
 6256                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 10; ;
 6257                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 11; ; Copyright John Brandwood 2025.
 6258                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 12; ;
 6259                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 6260                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 6261                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 6262                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 16; ;
 6263                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 17; ; ***************************************************************************
 6264                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 18; ; ***************************************************************************
 6265                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 19; ;
 6266                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 20; ; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
 6267                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 21; ;
 6268                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 22; ; The maximum total size for a blkmap is 16KBytes, which allows for maps up
 6269                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 23; ; to 128x128 blocks (2048x2048 pixels).
 6270                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 24; ;
 6271                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 25; ; Huge multi-screen blkmaps are also supported (optionally).
 6272                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 26; ;
 6273                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 27; ; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
 6274                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 28; ;
 6275                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 29; ; The maximum total size for a multi-screen map is 8KBytes, which allows for
 6276                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 30; ; a total of 1024 screens.
 6277                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 31; ;
 6278                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 32; ; ***************************************************************************
 6279                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 33; ; **************************************************************************/
 6280                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 35; // *************
 6281                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 36; // Functions in blkmap.asm ...
 6282                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 37; // *************
 6283                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 39; #ifdef __HUCC__
 6284                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 41; #asmdef	HUCC_USES_BLKMAP 1
 6285                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 43; // Current top-left of drawn map in pixels.
 6286                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 44; extern unsigned int   vdc_map_pxl_x;
 6287                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 45; extern unsigned int   vdc_map_pxl_y;
 6288                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 47; // Width and height to draw/scroll in characters (not tiles).
 6289                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 48; extern unsigned char  vdc_map_draw_w;
 6290                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 49; extern unsigned char  vdc_map_draw_h;
 6291                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 51; // Width of map (or multi-screen BAT) in tiles.
 6292                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 52; extern unsigned char  vdc_map_line_w;
 6293                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 54; // Width of map in screens (if multi-screen map).
 6294                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 55; extern unsigned char  vdc_map_scrn_w;
 6295                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 57; // Extra information returned by get_map_block() and sgx_get_map_block(),
 6296                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 58; // which are the collision flags and the mask/overlay sprite for the BLK.
 6297                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 59; extern unsigned char  map_blk_flag;
 6298                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 60; extern unsigned char  map_blk_mask;
 6299                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 62; extern unsigned char  vdc_scr_bank;
 6300                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 63; extern unsigned char *vdc_scr_addr;
 6301                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 65; extern unsigned char  vdc_map_bank;
 6302                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 66; extern unsigned char *vdc_map_addr;
 6303                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 68; extern unsigned char  vdc_blk_bank;
 6304                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 69; extern unsigned char *vdc_blk_addr;
 6305                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 71; extern unsigned char  vdc_tbl_bank;
 6306                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 72; extern unsigned char *vdc_tbl_addr;
 6307                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 74; extern void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blocks<_al> );
 6308                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 75; extern void __fastcall __macro set_blkmap( unsigned char __far *blk_map<vdc_map_bank:vdc_map_addr>, unsigned char blocks_w<vdc_map_line_w> );
 6309                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 76; extern void __fastcall __macro set_multimap( unsigned char __far *multi_map<vdc_scr_bank:vdc_scr_addr>, unsigned char screens_w<vdc_map_scrn_w> );
 6310                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 78; extern void __fastcall draw_map( void );
 6311                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 79; extern void __fastcall scroll_map( void );
 6312                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 81; extern void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 6313                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 83; extern unsigned char __fastcall get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 6314                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 85; #asm
 6315                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 86; .macro	_set_blkmap.2
 6316                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 87; stz	vdc_scr_bank
 6317                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 88; .endm
 6318                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 90; .macro	_set_multimap.2
 6319                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 91; lda	vdc_bat_width
 6320                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 92; lsr	a
 6321                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 93; sta	vdc_map_line_w
 6322                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 94; .endm
 6323                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 96; .macro	SCREEN
 6324                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 97; db	(((\1) & $1FFF) | $6000) >> 8, bank(\1)
 6325                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 98; db	(((\2) & $1FFF) | $4000) >> 8, bank(\2)
 6326                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 99; db	(((\3) & $1FFF) | $6000) >> 8, bank(\3)
 6327                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 100; dw	(\4)
 6328                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 101; .endm
 6329                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 102; #endasm
 6330                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 104; #ifdef _SGX
 6331                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 106; // Current top-left of drawn map in pixels.
 6332                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 107; extern unsigned int   sgx_map_pxl_x;
 6333                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 108; extern unsigned int   sgx_map_pxl_y;
 6334                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 110; // Width and height to draw/scroll in characters (not tiles).
 6335                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 111; extern unsigned char  sgx_map_draw_w;
 6336                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 112; extern unsigned char  sgx_map_draw_h;
 6337                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 114; // Width of map (or multi-screen BAT) in tiles.
 6338                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 115; extern unsigned char  sgx_map_line_w;
 6339                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 117; // Width of map in screens (if multi-screen map).
 6340                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 118; extern unsigned char  sgx_map_scrn_w;
 6341                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 120; extern unsigned char  sgx_scr_bank;
 6342                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 121; extern unsigned char *sgx_scr_addr;
 6343                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 123; extern unsigned char  sgx_map_bank;
 6344                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 124; extern unsigned char *sgx_map_addr;
 6345                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 126; extern unsigned char  sgx_blk_bank;
 6346                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 127; extern unsigned char *sgx_blk_addr;
 6347                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 129; extern unsigned char  sgx_tbl_bank;
 6348                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 130; extern unsigned char *sgx_tbl_addr;
 6349                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 132; extern void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blocks<_al> );
 6350                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 133; extern void __fastcall __macro sgx_set_blkmap( unsigned char __far *blk_map<sgx_map_bank:sgx_map_addr>, unsigned char blocks_w<sgx_map_line_w> );
 6351                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 134; extern void __fastcall __macro sgx_set_multimap( unsigned char __far *multi_map<sgx_scr_bank:sgx_scr_addr>, unsigned char screens_w<sgx_map_scrn_w> );
 6352                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 136; extern void __fastcall sgx_draw_map( void );
 6353                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 137; extern void __fastcall sgx_scroll_map( void );
 6354                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 139; extern void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 6355                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 141; extern unsigned char __fastcall sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 6356                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 143; #asm
 6357                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 144; .macro	_sgx_set_blkmap.2
 6358                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 145; stz	sgx_scr_bank
 6359                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 146; .endm
 6360                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 148; .macro	_sgx_set_multimap.2
 6361                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 149; lda	sgx_bat_width
 6362                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 150; lsr	a
 6363                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 151; sta	sgx_map_line_w
 6364                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 152; .endm
 6365                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 153; #endasm
 6366                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 155; #endif
 6367                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 157; #endif // __HUCC__
 6368                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 159; #endif // _hucc_blkmap_h
 6369                        		.dbg	line,	"include\init.c", 13; void init_VARIABLES()
 6370                        		.dbg	line,	"include\init.c", 14; {
 6371                        	;***********************
 6372                        	;***********************
 6373                        	
 6374                        		.hucc
 6375    02:C701             		.proc		_init_VARIABLES
 6376                        		__enter		_init_VARIABLES
 6377                        	
 6378                        		.dbg	line,	"include\init.c", 15; sequence_id = SEQUENCE_GAME;
 6379                        		__st.umiq	2, _sequence_id
         02:C701  A9 02      			lda.l	#2
         02:C703  8D 0A 23   			sta	_sequence_id
 6380                        	
 6381                        		.dbg	line,	"include\init.c", 17; level_id = 1;
 6382                        		__st.umiq	1, _level_id
         02:C706  A9 01      			lda.l	#1
         02:C708  8D 0C 23   			sta	_level_id
 6383                        	
 6384                        		.dbg	line,	"include\init.c", 19; sequence_loaded = FALSE;
 6385                        		__st.umiq	0, _sequence_loaded
         02:C70B  9C 0B 23   			stz	_sequence_loaded
 6386                        	
 6387                        		.dbg	line,	"include\init.c", 20; }
 6388    02:C70E             	.LL265:
 6389                        		__return	0
         02:C70E  4C EF FF   			jmp	leave_proc
 6390                        		.dbg	clear
 6391                        		.endp
 6392                        		.pceas
 6393                        	
 6394                        		.dbg	line,	"include\init.c", 23; init_PLAYER()
 6395                        		.dbg	line,	"include\init.c", 24; {
 6396                        	;***********************
 6397                        	;***********************
 6398                        	
 6399                        		.hucc
 6400    02:C6E7             		.proc		_init_PLAYER
 6401                        		__enter		_init_PLAYER
 6402                        	
 6403                        		.dbg	line,	"include\init.c", 25; player_id = 0;
 6404                        		__st.umiq	0, _player_id
         02:C6E7  9C 0D 23   			stz	_player_id
 6405                        	
 6406                        		.dbg	line,	"include\init.c", 26; player_axis = AXIS_RIGHT;
 6407                        		__st.umiq	0, _player_axis
         02:C6EA  9C 0F 23   			stz	_player_axis
 6408                        	
 6409                        		.dbg	line,	"include\init.c", 27; player_previous_axis = player_axis;
 6410                        		__ld.um		_player_axis
         02:C6ED  AD 0F 23   			lda	_player_axis
         02:C6F0  C2         			cly
 6411                        		__st.umq	_player_previous_axis
         02:C6F1  8D 10 23   			sta	_player_previous_axis
 6412                        	
 6413                        		.dbg	line,	"include\init.c", 28; player_counter_anim = 0;
 6414                        		__st.umiq	0, _player_counter_anim
         02:C6F4  9C 11 23   			stz	_player_counter_anim
 6415                        	
 6416                        		.dbg	line,	"include\init.c", 29; player_index_jump = 0;
 6417                        		__st.umiq	0, _player_index_jump
         02:C6F7  9C 12 23   			stz	_player_index_jump
 6418                        	
 6419                        		.dbg	line,	"include\init.c", 30; player_state = STATE_IDLE;
 6420                        		__st.umiq	0, _player_state
         02:C6FA  9C 0E 23   			stz	_player_state
 6421                        	
 6422                        		.dbg	line,	"include\init.c", 31; }
 6423    02:C6FD             	.LL266:
 6424                        		__return	1
         02:C6FD  AA         			tax
         02:C6FE  4C EF FF   			jmp	leave_proc
 6425                        		.dbg	clear
 6426                        		.endp
 6427                        		.pceas
 6428                        	
 6429                        		.dbg	line,	"include\init.c", 35; void init_LEVEL()
 6430                        		.dbg	line,	"include\init.c", 36; {
 6431                        	;***********************
 6432                        	;***********************
 6433                        	
 6434                        		.hucc
 6435    01:DCEC             		.proc		_init_LEVEL
 6436                        		__enter		_init_LEVEL
 6437                        	
 6438                        		.dbg	line,	"include\init.c", 37; if(level_id == 1)
 6439                        		__ld.umq	_level_id
         01:DCEC  AD 0C 23   			lda	_level_id
 6440                        		__equ_b.uiq	1
         01:DCEF  C9 01      			cmp	#1
         01:DCF1  F0 01      			beq	!+
         01:DCF3  18         			clc
         01:DCF4             	!:
 6441                        		__bfalse	.LL268
         01:DCF4  B0 03 4C C6			bcc	.LL268
         01:DCF8  DF          
 6442                        	
 6443                        		.dbg	line,	"include\init.c", 38; {
 6444                        	
 6445                        		.dbg	line,	"include\init.c", 39; // VSYNC //
 6446                        	
 6447                        		.dbg	line,	"include\init.c", 40; vsync();
 6448                        		__call		_vsync
         01:DCF9  20 09 E3   			call	_vsync
 6449                        	
 6450                        		.dbg	line,	"include\init.c", 42; // LOAD DEFAULT FONT //
 6451                        	
 6452                        		.dbg	line,	"include\init.c", 43; load_default_font();
 6453                        		 _load_default_font
         01:DCFC  82         			clx				; Offset to PCE VDC.
         01:DCFD  20 C7 FF   			call	huc_monofont_x
 6454                        	
 6455                        		.dbg	line,	"include\init.c", 48; // SET VDC 1 SCREEN SIZE (IN TILES) - 64x32 = 512x256 PIXELS
 6456                        	
 6457                        		.dbg	line,	"include\init.c", 49; set_screen_size(SCR_SIZE_64x32);
 6458                        		__st.umiq	1, _al
         01:DD00  A9 01      			lda.l	#1
         01:DD02  85 F8      			sta	_al
 6459                        		__call		_set_screen_size.1
         01:DD04  20 1D FF   			call	_set_screen_size.1
 6460                        	
 6461                        		.dbg	line,	"include\init.c", 52; // SET VDC 2 SCREEN SIZE (IN TILES) - 64x32 = 512x256 PIXELS
 6462                        	
 6463                        		.dbg	line,	"include\init.c", 53; sgx_set_screen_size(SCR_SIZE_64x32);
 6464                        		__st.umiq	1, _al
         01:DD07  A9 01      			lda.l	#1
         01:DD09  85 F8      			sta	_al
 6465                        		__call		_sgx_set_screen_size.1
         01:DD0B  20 13 FF   			call	_sgx_set_screen_size.1
 6466                        	
 6467                        		.dbg	line,	"include\init.c", 56; // INIT SPRITE ATTRIBUTE TABLE //
 6468                        	
 6469                        		.dbg	line,	"include\init.c", 57; init_satb();
 6470                        		__call		_init_satb
         01:DD0E  20 B7 E7   			call	_init_satb
 6471                        	
 6472                        		.dbg	line,	"include\init.c", 62; //**************************************************************************************//
 6473                        	
 6474                        		.dbg	line,	"include\init.c", 63; //                                                                                      //
 6475                        	
 6476                        		.dbg	line,	"include\init.c", 64; //                                        VDC 2                                         //
 6477                        	
 6478                        		.dbg	line,	"include\init.c", 65; //                                                                                      //
 6479                        	
 6480                        		.dbg	line,	"include\init.c", 66; //**************************************************************************************//
 6481                        	
 6482                        		.dbg	line,	"include\init.c", 68; //--------------------------------------------------------------------------------------//
 6483                        	
 6484                        		.dbg	line,	"include\init.c", 69; //                                    LOAD TILESET                                      //
 6485                        	
 6486                        		.dbg	line,	"include\init.c", 70; //--------------------------------------------------------------------------------------//
 6487                        	
 6488                        		.dbg	line,	"include\init.c", 72; sgx_load_vram( 0x1000, tileset_LV1_BG_B, SIZEOF(tileset_LV1_BG_B) >> 1 );
 6489                        		__st.wmiq	4096, _di
         01:DD11  64 F0      			stz.l	_di
         01:DD13  A9 10      			lda.h	#4096
         01:DD15  85 F1      			sta.h	_di
 6490                        		__farptr	_tileset_LV1_BG_B, _bp_bank, _bp
         01:DD17  A9 80      			lda.l	#$6000 + ($1FFF & (_tileset_LV1_BG_B))
         01:DD19  85 EC      			sta.l	_bp
         01:DD1B  A9 6D      			lda.h	#$6000 + ($1FFF & (_tileset_LV1_BG_B))
         01:DD1D  85 ED      			sta.h	_bp
         01:DD1F  A9 03      			lda	#bank(_tileset_LV1_BG_B)
         01:DD21  85 02      			sta	_bp_bank
 6491                        		__ld.wi		___sizeof__tileset_LV1_BG_B
         01:DD23  A9 E0      			lda.l	#___sizeof__tileset_LV1_BG_B
         01:DD25  A0 72      			ldy.h	#___sizeof__tileset_LV1_BG_B
 6492                        		__lsr.wi	1
         01:DD27  42         			say
         01:DD28  4A         			lsr	a
         01:DD29  42         			say
         01:DD2A  6A         			ror	a
 6493                        		__st.wmq	_ax
         01:DD2B  85 F8      			sta.l	_ax
         01:DD2D  84 F9      			sty.h	_ax
 6494                        		 _sgx_load_vram.3
         01:DD2F  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
         01:DD31  20 77 FF   			call	load_vram_x
 6495                        	
 6496                        		.dbg	line,	"include\init.c", 75; //--------------------------------------------------------------------------------------//
 6497                        	
 6498                        		.dbg	line,	"include\init.c", 76; //                               LOAD WALL & DOOR TILES                                 //
 6499                        	
 6500                        		.dbg	line,	"include\init.c", 77; //--------------------------------------------------------------------------------------//
 6501                        	
 6502                        		.dbg	line,	"include\init.c", 79; sgx_load_vram( LV1_WALL_VRAM_ADR, tileset_LV1_WALL, SIZEOF(tileset_LV1_WALL) >> 1 );
 6503                        		__st.wmiq	4096, _di
         01:DD34  64 F0      			stz.l	_di
         01:DD36  A9 10      			lda.h	#4096
         01:DD38  85 F1      			sta.h	_di
 6504                        		__farptr	_tileset_LV1_WALL, _bp_bank, _bp
         01:DD3A  A9 00      			lda.l	#$6000 + ($1FFF & (_tileset_LV1_WALL))
         01:DD3C  85 EC      			sta.l	_bp
         01:DD3E  A9 60      			lda.h	#$6000 + ($1FFF & (_tileset_LV1_WALL))
         01:DD40  85 ED      			sta.h	_bp
         01:DD42  A9 03      			lda	#bank(_tileset_LV1_WALL)
         01:DD44  85 02      			sta	_bp_bank
 6505                        		__ld.wi		___sizeof__tileset_LV1_WALL
         01:DD46  A9 00      			lda.l	#___sizeof__tileset_LV1_WALL
         01:DD48  A0 02      			ldy.h	#___sizeof__tileset_LV1_WALL
 6506                        		__lsr.wi	1
         01:DD4A  42         			say
         01:DD4B  4A         			lsr	a
         01:DD4C  42         			say
         01:DD4D  6A         			ror	a
 6507                        		__st.wmq	_ax
         01:DD4E  85 F8      			sta.l	_ax
         01:DD50  84 F9      			sty.h	_ax
 6508                        		 _sgx_load_vram.3
         01:DD52  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
         01:DD54  20 77 FF   			call	load_vram_x
 6509                        	
 6510                        		.dbg	line,	"include\init.c", 80; sgx_load_vram( LV1_DOOR_VRAM_ADR, tileset_LV1_DOOR_OPEN, SIZEOF(tileset_LV1_DOOR_OPEN) >> 1 );
 6511                        		__st.wmiq	4352, _di
         01:DD57  64 F0      			stz.l	_di
         01:DD59  A9 11      			lda.h	#4352
         01:DD5B  85 F1      			sta.h	_di
 6512                        		__farptr	_tileset_LV1_DOOR_OPEN, _bp_bank, _bp
         01:DD5D  A9 00      			lda.l	#$6000 + ($1FFF & (_tileset_LV1_DOOR_OPEN))
         01:DD5F  85 EC      			sta.l	_bp
         01:DD61  A9 62      			lda.h	#$6000 + ($1FFF & (_tileset_LV1_DOOR_OPEN))
         01:DD63  85 ED      			sta.h	_bp
         01:DD65  A9 03      			lda	#bank(_tileset_LV1_DOOR_OPEN)
         01:DD67  85 02      			sta	_bp_bank
 6513                        		__ld.wi		___sizeof__tileset_LV1_DOOR_OPEN
         01:DD69  A9 00      			lda.l	#___sizeof__tileset_LV1_DOOR_OPEN
         01:DD6B  A0 03      			ldy.h	#___sizeof__tileset_LV1_DOOR_OPEN
 6514                        		__lsr.wi	1
         01:DD6D  42         			say
         01:DD6E  4A         			lsr	a
         01:DD6F  42         			say
         01:DD70  6A         			ror	a
 6515                        		__st.wmq	_ax
         01:DD71  85 F8      			sta.l	_ax
         01:DD73  84 F9      			sty.h	_ax
 6516                        		 _sgx_load_vram.3
         01:DD75  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
         01:DD77  20 77 FF   			call	load_vram_x
 6517                        	
 6518                        		.dbg	line,	"include\init.c", 83; //--------------------------------------------------------------------------------------//
 6519                        	
 6520                        		.dbg	line,	"include\init.c", 84; //                                     SET MULTIMAP                                     //
 6521                        	
 6522                        		.dbg	line,	"include\init.c", 85; //--------------------------------------------------------------------------------------//
 6523                        	
 6524                        		.dbg	line,	"include\init.c", 87; // multimap is 2 screens wide //
 6525                        	
 6526                        		.dbg	line,	"include\init.c", 88; sgx_set_multimap( multimap_LV1_BG_B , 5 );
 6527                        		__farptr	_multimap_LV1_BG_B, sgx_scr_bank, sgx_scr_addr
         01:DD7A  A9 00      			lda.l	#$6000 + ($1FFF & (_multimap_LV1_BG_B))
         01:DD7C  8D 9F 28   			sta.l	sgx_scr_addr
         01:DD7F  A9 71      			lda.h	#$6000 + ($1FFF & (_multimap_LV1_BG_B))
         01:DD81  8D A0 28   			sta.h	sgx_scr_addr
         01:DD84  A9 09      			lda	#bank(_multimap_LV1_BG_B)
         01:DD86  8D A1 28   			sta	sgx_scr_bank
 6528                        		__st.umiq	5, sgx_map_scrn_w
         01:DD89  A9 05      			lda.l	#5
         01:DD8B  8D 60 23   			sta	sgx_map_scrn_w
 6529                        		 _sgx_set_multimap.2
         01:DD8E  AD 58 23   			lda	sgx_bat_width
         01:DD91  4A         			lsr	a
         01:DD92  8D 5F 23   			sta	sgx_map_line_w
 6530                        	
 6531                        		.dbg	line,	"include\init.c", 91; //--------------------------------------------------------------------------------------//
 6532                        	
 6533                        		.dbg	line,	"include\init.c", 92; //                                    DRAW TILEMAP                                      //
 6534                        	
 6535                        		.dbg	line,	"include\init.c", 93; //--------------------------------------------------------------------------------------//
 6536                        	
 6537                        		.dbg	line,	"include\init.c", 95; // The blkmap is drawn using global variables for the top-left coordinate
 6538                        	
 6539                        		.dbg	line,	"include\init.c", 96; // in pixels, and the draw width and height in terms of 8x8 characters.
 6540                        	
 6541                        		.dbg	line,	"include\init.c", 98; sgx_map_pxl_x = 96;
 6542                        		__st.wmiq	96, _sgx_map_pxl_x
         01:DD95  A9 60      			lda.l	#96
         01:DD97  8D 61 23   			sta.l	_sgx_map_pxl_x
         01:DD9A  9C 62 23   			stz.h	_sgx_map_pxl_x
 6543                        	
 6544                        		.dbg	line,	"include\init.c", 99; sgx_map_pxl_y = 768;
 6545                        		__st.wmiq	768, _sgx_map_pxl_y
         01:DD9D  9C 63 23   			stz.l	_sgx_map_pxl_y
         01:DDA0  A9 03      			lda.h	#768
         01:DDA2  8D 64 23   			sta.h	_sgx_map_pxl_y
 6546                        	
 6547                        		.dbg	line,	"include\init.c", 101; sgx_map_draw_w = 63;
 6548                        		__st.umiq	63, _sgx_map_draw_w
         01:DDA5  A9 3F      			lda.l	#63
         01:DDA7  8D 5D 23   			sta	_sgx_map_draw_w
 6549                        	
 6550                        		.dbg	line,	"include\init.c", 102; sgx_map_draw_h = 29;
 6551                        		__st.umiq	29, _sgx_map_draw_h
         01:DDAA  A9 1D      			lda.l	#29
         01:DDAC  8D 5E 23   			sta	_sgx_map_draw_h
 6552                        	
 6553                        		.dbg	line,	"include\init.c", 104; sgx_draw_map();
 6554                        		__call		_sgx_draw_map
         01:DDAF  20 09 FF   			call	_sgx_draw_map
 6555                        	
 6556                        		.dbg	line,	"include\init.c", 109; //**************************************************************************************//
 6557                        	
 6558                        		.dbg	line,	"include\init.c", 110; //                                                                                      //
 6559                        	
 6560                        		.dbg	line,	"include\init.c", 111; //                                        VDC 1                                         //
 6561                        	
 6562                        		.dbg	line,	"include\init.c", 112; //                                                                                      //
 6563                        	
 6564                        		.dbg	line,	"include\init.c", 113; //**************************************************************************************//
 6565                        	
 6566                        		.dbg	line,	"include\init.c", 115; //--------------------------------------------------------------------------------------//
 6567                        	
 6568                        		.dbg	line,	"include\init.c", 116; //                                    LOAD TILESET                                      //
 6569                        	
 6570                        		.dbg	line,	"include\init.c", 117; //--------------------------------------------------------------------------------------//
 6571                        	
 6572                        		.dbg	line,	"include\init.c", 119; load_vram( 0x1000, tileset_LV1_BG_A, SIZEOF(tileset_LV1_BG_A) >> 1 );
 6573                        		__st.wmiq	4096, _di
         01:DDB2  64 F0      			stz.l	_di
         01:DDB4  A9 10      			lda.h	#4096
         01:DDB6  85 F1      			sta.h	_di
 6574                        		__farptr	_tileset_LV1_BG_A, _bp_bank, _bp
         01:DDB8  A9 A0      			lda.l	#$6000 + ($1FFF & (_tileset_LV1_BG_A))
         01:DDBA  85 EC      			sta.l	_bp
         01:DDBC  A9 71      			lda.h	#$6000 + ($1FFF & (_tileset_LV1_BG_A))
         01:DDBE  85 ED      			sta.h	_bp
         01:DDC0  A9 09      			lda	#bank(_tileset_LV1_BG_A)
         01:DDC2  85 02      			sta	_bp_bank
 6575                        		__ld.wi		___sizeof__tileset_LV1_BG_A
         01:DDC4  A9 C0      			lda.l	#___sizeof__tileset_LV1_BG_A
         01:DDC6  A0 06      			ldy.h	#___sizeof__tileset_LV1_BG_A
 6576                        		__lsr.wi	1
         01:DDC8  42         			say
         01:DDC9  4A         			lsr	a
         01:DDCA  42         			say
         01:DDCB  6A         			ror	a
 6577                        		__st.wmq	_ax
         01:DDCC  85 F8      			sta.l	_ax
         01:DDCE  84 F9      			sty.h	_ax
 6578                        		 _load_vram.3
         01:DDD0  82         			clx				; Offset to PCE VDC.
         01:DDD1  20 77 FF   			call	load_vram_x
 6579                        	
 6580                        		.dbg	line,	"include\init.c", 122; //--------------------------------------------------------------------------------------//
 6581                        	
 6582                        		.dbg	line,	"include\init.c", 123; //                                 LOAD LIFABAR TILES                                   //
 6583                        	
 6584                        		.dbg	line,	"include\init.c", 124; //--------------------------------------------------------------------------------------//
 6585                        	
 6586                        		.dbg	line,	"include\init.c", 126; load_vram( LIFEBAR_1_VRAM_ADR, tileset_LIFE_RED, SIZEOF(tileset_LIFE_RED) >> 1 );
 6587                        		__st.wmiq	4096, _di
         01:DDD4  64 F0      			stz.l	_di
         01:DDD6  A9 10      			lda.h	#4096
         01:DDD8  85 F1      			sta.h	_di
 6588                        		__farptr	_tileset_LIFE_RED, _bp_bank, _bp
         01:DDDA  A9 00      			lda.l	#$6000 + ($1FFF & (_tileset_LIFE_RED))
         01:DDDC  85 EC      			sta.l	_bp
         01:DDDE  A9 68      			lda.h	#$6000 + ($1FFF & (_tileset_LIFE_RED))
         01:DDE0  85 ED      			sta.h	_bp
         01:DDE2  A9 03      			lda	#bank(_tileset_LIFE_RED)
         01:DDE4  85 02      			sta	_bp_bank
 6589                        		__ld.wi		___sizeof__tileset_LIFE_RED
         01:DDE6  A9 40      			lda.l	#___sizeof__tileset_LIFE_RED
         01:DDE8  A0 00      			ldy.h	#___sizeof__tileset_LIFE_RED
 6590                        		__lsr.wi	1
         01:DDEA  42         			say
         01:DDEB  4A         			lsr	a
         01:DDEC  42         			say
         01:DDED  6A         			ror	a
 6591                        		__st.wmq	_ax
         01:DDEE  85 F8      			sta.l	_ax
         01:DDF0  84 F9      			sty.h	_ax
 6592                        		 _load_vram.3
         01:DDF2  82         			clx				; Offset to PCE VDC.
         01:DDF3  20 77 FF   			call	load_vram_x
 6593                        	
 6594                        		.dbg	line,	"include\init.c", 127; load_vram( LIFEBAR_2_VRAM_ADR, tileset_LIFE_ORANGE, SIZEOF(tileset_LIFE_ORANGE) >> 1 );
 6595                        		__st.wmiq	4128, _di
         01:DDF6  A9 20      			lda.l	#4128
         01:DDF8  85 F0      			sta.l	_di
         01:DDFA  A9 10      			lda.h	#4128
         01:DDFC  85 F1      			sta.h	_di
 6596                        		__farptr	_tileset_LIFE_ORANGE, _bp_bank, _bp
         01:DDFE  A9 40      			lda.l	#$6000 + ($1FFF & (_tileset_LIFE_ORANGE))
         01:DE00  85 EC      			sta.l	_bp
         01:DE02  A9 68      			lda.h	#$6000 + ($1FFF & (_tileset_LIFE_ORANGE))
         01:DE04  85 ED      			sta.h	_bp
         01:DE06  A9 03      			lda	#bank(_tileset_LIFE_ORANGE)
         01:DE08  85 02      			sta	_bp_bank
 6597                        		__ld.wi		___sizeof__tileset_LIFE_ORANGE
         01:DE0A  A9 40      			lda.l	#___sizeof__tileset_LIFE_ORANGE
         01:DE0C  A0 00      			ldy.h	#___sizeof__tileset_LIFE_ORANGE
 6598                        		__lsr.wi	1
         01:DE0E  42         			say
         01:DE0F  4A         			lsr	a
         01:DE10  42         			say
         01:DE11  6A         			ror	a
 6599                        		__st.wmq	_ax
         01:DE12  85 F8      			sta.l	_ax
         01:DE14  84 F9      			sty.h	_ax
 6600                        		 _load_vram.3
         01:DE16  82         			clx				; Offset to PCE VDC.
         01:DE17  20 77 FF   			call	load_vram_x
 6601                        	
 6602                        		.dbg	line,	"include\init.c", 128; load_vram( LIFEBAR_3_VRAM_ADR, tileset_LIFE_YELLOW, SIZEOF(tileset_LIFE_YELLOW) >> 1 );
 6603                        		__st.wmiq	4160, _di
         01:DE1A  A9 40      			lda.l	#4160
         01:DE1C  85 F0      			sta.l	_di
         01:DE1E  A9 10      			lda.h	#4160
         01:DE20  85 F1      			sta.h	_di
 6604                        		__farptr	_tileset_LIFE_YELLOW, _bp_bank, _bp
         01:DE22  A9 80      			lda.l	#$6000 + ($1FFF & (_tileset_LIFE_YELLOW))
         01:DE24  85 EC      			sta.l	_bp
         01:DE26  A9 68      			lda.h	#$6000 + ($1FFF & (_tileset_LIFE_YELLOW))
         01:DE28  85 ED      			sta.h	_bp
         01:DE2A  A9 03      			lda	#bank(_tileset_LIFE_YELLOW)
         01:DE2C  85 02      			sta	_bp_bank
 6605                        		__ld.wi		___sizeof__tileset_LIFE_YELLOW
         01:DE2E  A9 40      			lda.l	#___sizeof__tileset_LIFE_YELLOW
         01:DE30  A0 00      			ldy.h	#___sizeof__tileset_LIFE_YELLOW
 6606                        		__lsr.wi	1
         01:DE32  42         			say
         01:DE33  4A         			lsr	a
         01:DE34  42         			say
         01:DE35  6A         			ror	a
 6607                        		__st.wmq	_ax
         01:DE36  85 F8      			sta.l	_ax
         01:DE38  84 F9      			sty.h	_ax
 6608                        		 _load_vram.3
         01:DE3A  82         			clx				; Offset to PCE VDC.
         01:DE3B  20 77 FF   			call	load_vram_x
 6609                        	
 6610                        		.dbg	line,	"include\init.c", 129; load_vram( LIFEBAR_4_VRAM_ADR, tileset_LIFE_YELLOW, SIZEOF(tileset_LIFE_YELLOW) >> 1 );
 6611                        		__st.wmiq	4192, _di
         01:DE3E  A9 60      			lda.l	#4192
         01:DE40  85 F0      			sta.l	_di
         01:DE42  A9 10      			lda.h	#4192
         01:DE44  85 F1      			sta.h	_di
 6612                        		__farptr	_tileset_LIFE_YELLOW, _bp_bank, _bp
         01:DE46  A9 80      			lda.l	#$6000 + ($1FFF & (_tileset_LIFE_YELLOW))
         01:DE48  85 EC      			sta.l	_bp
         01:DE4A  A9 68      			lda.h	#$6000 + ($1FFF & (_tileset_LIFE_YELLOW))
         01:DE4C  85 ED      			sta.h	_bp
         01:DE4E  A9 03      			lda	#bank(_tileset_LIFE_YELLOW)
         01:DE50  85 02      			sta	_bp_bank
 6613                        		__ld.wi		___sizeof__tileset_LIFE_YELLOW
         01:DE52  A9 40      			lda.l	#___sizeof__tileset_LIFE_YELLOW
         01:DE54  A0 00      			ldy.h	#___sizeof__tileset_LIFE_YELLOW
 6614                        		__lsr.wi	1
         01:DE56  42         			say
         01:DE57  4A         			lsr	a
         01:DE58  42         			say
         01:DE59  6A         			ror	a
 6615                        		__st.wmq	_ax
         01:DE5A  85 F8      			sta.l	_ax
         01:DE5C  84 F9      			sty.h	_ax
 6616                        		 _load_vram.3
         01:DE5E  82         			clx				; Offset to PCE VDC.
         01:DE5F  20 77 FF   			call	load_vram_x
 6617                        	
 6618                        		.dbg	line,	"include\init.c", 130; load_vram( LIFEBAR_5_VRAM_ADR, tileset_LIFE_EMPTY, SIZEOF(tileset_LIFE_EMPTY) >> 1 );
 6619                        		__st.wmiq	4224, _di
         01:DE62  A9 80      			lda.l	#4224
         01:DE64  85 F0      			sta.l	_di
         01:DE66  A9 10      			lda.h	#4224
         01:DE68  85 F1      			sta.h	_di
 6620                        		__farptr	_tileset_LIFE_EMPTY, _bp_bank, _bp
         01:DE6A  A9 C0      			lda.l	#$6000 + ($1FFF & (_tileset_LIFE_EMPTY))
         01:DE6C  85 EC      			sta.l	_bp
         01:DE6E  A9 68      			lda.h	#$6000 + ($1FFF & (_tileset_LIFE_EMPTY))
         01:DE70  85 ED      			sta.h	_bp
         01:DE72  A9 03      			lda	#bank(_tileset_LIFE_EMPTY)
         01:DE74  85 02      			sta	_bp_bank
 6621                        		__ld.wi		___sizeof__tileset_LIFE_EMPTY
         01:DE76  A9 40      			lda.l	#___sizeof__tileset_LIFE_EMPTY
         01:DE78  A0 00      			ldy.h	#___sizeof__tileset_LIFE_EMPTY
 6622                        		__lsr.wi	1
         01:DE7A  42         			say
         01:DE7B  4A         			lsr	a
         01:DE7C  42         			say
         01:DE7D  6A         			ror	a
 6623                        		__st.wmq	_ax
         01:DE7E  85 F8      			sta.l	_ax
         01:DE80  84 F9      			sty.h	_ax
 6624                        		 _load_vram.3
         01:DE82  82         			clx				; Offset to PCE VDC.
         01:DE83  20 77 FF   			call	load_vram_x
 6625                        	
 6626                        		.dbg	line,	"include\init.c", 133; //--------------------------------------------------------------------------------------//
 6627                        	
 6628                        		.dbg	line,	"include\init.c", 134; //                               LOAD WEAPON + ARMOR TILES                              //
 6629                        	
 6630                        		.dbg	line,	"include\init.c", 135; //--------------------------------------------------------------------------------------//
 6631                        	
 6632                        		.dbg	line,	"include\init.c", 137; load_vram( WEAPON_VRAM_ADR, tileset_WEAPON_1, SIZEOF(tileset_WEAPON_1) >> 1 );
 6633                        		__st.wmiq	4256, _di
         01:DE86  A9 A0      			lda.l	#4256
         01:DE88  85 F0      			sta.l	_di
         01:DE8A  A9 10      			lda.h	#4256
         01:DE8C  85 F1      			sta.h	_di
 6634                        		__farptr	_tileset_WEAPON_1, _bp_bank, _bp
         01:DE8E  A9 00      			lda.l	#$6000 + ($1FFF & (_tileset_WEAPON_1))
         01:DE90  85 EC      			sta.l	_bp
         01:DE92  A9 6B      			lda.h	#$6000 + ($1FFF & (_tileset_WEAPON_1))
         01:DE94  85 ED      			sta.h	_bp
         01:DE96  A9 03      			lda	#bank(_tileset_WEAPON_1)
         01:DE98  85 02      			sta	_bp_bank
 6635                        		__ld.wi		___sizeof__tileset_WEAPON_1
         01:DE9A  A9 80      			lda.l	#___sizeof__tileset_WEAPON_1
         01:DE9C  A0 00      			ldy.h	#___sizeof__tileset_WEAPON_1
 6636                        		__lsr.wi	1
         01:DE9E  42         			say
         01:DE9F  4A         			lsr	a
         01:DEA0  42         			say
         01:DEA1  6A         			ror	a
 6637                        		__st.wmq	_ax
         01:DEA2  85 F8      			sta.l	_ax
         01:DEA4  84 F9      			sty.h	_ax
 6638                        		 _load_vram.3
         01:DEA6  82         			clx				; Offset to PCE VDC.
         01:DEA7  20 77 FF   			call	load_vram_x
 6639                        	
 6640                        		.dbg	line,	"include\init.c", 138; load_vram( ARMOR_VRAM_ADR, tileset_ARMOR_2, SIZEOF(tileset_ARMOR_2) >> 1 );
 6641                        		__st.wmiq	4320, _di
         01:DEAA  A9 E0      			lda.l	#4320
         01:DEAC  85 F0      			sta.l	_di
         01:DEAE  A9 10      			lda.h	#4320
         01:DEB0  85 F1      			sta.h	_di
 6642                        		__farptr	_tileset_ARMOR_2, _bp_bank, _bp
         01:DEB2  A9 80      			lda.l	#$6000 + ($1FFF & (_tileset_ARMOR_2))
         01:DEB4  85 EC      			sta.l	_bp
         01:DEB6  A9 69      			lda.h	#$6000 + ($1FFF & (_tileset_ARMOR_2))
         01:DEB8  85 ED      			sta.h	_bp
         01:DEBA  A9 03      			lda	#bank(_tileset_ARMOR_2)
         01:DEBC  85 02      			sta	_bp_bank
 6643                        		__ld.wi		___sizeof__tileset_ARMOR_2
         01:DEBE  A9 80      			lda.l	#___sizeof__tileset_ARMOR_2
         01:DEC0  A0 00      			ldy.h	#___sizeof__tileset_ARMOR_2
 6644                        		__lsr.wi	1
         01:DEC2  42         			say
         01:DEC3  4A         			lsr	a
         01:DEC4  42         			say
         01:DEC5  6A         			ror	a
 6645                        		__st.wmq	_ax
         01:DEC6  85 F8      			sta.l	_ax
         01:DEC8  84 F9      			sty.h	_ax
 6646                        		 _load_vram.3
         01:DECA  82         			clx				; Offset to PCE VDC.
         01:DECB  20 77 FF   			call	load_vram_x
 6647                        	
 6648                        		.dbg	line,	"include\init.c", 141; //--------------------------------------------------------------------------------------//
 6649                        	
 6650                        		.dbg	line,	"include\init.c", 142; //                                     SET MULTIMAP                                     //
 6651                        	
 6652                        		.dbg	line,	"include\init.c", 143; //--------------------------------------------------------------------------------------//
 6653                        	
 6654                        		.dbg	line,	"include\init.c", 145; // multimap is 2 screens wide //
 6655                        	
 6656                        		.dbg	line,	"include\init.c", 146; set_multimap( multimap_LV1_BG_A , 5 );
 6657                        		__farptr	_multimap_LV1_BG_A, vdc_scr_bank, vdc_scr_addr
         01:DECE  A9 00      			lda.l	#$6000 + ($1FFF & (_multimap_LV1_BG_A))
         01:DED0  8D 8F 28   			sta.l	vdc_scr_addr
         01:DED3  A9 78      			lda.h	#$6000 + ($1FFF & (_multimap_LV1_BG_A))
         01:DED5  8D 90 28   			sta.h	vdc_scr_addr
         01:DED8  A9 0B      			lda	#bank(_multimap_LV1_BG_A)
         01:DEDA  8D 91 28   			sta	vdc_scr_bank
 6658                        		__st.umiq	5, vdc_map_scrn_w
         01:DEDD  A9 05      			lda.l	#5
         01:DEDF  8D 50 23   			sta	vdc_map_scrn_w
 6659                        		 _set_multimap.2
         01:DEE2  AD 48 23   			lda	vdc_bat_width
         01:DEE5  4A         			lsr	a
         01:DEE6  8D 4F 23   			sta	vdc_map_line_w
 6660                        	
 6661                        		.dbg	line,	"include\init.c", 149; //--------------------------------------------------------------------------------------//
 6662                        	
 6663                        		.dbg	line,	"include\init.c", 150; //                                    DRAW TILEMAP                                      //
 6664                        	
 6665                        		.dbg	line,	"include\init.c", 151; //--------------------------------------------------------------------------------------//
 6666                        	
 6667                        		.dbg	line,	"include\init.c", 153; // The blkmap is drawn using global variables for the top-left coordinate
 6668                        	
 6669                        		.dbg	line,	"include\init.c", 154; // in pixels, and the draw width and height in terms of 8x8 characters.
 6670                        	
 6671                        		.dbg	line,	"include\init.c", 156; vdc_map_pxl_x = 0;
 6672                        		__st.wmiq	0, _vdc_map_pxl_x
         01:DEE9  9C 51 23   			stz.l	_vdc_map_pxl_x
         01:DEEC  9C 52 23   			stz.h	_vdc_map_pxl_x
 6673                        	
 6674                        		.dbg	line,	"include\init.c", 157; vdc_map_pxl_y = 0;
 6675                        		__st.wmiq	0, _vdc_map_pxl_y
         01:DEEF  9C 53 23   			stz.l	_vdc_map_pxl_y
         01:DEF2  9C 54 23   			stz.h	_vdc_map_pxl_y
 6676                        	
 6677                        		.dbg	line,	"include\init.c", 159; vdc_map_draw_w = 32;
 6678                        		__st.umiq	32, _vdc_map_draw_w
         01:DEF5  A9 20      			lda.l	#32
         01:DEF7  8D 4D 23   			sta	_vdc_map_draw_w
 6679                        	
 6680                        		.dbg	line,	"include\init.c", 160; vdc_map_draw_h = 28;
 6681                        		__st.umiq	28, _vdc_map_draw_h
         01:DEFA  A9 1C      			lda.l	#28
         01:DEFC  8D 4E 23   			sta	_vdc_map_draw_h
 6682                        	
 6683                        		.dbg	line,	"include\init.c", 162; draw_map();
 6684                        		__call		_draw_map
         01:DEFF  20 FF FE   			call	_draw_map
 6685                        	
 6686                        		.dbg	line,	"include\init.c", 167; //**************************************************************************************//
 6687                        	
 6688                        		.dbg	line,	"include\init.c", 168; //                                                                                      //
 6689                        	
 6690                        		.dbg	line,	"include\init.c", 169; //                                  SETUP SCROLL_SPLIT                                  //
 6691                        	
 6692                        		.dbg	line,	"include\init.c", 170; //                                                                                      //
 6693                        	
 6694                        		.dbg	line,	"include\init.c", 171; //**************************************************************************************//
 6695                        	
 6696                        		.dbg	line,	"include\init.c", 173; //--------------------------------------------------------------------------------------//
 6697                        	
 6698                        		.dbg	line,	"include\init.c", 174; //                                        VDC 2                                         //
 6699                        	
 6700                        		.dbg	line,	"include\init.c", 175; //--------------------------------------------------------------------------------------//
 6701                        	
 6702                        		.dbg	line,	"include\init.c", 177; sgx_scroll_map();
 6703                        		__call		_sgx_scroll_map
         01:DF02  20 95 FF   			call	_sgx_scroll_map
 6704                        	
 6705                        		.dbg	line,	"include\init.c", 179; sgx_scroll_split(0,   0, sgx_map_pxl_x & (BAT_SIZE_W - 1), sgx_map_pxl_y & (BAT_SIZE_H - 1), BKG_ON | SPR_ON);
 6706                        		__st.umiq	0, _al
         01:DF05  64 F8      			stz	_al
 6707                        		__st.umiq	0, _ah
         01:DF07  64 F9      			stz	_ah
 6708                        		__ld.wm		_sgx_map_pxl_x
         01:DF09  AD 61 23   			lda.l	_sgx_map_pxl_x
         01:DF0C  AC 62 23   			ldy.h	_sgx_map_pxl_x
 6709                        		__and.wi	2047
         01:DF0F  29 FF      			and.l	#2047
         01:DF11  42         			say
         01:DF12  29 07      			and.h	#2047
         01:DF14  42         			say
 6710                        		__st.wmq	_bx
         01:DF15  85 FA      			sta.l	_bx
         01:DF17  84 FB      			sty.h	_bx
 6711                        		__ld.wm		_sgx_map_pxl_y
         01:DF19  AD 63 23   			lda.l	_sgx_map_pxl_y
         01:DF1C  AC 64 23   			ldy.h	_sgx_map_pxl_y
 6712                        		__and.wi	255
         01:DF1F  29 FF      			and	#255
         01:DF21  C2         			cly
 6713                        		__st.wmq	_cx
         01:DF22  85 FC      			sta.l	_cx
         01:DF24  84 FD      			sty.h	_cx
 6714                        		__st.umiq	192, _dl
         01:DF26  A9 C0      			lda.l	#192
         01:DF28  85 FE      			sta	_dl
 6715                        		__call		_sgx_scroll_split.5
         01:DF2A  20 8B FF   			call	_sgx_scroll_split.5
 6716                        	
 6717                        		.dbg	line,	"include\init.c", 184; //--------------------------------------------------------------------------------------//
 6718                        	
 6719                        		.dbg	line,	"include\init.c", 185; //                                   LOAD BG PALETTES                                   //
 6720                        	
 6721                        		.dbg	line,	"include\init.c", 186; //--------------------------------------------------------------------------------------//
 6722                        	
 6723                        		.dbg	line,	"include\init.c", 188; // LOAD ALL PALETTES AT BG PALETTE 0 //
 6724                        	
 6725                        		.dbg	line,	"include\init.c", 189; load_palette( 0, palette_LV1, 16 );
 6726                        		__st.umiq	0, _al
         01:DF2D  64 F8      			stz	_al
 6727                        		__farptr	_palette_LV1, _bp_bank, _bp
         01:DF2F  A9 A0      			lda.l	#$6000 + ($1FFF & (_palette_LV1))
         01:DF31  85 EC      			sta.l	_bp
         01:DF33  A9 78      			lda.h	#$6000 + ($1FFF & (_palette_LV1))
         01:DF35  85 ED      			sta.h	_bp
         01:DF37  A9 0B      			lda	#bank(_palette_LV1)
         01:DF39  85 02      			sta	_bp_bank
 6728                        		__st.umiq	16, _ah
         01:DF3B  A9 10      			lda.l	#16
         01:DF3D  85 F9      			sta	_ah
 6729                        		__call		_load_palette.3
         01:DF3F  20 F5 FE   			call	_load_palette.3
 6730                        	
 6731                        		.dbg	line,	"include\init.c", 194; //**************************************************************************************//
 6732                        	
 6733                        		.dbg	line,	"include\init.c", 195; //                                                                                      //
 6734                        	
 6735                        		.dbg	line,	"include\init.c", 196; //                                       SPRITES                                        //
 6736                        	
 6737                        		.dbg	line,	"include\init.c", 197; //                                                                                      //
 6738                        	
 6739                        		.dbg	line,	"include\init.c", 198; //**************************************************************************************//
 6740                        	
 6741                        		.dbg	line,	"include\init.c", 200; //--------------------------------------------------------------------------------------//
 6742                        	
 6743                        		.dbg	line,	"include\init.c", 201; //                                        PLAYER                                        //
 6744                        	
 6745                        		.dbg	line,	"include\init.c", 202; //--------------------------------------------------------------------------------------//
 6746                        	
 6747                        		.dbg	line,	"include\init.c", 204; // LOAD PLAYER TILES //
 6748                        	
 6749                        		.dbg	line,	"include\init.c", 205; // 0x2000
 6750                        	
 6751                        		.dbg	line,	"include\init.c", 206; // 32 TILES = 512 //
 6752                        	
 6753                        		.dbg	line,	"include\init.c", 207; // LOAD PLAYER FIRST FRAME OF ANIMATION (IDLE)
 6754                        	
 6755                        		.dbg	line,	"include\init.c", 208; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
 6756                        		__st.wmiq	18432, _di
         01:DF42  64 F0      			stz.l	_di
         01:DF44  A9 48      			lda.h	#18432
         01:DF46  85 F1      			sta.h	_di
 6757                        		__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
         01:DF48  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:DF4A  85 EC      			sta.l	_bp
         01:DF4C  A9 7A      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:DF4E  85 ED      			sta.h	_bp
         01:DF50  A9 0B      			lda	#bank(_tiles_SPR_PLAYER)
         01:DF52  85 02      			sta	_bp_bank
 6758                        		__st.wmiq	256, _ax
         01:DF54  64 F8      			stz.l	_ax
         01:DF56  A9 01      			lda.h	#256
         01:DF58  85 F9      			sta.h	_ax
 6759                        		 _load_vram.3
         01:DF5A  82         			clx				; Offset to PCE VDC.
         01:DF5B  20 77 FF   			call	load_vram_x
 6760                        	
 6761                        		.dbg	line,	"include\init.c", 211; // SELECT PLAYER CORE SPRITE //
 6762                        	
 6763                        		.dbg	line,	"include\init.c", 212; spr_set(player_id);
 6764                        		__ld.umq	_player_id
         01:DF5E  AD 0D 23   			lda	_player_id
 6765                        		__call		_spr_set.1
         01:DF61  20 DD E7   			call	_spr_set.1
 6766                        	
 6767                        		.dbg	line,	"include\init.c", 215; player_pos_x = 112;
 6768                        		__st.wmiq	112, _player_pos_x
         01:DF64  A9 70      			lda.l	#112
         01:DF66  8D 13 23   			sta.l	_player_pos_x
         01:DF69  9C 14 23   			stz.h	_player_pos_x
 6769                        	
 6770                        		.dbg	line,	"include\init.c", 216; player_pos_y = PLAYER_BASE_Y_POS;
 6771                        		__st.wmiq	128, _player_pos_y
         01:DF6C  A9 80      			lda.l	#128
         01:DF6E  8D 15 23   			sta.l	_player_pos_y
         01:DF71  9C 16 23   			stz.h	_player_pos_y
 6772                        	
 6773                        		.dbg	line,	"include\init.c", 219; spr_x(player_pos_x);
 6774                        		__ld.wm		_player_pos_x
         01:DF74  AD 13 23   			lda.l	_player_pos_x
         01:DF77  AC 14 23   			ldy.h	_player_pos_x
 6775                        		__call		_spr_x.1
         01:DF7A  20 0A E8   			call	_spr_x.1
 6776                        	
 6777                        		.dbg	line,	"include\init.c", 220; spr_y(player_pos_y);
 6778                        		__ld.wm		_player_pos_y
         01:DF7D  AD 15 23   			lda.l	_player_pos_y
         01:DF80  AC 16 23   			ldy.h	_player_pos_y
 6779                        		__call		_spr_y.1
         01:DF83  20 19 E8   			call	_spr_y.1
 6780                        	
 6781                        		.dbg	line,	"include\init.c", 222; // SET TILES DATA FOR THE PLAYER //
 6782                        	
 6783                        		.dbg	line,	"include\init.c", 223; spr_pattern(PLAYER_VRAM_ADR);
 6784                        		__ld.wi		18432
         01:DF86  62         			cla
         01:DF87  A0 48      			ldy.h	#18432
 6785                        		__call		_spr_pattern.1
         01:DF89  20 26 E8   			call	_spr_pattern.1
 6786                        	
 6787                        		.dbg	line,	"include\init.c", 226; spr_ctrl(FLIP_MAS|SIZE_MAS, NO_FLIP|SZ_32x32);
 6788                        		__st.umiq	185, _al
         01:DF8C  A9 B9      			lda.l	#185
         01:DF8E  85 F8      			sta	_al
 6789                        		__ld.uiq	17
         01:DF90  A9 11      			lda	#17
 6790                        		__call		_spr_ctrl.2
         01:DF92  20 3C E8   			call	_spr_ctrl.2
 6791                        	
 6792                        		.dbg	line,	"include\init.c", 229; spr_pal(0);
 6793                        		__ld.uiq	0
         01:DF95  62         			cla
 6794                        		__call		_spr_pal.1
         01:DF96  20 4D E8   			call	_spr_pal.1
 6795                        	
 6796                        		.dbg	line,	"include\init.c", 230; spr_pri(TRUE);
 6797                        		__ld.uiq	1
         01:DF99  A9 01      			lda	#1
 6798                        		__call		_spr_pri.1
         01:DF9B  20 5C E8   			call	_spr_pri.1
 6799                        	
 6800                        		.dbg	line,	"include\init.c", 233; // UPDATE PCE SAT //
 6801                        	
 6802                        		.dbg	line,	"include\init.c", 234; satb_update();
 6803                        		__call		_satb_update
         01:DF9E  20 EB FE   			call	_satb_update
 6804                        	
 6805                        		.dbg	line,	"include\init.c", 239; //--------------------------------------------------------------------------------------//
 6806                        	
 6807                        		.dbg	line,	"include\init.c", 240; //                                LOAD SPRITES PALETTES                                 //
 6808                        	
 6809                        		.dbg	line,	"include\init.c", 241; //--------------------------------------------------------------------------------------//
 6810                        	
 6811                        		.dbg	line,	"include\init.c", 243; load_palette( 16, palette_PLAYER, 1 );
 6812                        		__st.umiq	16, _al
         01:DFA1  A9 10      			lda.l	#16
         01:DFA3  85 F8      			sta	_al
 6813                        		__farptr	_palette_PLAYER, _bp_bank, _bp
         01:DFA5  A9 A0      			lda.l	#$6000 + ($1FFF & (_palette_PLAYER))
         01:DFA7  85 EC      			sta.l	_bp
         01:DFA9  A9 7A      			lda.h	#$6000 + ($1FFF & (_palette_PLAYER))
         01:DFAB  85 ED      			sta.h	_bp
         01:DFAD  A9 0C      			lda	#bank(_palette_PLAYER)
         01:DFAF  85 02      			sta	_bp_bank
 6814                        		__st.umiq	1, _ah
         01:DFB1  A9 01      			lda.l	#1
         01:DFB3  85 F9      			sta	_ah
 6815                        		__call		_load_palette.3
         01:DFB5  20 F5 FE   			call	_load_palette.3
 6816                        	
 6817                        		.dbg	line,	"include\init.c", 248; //**************************************************************************************//
 6818                        	
 6819                        		.dbg	line,	"include\init.c", 249; //                                                                                      //
 6820                        	
 6821                        		.dbg	line,	"include\init.c", 250; //                                      VARIABLES                                       //
 6822                        	
 6823                        		.dbg	line,	"include\init.c", 251; //                                                                                      //
 6824                        	
 6825                        		.dbg	line,	"include\init.c", 252; //**************************************************************************************//
 6826                        	
 6827                        		.dbg	line,	"include\init.c", 254; camera_max_y_position = 768;
 6828                        		__st.wmiq	768, _camera_max_y_position
         01:DFB8  9C 17 23   			stz.l	_camera_max_y_position
         01:DFBB  A9 03      			lda.h	#768
         01:DFBD  8D 18 23   			sta.h	_camera_max_y_position
 6829                        	
 6830                        		.dbg	line,	"include\init.c", 257; // VSYNC //
 6831                        	
 6832                        		.dbg	line,	"include\init.c", 258; vsync();
 6833                        		__call		_vsync
         01:DFC0  20 09 E3   			call	_vsync
 6834                        	
 6835                        		.dbg	line,	"include\init.c", 260; // ENABLE DISPLAY //
 6836                        	
 6837                        		.dbg	line,	"include\init.c", 261; disp_on();
 6838                        		__call		_disp_on
         01:DFC3  20 16 E4   			call	_disp_on
 6839                        	
 6840                        		.dbg	line,	"include\init.c", 262; }
 6841                        	
 6842                        		.dbg	line,	"include\init.c", 263; }
 6843    01:DFC6             	.LL268:
 6844    01:DFC6             	.LL267:
 6845                        		__return	0
         01:DFC6  4C EF FF   			jmp	leave_proc
 6846                        		.dbg	clear
 6847                        		.endp
 6848                        		.pceas
 6849                        	
 6850                        		.dbg	line,	"main.c", 29; main()
 6851                        		.dbg	line,	"main.c", 30; {
 6852                        	;***********************
 6853                        	;***********************
 6854                        	
 6855                        		.hucc
 6856    0C:DF32             		.proc		_main
 6857                        		__enter		_main
 6858                        	
 6859                        		.dbg	line,	"main.c", 31; if(!sgx_detect())
 6860                        		 _sgx_detect
         0C:DF32  AD E8 22   			lda	sgx_detected
         0C:DF35  C2         			cly
 6861                        		__not.wr
         0C:DF36  84 00      			sty	__temp
         0C:DF38  05 00      			ora	__temp
         0C:DF3A  18         			clc
         0C:DF3B  D0 01      			bne	!+
         0C:DF3D  38         			sec
         0C:DF3E             	!:
 6862                        		__bfalse	.LL270
         0C:DF3E  90 14      			bcc	.LL270
 6863                        	
 6864                        		.dbg	line,	"main.c", 32; {
 6865                        	
 6866                        		.dbg	line,	"main.c", 33; put_string("Halt: SGX hardware not found", 2, 13);
 6867                        		__ld.wi		__const1+0
         0C:DF40  62         			cla
         0C:DF41  A0 60      			ldy.h	#__const1+0
 6868                        		__st.wmq	_bp
         0C:DF43  85 EC      			sta.l	_bp
         0C:DF45  84 ED      			sty.h	_bp
 6869                        		__st.umiq	2, _dil
         0C:DF47  A9 02      			lda.l	#2
         0C:DF49  85 F0      			sta	_dil
 6870                        		__st.umiq	13, _dih
         0C:DF4B  A9 0D      			lda.l	#13
         0C:DF4D  85 F1      			sta	_dih
 6871                        		__call		_put_string.3
         0C:DF4F  20 68 E6   			call	_put_string.3
 6872                        	
 6873                        		.dbg	line,	"main.c", 35; for(;;)
 6874    0C:DF52             	.LL271	.alias		.LL273
 6875    0C:DF52             	.LL272	.alias		.LL273
 6876    0C:DF52             	.LL273:
 6877                        	
 6878                        		.dbg	line,	"main.c", 36; {
 6879                        	
 6880                        		.dbg	line,	"main.c", 37; // INFINITE LOOP //
 6881                        	
 6882                        		.dbg	line,	"main.c", 38; }
 6883                        		__bra		.LL273
         0C:DF52  80 FE      			bra	.LL273
 6884    0C:DF54             	.LL274:
 6885                        	
 6886                        		.dbg	line,	"main.c", 39; }
 6887                        	
 6888                        		.dbg	line,	"main.c", 44; init_VARIABLES();
 6889    0C:DF54             	.LL270:
 6890                        		__call		_init_VARIABLES
         0C:DF54  20 E1 FE   			call	_init_VARIABLES
 6891                        	
 6892                        		.dbg	line,	"main.c", 47; init_PLAYER();
 6893                        		__call		_init_PLAYER
         0C:DF57  20 D7 FE   			call	_init_PLAYER
 6894                        	
 6895                        		.dbg	line,	"main.c", 52; //**************************************************************************************//
 6896                        	
 6897                        		.dbg	line,	"main.c", 53; //                                                                                      //
 6898                        	
 6899                        		.dbg	line,	"main.c", 54; //                                      TITLE                                           //
 6900                        	
 6901                        		.dbg	line,	"main.c", 55; //                                                                                      //
 6902                        	
 6903                        		.dbg	line,	"main.c", 56; //**************************************************************************************//
 6904                        	
 6905                        		.dbg	line,	"main.c", 57; for(;;)
 6906    0C:DF5A             	.LL275:
 6907    0C:DF5A             	.LL276:
 6908    0C:DF5A             	.LL277:
 6909                        	
 6910                        		.dbg	line,	"main.c", 58; {
 6911                        	
 6912                        		.dbg	line,	"main.c", 60; if(sequence_id == SEQUENCE_TITLE)
 6913                        		__not.um	_sequence_id
         0C:DF5A  AD 0A 23   			lda	_sequence_id
         0C:DF5D  18         			clc
         0C:DF5E  D0 01      			bne	!+
         0C:DF60  38         			sec
         0C:DF61             	!:
 6914                        		__bfalse	.LL279
         0C:DF61  90 02      			bcc	.LL279
 6915                        	
 6916                        		.dbg	line,	"main.c", 61; {
 6917                        	
 6918                        		.dbg	line,	"main.c", 63; }
 6919                        	
 6920                        		.dbg	line,	"main.c", 66; else if(sequence_id == SEQUENCE_GAME)
 6921                        		__bra		.LL280
         0C:DF63  80 F5      			bra	.LL280
 6922    0C:DF65             	.LL279:
 6923                        		__ld.umq	_sequence_id
         0C:DF65  AD 0A 23   			lda	_sequence_id
 6924                        		__equ_b.uiq	2
         0C:DF68  C9 02      			cmp	#2
         0C:DF6A  F0 01      			beq	!+
         0C:DF6C  18         			clc
         0C:DF6D             	!:
 6925                        		__bfalse	.LL281
         0C:DF6D  90 EB      			bcc	.LL281
 6926                        	
 6927                        		.dbg	line,	"main.c", 67; {
 6928                        	
 6929                        		.dbg	line,	"main.c", 68; // LOADING LOGO SCREEN //
 6930                        	
 6931                        		.dbg	line,	"main.c", 69; if(sequence_loaded == FALSE)
 6932                        		__not.um	_sequence_loaded
         0C:DF6F  AD 0B 23   			lda	_sequence_loaded
         0C:DF72  18         			clc
         0C:DF73  D0 01      			bne	!+
         0C:DF75  38         			sec
         0C:DF76             	!:
 6933                        		__bfalse	.LL282
         0C:DF76  90 0A      			bcc	.LL282
 6934                        	
 6935                        		.dbg	line,	"main.c", 70; {
 6936                        	
 6937                        		.dbg	line,	"main.c", 71; init_LEVEL();
 6938                        		__call		_init_LEVEL
         0C:DF78  20 CD FE   			call	_init_LEVEL
 6939                        	
 6940                        		.dbg	line,	"main.c", 73; sequence_loaded = TRUE;
 6941                        		__st.umiq	1, _sequence_loaded
         0C:DF7B  A9 01      			lda.l	#1
         0C:DF7D  8D 0B 23   			sta	_sequence_loaded
 6942                        	
 6943                        		.dbg	line,	"main.c", 74; }
 6944                        	
 6945                        		.dbg	line,	"main.c", 77; else
 6946                        		__bra		.LL283
         0C:DF80  80 D8      			bra	.LL283
 6947    0C:DF82             	.LL282:
 6948                        	
 6949                        		.dbg	line,	"main.c", 78; {
 6950                        	
 6951                        		.dbg	line,	"main.c", 79; if(level_id == 1)
 6952                        		__ld.umq	_level_id
         0C:DF82  AD 0C 23   			lda	_level_id
 6953                        		__equ_b.uiq	1
         0C:DF85  C9 01      			cmp	#1
         0C:DF87  F0 01      			beq	!+
         0C:DF89  18         			clc
         0C:DF8A             	!:
 6954                        		__bfalse	.LL284
         0C:DF8A  90 14      			bcc	.LL284
 6955                        	
 6956                        		.dbg	line,	"main.c", 80; {
 6957                        	
 6958                        		.dbg	line,	"main.c", 81; vsync();
 6959                        		__call		_vsync
         0C:DF8C  20 09 E3   			call	_vsync
 6960                        	
 6961                        		.dbg	line,	"main.c", 83; update_PLAYER();
 6962                        		__call		_update_PLAYER
         0C:DF8F  20 C3 FE   			call	_update_PLAYER
 6963                        	
 6964                        		.dbg	line,	"main.c", 84; //scroll_BG();
 6965                        	
 6966                        		.dbg	line,	"main.c", 86; joypad_DIR();
 6967                        		__call		_joypad_DIR
         0C:DF92  20 B9 FE   			call	_joypad_DIR
 6968                        	
 6969                        		.dbg	line,	"main.c", 87; joypad_BUTTONS();
 6970                        		__call		_joypad_BUTTONS
         0C:DF95  20 AF FE   			call	_joypad_BUTTONS
 6971                        	
 6972                        		.dbg	line,	"main.c", 89; satb_update();
 6973                        		__call		_satb_update
         0C:DF98  20 EB FE   			call	_satb_update
 6974                        	
 6975                        		.dbg	line,	"main.c", 90; scroll_BG();
 6976                        		__call		_scroll_BG
         0C:DF9B  20 A5 FE   			call	_scroll_BG
 6977                        	
 6978                        		.dbg	line,	"main.c", 92; //put_number(sgx_map_pxl_x,3,0,1);
 6979                        	
 6980                        		.dbg	line,	"main.c", 93; }
 6981                        	
 6982                        		.dbg	line,	"main.c", 95; else if(level_id == 2)
 6983                        		__bra		.LL285
         0C:DF9E  80 BA      			bra	.LL285
 6984    0C:DFA0             	.LL284:
 6985                        		__ld.umq	_level_id
         0C:DFA0  AD 0C 23   			lda	_level_id
 6986                        		__equ_b.uiq	2
         0C:DFA3  C9 02      			cmp	#2
         0C:DFA5  F0 01      			beq	!+
         0C:DFA7  18         			clc
         0C:DFA8             	!:
 6987                        		__bfalse	.LL286
         0C:DFA8  90 02      			bcc	.LL286
 6988                        	
 6989                        		.dbg	line,	"main.c", 96; {
 6990                        	
 6991                        		.dbg	line,	"main.c", 97; //sequence_LV2();
 6992                        	
 6993                        		.dbg	line,	"main.c", 98; }
 6994                        	
 6995                        		.dbg	line,	"main.c", 100; else if(level_id == 3)
 6996                        		__bra		.LL287
         0C:DFAA  80 AE      			bra	.LL287
 6997    0C:DFAC             	.LL286:
 6998                        		__ld.umq	_level_id
         0C:DFAC  AD 0C 23   			lda	_level_id
 6999                        		__equ_b.uiq	3
         0C:DFAF  C9 03      			cmp	#3
         0C:DFB1  F0 01      			beq	!+
         0C:DFB3  18         			clc
         0C:DFB4             	!:
 7000                        		__bfalse	.LL288
         0C:DFB4  90 02      			bcc	.LL288
 7001                        	
 7002                        		.dbg	line,	"main.c", 101; {
 7003                        	
 7004                        		.dbg	line,	"main.c", 102; //sequence_LV3();
 7005                        	
 7006                        		.dbg	line,	"main.c", 103; }
 7007                        	
 7008                        		.dbg	line,	"main.c", 105; else if(level_id == 4)
 7009                        		__bra		.LL289
         0C:DFB6  80 A2      			bra	.LL289
 7010    0C:DFB8             	.LL288:
 7011                        		__ld.umq	_level_id
         0C:DFB8  AD 0C 23   			lda	_level_id
 7012                        		__equ_b.uiq	4
         0C:DFBB  C9 04      			cmp	#4
         0C:DFBD  F0 01      			beq	!+
         0C:DFBF  18         			clc
         0C:DFC0             	!:
 7013                        		__bfalse	.LL290
         0C:DFC0  90 02      			bcc	.LL290
 7014                        	
 7015                        		.dbg	line,	"main.c", 106; {
 7016                        	
 7017                        		.dbg	line,	"main.c", 107; //sequence_LV4();
 7018                        	
 7019                        		.dbg	line,	"main.c", 108; }
 7020                        	
 7021                        		.dbg	line,	"main.c", 110; else if(level_id == 5)
 7022                        		__bra		.LL291
         0C:DFC2  80 96      			bra	.LL291
 7023    0C:DFC4             	.LL290:
 7024                        		__ld.umq	_level_id
         0C:DFC4  AD 0C 23   			lda	_level_id
 7025                        		__equ_b.uiq	5
         0C:DFC7  C9 05      			cmp	#5
         0C:DFC9  F0 01      			beq	!+
         0C:DFCB  18         			clc
         0C:DFCC             	!:
 7026                        		__bfalse	.LL292
         0C:DFCC  90 8C      			bcc	.LL292
 7027                        	
 7028                        		.dbg	line,	"main.c", 111; {
 7029                        	
 7030                        		.dbg	line,	"main.c", 112; //sequence_LV5();
 7031                        	
 7032                        		.dbg	line,	"main.c", 113; }
 7033                        	
 7034                        		.dbg	line,	"main.c", 114; }
 7035    0C:DFCE             	.LL292	.alias		.LL277
 7036    0C:DFCE             	.LL291	.alias		.LL277
 7037    0C:DFCE             	.LL289	.alias		.LL277
 7038    0C:DFCE             	.LL287	.alias		.LL277
 7039    0C:DFCE             	.LL285	.alias		.LL277
 7040    0C:DFCE             	.LL283	.alias		.LL277
 7041                        	
 7042                        		.dbg	line,	"main.c", 115; }
 7043                        	
 7044                        		.dbg	line,	"main.c", 116; }
 7045    0C:DFCE             	.LL281	.alias		.LL277
 7046    0C:DFCE             	.LL280	.alias		.LL277
 7047                        		__bra		.LL277
         0C:DFCE  80 8A      			bra	.LL277
 7048    0C:DFD0             	.LL278:
 7049                        	
 7050                        		.dbg	line,	"main.c", 119; }
 7051    0C:DFD0             	.LL269:
 7052                        		__return	1
         0C:DFD0  AA         			tax
         0C:DFD1  4C EF FF   			jmp	leave_proc
 7053                        		.dbg	clear
 7054                        		.endp
 7055                        		.pceas
 7056                        	
 7057                        		.dbg	clear
 7058               6000     		.rodata
 7059    01:6000             	__const1:
 7060    01:6000  48 61 6C 74			db	'H','a','l','t',':',' ','S','G'
         01:6004  3A 20 53 47 
 7061    01:6008  58 20 68 61			db	'X',' ','h','a','r','d','w','a'
         01:600C  72 64 77 61 
 7062    01:6010  72 65 20 6E			db	'r','e',' ','n','o','t',' ','f'
         01:6014  6F 74 20 66 
 7063    01:6018  6F 75 6E 64			db	'o','u','n','d',$00
         01:601C  00          
 7064    01:601D             	_TABLE_PLAYER_JUMP_V:
 7065    01:601D  FC         			db	-4
 7066    01:601E  FB         			db	-5
 7067    01:601F  F6         			db	-10
 7068    01:6020  FC         			db	-4
 7069    01:6021  FC         			db	-4
 7070    01:6022  F9         			db	-7
 7071    01:6023  FA         			db	-6
 7072    01:6024  FD         			db	-3
 7073    01:6025  FB         			db	-5
 7074    01:6026  FE         			db	-2
 7075    01:6027  FC         			db	-4
 7076    01:6028  FF         			db	-1
 7077    01:6029  FF         			db	-1
 7078    01:602A  FF         			db	-1
 7079    01:602B  FF         			db	-1
 7080    01:602C  00         			db	0
 7081    01:602D  00         			db	0
 7082    01:602E  00         			db	0
 7083    01:602F  00         			db	0
 7084    01:6030  01         			db	1
 7085    01:6031  01         			db	1
 7086    01:6032  01         			db	1
 7087    01:6033  01         			db	1
 7088    01:6034  04         			db	4
 7089    01:6035  02         			db	2
 7090    01:6036  05         			db	5
 7091    01:6037  03         			db	3
 7092    01:6038  06         			db	6
 7093    01:6039  07         			db	7
 7094    01:603A  04         			db	4
 7095    01:603B  04         			db	4
 7096    01:603C  0A         			db	10
 7097    01:603D  04         			db	4
 7098    01:603E  04         			db	4
 7099    01:603F  05         			db	5
 7100    01:6040             	_TABLE_PLAYER_FALL:
 7101    01:6040  01         			db	1
 7102    01:6041  00         			db	0
 7103    01:6042  00         			db	0
 7104    01:6043  00         			db	0
 7105    01:6044  00         			db	0
 7106    01:6045  00         			db	0
 7107    01:6046  00         			db	0
 7108    01:6047  00         			db	0
 7109    01:6048  00         			db	0
 7110    01:6049  00         			db	0
 7111                        	
 7112               230A     		.bss
 7113    F8:230A             	_sequence_id:
 7114    F8:230A             			ds	1
 7115    F8:230B             	_sequence_loaded:
 7116    F8:230B             			ds	1
 7117    F8:230C             	_level_id:
 7118    F8:230C             			ds	1
 7119    F8:230D             	_player_id:
 7120    F8:230D             			ds	1
 7121    F8:230E             	_player_state:
 7122    F8:230E             			ds	1
 7123    F8:230F             	_player_axis:
 7124    F8:230F             			ds	1
 7125    F8:2310             	_player_previous_axis:
 7126    F8:2310             			ds	1
 7127    F8:2311             	_player_counter_anim:
 7128    F8:2311             			ds	1
 7129    F8:2312             	_player_index_jump:
 7130    F8:2312             			ds	1
 7131    F8:2313             	_player_pos_x:
 7132    F8:2313             			ds	2
 7133    F8:2315             	_player_pos_y:
 7134    F8:2315             			ds	2
 7135    F8:2317             	_camera_max_y_position:
 7136    F8:2317             			ds	2
 7137                        	
 7138                        	
 7139                        	;0 error(s) in compilation
 7140                        	;	literal pool:29
 7141                        	;	constant pool:45
 7142                        	;	global pool:360
 7143                        	;	Macro pool:191
 7144    F8:2319             	leaf_loc:
 7145    F8:2319             			ds	4
 7146    F8:231D             	__check_BG_end:
 7147    F8:231D             	__check_WALL_TR_end:
 7148    F8:231D             	__check_WALL_TL_end:
 7149    F8:231D             	__check_WALL_BR_end:
 7150    F8:231D             	__check_WALL_BL_end:
 7151    F8:231D             	__check_FLOOR_R_end:
 7152    F8:231D             	__check_FLOOR_L_end:
 7153    F8:231D             	__check_LADDER_end:
 7154    F8:231D             	__recenter_CAMERA_end:
 7155                        	
 7156    F8:231D             	__bss_init:
 7157                        	
 7158    F8:231D             	__heap_start:
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-final.asm
    5                        	;
    6                        	; PCEAS auto-includes this file at the end of every pass in HuCC or SDCC.
    7                        	;
    8                        	; Copyright John Brandwood 2024.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; This is used to select which assembly-language library files to include in
   18                        	; a HuCC project, using labels defined in the compiler's header files.
   19                        	;
   20                        	; ***************************************************************************
   21                        	; ***************************************************************************
   22                        	
   23                        			; Allow projects to customize what is included at the end
   24                        			; of a pass without replacing the entire "hucc-final.asm".
   25                        	
   26               E309     			.code
   27               0000     			.bank	CORE_BANK
   28               E309     			.page	CORE_PAGE
   29                        	
                             #[3]   "..\..\..\include\hucc\hucc-final-extra.asm"
   30                        			include	"hucc-final-extra.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-final-extra.asm
    5                        	;
    6                        	; hucc-final.asm includes this file at the end of every pass in HuCC or SDCC.
    7                        	;
    8                        	; Copyright John Brandwood 2024.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; This is used to select which assembly-language library files to include in
   18                        	; a HuCC project, using labels defined in the compiler's header files.
   19                        	;
   20                        	; ***************************************************************************
   21                        	; ***************************************************************************
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   31                        	
   32                        			; Libraries required for basic functionality.
   33                        	
   34               E309     			.code
   35               0000     			.bank	CORE_BANK
   36               E309     			.page	CORE_PAGE
   37                        	
                             #[3]   "..\..\..\include\hucc\common.asm"
   38                        			include	"common.asm"		; Common helpers.
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; common.asm
    5                        	;
    6                        	; Small, generic, PCE subroutines that are commonly useful when developing.
    7                        	;
    8                        	; These should be located in permanently-accessible memory!
    9                        	;
   10                        	; Copyright John Brandwood 2021-2024.
   11                        	;
   12                        	; Distributed under the Boost Software License, Version 1.0.
   13                        	; (See accompanying file LICENSE_1_0.txt or copy at
   14                        	;  http://www.boost.org/LICENSE_1_0.txt)
   15                        	;
   16                        	; ***************************************************************************
   17                        	; ***************************************************************************
   18                        	
   19                        	
   20                        	
   21                        	; ***************************************************************************
   22                        	; ***************************************************************************
   23                        	;
   24                        	; Wait for the next VBLANK IRQ.
   25                        	;
   26                        	
   27    00:E309  AD 41 22   	wait_vsync:	lda	irq_cnt			; System Card variable, changed
   28    00:E30C  CD 41 22   	.loop:		cmp	irq_cnt			; every VBLANK interrupt.
   29    00:E30F  F0 FB      			beq	.loop
   30               0001     		.ifdef	HUCC
   31    00:E311  8D EB 22   			sta	old_cnt			; Remember the frame count.
   32                        		.endif
   33    00:E314  60         			rts
   34                        	
   35                        	
   36                        	
   37                        	; ***************************************************************************
   38                        	; ***************************************************************************
   39                        	;
   40                        	; Delay for the next Y VBLANK IRQs.
   41                        	;
   42                        	
   43               0001     		.ifdef	HUCC
   44    00:E315             	_vsync		.alias	wait_vsync
   45                        	
   46    00:E315  AD 41 22   	_vsync.1:	lda	irq_cnt			; HuCC's vsync(n) was defined
   47    00:E318  38         			sec				; as frames from the previous
   48    00:E319  ED EB 22   			sbc	old_cnt			; vsync() call, 1 to 255.
   49    00:E31C  38         			sec
   50    00:E31D  E5 F8      			sbc	<_al
   51    00:E31F  90 02      			bcc	!+
   52    00:E321  A9 FF      			lda	#$FF
   53    00:E323  49 FF      	!:		eor	#$FF
   54    00:E325  1A         			inc	a
   55    00:E326  A8         			tay
   56                        		.endif
   57                        	
   58    00:E327  44 E0      	wait_nvsync:	bsr	wait_vsync		; # of VBLANK IRQs to wait in
   59    00:E329  88         			dey				; the Y register.
   60    00:E32A  D0 FB      			bne	wait_nvsync
   61    00:E32C  60         			rts
   62                        	
   63                        	
   64                        	
   65               0000     		.ifndef	HUCC
  101                        		.endif
  102                        	
  103                        	
  104                        	
  105                        	; ***************************************************************************
  106                        	; ***************************************************************************
  107                        	;
  108                        	; Map the _bp data far-pointer into MPR3 (& MPR4).
  109                        	;
  110                        	; Because the 16KB RAM region at $2000-$5FFF is composed of two separate
  111                        	; banks, with the 2nd bank having no specific relation to the 1st, there
  112                        	; is no way to deal with a bank-increment, so do not map that region.
  113                        	;
  114                        	; N.B. Library code relies on this preserving X and V!
  115                        	;
  116                        	
  117    00:E32D  98         	map_bp_to_mpr3:	tya				; Put bank into MPR3.
  118    00:E32E  F0 0A      			beq	!+
  119    00:E330  53 08      			tam3
  120    00:E332  A5 ED      			lda.h	<_bp			; Do not remap a ptr to RAM,
  121    00:E334  29 1F      			and	#$1F			; Remap ptr to MPR3.
  122    00:E336  09 60      			ora	#$60
  123    00:E338  85 ED      			sta.h	<_bp
  124    00:E33A  60         	!:		rts
  125                        	
  126    00:E33B  98         	map_bp_to_mpr34:tya				; Put bank into MPR3.
  127    00:E33C  F0 0D      			beq	!+
  128    00:E33E  53 08      			tam3
  129    00:E340  1A         			inc	a			; Put next into MPR4.
  130    00:E341  53 10      			tam4
  131    00:E343  A5 ED      			lda.h	<_bp			; Do not remap a ptr to RAM,
  132    00:E345  29 1F      			and	#$1F			; Remap ptr to MPR3.
  133    00:E347  09 60      			ora	#$60
  134    00:E349  85 ED      			sta.h	<_bp
  135    00:E34B  60         	!:		rts
  136                        	
  137                        	
  138                        	
  139                        	; ***************************************************************************
  140                        	; ***************************************************************************
  141                        	;
  142                        	; Increment the hi-byte of _bp and change TMA3 if necessary.
  143                        	;
  144                        	; N.B. Library code relies on this preserving A,X,Y and V!
  145                        	;
  146                        	
  147    00:E34C  E6 ED      	inc.h_bp_mpr3:	inc.h	<_bp			; Increment hi-byte of _bp.
  148    00:E34E  10 0B      			bpl	!+			; OK if within MPR0-MPR3.
  149    00:E350  48         			pha				; Increment the bank in MPR3,
  150    00:E351  43 08      			tma3				; usually when pointer moves
  151    00:E353  1A         			inc	a			; from $7FFF -> $8000.
  152    00:E354  53 08      			tam3
  153    00:E356  A9 60      			lda	#$60
  154    00:E358  85 ED      			sta.h	<_bp
  155    00:E35A  68         			pla
  156    00:E35B  60         	!:		rts
  157                        	
  158                        	
  159                        	
  160                        	; ***************************************************************************
  161                        	; ***************************************************************************
  162                        	;
  163                        	; Increment the hi-byte of _bp and change TMA3 and TMA4 if necessary.
  164                        	;
  165                        	; N.B. Library code relies on this preserving A,X,Y and V!
  166                        	;
  167                        	
  168    00:E35C  E6 ED      	inc.h_bp_mpr34:	inc.h	<_bp			; Increment hi-byte of _bp.
  169    00:E35E  10 0D      			bpl	!+			; OK if within MPR0-MPR3.
  170    00:E360  48         			pha				; Increment the bank in MPR3,
  171    00:E361  43 10      			tma4				; usually when pointer moves
  172    00:E363  53 08      			tam3				; from $7FFF -> $8000.
  173    00:E365  1A         			inc	a
  174    00:E366  53 10      			tam4
  175    00:E368  A9 60      			lda	#$60
  176    00:E36A  85 ED      			sta.h	<_bp
  177    00:E36C  68         			pla
  178    00:E36D  60         	!:		rts
  179                        	
  180                        	
  181                        	
  182                        	; ***************************************************************************
  183                        	; ***************************************************************************
  184                        	;
  185                        	; Put the _di data pointer into the VDC's MARR or MAWR register.
  186                        	;
  187                        	; N.B. Library code relies on this preserving Y!
  188                        	;
  189                        	
  190               0001     		.if	SUPPORT_SGX
  191    00:E36E  A2 10      	sgx_di_to_marr:	ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  192    00:E370  F0         			db	$F0			; Turn "clx" into a "beq".
  193                        		.endif
  194                        	
  195    00:E371  82         	vdc_di_to_marr:	clx				; Offset to PCE VDC.
  196                        	
  197    00:E372  A9 01      	set_di_to_marr	lda	#VDC_MARR		; Set VDC or SGX destination
  198    00:E374  95 F7      			sta	<vdc_reg, x		; address.
  199    00:E376  9D 00 02   			sta	VDC_AR, x
  200    00:E379  80 09      			bra	!+
  201                        	
  202               0001     		.if	SUPPORT_SGX
  203    00:E37B  A2 10      	sgx_di_to_mawr:	ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  204    00:E37D  F0         			db	$F0			; Turn "clx" into a "beq".
  205                        		.endif
  206                        	
  207    00:E37E  82         	vdc_di_to_mawr:	clx				; Offset to PCE VDC.
  208                        	
  209    00:E37F             	set_di_to_mawr;	lda	#VDC_MAWR		; Set VDC or SGX destination
  210    00:E37F  74 F7      			stz	<vdc_reg, x		; address.
  211    00:E381  9E 00 02   			stz	VDC_AR, x
  212                        	
  213    00:E384  A5 F0      	!:		lda	<_di + 0
  214    00:E386  9D 02 02   			sta	VDC_DL, x
  215    00:E389  A5 F1      			lda	<_di + 1
  216    00:E38B  9D 03 02   			sta	VDC_DH, x
  217                        	
  218    00:E38E  A9 02      			lda	#VDC_VWR		; Select the VRR/VWR data
  219    00:E390  95 F7      			sta	<vdc_reg, x		; register.
  220    00:E392  9D 00 02   			sta	VDC_AR, x
  221    00:E395  60         			rts
  222                        	
  223                        	
  224                        	
  225                        	; ***************************************************************************
  226                        	; ***************************************************************************
  227                        	;
  228                        	; Increment the hi-byte of _di and change TMA4 if necessary.
  229                        	;
  230                        	
  231               0000     		.if	0				; Save memory, for now.
  250                        		.endif
  251                        	
  252                        	
  253                        	
  254                        	; ***************************************************************************
  255                        	; ***************************************************************************
  256                        	;
  257                        	; Far-call a function in another bank.
  258                        	;
  259                        	; This is a potential alternative procedure call trampoline that uses only 10
  260                        	; bytes of common memory per bank of procedures, instead of 10 bytes for each
  261                        	; individual procedure call, BUT it uses the X register as a procedure-index,
  262                        	; and it needs a table of addresses at the end of every procedure bank.
  263                        	;
  264                        	; To use this ...
  265                        	;
  266                        	;  ldx #procedure-index
  267                        	;  jsr far_call_nn
  268                        	;
  269                        	; The called .PROC routine must exit with "jmp leave_proc" and not "rts".
  270                        	;
  271                        	; leave_proc:	pla
  272                        	;		tam6
  273                        	;		tya
  274                        	;		rts
  275                        	;
  276                        	; N.B. This costs 21 cycles vs 18 for the .newproc trampoline code (when you
  277                        	;      exclude preserving YA in zero-page).
  278                        	;
  279                        	; N.B. This was written as an excerise, and definitely not for HuC!
  280                        	;
  281                        	
  282               0000     		.if	0
  295                        		.endif					; 21
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
                             #[3]   "..\..\..\include\hucc\vce.asm"
   39                        			include	"vce.asm"		; Useful VCE routines.
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; vce.asm
    5                        	;
    6                        	; Useful routines for operating the HuC6260 Video Color Encoder
    7                        	;
    8                        	; These should be located in permanently-accessible memory!
    9                        	;
   10                        	; Copyright John Brandwood 2021-2025.
   11                        	;
   12                        	; Distributed under the Boost Software License, Version 1.0.
   13                        	; (See accompanying file LICENSE_1_0.txt or copy at
   14                        	;  http://www.boost.org/LICENSE_1_0.txt)
   15                        	;
   16                        	; ***************************************************************************
   17                        	; ***************************************************************************
   18                        	
   19                        	;
   20                        	; Configure Library ...
   21                        	;
   22                        	
   23               0000     		.ifndef VCE_SPLIT_CROSS
   25                        		.endif
   26                        	
   27                        	
   28                        	
   29                        	; ***************************************************************************
   30                        	; ***************************************************************************
   31                        	;
   32                        	; xfer_palettes - Update the VCE with the queued palettes changes.
   33                        	;
   34                        	; This is normally called in a developer's vsync_hook handler, but it can
   35                        	; be called manually as long as it will not also be called in an interrupt.
   36                        	;
   37                        	; The queued transfers are split into 32-byte chunks so that an HSYNC and/or
   38                        	; TIMER IRQ is not delayed for too long during the VBLANK.
   39                        	;
   40                        	
   41    00:E396  A9 80      	xfer_palettes:	lda	#$80			; Acquire color mutex to avoid
   42    00:E398  0C 1D 23   			tsb	color_mutex		; conflict with a delayed VBL.
   43    00:E39B  30 5F      			bmi	.busy
   44                        	
   45    00:E39D  AC 1E 23   			ldy	color_queue_r		; Are there any palette xfers
   46    00:E3A0  CC 1F 23   			cpy	color_queue_w		; queued up?
   47    00:E3A3  F0 54      			beq	.exit
   48                        	
   49    00:E3A5  08         			php				; Enable interrupts so that an
   50    00:E3A6  58         			cli				; HSYNC or TIMER IRQ can occur.
   51                        	
   52    00:E3A7  43 08      			tma3				; Preserve MPR3 & MPR4 because
   53    00:E3A9  48         			pha				; this normally runs in the
   54    00:E3AA  43 10      			tma4				; VBLANK IRQ.
   55    00:E3AC  48         			pha
   56                        	
   57               0001     		.if	!CDROM
   58    00:E3AD  73 02 E4 86			tii	.tia_func, color_tia, 8 ; Copy TIA to RAM.
         00:E3B1  22 08 00    
   59                        		.endif
   60                        	
   61    00:E3B4  B9 20 23   	.next_item:	lda	color_index, y		; Get the next set of palettes
   62    00:E3B7  0A         			asl	a			; from the queue.
   63    00:E3B8  0A         			asl	a
   64    00:E3B9  0A         			asl	a
   65    00:E3BA  0A         			asl	a
   66    00:E3BB  8D 02 04   			sta	VCE_CTA + 0
   67    00:E3BE  62         			cla
   68    00:E3BF  2A         			rol	a
   69    00:E3C0  8D 03 04   			sta	VCE_CTA + 1
   70                        	
   71    00:E3C3  BE 28 23   			ldx	color_count,y		; How many palettes to xfer?
   72                        	
   73    00:E3C6  B9 40 23   			lda	color_bank, y		; Map data into MPR3 & MPR4.
   74    00:E3C9  53 08      			tam3
   75    00:E3CB  1A         			inc	a
   76    00:E3CC  53 10      			tam4
   77    00:E3CE  B9 38 23   			lda	color_addr_h, y
   78    00:E3D1  8D 88 22   			sta	.ram_tia + 2
   79    00:E3D4  B9 30 23   			lda	color_addr_l, y
   80    00:E3D7  8D 87 22   	.palette_loop:	sta	.ram_tia + 1
   81                        	
   82               0000     		.if	CDROM
   84                        		.else
   85    00:E3DA  20 86 22   			jsr	.ram_tia		; Copy 32-bytes to the VCE.
   86                        		.endif
   87                        	
   88    00:E3DD  18         			clc				; Increment the data ptr to
   89    00:E3DE  69 20      			adc	#32			; the next 32-byte palette.
   90    00:E3E0  B0 1B      			bcs	.next_page
   91                        	
   92    00:E3E2  CA         	.next_palette:	dex				; Any palettes left to xfer?
   93    00:E3E3  D0 F2      			bne	.palette_loop
   94                        	
   95    00:E3E5  C8         			iny				; Increment the queue index.
   96    00:E3E6  98         			tya
   97    00:E3E7  29 07      			and	#7
   98    00:E3E9  A8         			tay
   99                        	
  100    00:E3EA  CC 1F 23   			cpy	color_queue_w		; Any more items in the queue?
  101    00:E3ED  D0 C5      			bne	.next_item
  102    00:E3EF  8C 1E 23   			sty	color_queue_r		; Signal the queue is empty.
  103                        	
  104    00:E3F2  68         			pla				; Restore MPR3 & MPR4.
  105    00:E3F3  53 10      			tam4
  106    00:E3F5  68         			pla
  107    00:E3F6  53 08      			tam3
  108                        	
  109    00:E3F8  28         			plp				; Restore interrupt state.
  110                        	
  111    00:E3F9  9C 1D 23   	.exit:		stz	color_mutex		; Release color mutex.
  112                        	
  113    00:E3FC  60         	.busy:		rts
  114                        	
  115    00:E3FD  EE 88 22   	.next_page:	inc	.ram_tia + 2
  116    00:E400  80 E0      			bra	.next_palette
  117                        	
  118               0001     		.if	!CDROM
  119               2286     	.ram_tia	=	color_tia		; Use a TIA in RAM.
  120                        	
  121    00:E402  E3 00 00 04	.tia_func:	tia	0, VCE_CTW, 32
         00:E406  04 20 00    
  122    00:E409  60         			rts
  123                        		.endif	!CDROM
  124                        	
  125               231D     			.bss
  126                        	
  127    F8:231D             	color_mutex:	ds	1			; Mutex for VCE changes.
  128    F8:231E             	color_queue_r:	ds	1			; Ring buffer read index.
  129    F8:231F             	color_queue_w:	ds	1			; Ring buffer write index.
  130    F8:2320             	color_index:	ds	8			; Ring buffer - Palette index.
  131    F8:2328             	color_count:	ds	8			; Ring buffer - Palette count.
  132    F8:2330             	color_addr_l:	ds	8			; Ring buffer - Data Ptr (lo).
  133    F8:2338             	color_addr_h:	ds	8			; Ring buffer - Data Ptr (hi).
  134    F8:2340             	color_bank:	ds	8			; Ring buffer - Data Ptr (bank).
  135                        	
  136               E40A     			.code
  137                        	
  138                        	
  139                        	
  140                        	; ***************************************************************************
  141                        	; ***************************************************************************
  142                        	;
  143                        	; load_palettes - Queue a set of palettes to upload to the VCE next VBLANK.
  144                        	;
  145                        	; Args: _al = Palette index (0..15 for BG, 16..31 for SPR).
  146                        	; Args: _ah = Palette count (1..32).
  147                        	; Args: _bp = Pointer to palette data.
  148                        	; Args:   Y = Bank to map into MPR3 & MPR4, or zero to leave unchanged.
  149                        	;
  150                        	; N.B. Y==0 is only useful if the palette data is permanently mapped!
  151                        	;
  152                        	
  153                        	load_palettes	.proc
  179                        			.endp
  180                        	
  181                        	
  182                        	
  183                        	; ***************************************************************************
  184                        	; ***************************************************************************
  185                        	;
  186                        	; clear_vce - Clear all 512 of the VCE's palette entries.
  187                        	;
  188                        	
  189    02:C6CB             	clear_vce	.proc
  190                        	
  191    02:C6CB  08         			php				; Disable interrupts to avoid
  192    02:C6CC  78         			sei				; VBLANK palette upload.
  193    02:C6CD  C2         			cly
  194    02:C6CE  9C 02 04   			stz	VCE_CTA+0		; Set VCE write address.
  195    02:C6D1  9C 03 04   			stz	VCE_CTA+1
  196    02:C6D4  9C 04 04   	.loop:		stz	VCE_CTW+0		; Set lo-byte of color.
  197    02:C6D7  9C 05 04   			stz	VCE_CTW+1		; Write 1 color value.
  198    02:C6DA  9C 04 04   			stz	VCE_CTW+0		; Set lo-byte of color.
  199    02:C6DD  9C 05 04   			stz	VCE_CTW+1		; Write 1 color value.
  200    02:C6E0  88         			dey
  201    02:C6E1  D0 F1      			bne	.loop
  202    02:C6E3  28         			plp
  203                        	
  204                        			leave				; All done, phew!
         02:C6E4  4C EF FF   			jmp	leave_proc
  205                        	
  206                        			.endp
  207                        	
  208               0001     		.ifdef	HUCC
  209    00:E40A             			.alias	_clear_palette		= clear_vce
  210                        		.endif
  211                        	
  212                        	
  213                        	
  214                        	; ***************************************************************************
  215                        	; ***************************************************************************
  216                        	;
  217                        	; read_palettes - Read palettes from the VCE into a buffer in RAM.
  218                        	;
  219                        	; Args: _al = Palette index (0..15 for BG, 16..31 for SPR).
  220                        	; Args: _ah = Palette count (1..32).
  221                        	; Args: _di = Pointer to palette data destination in RAM.
  222                        	;
  223                        	; The transfer is split into 32-byte chunks so that an HSYNC and/or TIMER
  224                        	; IRQ is not delayed for too long while executing.
  225                        	;
  226                        	
  227                        	read_palettes	.proc
  281                        			.endp
  282                        	
  283               0001     		.ifdef	HUCC
  284    00:E40A             			.alias	_read_palette.3		= read_palettes
  285                        		.endif
  286                        	
  287                        	
  288                        	
  289                        	vce_fade_funcs	.procgroup
  516                        			.endprocgroup
  517                        	
  518                        	
  519                        	
  520                        	; ***************************************************************************
  521                        	; ***************************************************************************
  522                        	;
  523                        	; cross_fade_to - Cross fade a palette in RAM towards a reference palette.
  524                        	;
  525                        	; Args: _al = Number of colors (1..256).
  526                        	; Args: _di = Pointer to faded palette destination in RAM.
  527                        	; Args: _bp = Pointer to reference palette data.
  528                        	; Args:   Y = Bank to map into MPR3 & MPR4, or zero to leave unchanged.
  529                        	;
  530                        	; N.B. Y==0 is only useful if the reference palette data is already mapped!
  531                        	;
  532                        	; N.B. This only updates the palette in RAM by 1 RGB step, so it will need
  533                        	;      to be called 7 times to guarantee that you've reached the target.
  534                        	;
  535                        	
  536                        	cross_fade_to	.proc
  658                        			.endp
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
                             #[3]   "..\..\..\include\hucc\vdc.asm"
   40                        			include	"vdc.asm"		; Useful VDC routines.
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; vdc.asm
    5                        	;
    6                        	; Useful routines for operating the HuC6270 Video Display Controller.
    7                        	;
    8                        	; These should be located in permanently-accessible memory!
    9                        	;
   10                        	; Copyright John Brandwood 2021-2025.
   11                        	;
   12                        	; Distributed under the Boost Software License, Version 1.0.
   13                        	; (See accompanying file LICENSE_1_0.txt or copy at
   14                        	;  http://www.boost.org/LICENSE_1_0.txt)
   15                        	;
   16                        	; ***************************************************************************
   17                        	; ***************************************************************************
   18                        	
   19                        	;
   20                        	; Include dependancies ...
   21                        	;
   22                        	
   23                        			include "common.asm"		; Common helpers.
   24                        			include "vce.asm"		; Useful VCE routines.
   25                        	
   26                        	;
   27                        	; Choose how much to transfer to VRAM in a single chunk, normally 16-bytes.
   28                        	;
   29                        	; The cycle timings for a TIA-to-VRAM depend upon how the VDC's MWR CPU slots
   30                        	; line up to the CPU's writes, and how long the VDC has to halt the CPU while
   31                        	; it fetches the next scanline's sprite data.
   32                        	;
   33                        	; These cycle timings are for 0 sprites (best) and 16 sprites (worst) ...
   34                        	;
   35                        	; 32-byte TIA takes 270..364 cycles in 5MHz, 242..312 cycles in 7MHz. (8.44 cycles-per-byte best-case at 5MHz.)
   36                        	; 24-byte TIA takes 210..298 cycles in 5MHz, 186..256 cycles in 7MHz. (8.75 cycles-per-byte best-case at 5MHz.)
   37                        	; 16-byte TIA takes 142..234 cycles in 5MHz, 128..200 cycles in 7MHz. (8.88 cycles-per-byte best-case at 5MHz.)
   38                        	;
   39                        	; If a user wishes to be able to put RCR interrupts one-line-after-another,
   40                        	; then it is only safe to use 32-byte chunks if there are no TIMER or IRQ2
   41                        	; interrupts ... which is almost-impossible to rely on in library code!
   42                        	;
   43                        	
   44               0000     		.ifndef	VRAM_XFER_SIZE
   46                        		.endif
   47                        	
   48                        	;
   49                        	; Enable BG & SPR layers, and RCR interrupt.
   50                        	;
   51                        	
   52    00:E40A  A9 04      	set_rcron:	lda	#$04			; Enable RCR interrupt.
   53    00:E40C  80 0A      			bra	!+
   54                        	
   55    00:E40E  A9 80      	set_bgon:	lda	#$80			; Enable BG layer.
   56    00:E410  80 06      			bra	!+
   57                        	
   58    00:E412  A9 40      	set_spron:	lda	#$40			; Enable SPR layer.
   59    00:E414  80 02      			bra	!+
   60                        	
   61    00:E416  A9 C0      	set_dspon:	lda	#$C0			; Enable BG & SPR layers.
   62                        	
   63    00:E418  04 F3      	!:		tsb	<vdc_crl		; These take effect when
   64               0001     		.if	SUPPORT_SGX			; the next VBLANK occurs.
   65    00:E41A  04 03      			tsb	<sgx_crl
   66                        		.endif
   67    00:E41C  60         			rts
   68                        	
   69                        	;
   70                        	; Disable BG & SPR layers, and RCR interrupt.
   71                        	;
   72                        	
   73    00:E41D  A9 04      	set_rcroff:	lda	#$04			; Disable RCR interrupt.
   74    00:E41F  80 0A      			bra	!+
   75                        	
   76    00:E421  A9 80      	set_bgoff:	lda	#$80			; Disable BG layer.
   77    00:E423  80 06      			bra	!+
   78                        	
   79    00:E425  A9 40      	set_sproff:	lda	#$40			; Disable SPR layer.
   80    00:E427  80 02      			bra	!+
   81                        	
   82    00:E429  A9 C0      	set_dspoff:	lda	#$C0			; Disable BG & SPR layers.
   83                        	
   84    00:E42B  14 F3      	!:		trb	<vdc_crl		; These take effect when
   85               0001     		.if	SUPPORT_SGX			; the next VBLANK occurs.
   86    00:E42D  14 03      			trb	<sgx_crl
   87                        		.endif
   88    00:E42F  60         			rts
   89                        	
   90                        	
   91                        	
   92                        	; ***************************************************************************
   93                        	; ***************************************************************************
   94                        	;
   95                        	; Put the _di data pointer into the VDC's MARR or MAWR register.
   96                        	;
   97                        	; N.B. Library code relies on this preserving Y!
   98                        	;
   99                        	; Args: _di + 0 = BAT X coordinate.
  100                        	; Args: _di + 1 = BAT Y coordinate.
  101                        	;
  102                        	; Here because it relies on the "vdc_bat_width" that is defined in this file.
  103                        	;
  104                        	
  105               0001     		.if	SUPPORT_SGX
  106    00:E430  A2 10      	sgx_di_xy_marr:	ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  107    00:E432  F0         			db	$F0			; Turn "clx" into a "beq".
  108                        		.endif
  109                        	
  110    00:E433  82         	vdc_di_xy_marr:	clx				; Offset to PCE VDC.
  111                        	
  112    00:E434  62         	set_di_xy_mawr:	cla
  113    00:E435  3C 48 23   			bit	vdc_bat_width, x	; Set by set_bat_size().
  114    00:E438  30 08      			bmi	.w128
  115    00:E43A  70 03      			bvs	.w64
  116    00:E43C  46 F1      	.w32:		lsr.h	<_di
  117    00:E43E  6A         			ror	a
  118    00:E43F  46 F1      	.w64:		lsr.h	<_di
  119    00:E441  6A         			ror	a
  120    00:E442  46 F1      	.w128:		lsr.h	<_di
  121    00:E444  6A         			ror	a
  122    00:E445  05 F0      			ora.l	<_di
  123    00:E447  85 F0      			sta.l	<_di
  124    00:E449  4C 7F E3   			jmp	set_di_to_mawr		; In "common.asm".
  125                        	
  126                        	
  127                        	
  128    02:C58D             	vdc_clear_vram	.procgroup			; These routines share code!
  129                        	
  130                        	; ***************************************************************************
  131                        	; ***************************************************************************
  132                        	;
  133                        	; clear_vram_sgx - Clear all of VRAM in the SGX VDC.
  134                        	; clear_vram_vdc - Clear all of VRAM in the PCE VDC.
  135                        	;
  136                        	; Args: _ax = word value to write to the BAT.
  137                        	; Args: _bl = hi-byte of size of BAT (# of words).
  138                        	;
  139                        	
  140               0001     		.if	SUPPORT_SGX
  141    02:C58D             	clear_vram_sgx	.proc
  142                        	
  143    02:C58D  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  144    02:C58F  F0         			db	$F0			; Turn "clx" into a "beq".
  145                        	
  146    02:C590             			.ref	clear_vram_vdc		; Need clear_vram_vdc
  147                        			.endp
  148                        		.endif
  149                        	
  150    02:C590             	clear_vram_vdc	.proc
  151                        	
  152    02:C590  82         			clx				; Offset to PCE VDC.
  153                        	
  154    02:C591  20 91 FE   	clear_vram_x:	call	clear_bat_x		; Clear the BAT.
  155                        	
  156    02:C594  A9 80      			lda	#$80			; Xvert hi-byte of # words
  157    02:C596  38         			sec				; in screen to loop count.
  158    02:C597  E5 FA      			sbc	<_bl
  159    02:C599  4A         			lsr	a
  160                        	
  161                        	;		cly				; Clear the rest of VRAM.
  162    02:C59A  9E 02 02   			stz	VDC_DL, x
  163    02:C59D  9E 03 02   	.clr_loop:	stz	VDC_DH, x		; Seperate writes to minimize
  164    02:C5A0  88         			dey				; VDC MWR penalty.
  165    02:C5A1  9E 03 02   			stz	VDC_DH, x
  166    02:C5A4  D0 F7      			bne	.clr_loop
  167    02:C5A6  3A         			dec	a
  168    02:C5A7  D0 F4      			bne	.clr_loop
  169                        	
  170                        			leave				; All done, phew!
         02:C5A9  4C EF FF   			jmp	leave_proc
  171                        	
  172                        			.endp
  173                        	
  174                        	
  175                        	
  176                        	; ***************************************************************************
  177                        	; ***************************************************************************
  178                        	;
  179                        	; clear_bat_sgx - Clear the BAT in the SGX VDC.
  180                        	; clear_bat_vdc - Clear the BAT in the PCE VDC.
  181                        	;
  182                        	; Args: _ax = word value to write to the BAT.
  183                        	; Args: _bl = hi-byte of size of BAT (# of words).
  184                        	;
  185                        	
  186               0001     		.if	SUPPORT_SGX
  187                        	clear_bat_sgx	.proc
  193                        			.endp
  194                        		.endif
  195                        	
  196    02:C5AC             	clear_bat_vdc	.proc
  197                        	
  198    02:C5AC  82         			clx				; Offset to PCE VDC.
  199                        	
  200    02:C5AD             			.ref	clear_bat_x		; Need clear_bat_x
  201                        			.endp
  202                        	
  203    02:C5AD             	clear_bat_x	.proc				; HuCC uses this entry point.
  204                        	
  205    02:C5AD  64 F0      			stz	<_di + 0		; Set VDC or SGX destination
  206    02:C5AF  64 F1      			stz	<_di + 1		; address.
  207    02:C5B1  20 7F E3   			jsr	set_di_to_mawr
  208                        	
  209    02:C5B4  A5 FA      			lda	<_bl			; Xvert hi-byte of # words
  210    02:C5B6  4A         			lsr	a			; in screen to loop count.
  211                        	
  212    02:C5B7  C2         			cly
  213    02:C5B8  48         	.bat_loop:	pha
  214    02:C5B9  A5 F8      			lda	<_ax + 0
  215    02:C5BB  9D 02 02   			sta	VDC_DL, x
  216    02:C5BE  A5 F9      			lda	<_ax + 1
  217    02:C5C0  9D 03 02   	.bat_pair:	sta	VDC_DH, x		; Seperate writes to minimize
  218    02:C5C3  88         			dey				; VDC MWR penalty.
  219    02:C5C4  9D 03 02   			sta	VDC_DH, x
  220    02:C5C7  D0 F7      			bne	.bat_pair
  221                        	
  222    02:C5C9  68         			pla
  223    02:C5CA  3A         			dec	a
  224    02:C5CB  D0 EB      			bne	.bat_loop
  225                        	
  226                        			leave
         02:C5CD  4C EF FF   			jmp	leave_proc
  227                        	
  228                        			.endp
  229                        	
  230                        			.endprocgroup
  231                        	
  232                        	;
  233                        	;
  234                        	;
  235                        	
  236    09:DDE9             	vdc_set_mode	.procgroup			; These routines share code!
  237                        	
  238                        	; ***************************************************************************
  239                        	; ***************************************************************************
  240                        	;
  241                        	; set_mode_sgx - Set video hardware registers from a data table.
  242                        	; set_mode_vdc - Set video hardware registers from a data table.
  243                        	;
  244                        	; Args: _bp, Y = _farptr to data table mapped into MPR3 & MPR4.
  245                        	;
  246                        	
  247               0001     		.if	SUPPORT_SGX
  248    09:DDE9             	set_mode_sgx	.proc
  249                        	
  250    09:DDE9  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  251    09:DDEB  F0         			db	$F0			; Turn "clx" into a "beq".
  252                        	
  253                        			.endp
  254                        		.endif
  255                        	
  256    09:DDEC             	set_mode_vdc	.proc
  257                        	
  258    09:DDEC  82         			clx				; Offset to PCE VDC.
  259                        	
  260    09:DDED  F7 F8      			smb7	<_al			; Signal no set_bat_size() yet.
  261                        	
  262    09:DDEF  43 08      			tma3				; Preserve MPR3.
  263    09:DDF1  48         			pha
  264    09:DDF2  43 10      			tma4				; Preserve MPR4.
  265    09:DDF4  48         			pha
  266                        	
  267    09:DDF5  20 3B E3   			jsr	map_bp_to_mpr34		; Map data to MPR3 & MPR4.
  268                        	
  269    09:DDF8  08         			php				; Disable interrupts.
  270    09:DDF9  78         			sei
  271                        	
  272    09:DDFA  C2         			cly				; Table size is < 256 bytes.
  273                        	
  274    09:DDFB  B1 EC      	.loop:		lda	[_bp], y		; Get the register #, +ve for
  275    09:DDFD  F0 46      			beq	.done			; VDC, -128 for VCE_CR.
  276    09:DDFF  10 0C      			bpl	.set_vdc_reg
  277                        	
  278                        			; Set the VCE_CR register.
  279                        	
  280    09:DE01  C8         	.set_vce_cr:	iny
  281                        	
  282    09:DE02  B1 EC      			lda	[_bp], y		; Get lo-byte of register.
  283    09:DE04  C8         			iny
  284    09:DE05  8D 44 22   			sta	vce_cr			; No SGX shadow for this!
  285    09:DE08  8D 00 04   			sta	VCE_CR			; Set the VCE clock speed.
  286    09:DE0B  80 EE      			bra	.loop			; Do not set VDC_MWR reg bits!
  287                        	
  288                        			; Set a VDC register.
  289                        	
  290    09:DE0D  C8         	.set_vdc_reg:	iny
  291    09:DE0E  9D 00 02   			sta	VDC_AR, x		; Set which VDC register.
  292                        	
  293    09:DE11  C9 05      			cmp	#VDC_CR			; CS if VDC_CR or higher.
  294    09:DE13  F0 14      			beq	.skip_cc
  295    09:DE15  18         			clc				; CC if not VDC_CR.
  296                        	
  297    09:DE16  49 09      			eor	#VDC_MWR		; Check if this the VDC_MWR
  298    09:DE18  D0 0F      			bne	.skip_cc		; without changing CC.
  299                        	
  300    09:DE1A  B1 EC      			lda	[_bp], y		; Remember the BAT size so that
  301    09:DE1C  8D 42 22   			sta	vdc_mwr			; set_bat_size() can be called.
  302    09:DE1F  4A         			lsr	a
  303    09:DE20  4A         			lsr	a
  304    09:DE21  4A         			lsr	a
  305    09:DE22  4A         			lsr	a
  306    09:DE23  85 F8      			sta	<_al
  307    09:DE25  C8         			iny
  308    09:DE26  C8         			iny
  309    09:DE27  80 D2      			bra	.loop
  310                        	
  311    09:DE29  B1 EC      	.skip_cc:	lda	[_bp], y		; Get lo-byte of register.
  312    09:DE2B  C8         			iny
  313    09:DE2C  90 08      			bcc	.not_vdc_cr
  314                        	
  315               0001     		.if	SUPPORT_SGX
  316    09:DE2E  E0 00      			cpx	#0			; Writing to the VDC or SGX?
  317    09:DE30  F0 02      			beq	.save_crl
  318    09:DE32  29 F7      			and	#$F7			; We only need 1 vblank IRQ!
  319                        		.endif
  320                        	
  321    09:DE34  95 F3      	.save_crl:	sta	<vdc_crl, x		; Save VDC_CR shadow register.
  322                        	
  323    09:DE36  9D 02 02   	.not_vdc_cr:	sta	VDC_DL, x		; Write to VDC.
  324                        	
  325    09:DE39  B1 EC      			lda	[_bp], y		; Get hi-byte of register.
  326    09:DE3B  C8         			iny
  327    09:DE3C  9D 03 02   			sta	VDC_DH, x
  328    09:DE3F  90 BA      			bcc	.loop			; Next register, please!
  329                        	
  330    09:DE41  95 F4      			sta	<vdc_crh, x		; Save VDC_CR shadow register.
  331                        	
  332    09:DE43  80 B6      			bra	.loop			; Next register, please!
  333                        	
  334                        			; All registers set!
  335                        	
  336    09:DE45  A9 02      	.done:		lda	#VDC_VWR		; Leave with VDC_VWR set.
  337    09:DE47  95 F7      			sta	<vdc_reg, x
  338                        	;		lda	<vdc_reg, x		; Restore previous VDC_AR from
  339    09:DE49  9D 00 02   			sta	VDC_AR, x		; the shadow variable.
  340                        	
  341    09:DE4C  28         			plp				; Restore interrupts.
  342                        	
  343    09:DE4D  68         			pla				; Restore MPR4.
  344    09:DE4E  53 10      			tam4
  345    09:DE50  68         			pla				; Restore MPR3.
  346    09:DE51  53 08      			tam3
  347                        	
  348    09:DE53  7F F8 07   			bbr7	<_al, set_bat_size	; Update if BAT size changed.
  349                        	
  350                        			leave				; All done, phew!
         09:DE56  4C EF FF   			jmp	leave_proc
  351                        	
  352    09:DE59             			.ref	set_bat_vdc
  353                        			.endp
  354                        	
  355                        	
  356                        	
  357                        	; ***************************************************************************
  358                        	; ***************************************************************************
  359                        	;
  360                        	; set_bat_sgx - Change the SGX BAT size and initialize variables based on it.
  361                        	; set_bat_vdc - Change the PCE BAT size and initialize variables based on it.
  362                        	;
  363                        	; Args: _al = new size (0-7).
  364                        	;
  365                        	; (VDC_MWR_32x32  >> 4) or in HuCC, SCR_SIZE_32x32.
  366                        	; (VDC_MWR_32x64  >> 4) or in HuCC, SCR_SIZE_32x64.
  367                        	; (VDC_MWR_64x32  >> 4) or in HuCC, SCR_SIZE_64x32.
  368                        	; (VDC_MWR_64x64  >> 4) or in HuCC, SCR_SIZE_64x64.
  369                        	; (VDC_MWR_128x32 >> 4) or in HuCC, SCR_SIZE_128x32.
  370                        	; (VDC_MWR_128x64 >> 4) or in HuCC, SCR_SIZE_128x64.
  371                        	;
  372                        	
  373               0001     		.if	SUPPORT_SGX
  374    09:DE59             	set_bat_sgx	.proc
  375                        	
  376    09:DE59  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  377    09:DE5B  F0         			db	$F0			; Turn "clx" into a "beq".
  378                        	
  379    09:DE5C             			.ref	set_bat_vdc
  380                        			.endp
  381                        		.endif
  382                        	
  383    09:DE5C             	set_bat_vdc	.proc
  384                        	
  385    09:DE5C  82         			clx				; Offset to PCE VDC.
  386                        	
  387    09:DE5D  A5 F8      	set_bat_size:	lda	<_al			; Get BAT size value.
  388    09:DE5F  29 07      			and	#7			; Sanitize screen size value.
  389    09:DE61  A8         			tay
  390    09:DE62  0A         			asl	a			; Put it in bits 4..6.
  391    09:DE63  0A         			asl	a
  392    09:DE64  0A         			asl	a
  393    09:DE65  0A         			asl	a
  394    09:DE66  85 00      			sta	<__temp
  395                        	
  396    09:DE68  B9 A8 DE   			lda	.width, y
  397    09:DE6B  9D 48 23   			sta	vdc_bat_width, x
  398    09:DE6E  3A         			dec	a
  399    09:DE6F  9D 4A 23   			sta	vdc_bat_x_mask, x
  400                        	
  401    09:DE72  B9 B0 DE   			lda	.height, y
  402    09:DE75  9D 49 23   			sta	vdc_bat_height, x
  403    09:DE78  3A         			dec	a
  404    09:DE79  9D 4B 23   			sta	vdc_bat_y_mask, x
  405                        	
  406    09:DE7C  B9 B8 DE   			lda	.limit, y
  407    09:DE7F  9D 4C 23   			sta	vdc_bat_limit, x
  408                        	
  409    09:DE82  B9 C0 DE   			lda	.increment, y		; Put the VRAM increment for a
  410    09:DE85  95 F4      			sta	<vdc_crh, x		; line into vdc_crh for later.
  411                        	
  412    09:DE87  08         			php
  413    09:DE88  78         			sei
  414                        	
  415    09:DE89  A9 09      			lda	#VDC_MWR
  416    09:DE8B  9D 00 02   			sta	VDC_AR, x
  417                        	
  418    09:DE8E  AD 42 22   			lda	vdc_mwr			; Get the MWR access width bits.
  419    09:DE91  29 8F      			and	#%10001111
  420    09:DE93  05 00      			ora	<__temp
  421               0001     		.if	SUPPORT_SGX
  422    09:DE95  E0 00      			cpx	#PCE_VDC_OFFSET		; This has no SGX shadow!
  423    09:DE97  D0 03      			bne	!+
  424                        		.endif
  425    09:DE99  8D 42 22   			sta	vdc_mwr
  426    09:DE9C  9D 02 02   	!:		sta	VDC_DL, x
  427                        	
  428    09:DE9F  B5 F7      			lda	<vdc_reg, x		; Restore previous VDC_AR from
  429    09:DEA1  9D 00 02   			sta	VDC_AR, x		; the shadow variable.
  430                        	
  431    09:DEA4  28         			plp
  432                        	
  433                        			leave
         09:DEA5  4C EF FF   			jmp	leave_proc
  434                        	
  435    09:DEA8  20 40 80 80	.width:		db	$20,$40,$80,$80,$20,$40,$80,$80
         09:DEAC  20 40 80 80 
  436    09:DEB0  20 20 20 20	.height:	db	$20,$20,$20,$20,$40,$40,$40,$40
         09:DEB4  40 40 40 40 
  437    09:DEB8  03 07 0F 0F	.limit:		db	$03,$07,$0F,$0F,$07,$0F,$1F,$1F
         09:DEBC  07 0F 1F 1F 
  438    09:DEC0  08 10 18 18	.increment	db	$08,$10,$18,$18,$08,$10,$18,$18
         09:DEC4  08 10 18 18 
  439                        	
  440               2348     			.bss
  441                        	
  442                        	; **************
  443                        	; 16-bytes of VDC BAT information.
  444                        	;
  445                        	; N.B. MUST be 16-bytes before the SGX versions to use PCE_VDC_OFFSET.
  446                        	;
  447                        	; N.B. Declared inside this .proc so that they can be stripped if unused.
  448                        	
  449                        	; Initialized by set_bat_vdc.
  450    F8:2348             	vdc_bat_width:	ds	1	; $20, $40, $80
  451    F8:2349             	vdc_bat_height:	ds	1	; $20, $40
  452    F8:234A             	vdc_bat_x_mask:	ds	1	; $1F, $3F, $7F
  453    F8:234B             	vdc_bat_y_mask:	ds	1	; $1F, $3F
  454    F8:234C             	vdc_bat_limit:	ds	1	; (>$03FF), (>$07FF), (>$0FFF), (>$1FFF)
  455                        	
  456                        	; From blkmap.asm just to avoid wasting .bss space with padding.
  457    F8:234D             	vdc_map_draw_w:	ds	1	; (SCR_WIDTH / 8) + 1
  458    F8:234E             	vdc_map_draw_h:	ds	1	; (SCR_HEIGHT / 8) + 1
  459    F8:234F             	vdc_map_line_w:	ds	1	; Line width of map data in tiles.
  460    F8:2350             	vdc_map_scrn_w:	ds	1	; Line width of map data in screens.
  461    F8:2351             	vdc_map_pxl_x:	ds	2	; Current top-left X in pixels.
  462    F8:2353             	vdc_map_pxl_y:	ds	2	; Current top-left Y in pixels.
  463    F8:2355             	vdc_map_option:	ds	1	; Flags to disable BAT alignment.
  464                        	
  465                        	; From hucc-old-spr.asm just to avoid wasting .bss space with padding.
  466    F8:2356             	spr_max:	ds	1
  467    F8:2357             	spr_clr:	ds	1
  468                        	
  469               0001     		.if	SUPPORT_SGX
  470                        	
  471                        	; **************
  472                        	; 16-bytes of SGX BAT information.
  473                        	;
  474                        	; N.B. MUST be 16-bytes after the VDC versions to use SGX_VDC_OFFSET.
  475                        	;
  476                        	; N.B. Declared inside this .proc so that they can be stripped if unused.
  477                        	
  478                        	; Initialized by set_bat_sgx.
  479    F8:2358             	sgx_bat_width:	ds	1	; $20, $40, $80
  480    F8:2359             	sgx_bat_height:	ds	1	; $20, $40
  481    F8:235A             	sgx_bat_x_mask:	ds	1	; $1F, $3F, $7F
  482    F8:235B             	sgx_bat_y_mask:	ds	1	; $1F, $3F
  483    F8:235C             	sgx_bat_limit:	ds	1	; (>$03FF), (>$07FF), (>$0FFF), (>$1FFF)
  484                        	
  485                        	; From blkmap.asm just to avoid wasting .bss space with padding.
  486    F8:235D             	sgx_map_draw_w:	ds	1	; (SCR_WIDTH / 8) + 1
  487    F8:235E             	sgx_map_draw_h:	ds	1	; (SCR_HEIGHT / 8) + 1
  488    F8:235F             	sgx_map_line_w:	ds	1	; Line width of map data in tiles.
  489    F8:2360             	sgx_map_scrn_w:	ds	1	; Line width of map data in screens.
  490    F8:2361             	sgx_map_pxl_x:	ds	2	; Current top-left X in pixels.
  491    F8:2363             	sgx_map_pxl_y:	ds	2	; Current top-left Y in pixels.
  492    F8:2365             	sgx_map_option:	ds	1	; Flags to disable BAT alignment.
  493                        	
  494                        	; From hucc-old-spr.asm just to avoid wasting .bss space with padding.
  495    F8:2366             	sgx_spr_max:	ds	1
  496    F8:2367             	sgx_spr_clr:	ds	1
  497                        	
  498                        		.endif
  499                        	
  500               DEC8     			.code
  501                        	
  502                        			.endp
  503                        	
  504                        			.endprocgroup
  505                        	
  506                        	
  507                        	
  508                        	; ***************************************************************************
  509                        	; ***************************************************************************
  510                        	;
  511                        	; sgx_detect - Detect whether we're running on a SuperGrafx (and init VPC).
  512                        	;
  513                        	; Returns: X,C-flag, and "sgx_detected" = NZ, CS if detected.
  514                        	;
  515                        	; ***************************************************************************
  516                        	;
  517                        	; https://web.archive.org/web/20161129055659/http://cgfm2.emuviews.com/txt/sgxtech.txt
  518                        	;
  519                        	; ***************************************************************************
  520                        	;
  521                        	; HuC6202 VIDEO PRIORITY CONTROLLER (huge thanks to Charles MacDonald!)
  522                        	;
  523                        	; The VPC has no access to sprite priority data, it can only sort pixels
  524                        	; based upon which VDC and whether they are "sprite" or "background".
  525                        	;
  526                        	; This can sometimes lead to unexpected results with low-priority sprites.
  527                        	;
  528                        	; VPC registers $0008 and $0009 make up four 4-bit values that define the
  529                        	; enabled layers and priority setting for the four possible window areas.
  530                        	;
  531                        	; Bits 3-0 of $0008 are for the region where Window 1 and 2 overlap
  532                        	; Bits 7-4 of $0008 are for the region occupied by only Window 2
  533                        	; Bits 3-0 of $0009 are for the region occupied by only Window 1
  534                        	; Bits 7-4 of $0009 are for the region where no Window is present
  535                        	;
  536                        	;  Each 4-bit value has the same format:
  537                        	;
  538                        	;  Bit 0: VDC #1 graphics are 0=disabled, 1=enabled
  539                        	;  Bit 1: VDC #2 graphics are 0=disabled, 1=enabled
  540                        	;  Bit 2: Bit 0 of priority setting
  541                        	;  Bit 3: Bit 1 of priority setting
  542                        	;
  543                        	;   Priority Setting 0b00xx: (useful when VDC #1 is a fullscreen HUD)
  544                        	;
  545                        	;    FRONT
  546                        	;     SP1 = VDC #1 (pce) sprite pixels
  547                        	;     BG1 = VDC #1 (pce) background pixels
  548                        	;     SP2 = VDC #2 (sgx) sprite pixels
  549                        	;     BG2 = VDC #2 (sgx) background pixels
  550                        	;    BACK
  551                        	;
  552                        	;   Priority Setting 0b01xx: (useful for parallax backgrounds)
  553                        	;
  554                        	;    FRONT
  555                        	;     SP1 = VDC #1 (pce) sprite pixels
  556                        	;     SP2 = VDC #2 (sgx) sprite pixels
  557                        	;     BG1 = VDC #1 (pce) background pixels
  558                        	;     BG2 = VDC #2 (sgx) background pixels
  559                        	;    BACK
  560                        	;
  561                        	;   Priority Setting 0b10xx: (only useful for special effects)
  562                        	;
  563                        	;    FRONT
  564                        	;     BG1 = VDC #1 (pce) background pixels (transparent where sprites)
  565                        	;     BG2 = VDC #2 (sgx) background pixels
  566                        	;     SP1 = VDC #1 (pce) sprite pixels
  567                        	;     SP2 = VDC #2 (sgx) sprite pixels
  568                        	;    BACK
  569                        	
  570               0001     		.if	SUPPORT_SGX
  571               0001     		.if	1
  572    02:C5D0             	sgx_detect	.proc
  573                        	
  574    02:C5D0  A0 7F      			ldy	#$7F			; Use VRAM address $7F7F
  575    02:C5D2  84 F0      			sty.l	<_di			; because it won't cause
  576    02:C5D4  84 F1      			sty.h	<_di			; a screen glitch.
  577                        	
  578    02:C5D6  20 7B E3   			jsr	sgx_di_to_mawr		; Write $0001 to SGX VRAM.
  579    02:C5D9  A0 01      			ldy	#$01
  580    02:C5DB  8C 12 02   			sty	SGX_DL
  581    02:C5DE  9C 13 02   			stz	SGX_DH
  582                        	
  583    02:C5E1  20 7E E3   			jsr	vdc_di_to_mawr		; Write $0000 to VDC VRAM.
  584    02:C5E4  9C 02 02   			stz	VDC_DL
  585    02:C5E7  9C 03 02   			stz	VDC_DH
  586                        	
  587    02:C5EA  20 6E E3   			jsr	sgx_di_to_marr		; Check value in SGX VRAM.
  588    02:C5ED  AC 12 02   			ldy	SGX_DL			; $01 if found, $00 if not.
  589    02:C5F0  8C E8 22   			sty	sgx_detected
  590    02:C5F3  F0 10      			beq	!+			; Skip the rest if not SGX.
  591                        	
  592    02:C5F5  20 7B E3   			jsr	sgx_di_to_mawr		; Write $0000 to SGX VRAM
  593    02:C5F8  9C 12 02   			stz	SGX_DL			; to clean VRAM contents.
  594    02:C5FB  9C 13 02   			stz	SGX_DH
  595                        	
  596    02:C5FE  73 0B C6 08			tii	.vpc_mode, VPC_CR, 8	; Initialize the HuC6202 VPC.
         02:C602  02 08 00    
  597                        	
  598    02:C605  98         	!:		tya
  599    02:C606  AA         			tax				; "leave" copies X back to A.
  600    02:C607  4A         			lsr	a			; Also CC if PCE, CS if SGX.
  601                        	
  602                        			leave				; All done, phew!
         02:C608  4C EF FF   			jmp	leave_proc
  603                        		.else
  618                        		.endif
  619                        	
  620               0000     		.ifndef	SGX_PARALLAX
  622                        		.endif
  623                        	
  624               0001     		.if	SGX_PARALLAX
  625    02:C60B  00 70      	.vpc_mode:	dw	$7000			; Use SGX as a parallax layer
  626    02:C60D  00 00      			dw	$0000			; behind a VDC background.
  627    02:C60F  00 00      			dw	$0000
  628    02:C611  00 00      			dw	$0000
  629                        		.else
  634                        		.endif	SGX_PARALLAX
  635                        	
  636                        			.endp
  637                        	
  638               0000     		.ifndef	CORE_VERSION			; CORE has this in the kernel.
  642                        		.endif	CORE_VERSION
  643                        	
  644                        		.endif	SUPPORT_SGX
  645                        	
  646                        	
  647                        	
  648                        	
  649                        	vdc_copy_to	.procgroup			; These routines share code!
  799                        			.endprocgroup
  800                        	
  801                        	
  802                        	
  803                        	; ***************************************************************************
  804                        	; ***************************************************************************
  805                        	;
  806                        	; init_240x208 - An example of initializing screen and VRAM.
  807                        	;
  808                        	; This can be used as-is, or copied to your own program and modified.
  809                        	;
  810                        	
  811                        	init_240x208	.proc
  892                        			.endp
  893                        	
  894                        	
  895                        	
  896                        	; ***************************************************************************
  897                        	; ***************************************************************************
  898                        	;
  899                        	; init_256x224 - An example of initializing screen and VRAM.
  900                        	;
  901                        	; This can be used as-is, or copied to your own program and modified.
  902                        	;
  903                        	
  904                        	init_256x224	.proc
  985                        			.endp
  986                        	
  987                        	
  988                        	
  989                        	; ***************************************************************************
  990                        	; ***************************************************************************
  991                        	;
  992                        	; init_352x224 - An example of initializing screen and VRAM.
  993                        	;
  994                        	; This can be used as-is, or copied to your own program and modified.
  995                        	;
  996                        	
  997                        	init_352x224	.proc
 1078                        			.endp
 1079                        	
 1080                        	
 1081                        	
 1082                        	; ***************************************************************************
 1083                        	; ***************************************************************************
 1084                        	;
 1085                        	; init_512x224 - An example of initializing screen and VRAM.
 1086                        	;
 1087                        	; This can be used as-is, or copied to your own program and modified.
 1088                        	;
 1089                        	
 1090                        	init_512x224	.proc
 1171                        			.endp
 1172                        	
 1173                        	
 1174                        	
 1175                        	; ***************************************************************************
 1176                        	; ***************************************************************************
 1177                        	;
 1178                        	; init_320x208 - An example of initializing screen and VRAM.
 1179                        	;
 1180                        	; This can be used as-is, or copied to your own program and modified.
 1181                        	;
 1182                        	; This resolution is rarely-seen, but it has no overscan, so it has a use.
 1183                        	;
 1184                        	
 1185                        	init_320x208	.proc
 1266                        			.endp
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   41                        	
                             #[3]   "..\..\..\include\hucc\hucc-math.asm"
   42                        			include	"hucc-math.asm"		; HuCC multiply and divide.
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-math.asm
    5                        	;
    6                        	; Basic (i.e. very slow) 8-bit and 16-bit multiply and divide routines.
    7                        	;
    8                        	; Copyright John Brandwood 2021-2024.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; This is basically a set of SDCC-compatible routines, but using Y:A for the
   18                        	; primary register instead of X:A.
   19                        	;
   20                        	; Using Y:A makes the routines instantly usable with HuCC, and it also makes
   21                        	; them usable with SDCC with just an "sxy" before and after the call.
   22                        	;
   23                        	; ***************************************************************************
   24                        	; ***************************************************************************
   25                        	
   26               E44C     			.code
   27                        	
   28               2000     	multiplier	=	__temp
   29               2094     	multiplicand	=	___SDCC_m6502_ret0
   30               2094     	product		=	multiplicand
   31                        	
   32               2000     	__mulint_PARM_2	=	multiplier
   33                        	
   34               2000     	divisor		=	__temp
   35               2094     	dividend	=	___SDCC_m6502_ret0
   36               2094     	quotient	=	dividend
   37               2096     	remainder	=	___SDCC_m6502_ret2
   38                        	
   39               2000     	__moduint_PARM_2 =	divisor
   40               2000     	__modsint_PARM_2 =	divisor
   41               2000     	__divuint_PARM_2 =	divisor
   42               2000     	__divsint_PARM_2 =	divisor
   43                        	
   44                        	
   45                        	
   46                        	; ***************************************************************************
   47                        	; int
   48                        	; _mulint (int a, int b)
   49                        	;
   50                        	; 1st parameter in Y:A (multiplicand)
   51                        	; 2nd parameter in __mulint_PARM_2 (multiplier)
   52                        	; result in Y:A
   53                        	;
   54                        	; N.B. signed and unsigned multiply only differ in the top 16 of the 32bits!
   55                        	
   56    00:E44C  85 94      	__mulint:	sta	<multiplicand + 0
   57    00:E44E  84 95      			sty	<multiplicand + 1
   58                        	
   59    00:E450  A2 10      			ldx	#16			; Loop 16 times.
   60                        	
   61    00:E452  46 95      			lsr	<multiplicand + 1	; Divide multiplicand by 2
   62    00:E454  66 94      			ror	<multiplicand + 0	; and clear the 16th bit.
   63                        	
   64    00:E456  62         			cla				; Clear top word of product.
   65    00:E457  85 96      			sta.l	<multiplicand + 2
   66    00:E459  90 0B      			bcc	.rotate
   67                        	
   68    00:E45B  A8         	.add:		tay				; Add the 16-bit multiplier to
   69    00:E45C  18         			clc				; top 16-bits of the product.
   70    00:E45D  A5 96      			lda	<multiplicand + 2
   71    00:E45F  65 00      			adc.l	<multiplier
   72    00:E461  85 96      			sta	<multiplicand + 2
   73    00:E463  98         			tya
   74    00:E464  65 01      			adc.h	<multiplier
   75                        	
   76    00:E466  6A         	.rotate:	ror	a			; Rotate product into the top
   77    00:E467  66 96      			ror	<multiplicand + 2	; bits of the multiplicand ...
   78    00:E469  66 95      			ror	<multiplicand + 1	; and divide multiplicand by 2.
   79    00:E46B  66 94      			ror	<multiplicand + 0
   80                        	
   81    00:E46D  CA         			dex
   82    00:E46E  B0 EB      			bcs	.add			; Add multiplier to top word?
   83    00:E470  D0 F4      			bne	.rotate			; Completed 16 bits?
   84                        	
   85    00:E472  85 97      			sta	<multiplicand + 3	; Save top byte of product.
   86                        	
   87    00:E474  A5 94      			lda.l	<multiplicand		; Return the bottom 16-bits of
   88    00:E476  A4 95      			ldy.h	<multiplicand		; the 32-bit product.
   89                        	
   90    00:E478  60         			rts
   91                        	
   92                        	
   93                        	
   94                        	; ***************************************************************************
   95                        	; unsigned int
   96                        	; _divuint (unsigned int x, unsigned int y)
   97                        	;
   98                        	; 1st parameter in Y:A (unsigned dividend)
   99                        	; 2nd parameter in __divuint_PARM_2 (unsigned divisor)
  100                        	; result in Y:A
  101                        	
  102    00:E479  20 81 E4   	__divuint:	jsr	__moduint		; Call the basic uint division.
  103                        	
  104    00:E47C  A5 94      			lda.l	<quotient		; Then get the result from where
  105    00:E47E  A4 95      			ldy.h	<quotient		; it was calculated.
  106    00:E480  60         			rts
  107                        	
  108                        	
  109                        	
  110                        	; ***************************************************************************
  111                        	; unsigned int
  112                        	; _moduint (unsigned int x, unsigned int y)
  113                        	;
  114                        	; 1st parameter in Y:A (unsigned dividend)
  115                        	; 2nd parameter in __moduint_PARM_2 (unsigned divisor)
  116                        	; result in Y:A
  117                        	;
  118                        	; If the dividend has more bits than the divisor, then we need to check the
  119                        	; 17th bit of the remainder!
  120                        	
  121               0000     		.if	0
  176                        		.else
  177                        	
  178    00:E481  85 94      	__moduint:	sta.l	<dividend		; 1st SDCC parameter in Y:A.
  179    00:E483  84 95      			sty.h	<dividend
  180                        	
  181    00:E485  A5 00      	divmoduint:	lda.l	<divisor		; Check for a divide-by-zero.
  182    00:E487  05 01      			ora.h	<divisor
  183    00:E489  F0 FE      	.zero:		beq	.zero
  184                        	
  185    00:E48B  A2 11      			ldx	#16 + 1
  186                        	
  187    00:E48D  C2         			cly				; Clear remainder.
  188    00:E48E  84 97      			sty.h	<remainder
  189                        	
  190    00:E490  98         	.skip:		tya				; Restore remainder lo-byte.
  191                        	
  192    00:E491  26 94      	.loop:		rol.l	<dividend		; Quotient bit -> dividend LSB.
  193    00:E493  26 95      			rol.h	<dividend		; Rotate dividend, MSB -> C.
  194                        	
  195    00:E495  CA         			dex
  196    00:E496  F0 14      			beq	.finished
  197                        	
  198    00:E498  2A         			rol	a			; Rotate C into remainder.
  199    00:E499  26 97      			rol.h	<remainder
  200                        	;		php				; Preserve remainder 17th bit.
  201                        	
  202    00:E49B  A8         			tay				; Preserve remainder lo-byte.
  203                        	
  204    00:E49C  C5 00      			cmp.l	<divisor		; Test divisor.
  205    00:E49E  A5 97      			lda.h	<remainder
  206    00:E4A0  E5 01      			sbc.h	<divisor
  207    00:E4A2  90 EC      			bcc	.skip			; CC if divisor > remainder.
  208                        	
  209                        	;		cmp.l	<divisor		; If the dividend has more bits
  210                        	;		lda.h	<remainder		; than the divisor then we need
  211                        	;		sbc.h	<divisor		; to check the remainder hi-bit.
  212                        	;		bcs	.subtract		; CS if divisor <= remainder.
  213                        	;		plp				; Restore remainder 17th bit.
  214                        	;		bcc	.skip			; CC if divisor > remainder.
  215                        	;		db	$90			; Turn "plp" into "bcc" to skip.
  216                        	;.subtract:	plp				; Discard remainder 17th bit.
  217                        	;		sec
  218                        	
  219    00:E4A4  85 97      			sta.h	<remainder		; Subtract divisor.
  220    00:E4A6  98         			tya
  221    00:E4A7  E5 00      			sbc.l	<divisor
  222    00:E4A9  38         			sec				
  223    00:E4AA  80 E5      			bra	.loop
  224                        	
  225    00:E4AC  A4 97      	.finished:	ldy.h	<remainder		; Get the remainder hi-byte.
  226                        	
  227    00:E4AE  60         			rts
  228                        	
  229                        		.endif
  230                        	
  231                        	
  232                        	
  233                        	; ***************************************************************************
  234                        	; int
  235                        	; _divsint (int x, int y)
  236                        	;
  237                        	; 1st parameter in Y:A (signed dividend)
  238                        	; 2nd parameter in __divsint_PARM_2 (signed divisor)
  239                        	; result in Y:A
  240                        	
  241    00:E4AF  20 B7 E4   	__divsint:	jsr	__modsint		; Call the basic sint division.
  242                        	
  243    00:E4B2  A5 94      			lda.l	<quotient		; Then get the result from where
  244    00:E4B4  A4 95      			ldy.h	<quotient		; it was calculated.
  245    00:E4B6  60         			rts
  246                        	
  247                        	
  248                        	
  249                        	; ***************************************************************************
  250                        	; int
  251                        	; _modsint (int x, int y)
  252                        	;
  253                        	; 1st parameter in Y:A (signed dividend)
  254                        	; 2nd parameter in __modsint_PARM_2 (signed divisor)
  255                        	; result in Y:A
  256                        	
  257    00:E4B7  84 95      	__modsint:	sty.h	<dividend
  258                        	
  259    00:E4B9  C0 80      			cpy	#$80			; Remainder -ve if dividend
  260    00:E4BB  08         			php				; was -ve.
  261    00:E4BC  90 03      			bcc	!+
  262    00:E4BE  20 0E E5   			jsr	neg_yacs		; Negate the dividend.
  263                        	
  264    00:E4C1  85 94      	!:		sta.l	<dividend		; Store the dividend.
  265    00:E4C3  A5 95      			lda.h	<dividend
  266    00:E4C5  84 95      			sty.h	<dividend
  267                        	
  268    00:E4C7  45 01      			eor.h	<divisor		; Quotient is -ve if divisor
  269    00:E4C9  08         			php				; and dividend signs differ.
  270                        	
  271    00:E4CA  A5 01      			lda.h	<divisor		; Is the divisor -ve?
  272    00:E4CC  10 0B      			bpl	!+
  273                        	
  274    00:E4CE  38         			sec				; Negate the divisor.
  275    00:E4CF  62         			cla
  276    00:E4D0  E5 00      			sbc.l	<divisor
  277    00:E4D2  85 00      			sta.l	<divisor
  278    00:E4D4  62         			cla
  279    00:E4D5  E5 01      			sbc.h	<divisor
  280    00:E4D7  85 01      			sta.h	<divisor
  281                        	
  282    00:E4D9  20 85 E4   	!:		jsr	divmoduint		; Do the unsigned division.
  283                        	
  284    00:E4DC  28         	.result:	plp				; Should the quotient be -ve?
  285    00:E4DD  10 0D      			bpl	.remainder
  286                        	
  287    00:E4DF  AA         			tax				; Preserve remainder lo-byte.
  288                        	
  289    00:E4E0  38         			sec				; Then negate the quotient.
  290    00:E4E1  62         			cla
  291    00:E4E2  E5 94      			sbc.l	<dividend
  292    00:E4E4  85 94      			sta.l	<dividend
  293    00:E4E6  62         			cla
  294    00:E4E7  E5 95      			sbc.h	<dividend
  295    00:E4E9  85 95      			sta.h	<dividend
  296                        	
  297    00:E4EB  8A         			txa				; Restore remainder lo-byte.
  298                        	
  299    00:E4EC  28         	.remainder:	plp				; Was the dividend -ve?
  300    00:E4ED  B0 1F      			bcs	neg_yacs		; Then negate the remainder.
  301    00:E4EF  60         			rts
  302                        	
  303                        	
  304                        	
  305                        	; ***************************************************************************
  306                        	; unsigned int
  307                        	; _muluchar (unsigned char x, unsigned char y)
  308                        	;
  309                        	; 1st parameter in A (unsigned multiplicand)
  310                        	; 2nd parameter in Y (unsigned multiplier)
  311                        	; result in Y:A
  312                        	
  313    00:E4F0  84 00      	__muluchar:	sty	<multiplier
  314                        	
  315    00:E4F2  A0 08      	muluchar_a:	ldy	#8			; Loop 8 times.
  316                        	
  317    00:E4F4  4A         			lsr	a			; Divide multiplicand by 2
  318    00:E4F5  85 94      			sta	<multiplicand		; and clear the 8th bit.
  319                        	
  320    00:E4F7  62         			cla				; Clear top byte of product.
  321    00:E4F8  90 03      			bcc	.rotate
  322                        	
  323    00:E4FA  18         	.add:		clc				; Add the 8-bit multiplier to
  324    00:E4FB  65 00      			adc	<multiplier		; top 8-bits of the product.
  325                        	
  326    00:E4FD  6A         	.rotate:	ror	a			; Rotate product into the top
  327    00:E4FE  66 94      			ror	<multiplicand		; bits of the multiplicand.
  328                        	
  329    00:E500  88         			dey
  330    00:E501  B0 F7      			bcs	.add			; Add multiplier to top byte?
  331    00:E503  D0 F8      			bne	.rotate			; Completed 8 bits?
  332                        	
  333    00:E505  A8         			tay				; Return the 16-bit product.
  334    00:E506  A5 94      			lda	<multiplicand
  335                        	
  336    00:E508  60         			rts
  337                        	
  338                        	
  339                        	
  340                        	; ***************************************************************************
  341                        	; signed int
  342                        	; abs (signed int x)
  343                        	;
  344                        	; 1st parameter in Y:A (signed)
  345                        	; result in Y:A
  346                        	
  347    00:E509  C0 80      	_abs:		cpy	#$80			; Is the hi-byte -ve?
  348    00:E50B  90 0B      			bcc	!+
  349                        	
  350    00:E50D  38         	neg_ya:		sec
  351    00:E50E  49 FF      	neg_yacs:	eor	#$FF
  352    00:E510  69 00      			adc	#0
  353    00:E512  42         			say
  354    00:E513  49 FF      			eor	#$FF
  355    00:E515  69 00      			adc	#0
  356    00:E517  42         			say
  357    00:E518  60         	!:		rts
  358                        	
  359    00:E519             	_abs.1		.alias	_abs
  360                        	
  361                        	
  362                        	
  363                        	; ***************************************************************************
  364                        	; signed int
  365                        	; _mulschar (signed char x, signed char y)
  366                        	;
  367                        	; 1st parameter in A (signed multiplicand)
  368                        	; 2nd parameter in Y (signed multiplier)
  369                        	; result in Y:A
  370                        	;
  371                        	; N.B. Y and A get swapped to make the code shorter.
  372                        	
  373    00:E519  85 94      	__mulschar:	sta	<multiplicand		; Remember multiplicand sign.
  374                        	
  375    00:E51B  C9 80      			cmp	#$80			; Is the multiplicand -ve?
  376    00:E51D  90 03      			bcc	!+
  377    00:E51F  49 FF      			eor	#$FF			; Negate the multiplicand.
  378    00:E521  1A         			inc	a
  379    00:E522  85 00      	!:		sta	<multiplier		; Then save it as multiplier.
  380                        	
  381    00:E524  98         			tya				; Product -ve if multiplicand
  382    00:E525  45 94      			eor	<multiplicand		; and multiplier signs differ.
  383    00:E527  08         			php				; Remember product sign.
  384                        	
  385    00:E528  98         			tya				; Is the multiplicand -ve?
  386    00:E529  10 03      			bpl	!+
  387    00:E52B  49 FF      			eor	#$FF			; Negate the multiplicand.
  388    00:E52D  1A         			inc	a
  389                        	
  390    00:E52E  20 F2 E4   	!:		jsr	muluchar_a		; Multiplier already saved.
  391                        	
  392    00:E531  28         			plp				; Is the product -ve?
  393    00:E532  30 D9      			bmi	neg_ya
  394    00:E534  60         			rts
  395                        	
  396                        	
  397                        	
  398                        	; ***************************************************************************
  399                        	; unsigned int
  400                        	; _mulsuchar (signed char x, signed char y)
  401                        	;
  402                        	; 1st parameter in A (unsigned multiplicand)
  403                        	; 2nd parameter in Y (signed multiplier)
  404                        	; result in Y:A
  405                        	;
  406                        	; N.B. Y and A get swapped to make the code shorter.
  407                        	
  408    00:E535  42         	__mulsuchar:	say				; Put the signed param in A.
  409                        			; drop through to __muluschar
  410                        	
  411                        	
  412                        	
  413                        	; ***************************************************************************
  414                        	; signed int
  415                        	; _muluschar (unsigned char x, unsigned char y)
  416                        	;
  417                        	; 1st parameter in A (signed multiplicand)
  418                        	; 2nd parameter in Y (unsigned multiplier)
  419                        	; result in Y:A
  420                        	
  421    00:E536  C9 80      	__muluschar:	cmp	#$80			; Is multiplicand -ve?
  422    00:E538  08         			php				; Remember the sign.
  423    00:E539  90 03      			bcc	!+
  424    00:E53B  49 FF      			eor	#$FF			; Negate multiplicand.
  425    00:E53D  1A         			inc	a
  426                        	
  427    00:E53E  20 F0 E4   	!:		jsr	__muluchar		; Do the unsigned multiply.
  428                        	
  429    00:E541  28         			plp				; Was multiplicand -ve?
  430    00:E542  B0 CA      			bcs	neg_yacs		; Then negate the product.
  431    00:E544  60         			rts
  432                        	
  433                        	
  434                        	
  435                        	; ***************************************************************************
  436                        	; unsigned int
  437                        	; _moduchar (unsigned char x, unsigned char y)
  438                        	;
  439                        	; 1st parameter in A (unsigned dividend)
  440                        	; 2nd parameter in Y (unsigned divisor)
  441                        	; result in Y:A
  442                        	
  443    00:E545  84 00      	__moduchar:	sty.l	<divisor
  444                        	
  445    00:E547  0A         	divmodu8_a:	asl	a			; Rotate dividend, MSB -> C.
  446    00:E548  85 94      			sta.l	<dividend
  447    00:E54A  64 95      			stz.h	<dividend		; Clear quotient hi-byte.
  448                        	
  449    00:E54C  A0 08      			ldy	#8
  450    00:E54E  62         			cla				; Clear remainder.
  451    00:E54F  2A         	.loop:		rol	a			; Rotate C into remainder.
  452    00:E550  C5 00      			cmp	<divisor		; Test divisor.
  453    00:E552  90 02      			bcc	.skip			; CC if divisor > remainder.
  454    00:E554  E5 00      			sbc	<divisor		; Subtract divisor.
  455    00:E556  26 94      	.skip:		rol	<dividend		; Quotient bit -> dividend LSB.
  456    00:E558  88         			dey
  457    00:E559  D0 F4      			bne	.loop
  458                        	
  459    00:E55B  C2         			cly				; Clear hi-byte of return.
  460    00:E55C  60         			rts				; Return the 16-bit remainder.
  461                        	
  462                        	
  463                        	
  464                        	; ***************************************************************************
  465                        	; unsigned int
  466                        	; _divuchar (unsigned char x, unsigned char y)
  467                        	;
  468                        	; 1st parameter in A (unsigned dividend)
  469                        	; 2nd parameter in Y (unsigned divisor)
  470                        	; result in Y:A
  471                        	
  472    00:E55D  20 45 E5   	__divuchar:	jsr	__moduchar
  473                        	
  474    00:E560  A5 94      			lda	<dividend		; Get the dividend lo-byte.
  475    00:E562  60         			rts				; Return the 16-bit dividend.
  476                        	
  477                        	
  478                        	
  479                        	; ***************************************************************************
  480                        	; signed int
  481                        	; _modschar (signed char x, signed char y)
  482                        	;
  483                        	; 1st parameter in A (signed dividend)
  484                        	; 2nd parameter in Y (signed divisor)
  485                        	; result in Y:A
  486                        	
  487    00:E563  AA         	__modschar:	tax				; Preserve the dividend.
  488    00:E564  08         			php				; Remember remainder sign.
  489                        	
  490    00:E565  84 00      			sty	<divisor		; Quotient negative if divisor
  491    00:E567  45 00      			eor	<divisor		; and dividend signs differ.
  492    00:E569  08         			php				; Remember the quotient sign.
  493                        	
  494    00:E56A  98         			tya				; Is the divisor -ve?
  495    00:E56B  10 05      			bpl	!+
  496    00:E56D  49 FF      			eor	#$FF			; Negate the divisor.
  497    00:E56F  1A         			inc	a
  498    00:E570  85 00      			sta	<divisor
  499                        	
  500    00:E572  8A         	!:		txa				; Is the dividend -ve?
  501    00:E573  10 03      			bpl	divmods8_a
  502                        	
  503    00:E575  49 FF      	divmods8_neg:	eor	#$FF			; Negate the dividend.
  504    00:E577  1A         			inc	a
  505                        	
  506    00:E578  20 47 E5   	divmods8_a:	jsr	divmodu8_a		; Do the unsigned division.
  507                        	
  508    00:E57B  28         			plp				; Should the quotient be -ve?
  509    00:E57C  10 0C      			bpl	!+
  510                        	
  511    00:E57E  AA         			tax				; Preserve remainder lo-byte.
  512                        	
  513    00:E57F  38         			sec				; Negate the quotient.
  514    00:E580  62         			cla
  515    00:E581  E5 94      			sbc.l	<dividend
  516    00:E583  85 94      			sta.l	<dividend
  517    00:E585  A9 FF      			lda	#$FF
  518    00:E587  85 95      			sta.h	<dividend
  519                        	
  520    00:E589  8A         			txa				; Restore remainder lo-byte.
  521                        	
  522    00:E58A  28         	!:		plp				; Was the dividend -ve?
  523    00:E58B  10 05      			bpl	!+
  524                        	
  525    00:E58D  49 FF      			eor	#$FF			; Then negate the remainder.
  526    00:E58F  1A         			inc	a
  527    00:E590  A0 FF      			ldy	#$FF
  528                        	
  529    00:E592  60         	!:		rts
  530                        	
  531                        	
  532                        	
  533                        	; ***************************************************************************
  534                        	; signed int
  535                        	; _moduschar (unsigned char x, unsigned char y)
  536                        	;
  537                        	; 1st parameter in A (signed dividend)
  538                        	; 2nd parameter in Y (unsigned divisor)
  539                        	; result in Y:A
  540                        	
  541    00:E593  84 00      	__moduschar:	sty.l	<divisor
  542                        	
  543    00:E595  A8         			tay				; Is the dividend -ve?
  544    00:E596  08         			php				; Remember remainder sign.
  545    00:E597  08         			php				; Remember quotient sign.
  546    00:E598  30 DB      			bmi	divmods8_neg
  547    00:E59A  80 DC      			bra	divmods8_a
  548                        	
  549                        	
  550                        	
  551                        	; ***************************************************************************
  552                        	; unsigned int
  553                        	; _modsuchar (signed char x, signed char y)
  554                        	;
  555                        	; 1st parameter in A (unsigned dividend)
  556                        	; 2nd parameter in Y (signed divisor)
  557                        	; result in Y:A
  558                        	
  559    00:E59C  AA         	__modsuchar:	tax				; Preserve the dividend.
  560    00:E59D  08         			php				; Remember remainder sign.
  561                        	
  562    00:E59E  98         			tya				; Check the divisor sign.
  563    00:E59F  08         			php				; Remember quotient sign.
  564    00:E5A0  10 03      			bpl	!+
  565    00:E5A2  49 FF      			eor	#$FF			; Negate the divisor.
  566    00:E5A4  1A         			inc	a
  567    00:E5A5  85 00      	!:		sta.l	<divisor
  568                        	
  569    00:E5A7  8A         			txa				; Restore the dividend.
  570    00:E5A8  80 CE      			bra	divmods8_a
  571                        	
  572                        	
  573                        	
  574                        	; ***************************************************************************
  575                        	; signed int
  576                        	; _divschar (signed char x, signed char y)
  577                        	;
  578                        	; 1st parameter in A (signed dividend)
  579                        	; 2nd parameter in Y (signed divisor)
  580                        	; result in Y:A
  581                        	
  582    00:E5AA  20 63 E5   	__divschar:	jsr	__modschar
  583                        	
  584    00:E5AD  A5 94      			lda.l	<dividend
  585    00:E5AF  A4 95      			ldy.h	<dividend
  586    00:E5B1  60         			rts
  587                        	
  588                        	
  589                        	
  590                        	; ***************************************************************************
  591                        	; signed int
  592                        	; _divuschar (unsigned char x, unsigned char y)
  593                        	;
  594                        	; 1st parameter in A (signed dividend)
  595                        	; 2nd parameter in Y (unsigned divisor)
  596                        	; result in Y:A
  597                        	
  598    00:E5B2  20 93 E5   	__divuschar:	jsr	__moduschar
  599                        	
  600    00:E5B5  A5 94      			lda.l	<dividend
  601    00:E5B7  A4 95      			ldy.h	<dividend
  602    00:E5B9  60         			rts
  603                        	
  604                        	
  605                        	
  606                        	; ***************************************************************************
  607                        	; unsigned int
  608                        	; _divsuchar (signed char x, signed char y)
  609                        	;
  610                        	; 1st parameter in A (unsigned dividend)
  611                        	; 2nd parameter in Y (signed divisor)
  612                        	; result in Y:A
  613                        	
  614    00:E5BA  20 9C E5   	__divsuchar:	jsr	__modsuchar
  615                        	
  616    00:E5BD  A5 94      			lda.l	<dividend
  617    00:E5BF  A4 95      			ldy.h	<dividend
  618    00:E5C1  60         			rts
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   43                        	
   44                        			; Define in hucc-config.inc to remove this.
   45                        	
   46               0001     		.ifndef	HUCC_NO_DEFAULT_RANDOM
                             #[3]   "..\..\..\include\hucc\random.asm"
   47                        			include	"random.asm"		; Random number generator.
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; random.asm
    5                        	;
    6                        	; Pseudo-random number generator (https://github.com/bbbradsmith/prng_6502)
    7                        	;
    8                        	; Copyright Brad Smith 2019.
    9                        	;
   10                        	; License:
   11                        	;
   12                        	; This code and may be used, reused, and modified for any purpose, commercial
   13                        	; or non-commercial.
   14                        	;
   15                        	; Attribution in released binaries or documentation is appreciated but not
   16                        	; required.
   17                        	;
   18                        	; ***************************************************************************
   19                        	; ***************************************************************************
   20                        	;
   21                        	; This is a linear feedback shift register (LFSR) in Galois form, which is
   22                        	; iterated 8 times to produce an 8-bit pseudo-random number.
   23                        	;
   24                        	; Two widths of LFSR are provided:
   25                        	;
   26                        	;  24-bit requires 3 bytes, and repeats after 16777215 calls.
   27                        	;  32-bit requires 4 bytes, and repeats after 4294967295 calls.
   28                        	;
   29                        	; Usage:
   30                        	;
   31                        	;  Initialize the zero-page "random" variable to any value other than 0.
   32                        	;  The size of "random" is 3 or 4 bytes, depending on the width of LFSR
   33                        	;  chosen.
   34                        	;
   35                        	;  Call one of the RNG functions and an 8-bit result will be returned in the
   36                        	;  A-register (with flags), and the Y-register will be clobbered.
   37                        	;
   38                        	;  Do not mix RNGs of different width in the same program, unless you can
   39                        	;  give them each separate "random" state storage.
   40                        	;
   41                        	; ***************************************************************************
   42                        	; ***************************************************************************
   43                        	
   44                        	
   45               0001     		.ifndef	_KICKC				; Variables defined in C?
   46               2098     			.zp
   47    F8:2098             	random:		.ds	4			; Seed is 3 or 4 bytes.
   48               E5C2     			.code
   49                        		.endif	_KICKC
   50                        	
   51                        	
   52                        	
   53                        	; ***************************************************************************
   54                        	; ***************************************************************************
   55                        	;
   56                        	; init_random - Initialize a 32-bit LFSR using an 8-bit seed value in Y.
   57                        	;
   58                        	; The LFSR is initialized to n'th entry of a standard CRC-32 lookup-table,
   59                        	; which gives it a decent distribution of bits.
   60                        	;
   61                        	; Since seed is an 8-bit value, there are 255 (256-1) possible starting
   62                        	; states for the LFSR, because 0 would generate a 0 state.
   63                        	;
   64                        	; CRC-32 code by Paul Guertin. See http://6502.org/source/integers/crc.htm
   65                        	;
   66                        	
   67    02:C690             	init_random	.proc
   68                        	
   69    02:C690  A9 01      			lda	#1			; Init CRC-32 table value.
   70    02:C692  85 98      			sta	<random + 0
   71    02:C694  98         			tya				; Get and check the seed value.
   72    02:C695  D0 01      			bne	.reverse_seed
   73    02:C697  3A         			dec	a			; Which must be non-zero!
   74    02:C698  4A         	.reverse_seed:	lsr	a			; Reverse the bits so that small changes
   75    02:C699  26 98      			rol	<random + 0		; in the seed make larger differences in
   76    02:C69B  90 FB      			bcc	.reverse_seed		; the initial state.
   77                        	
   78    02:C69D  64 99      			stz	<random + 1		; A contains the high byte of the CRC-32.
   79    02:C69F  64 9A      			stz	<random + 2		; The other three bytes are in memory.
   80    02:C6A1  62         			cla
   81                        	
   82    02:C6A2  A0 08      			ldy	#8			; Y counts bits in a byte.
   83    02:C6A4  4A         	.bit_loop:	lsr	a			; The CRC-32 algorithm is similar to CRC-16
   84    02:C6A5  66 9A      			ror	<random + 2		; except that it is reversed (originally for
   85    02:C6A7  66 99      			ror	<random + 1		; hardware reasons). This is why we shift
   86    02:C6A9  66 98      			ror	<random + 0		; right instead of left here.
   87    02:C6AB  90 16      			bcc	.no_add			; Do nothing if no overflow,
   88    02:C6AD  49 ED      			eor	#$ED			; else add CRC-32 polynomial $EDB88320.
   89                        	
   90    02:C6AF  48         			pha				; Save high byte while we do others.
   91    02:C6B0  A5 9A      			lda	<random + 2
   92    02:C6B2  49 B8      			eor	#$B8			; Most reference books give the CRC-32 poly
   93    02:C6B4  85 9A      			sta	<random + 2		; as $04C11DB7. This is actually the same if
   94    02:C6B6  A5 99      			lda	<random + 1		; you write it in binary and read it right-
   95    02:C6B8  49 83      			eor	#$83			; to-left instead of left-to-right. Doing it
   96    02:C6BA  85 99      			sta	<random + 1		; this way means we won't have to explicitly
   97    02:C6BC  A5 98      			lda	<random + 0		; reverse things afterwards.
   98    02:C6BE  49 20      			eor	#$20
   99    02:C6C0  85 98      			sta	<random + 0
  100    02:C6C2  68         			pla				; Restore high byte.
  101                        	
  102    02:C6C3  88         	.no_add:	dey				; Do next bit.
  103    02:C6C4  D0 DE      			bne	.bit_loop
  104                        	
  105    02:C6C6  85 9B      			sta	<random + 3		; Save CRC-32 high-byte.
  106                        	
  107                        			leave				; All done!
         02:C6C8  4C EF FF   			jmp	leave_proc
  108                        	
  109                        			.endp
  110                        	
  111                        	
  112                        	
  113                        	; ***************************************************************************
  114                        	; ***************************************************************************
  115                        	;
  116                        	; get_random - 8-bit LFSR pseudo-random number with a 24-bit cycle.
  117                        	;
  118                        	; The pseudo-random sequence repeats after (2^24)-1 calls.
  119                        	;
  120                        	; Written by Wim Couwenberg, see ...
  121                        	;
  122                        	; "https://wimcouwenberg.wordpress.com/2020/11/15/ ...
  123                        	;  a-fast-24-bit-prng-algorithm-for-the-6502-processor/"
  124                        	;
  125                        	; Takes 68 cycles on the HuC6280, incl JSR & RTS.
  126                        	;
  127                        	; N.B. HuCC library code relies on this preserving X and Y!
  128                        	;
  129                        	
  130    00:E5C2  C2         	_rand8:		cly				; Entry point for HuCC.
  131                        	
  132    00:E5C3  A5 98      	get_random:	lda	<random + 0		; Operation 7 (with carry clear).
  133    00:E5C5  0A         			asl	a
  134    00:E5C6  45 99      			eor	<random + 1
  135    00:E5C8  85 99      			sta	<random + 1
  136    00:E5CA  2A         			rol	a             		; Operation 9.
  137    00:E5CB  45 9A      			eor	<random + 2
  138    00:E5CD  85 9A      			sta	<random + 2
  139    00:E5CF  45 98      			eor	<random + 0		; Operation 5.
  140    00:E5D1  85 98      			sta	<random + 0
  141    00:E5D3  A5 99      			lda	<random + 1		; Operation 15.
  142    00:E5D5  6A         			ror	a
  143    00:E5D6  45 9A      			eor	<random + 2
  144    00:E5D8  85 9A      			sta	<random + 2
  145    00:E5DA  45 99      			eor	<random + 1		; Operation 6.
  146    00:E5DC  85 99      			sta	<random + 1
  147    00:E5DE  60         			rts
  148                        	
  149                        	
  150                        	
  151               0000     		.if	0
  316                        		.endif
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   48                        		.endif
   49                        	
   50                        			; Optional libraries that get used when their header files
   51                        			; are included in a HuCC project.
   52                        			;
   53                        			; When the HuCC compiler is invoked with the "--legacy"
   54                        			; option to compile old projects, then the "huc.h" file
   55                        			; is automatically included, which then includes a list
   56                        			; of specific headers corresponding to HuC's library.
   57                        	
   58               0001     		.ifdef	HUCC_USES_GFX
                             #[3]   "..\..\..\include\hucc\hucc-gfx.asm"
   59                        			include	"hucc-gfx.asm"		; Set in hucc_gfx.h
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; huc-gfx.asm
    5                        	;
    6                        	; Based on the original HuC and MagicKit functions by David Michel and the
    7                        	; other original HuC developers.
    8                        	;
    9                        	; Modifications copyright John Brandwood 2024-2025.
   10                        	;
   11                        	; Distributed under the Boost Software License, Version 1.0.
   12                        	; (See accompanying file LICENSE_1_0.txt or copy at
   13                        	;  http://www.boost.org/LICENSE_1_0.txt)
   14                        	;
   15                        	; ***************************************************************************
   16                        	; ***************************************************************************
   17                        	
   18                        	;
   19                        	; Include dependancies ...
   20                        	;
   21                        	
   22                        			include "common.asm"		; Common helpers.
   23                        			include "vce.asm"		; Useful VCE routines.
   24                        			include "vdc.asm"		; Useful VCE routines.
   25                        	
   26                        	
   27                        	
   28                        	; ***************************************************************************
   29                        	; ***************************************************************************
   30                        	;
   31                        	; void __fastcall disp_on( void );
   32                        	; void __fastcall disp_off( void );
   33                        	
   34    00:E5DF             			.alias	_disp_on		= set_dspon
   35    00:E5DF             			.alias	_disp_off		= set_dspoff
   36                        	
   37                        	
   38                        	
   39                        	; ***************************************************************************
   40                        	; ***************************************************************************
   41                        	;
   42                        	; void __fastcall set_screen_size( unsigned char value<_al> );
   43                        	; void __fastcall sgx_set_screen_size( unsigned char value<_al> );
   44                        	;
   45                        	
   46    00:E5DF             			.alias	_set_screen_size.1	= set_bat_vdc
   47    00:E5DF             			.alias	_sgx_set_screen_size.1	= set_bat_sgx
   48                        	
   49                        	
   50                        	
   51                        	; ***************************************************************************
   52                        	; ***************************************************************************
   53                        	;
   54                        	; void __fastcall init_256x224( void );
   55                        	
   56    02:C251             	_init_256x224	.proc
   57                        	
   58               0800     	.BAT_SIZE	=	64 * 32
   59               0080     	.CHR_0x20	=	.BAT_SIZE / 16		; 1st tile # after the BAT.
   60               7F00     	.SAT_ADDR	=	$7F00			; SAT takes 16 tiles of VRAM.
   61                        	
   62    02:C251  08         			php				; Disable interrupts.
   63    02:C252  78         			sei
   64                        	
   65    02:C253  20 87 FE   			call	clear_vce		; Clear all palettes.
   66                        	
   67    02:C256  A9 80      			lda.l	#.CHR_0x20		; CHR # of ASCII ' '.
   68    02:C258  85 F8      			sta.l	<_ax
   69    02:C25A  A9 00      			lda.h	#.CHR_0x20
   70    02:C25C  85 F9      			sta.h	<_ax
   71                        	
   72    02:C25E  A9 08      			lda	#>.BAT_SIZE		; Size of BAT in words.
   73    02:C260  85 FA      			sta	<_bl
   74                        	
   75    02:C262  20 9B FE   			call	clear_vram_vdc		; Clear VRAM.
   76               0001     		.if	SUPPORT_SGX
   77    02:C265  20 7D FE   			call	clear_vram_sgx
   78                        		.endif
   79                        	
   80    02:C268  A9 8C      			lda	#<.mode_256x224		; Disable BKG & SPR layers but
   81    02:C26A  85 EC      			sta.l	<_bp			; enable RCR & VBLANK IRQ.
   82    02:C26C  A9 C2      			lda	#>.mode_256x224
   83    02:C26E  85 ED      			sta.h	<_bp
   84                        	
   85               0001     		.if	SUPPORT_SGX
   86    02:C270  20 73 FE   			call	sgx_detect		; Are we really on an SGX?
   87    02:C273  90 05      			bcc	!+
   88    02:C275  A0 02      			ldy	#^.mode_256x224		; Set SGX 1st, with no VBL.
   89    02:C277  20 69 FE   			call	set_mode_sgx
   90                        		.endif
   91    02:C27A  A0 02      	!:		ldy	#^.mode_256x224		; Set VDC 2nd, VBL allowed.
   92    02:C27C  20 5F FE   			call	set_mode_vdc
   93                        	
   94               0001     		.if	SUPPORT_SGX
   95    02:C27F  2C 10 02   			bit	SGX_SR			; Purge any overdue RCR.
   96                        		.endif
   97    02:C282  2C 00 02   			bit	VDC_SR			; Purge any overdue VBL.
   98    02:C285  28         			plp				; Restore interrupts.
   99                        	
  100    02:C286  20 09 E3   			call	wait_vsync		; Wait for the next VBLANK.
  101                        	
  102                        			leave				; All done, phew!
         02:C289  4C EF FF   			jmp	leave_proc
  103                        	
  104                        			; A standard 256x224 screen with overscan.
  105                        	
  106    02:C28C  80         	.mode_256x224:	db	$80			; VCE Control Register.
  107    02:C28D  04         			db	VCE_CR_5MHz + XRES_SOFT	;   Video Clock + Artifact Reduction
  108                        	
  109    02:C28E  09         			db	VDC_MWR			; Memory-access Width Register
  110    02:C28F  10 00      			dw	VDC_MWR_64x32 + VDC_MWR_1CYCLE
  111    02:C291  0A         			db	VDC_HSR			; Horizontal Sync Register
  112    02:C292  02 02      			dw	VDC_HSR_256
  113    02:C294  0B         			db	VDC_HDR			; Horizontal Display Register
  114    02:C295  1F 04      			dw	VDC_HDR_256
  115    02:C297  0C         			db	VDC_VPR			; Vertical Sync Register
  116    02:C298  02 17      			dw	VDC_VPR_224
  117    02:C29A  0D         			db	VDC_VDW			; Vertical Display Register
  118    02:C29B  DF 00      			dw	VDC_VDW_224
  119    02:C29D  0E         			db	VDC_VCR			; Vertical Display END position Register
  120    02:C29E  FF 00      			dw	VDC_VCR_224
  121    02:C2A0  0F         			db	VDC_DCR			; DMA Control Register
  122    02:C2A1  10 00      			dw	$0010			;   Enable automatic VRAM->SATB
  123    02:C2A3  13         			db	VDC_DVSSR		; VRAM->SATB address $7F00
  124    02:C2A4  00 7F      			dw	.SAT_ADDR
  125    02:C2A6  07         			db	VDC_BXR			; Background X-Scroll Register
  126    02:C2A7  00 00      			dw	$0000
  127    02:C2A9  08         			db	VDC_BYR			; Background Y-Scroll Register
  128    02:C2AA  00 00      			dw	$0000
  129    02:C2AC  06         			db	VDC_RCR			; Raster Counter Register
  130    02:C2AD  00 00      			dw	$0000			;   Never occurs!
  131    02:C2AF  05         			db	VDC_CR			; Control Register
  132    02:C2B0  0C 00      			dw	$000C			;   Enable VSYNC & RCR IRQ
  133    02:C2B2  00         			db	0
  134                        	
  135                        			.endp
  136                        	
  137                        	
  138                        	
  139                        	; ***************************************************************************
  140                        	; ***************************************************************************
  141                        	;
  142                        	; void __fastcall init_240x208( void );
  143                        	
  144                        	_init_240x208	.proc
  223                        			.endp
  224                        	
  225                        	
  226                        	
  227                        	; ***************************************************************************
  228                        	; ***************************************************************************
  229                        	;
  230                        	; void __fastcall _macro set_xres( unsigned int x_pixels<_ax> );
  231                        	; void __fastcall _macro sgx_set_xres( unsigned int x_pixels<_ax> );
  232                        	;
  233                        	; void __fastcall set_xres( unsigned int x_pixels<_ax>, unsigned char blur_flag<_bl> );
  234                        	; void __fastcall sgx_set_xres( unsigned int x_pixels<_ax>, unsigned char blur_flag<_bl> );
  235                        	;
  236                        	; blur_flag = XRES_SOFT (default if not specified), XRES_SHARP or XRES_KEEP
  237                        	
  238                        	set_xres_group	.procgroup			; These routines share code!
  337                        			.endprocgroup	; set_xres_group
  338                        	
  339                        	
  340                        	
  341                        	; ***************************************************************************
  342                        	; ***************************************************************************
  343                        	;
  344                        	; HuC VRAM Functions
  345                        	;
  346                        	; ***************************************************************************
  347                        	; ***************************************************************************
  348                        	
  349                        	
  350    02:C17E             	load_vram_group	.procgroup			; These routines share code!
  351                        	
  352                        	; ***************************************************************************
  353                        	; ***************************************************************************
  354                        	;
  355                        	; void __fastcall load_vram( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_words<_ax> );
  356                        	; void __fastcall sgx_load_vram( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_words<_ax> );
  357                        	;
  358                        	; void __fastcall far_load_vram( unsigned int vram<_di>, unsigned int num_words<_ax> );
  359                        	; void __fastcall sgx_far_load_vram( unsigned int vram<_di>, unsigned int num_words<_ax> );
  360                        	;
  361                        	; load_vram_sgx -  copy a block of memory to VRAM
  362                        	; load_vram_vdc -  copy a block of memory to VRAM
  363                        	;
  364                        	; _bp		= BAT memory location
  365                        	; _bp_bank	= BAT bank
  366                        	; _di		= VRAM base address
  367                        	; _ax		= nb of words to copy
  368                        	; ----
  369                        	; N.B. BAT data *must* be word-aligned!
  370                        	
  371               0000     		.ifndef	VRAM_XFER_SIZE
  373                        		.endif
  374                        	
  375    02:C17E             	load_vram_x	.proc
  376                        	
  377    02:C17E  43 08      			tma3
  378    02:C180  48         			pha
  379    02:C181  43 10      			tma4
  380    02:C183  48         			pha
  381                        	
  382    02:C184  A4 02      			ldy	<_bp_bank
  383    02:C186  20 3B E3   			jsr	map_bp_to_mpr34		; Map data to MPR3 & MPR4.
  384                        	
  385    02:C189  20 7F E3   			jsr	set_di_to_mawr
  386                        	
  387                        	;		tii	.vdc_tai, ram_tia, 8
  388                        	
  389               0001     		.if	SUPPORT_SGX
  390    02:C18C  8A         			txa				; Select which VDC to write
  391    02:C18D  1A         			inc	a			; to.
  392    02:C18E  1A         			inc	a
  393    02:C18F  8D F3 22   			sta.l	ram_tia_dst
  394                        		.endif
  395                        	
  396    02:C192  A9 10      			lda	#VRAM_XFER_SIZE		; Split into 16-byte chunks
  397    02:C194  8D F5 22   			sta.l	ram_tia_len		; for stable IRQ response.
  398                        	
  399    02:C197  A6 EC      			ldx.l	<_bp
  400    02:C199  8E F1 22   			stx.l	ram_tia_src
  401    02:C19C  A4 ED      			ldy.h	<_bp
  402    02:C19E  8C F2 22   			sty.h	ram_tia_src
  403                        	
  404    02:C1A1  A5 F8      			lda.l	<_ax			; Length in words.
  405    02:C1A3  48         			pha				; Preserve length.l
  406                        	
  407    02:C1A4  46 F9      			lsr.h	<_ax
  408    02:C1A6  6A         			ror	a
  409    02:C1A7  46 F9      			lsr.h	<_ax
  410    02:C1A9  6A         			ror	a
  411    02:C1AA  46 F9      			lsr.h	<_ax
  412    02:C1AC  6A         			ror	a
  413               0000     		.if	VRAM_XFER_SIZE == 32
  416                        		.endif
  417                        	
  418    02:C1AD  22         			sax				; x=chunks-lo
  419    02:C1AE  F0 1F      			beq	.next_block		; a=source-lo, y=source-hi
  420                        	
  421    02:C1B0  20 F0 22   	.chunk_loop:	jsr	ram_tia			; transfer 16-bytes
  422                        	
  423    02:C1B3  18         			clc				; increment source
  424    02:C1B4  69 10      			adc	#VRAM_XFER_SIZE
  425    02:C1B6  8D F1 22   			sta.l	ram_tia_src
  426    02:C1B9  90 11      			bcc	.same_page
  427    02:C1BB  C8         			iny
  428    02:C1BC  10 0B      			bpl	.same_bank		; remap_data
  429                        	
  430    02:C1BE  42         			say
  431    02:C1BF  43 10      			tma4
  432    02:C1C1  53 08      			tam3
  433    02:C1C3  1A         			inc	a
  434    02:C1C4  53 10      			tam4
  435    02:C1C6  A9 60      			lda	#$60
  436    02:C1C8  42         			say
  437                        	
  438    02:C1C9  8C F2 22   	.same_bank:	sty.h	ram_tia_src
  439                        	
  440    02:C1CC  CA         	.same_page:	dex
  441    02:C1CD  D0 E1      			bne	.chunk_loop
  442                        	
  443    02:C1CF  C6 F9      	.next_block:	dec.h	<_ax
  444    02:C1D1  10 DD      			bpl	.chunk_loop
  445                        	
  446    02:C1D3  68         			pla				; Restore length.l
  447    02:C1D4  29 07      			and	#VRAM_XFER_SIZE / 2 - 1
  448    02:C1D6  F0 07      			beq	.done
  449                        	
  450    02:C1D8  0A         			asl	a			; Convert words to bytes.
  451    02:C1D9  8D F5 22   			sta.l	ram_tia_len
  452                        	
  453    02:C1DC  20 F0 22   			jsr	ram_tia			; transfer remainder
  454                        	
  455    02:C1DF  68         	.done:		pla
  456    02:C1E0  53 10      			tam4
  457    02:C1E2  68         			pla
  458    02:C1E3  53 08      			tam3
  459                        	
  460                        			leave
         02:C1E5  4C EF FF   			jmp	leave_proc
  461                        	
  462                        			.endp
  463                        	
  464                        			.endprocgroup	; load_vram_group
  465                        	
  466                        	
  467                        	
  468                        	; ***************************************************************************
  469                        	; ***************************************************************************
  470                        	;
  471                        	; void __fastcall load_bat( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
  472                        	; void __fastcall sgx_load_bat( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
  473                        	;
  474                        	; void __fastcall far_load_bat( unsigned int vram<_di>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
  475                        	; void __fastcall sgx_far_load_bat( unsigned int vram<_di>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
  476                        	;
  477                        	; load_bat_sgx - transfer a BAT to VRAM
  478                        	; load_bat_vdc - transfer a BAT to VRAM
  479                        	;
  480                        	; transfer a BAT to VRAM
  481                        	; ----
  482                        	; _bp		= BAT memory location
  483                        	; _bp_bank	= BAT bank
  484                        	; _di		= VRAM base address
  485                        	; _al		= nb of column to copy
  486                        	; _ah		= nb of row
  487                        	; ----
  488                        	; N.B. BAT data *must* be word-aligned!
  489                        	
  490               20EC     	_gfx_load_bat_PARM_2	=	_bp
  491               20F0     	_gfx_load_bat_PARM_3	=	_di
  492               20F8     	_gfx_load_bat_PARM_4	=	_al
  493               20F9     	_gfx_load_bat_PARM_5	=	_ah
  494                        	
  495    02:C613             	load_bat_group	.procgroup			; These routines share code!
  496                        	
  497               0001     		.if	SUPPORT_SGX
  498                        			.proc	_sgx_load_bat.4
  505                        			.endp
  506                        		.endif
  507                        	
  508    02:C613             			.proc	_load_bat.4
  509    02:C613             			.alias	_far_load_bat.3		= _load_bat.4
  510                        	
  511    02:C613  82         			clx				; Offset to PCE VDC.
  512                        	
  513    02:C614  43 08      			tma3
  514    02:C616  48         			pha
  515                        	
  516    02:C617  A4 02      			ldy	<_bp_bank
  517    02:C619  20 2D E3   			jsr	map_bp_to_mpr3		; Map data to MPR3.
  518                        	
  519    02:C61C  A4 EC      			ldy.l	<_bp
  520    02:C61E  64 EC      			stz.l	<_bp
  521                        	
  522    02:C620  20 7F E3   	.line_loop:	jsr	set_di_to_mawr
  523                        	
  524    02:C623  A5 F8      			lda	<_al
  525    02:C625  85 00      			sta	<__temp
  526    02:C627  B1 EC      	.tile_loop:	lda	[_bp], y
  527    02:C629  9D 02 02   			sta	VDC_DL, x
  528    02:C62C  C8         			iny
  529    02:C62D  B1 EC      			lda	[_bp], y
  530    02:C62F  9D 03 02   			sta	VDC_DH, x
  531    02:C632  C8         			iny
  532    02:C633  D0 03      			bne	!+
  533    02:C635  20 4C E3   			jsr	inc.h_bp_mpr3
  534    02:C638  C6 00      	!:		dec	<__temp
  535    02:C63A  D0 EB      			bne	.tile_loop
  536                        	
  537    02:C63C  BD 48 23   			lda	vdc_bat_width, x
  538    02:C63F  18         			clc
  539    02:C640  65 F0      			adc.l	<_di
  540    02:C642  85 F0      			sta.l	<_di
  541    02:C644  90 02      			bcc	!+
  542    02:C646  E6 F1      			inc.h	<_di
  543                        	
  544    02:C648  C6 F9      	!:		dec	<_ah
  545    02:C64A  D0 D4      			bne	.line_loop
  546                        	
  547    02:C64C  68         			pla
  548    02:C64D  53 08      			tam3
  549                        	
  550                        			leave
         02:C64F  4C EF FF   			jmp	leave_proc
  551                        	
  552                        			.endp
  553                        	
  554                        			.endprocgroup	; load_bat_group
  555                        	
  556                        	
  557                        	
  558                        	; ***************************************************************************
  559                        	; ***************************************************************************
  560                        	;
  561                        	; void __fastcall load_palette( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp>, unsigned char num_palettes<_ah> );
  562                        	;
  563                        	; void __fastcall far_load_palette( unsigned char palette<_al>, unsigned char num_palettes<_ah> );
  564                        	
  565    0C:DFD4             			.proc	_load_palette.3
  566    0C:DFD4             			.alias	_far_load_palette.2	= _load_palette.3
  567                        	
  568    0C:DFD4  AC 1F 23   			ldy	color_queue_w		; Get the queue's write index.
  569                        	
  570    0C:DFD7  A5 EC      			lda.l	<_bp			; Add this set of palettes to
  571    0C:DFD9  99 30 23   			sta	color_addr_l, y		; the queue.
  572    0C:DFDC  A5 ED      			lda.h	<_bp
  573    0C:DFDE  99 38 23   			sta	color_addr_h, y
  574    0C:DFE1  A5 02      			lda	<_bp_bank
  575    0C:DFE3  99 40 23   			sta	color_bank, y
  576    0C:DFE6  A5 F8      			lda	<_al
  577    0C:DFE8  99 20 23   			sta	color_index, y
  578    0C:DFEB  A5 F9      			lda	<_ah
  579    0C:DFED  99 28 23   			sta	color_count, y
  580                        	
  581    0C:DFF0  C8         			iny				; Increment the queue index.
  582    0C:DFF1  98         			tya
  583    0C:DFF2  29 07      			and	#7
  584                        	
  585    0C:DFF4  CD 1E 23   	.wait:		cmp	color_queue_r		; If the queue is full, wait
  586    0C:DFF7  F0 FB      			beq	.wait			; for the next VBLANK.
  587                        	
  588    0C:DFF9  8D 1F 23   			sta	color_queue_w		; Signal item is in the queue.
  589                        	
  590                        			leave				; All done, phew!
         0C:DFFC  4C EF FF   			jmp	leave_proc
  591                        	
  592                        			.endp
  593                        	
  594                        	
  595                        	
  596               0000     		.if	0
  620                        		.endif
  621                        	
  622                        	
  623                        	
  624                        	; ***************************************************************************
  625                        	; ***************************************************************************
  626                        	;
  627                        	; void __fastcall load_background( unsigned char __far *tiles<_bp_bank:_bp>, unsigned char __far *palettes<__fbank:__fptr>, unsigned char __far *bat<_cl:_bx>, unsigned char w<_dl>, unsigned char w<_dh> );
  628                        	
  629                        			.proc	_load_background.5
  667                        			.endp
  668                        	
  669                        	
  670                        	
  671                        	; ***************************************************************************
  672                        	; ***************************************************************************
  673                        	;
  674                        	; void __fastcall vram2vram( unsigned int vram_dst<_ax>, unsigned int vram_src<_bx>, unsigned int word_len<_cx> );
  675                        	; void __fastcall sgx_vram2vram( unsigned int vram_dst<_ax>, unsigned int vram_src<_bx>, unsigned int word_len<_cx> );
  676                        	;
  677                        	
  678               0001     		.if	SUPPORT_SGX
  679                        			.proc	_sgx_vram2vram.3
  685                        			.endp
  686                        		.endif
  687                        	
  688    02:C652             			.proc	_vram2vram.3
  689                        	
  690    02:C652  82         			clx				; Offset to PCE VDC.
  691                        	
  692    02:C653  08         			php
  693    02:C654  78         			sei
  694    02:C655  A9 11      			lda	#VDC_DESR
  695    02:C657  9D 00 02   			sta	VDC_AR, x
  696    02:C65A  A5 F8      			lda.l	<_ax
  697    02:C65C  9D 02 02   			sta	VDC_DL, x
  698    02:C65F  A5 F9      			lda.h	<_ax
  699    02:C661  9D 03 02   			sta	VDC_DH, x
  700                        	
  701    02:C664  A9 10      			lda	#VDC_SOUR
  702    02:C666  9D 00 02   			sta	VDC_AR, x
  703    02:C669  A5 FA      			lda.l	<_bx
  704    02:C66B  9D 02 02   			sta	VDC_DL, x
  705    02:C66E  A5 FB      			lda.h	<_bx
  706    02:C670  9D 03 02   			sta	VDC_DH, x
  707                        	
  708    02:C673  A9 12      			lda	#VDC_LENR
  709    02:C675  9D 00 02   			sta	VDC_AR, x
  710    02:C678  18         			clc
  711    02:C679  A5 FC      			lda.l	<_cx
  712    02:C67B  69 FF      			adc	#$FF
  713    02:C67D  9D 02 02   			sta	VDC_DL, x
  714    02:C680  A5 FD      			lda.h	<_cx
  715    02:C682  69 FF      			adc	#$FF
  716    02:C684  9D 03 02   			sta	VDC_DH, x
  717                        	
  718    02:C687  B5 F7      			lda	<vdc_reg, x
  719    02:C689  8D 00 02   			sta	VDC_AR
  720    02:C68C  28         			plp
  721                        	
  722                        			leave
         02:C68D  4C EF FF   			jmp	leave_proc
  723                        	
  724                        			.endp
  725                        	
  726                        	
  727                        	
  728                        	; ***************************************************************************
  729                        	; ***************************************************************************
  730                        	;
  731                        	; HuC Font Functions
  732                        	;
  733                        	; ***************************************************************************
  734                        	; ***************************************************************************
  735                        	
  736                        	
  737                        	
  738               2368     			.bss
  739                        	
  740                        	; **************
  741                        	; 16-bytes of VDC BAT information.
  742                        	;
  743                        	; N.B. MUST be 16-bytes before the SGX versions to use PCE_VDC_OFFSET.
  744                        	
  745    F8:2368             	_vdc_font_base:	ds	2	; Tile number of ASCII '\0'.
  746                        	
  747                        	; From hucc-printf.asm just to avoid wasting .bss space with padding.
  748    F8:236A             	_vdc_tty_x_lhs:	ds	1	; TTY minimum X position.
  749    F8:236B             	_vdc_tty_y_top:	ds	1	; TTY minimum Y position.
  750    F8:236C             	_vdc_tty_x:	ds	1	; TTY current X position.
  751    F8:236D             	_vdc_tty_y:	ds	1	; TTY current Y position.
  752                        	
  753               0001     		.if	SUPPORT_SGX
  754                        	
  755                        	; **************
  756                        	; 16-bytes of SGX BAT information.
  757                        	;
  758                        	; N.B. MUST be 16-bytes after the VDC versions to use SGX_VDC_OFFSET.
  759                        	
  760    F8:236E             			ds	10	; Padding to ensure the 16-byte delta.
  761                        	
  762    F8:2378             	_sgx_font_base:	ds	2	; Tile number of ASCII '\0'.
  763                        	
  764                        	; From hucc-printf.asm just to avoid wasting .bss space with padding.
  765    F8:237A             	_sgx_tty_x_lhs:	ds	1	; TTY minimum X position.
  766    F8:237B             	_sgx_tty_y_top:	ds	1	; TTY minimum Y position.
  767    F8:237C             	_sgx_tty_x:	ds	1	; TTY current X position.
  768    F8:237D             	_sgx_tty_y:	ds	1	; TTY current Y position.
  769                        	
  770                        		.endif
  771                        	
  772                        	;_font_base	.alias	vdc_font_base
  773                        	
  774               E5DF     			.code
  775                        	
  776                        	
  777                        	
  778                        	; ***************************************************************************
  779                        	; ***************************************************************************
  780                        	;
  781                        	; void __fastcall set_font_addr( unsigned int vram<acc> );
  782                        	; void __fastcall sgx_set_font_addr( unsigned int vram<acc> );
  783                        	
  784               0001     		.if	SUPPORT_SGX
  785    00:E5DF             	_sgx_set_font_addr.1:
  786    00:E5DF  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  787    00:E5E1  F0         			db	$F0			; Turn "clx" into a "beq".
  788                        		.endif
  789                        	
  790    00:E5E2             	_set_font_addr.1:
  791    00:E5E2  82         			clx				; Offset to PCE VDC.
  792                        	
  793    00:E5E3  84 00      	set_font_addr:	sty	<__temp
  794    00:E5E5  46 00      			lsr	<__temp
  795    00:E5E7  6A         			ror	a
  796    00:E5E8  46 00      			lsr	<__temp
  797    00:E5EA  6A         			ror	a
  798    00:E5EB  46 00      			lsr	<__temp
  799    00:E5ED  6A         			ror	a
  800    00:E5EE  46 00      			lsr	<__temp
  801    00:E5F0  6A         			ror	a
  802    00:E5F1  38         			sec
  803    00:E5F2  E9 20      			sbc	#$20
  804    00:E5F4  9D 68 23   			sta.l	_vdc_font_base,x
  805    00:E5F7  B0 02      			bcs	!+
  806    00:E5F9  C6 00      			dec	<__temp
  807                        	
  808    00:E5FB  BD 69 23   	!:		lda.h	_vdc_font_base, x
  809    00:E5FE  29 F0      			and	#$F0
  810    00:E600  05 00      			ora	<__temp
  811    00:E602  9D 69 23   			sta.h	_vdc_font_base, x
  812    00:E605  60         			rts
  813                        	
  814                        	
  815                        	
  816                        	; ***************************************************************************
  817                        	; ***************************************************************************
  818                        	;
  819                        	; void __fastcall set_font_pal( unsigned char palette<acc> );
  820                        	; void __fastcall sgx_set_font_pal( unsigned char palette<acc> );
  821                        	
  822               0001     		.if	SUPPORT_SGX
  823    00:E606             	_sgx_set_font_pal.1:
  824    00:E606  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  825    00:E608  F0         			db	$F0			; Turn "clx" into a "beq".
  826                        		.endif
  827                        	
  828    00:E609             	_set_font_pal:					; For compatibility with HuC.
  829    00:E609             	_set_font_pal.1:
  830    00:E609  82         			clx				; Offset to PCE VDC.
  831    00:E60A  0A         			asl	a
  832    00:E60B  0A         			asl	a
  833    00:E60C  0A         			asl	a
  834    00:E60D  0A         			asl	a
  835    00:E60E  85 00      			sta	<__temp
  836                        	
  837    00:E610  BD 69 23   			lda.h	_vdc_font_base, x
  838    00:E613  29 0F      			and	#$0F
  839    00:E615  05 00      			ora	<__temp
  840    00:E617  9D 69 23   			sta.h	_vdc_font_base, x
  841    00:E61A  60         			rts
  842                        	
  843                        	
  844                        	
  845                        	; ***************************************************************************
  846                        	; ***************************************************************************
  847                        	;
  848                        	; void __fastcall load_font( char far *font<_bp_bank:_bp>, unsigned char count<_al> );
  849                        	;
  850                        	; void __fastcall load_font( char far *font<_bp_bank:_bp>, unsigned char count<_al>, unsigned int vram<acc> );
  851                        	; void __fastcall sgx_load_font( char far *font<_bp_bank:_bp>, unsigned char count<_al>, unsigned int vram<acc> );
  852                        	;
  853                        	; void __fastcall far_load_font( unsigned char count<_al>, unsigned int vram<acc> );
  854                        	; void __fastcall sgx_far_load_font( unsigned char count<_al>, unsigned int vram<acc> );
  855                        	
  856    00:E61B  AC 4C 23   	_load_font.2:	ldy	vdc_bat_limit		; Load the font directly
  857    00:E61E  C8         			iny				; after the BAT (stupid!).
  858    00:E61F  62         			cla
  859    00:E620  80 03      			bra	_load_font.3
  860                        	
  861               0001     		.if	SUPPORT_SGX
  862    00:E622             	_sgx_load_font.3:
  863    00:E622  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  864    00:E624  F0         			db	$F0			; Turn "clx" into a "beq".
  865                        		.endif
  866                        	
  867    00:E625  82         	_load_font.3:	clx				; Offset to PCE VDC.
  868                        	
  869    00:E626  85 F0      			sta.l	<_di			; Load the font directly
  870    00:E628  84 F1      			sty.h	<_di			; after the BAT (stupid!).
  871                        	
  872    00:E62A  20 E3 E5   			jsr	set_font_addr		; Set xxx_font_base from addr.
  873                        	
  874    00:E62D  A5 F8      			lda	<__al			; Convert #tiles into #words.
  875    00:E62F  64 F9      			stz	<__ah
  876    00:E631  0A         			asl	a
  877    00:E632  26 F9      			rol	<__ah
  878    00:E634  0A         			asl	a
  879    00:E635  26 F9      			rol	<__ah
  880    00:E637  0A         			asl	a
  881    00:E638  26 F9      			rol	<__ah
  882    00:E63A  0A         			asl	a
  883    00:E63B  26 F9      			rol	<__ah
  884    00:E63D  85 F8      			sta	<__al
  885    00:E63F  4C 77 FF   			jmp	load_vram_x
  886                        	
  887    00:E642             			.alias	_far_load_font.2	= _load_font.3
  888    00:E642             			.alias	_sgx_far_load_font.2	= _sgx_load_font.3
  889                        	
  890                        	
  891                        	
  892                        	; ***************************************************************************
  893                        	; ***************************************************************************
  894                        	;
  895                        	; void __fastcall cls();
  896                        	; void __fastcall sgx_cls();
  897                        	;
  898                        	; void __fastcall cls( int tile<acc> );
  899                        	; void __fastcall sgx_cls( int tile<acc> );
  900                        	
  901               0001     		.if	SUPPORT_SGX
  902    00:E642  A2 10      	_sgx_cls:	ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  903    00:E644  F0         			db	$F0			; Turn "clx" into a "beq".
  904                        		.endif
  905                        	
  906    00:E645  82         	_cls:		clx				; Offset to PCE VDC.
  907                        	
  908    00:E646  BD 68 23   	clear_tty_x:	lda.l	_vdc_font_base, x
  909    00:E649  BC 69 23   			ldy.h	_vdc_font_base, x
  910    00:E64C  18         			clc
  911    00:E64D  69 20      			adc	#' '
  912    00:E64F  90 07      			bcc	!+
  913    00:E651  C8         			iny
  914    00:E652  80 04      			bra	!+
  915                        	
  916               0001     		.if	SUPPORT_SGX
  917    00:E654  A2 10      	_sgx_cls.1:	ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  918    00:E656  F0         			db	$F0			; Turn "clx" into a "beq".
  919                        		.endif
  920                        	
  921    00:E657  82         	_cls.1:		clx
  922                        	
  923    00:E658  85 F8      	!:		sta.l	<_ax			; VRAM word to write.
  924    00:E65A  84 F9      			sty.h	<_ax
  925    00:E65C  BD 4C 23   			lda	vdc_bat_limit, x	; BAT size hi-byte.
  926    00:E65F  1A         			inc	a
  927    00:E660  85 FA      			sta	<_bl
  928    00:E662  4C 91 FE   			jmp	clear_bat_x
  929                        	
  930                        	
  931                        	
  932                        	; ***************************************************************************
  933                        	; ***************************************************************************
  934                        	;
  935                        	; void __fastcall __macro load_default_font( void );
  936                        	; void __fastcall __macro sgx_load_default_font( void );
  937                        	;
  938                        	; Args: _bp, _bp_bank = _farptr to font data mapped into MPR3 & MPR4.
  939                        	; Args: _di = VRAM destination address.
  940                        	; Args: monofont_fg = font color (0..15)
  941                        	; Args: monofont_bg = background color (0..15)
  942                        	; Args: _al = number of tiles (aka characters) 0==256
  943                        	
  944    09:D860             	huc_monofont_x	.proc
  945                        	
  946               237E     			.bss
  947    F8:237E             	monofont_fg:	.ds	1
  948    F8:237F             	monofont_bg:	.ds	1
  949               D860     			.code
  950                        	
  951    09:D860  BC 4C 23   			ldy	vdc_bat_limit, x	; BAT limit mask hi-byte.
  952    09:D863  C8         			iny
  953    09:D864  62         			cla
  954    09:D865  85 F0      			sta.l	<_di			; Load the font directly
  955    09:D867  84 F1      			sty.h	<_di			; after the BAT (stupid!).
  956                        	
  957    09:D869  20 E3 E5   			jsr	set_font_addr		; Set xxx_font_base from addr.
  958                        	
  959    09:D86C  A9 F0      			lda.l	#.font
  960    09:D86E  85 EC      			sta.l	<_bp
  961    09:D870  A9 D8      			lda.h	#.font
  962    09:D872  85 ED      			sta.h	<_bp
  963                        	
  964    09:D874  A9 60      			lda	#$60			; #characters.
  965    09:D876  85 F8      			sta	<_al
  966                        	
  967    09:D878  20 7F E3   			jsr	set_di_to_mawr
  968                        	
  969    09:D87B  AD 7E 23   			lda	monofont_fg		; Foreground pixel color.
  970    09:D87E  85 00      			sta	<__temp
  971    09:D880  AD 7F 23   			lda	monofont_bg		; Background pixel color.
  972    09:D883  DA         			phx
  973    09:D884  A2 FC      			ldx.l	#_cx			; Create a bit mask for each
  974    09:D886  9E 00 20   	.bg_loop:	stz	$2000, x		; plane of the background.
  975    09:D889  4A         			lsr	a
  976    09:D88A  90 03      			bcc	.bg_plane
  977    09:D88C  DE 00 20   			dec	$2000, x
  978    09:D88F  E8         	.bg_plane:	inx
  979    09:D890  D0 F4      			bne	.bg_loop
  980    09:D892  FA         			plx
  981                        	
  982    09:D893  C2         	.tile_loop:	cly
  983                        	
  984    09:D894  B1 EC      	.plane01:	lda	[_bp], y		; Get font byte.
  985    09:D896  8F 00 06   			bbs0	<__temp, .set_plane0
  986    09:D899  49 FF      	.clr_plane0:	eor	#$FF			; Clr font bits in background.
  987    09:D89B  25 FC      			and	<_cx + 0
  988    09:D89D  80 02      			bra	.put_plane0
  989    09:D89F  05 FC      	.set_plane0:	ora	<_cx + 0		; Set font bits in background.
  990    09:D8A1  9D 02 02   	.put_plane0:	sta	VDC_DL, x
  991                        	
  992    09:D8A4  B1 EC      			lda	[_bp], y		; Get font byte.
  993    09:D8A6  9F 00 06   			bbs1	<__temp, .set_plane1
  994    09:D8A9  49 FF      	.clr_plane1:	eor	#$FF			; Clr font bits in background.
  995    09:D8AB  25 FD      			and	<_cx + 1
  996    09:D8AD  80 02      			bra	.put_plane1
  997    09:D8AF  05 FD      	.set_plane1:	ora	<_cx + 1		; Set font bits in background.
  998    09:D8B1  9D 03 02   	.put_plane1:	sta	VDC_DH, x
  999                        	
 1000    09:D8B4  C8         			iny
 1001    09:D8B5  C0 08      			cpy	#8
 1002    09:D8B7  90 DB      			bcc	.plane01
 1003                        	
 1004    09:D8B9  C2         			cly
 1005                        	
 1006    09:D8BA  B1 EC      	.plane23:	lda	[_bp], y		; Get font byte.
 1007    09:D8BC  AF 00 06   			bbs2	<__temp, .set_plane2
 1008    09:D8BF  49 FF      	.clr_plane2:	eor	#$FF			; Clr font bits in background.
 1009    09:D8C1  25 FE      			and	<_cx + 2
 1010    09:D8C3  80 02      			bra	.put_plane2
 1011    09:D8C5  05 FE      	.set_plane2:	ora	<_cx + 2		; Set font bits in background.
 1012    09:D8C7  9D 02 02   	.put_plane2:	sta	VDC_DL, x
 1013                        	
 1014    09:D8CA  B1 EC      			lda	[_bp], y		; Get font byte.
 1015    09:D8CC  BF 00 06   			bbs3	<__temp, .set_plane3
 1016    09:D8CF  49 FF      	.clr_plane3:	eor	#$FF			; Clr font bits in background.
 1017    09:D8D1  25 FF      			and	<_cx + 3
 1018    09:D8D3  80 02      			bra	.put_plane3
 1019    09:D8D5  05 FF      	.set_plane3:	ora	<_cx + 3		; Set font bits in background.
 1020    09:D8D7  9D 03 02   	.put_plane3:	sta	VDC_DH, x
 1021                        	
 1022    09:D8DA  C8         			iny
 1023    09:D8DB  C0 08      			cpy	#8
 1024    09:D8DD  90 DB      			bcc	.plane23
 1025                        	
 1026    09:D8DF  A5 EC      			lda.l	<_bp
 1027    09:D8E1  69 07      			adc	#8-1
 1028    09:D8E3  85 EC      			sta.l	<_bp
 1029    09:D8E5  90 02      			bcc	!+
 1030    09:D8E7  E6 ED      			inc.h	<_bp
 1031                        	
 1032    09:D8E9  C6 F8      	!:		dec	<_al
 1033    09:D8EB  D0 A6      			bne	.tile_loop
 1034                        	
 1035                        			leave				; All done, phew!
         09:D8ED  4C EF FF   			jmp	leave_proc
 1036                        	
 1037    09:D8F0             	.font:		incbin	"data/font8x8-bold-short-iso646-fr.dat", 128
 1038                        	
 1039                        			.endp
 1040                        	
 1041                        	
 1042                        	
 1043                        	; ***************************************************************************
 1044                        	; ***************************************************************************
 1045                        	;
 1046                        	; HuC Text Output
 1047                        	;
 1048                        	; ***************************************************************************
 1049                        	; ***************************************************************************
 1050                        	
 1051                        	
 1052                        	
 1053    02:C1E8             	vdc_tty_out	.procgroup			; These routines share code!
 1054                        	
 1055                        	; ***************************************************************************
 1056                        	; ***************************************************************************
 1057                        	;
 1058                        	; void __fastcall put_char( unsigned char digit<_bl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
 1059                        	
 1060               0001     		.if	SUPPORT_SGX
 1061                        	put_char_sgx	.proc
 1067                        			.endp
 1068                        		.endif
 1069                        	
 1070    02:C1E8             	put_char_vdc	.proc
 1071                        	
 1072    02:C1E8  82         			clx				; Offset to PCE VDC.
 1073                        	
 1074    02:C1E9  20 34 E4   			jsr	set_di_xy_mawr
 1075                        	
 1076    02:C1EC  62         			cla				; Push EOL marker.
 1077    02:C1ED  48         			pha
 1078                        	
 1079    02:C1EE  A5 FA      			lda	<_bl
 1080    02:C1F0  48         			pha				; Push character to output.
 1081    02:C1F1  80 58      			bra	!output+
 1082                        	
 1083    02:C1F3             			.ref	put_hex_vdc		; Need put_number_vdc
 1084                        			.endp
 1085                        	
 1086    02:C1F3             			.alias	_put_char.3		= put_char_vdc
 1087                        	
 1088                        	
 1089                        	
 1090                        	; ***************************************************************************
 1091                        	; ***************************************************************************
 1092                        	;
 1093                        	; void __fastcall put_digit( unsigned char digit<_bl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
 1094                        	
 1095               0001     		.if	SUPPORT_SGX
 1096                        	put_digit_sgx	.proc
 1102                        			.endp
 1103                        		.endif
 1104                        	
 1105    02:C1F3             	put_digit_vdc	.proc
 1106                        	
 1107    02:C1F3  82         			clx				; Offset to PCE VDC.
 1108                        	
 1109    02:C1F4  20 34 E4   			jsr	set_di_xy_mawr
 1110                        	
 1111    02:C1F7  62         			cla				; Push EOL marker.
 1112    02:C1F8  48         			pha
 1113                        	
 1114    02:C1F9  A5 FA      			lda	<_bl			; Convert hex digit to ASCII.
 1115    02:C1FB  29 0F      			and	#$0F
 1116    02:C1FD  C9 0A      			cmp	#10
 1117    02:C1FF  90 02      			bcc	!+
 1118    02:C201  69 06      			adc	#6
 1119    02:C203  69 30      	!:		adc	#'0'
 1120    02:C205  48         			pha				; Push character to output.
 1121    02:C206  80 43      			bra	!output+
 1122                        	
 1123    02:C208             			.ref	put_hex_vdc		; Need put_number_vdc
 1124                        			.endp
 1125                        	
 1126    02:C208             			.alias	_put_digit.3		= put_digit_vdc
 1127                        	
 1128                        	
 1129                        	
 1130                        	; ***************************************************************************
 1131                        	; ***************************************************************************
 1132                        	;
 1133                        	; void __fastcall put_hex( unsigned int number<_bx>, unsigned char length<_cl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
 1134                        	
 1135               0001     		.if	SUPPORT_SGX
 1136                        	put_hex_sgx	.proc
 1141                        			.endp
 1142                        		.endif
 1143                        	
 1144    02:C208             	put_hex_vdc	.proc
 1145                        	
 1146    02:C208  82         			clx				; Offset to PCE VDC.
 1147                        	
 1148    02:C209  20 34 E4   			jsr	set_di_xy_mawr
 1149                        	
 1150    02:C20C  A4 FC      			ldy	<_cl			; Total #characters to print,
 1151    02:C20E  F0 3E      			beq	!exit+			; NOT minimum #characters!
 1152                        	
 1153    02:C210  86 00      			stx	<__temp			; Preserve which VDC.
 1154                        	
 1155    02:C212  82         			clx				; Push EOL marker.
 1156    02:C213  DA         			phx
 1157                        	
 1158    02:C214  B5 FA      	.hex_byte:	lda.l	<_bx, x			; Convert hex digit to ASCII.
 1159    02:C216  29 0F      			and	#$0F
 1160    02:C218  C9 0A      			cmp	#10
 1161    02:C21A  90 02      			bcc	!+
 1162    02:C21C  69 06      			adc	#6
 1163    02:C21E  69 30      	!:		adc	#'0'
 1164    02:C220  48         			pha				; Push character to output.
 1165    02:C221  88         			dey
 1166    02:C222  F0 15      			beq	.hex_done
 1167                        	
 1168    02:C224  B5 FA      			lda.l	<_bx, x			; Convert hex digit to ASCII.
 1169    02:C226  4A         			lsr	a
 1170    02:C227  4A         			lsr	a
 1171    02:C228  4A         			lsr	a
 1172    02:C229  4A         			lsr	a
 1173    02:C22A  C9 0A      			cmp	#10
 1174    02:C22C  90 02      			bcc	!+
 1175    02:C22E  69 06      			adc	#6
 1176    02:C230  69 30      	!:		adc	#'0'
 1177    02:C232  48         			pha				; Push character to output.
 1178    02:C233  88         			dey
 1179    02:C234  F0 03      			beq	.hex_done
 1180                        	
 1181    02:C236  E8         			inx
 1182    02:C237  80 DB      			bra	.hex_byte
 1183                        	
 1184    02:C239  A6 00      	.hex_done:	ldx	<__temp			; Restore which VDC.
 1185    02:C23B  80 0E      			bra	!output+
 1186                        	
 1187    02:C23D  18         	.write:		clc
 1188    02:C23E  7D 68 23   			adc.l	_vdc_font_base, x
 1189    02:C241  9D 02 02   			sta	VDC_DL, x
 1190    02:C244  62         			cla
 1191    02:C245  7D 69 23   			adc.h	_vdc_font_base, x
 1192    02:C248  9D 03 02   			sta	VDC_DH, x
 1193                        	
 1194    02:C24B  68         	!output:	pla				; Pop the digits and output.
 1195    02:C24C  D0 EF      			bne	.write
 1196                        	
 1197                        	!exit:		leave				; All done!
         02:C24E  4C EF FF   			jmp	leave_proc
 1198                        	
 1199                        			.endp
 1200                        	
 1201    02:C251             			.alias	_put_hex.4 = put_hex_vdc
 1202                        	
 1203                        	
 1204                        	
 1205                        	; ***************************************************************************
 1206                        	; ***************************************************************************
 1207                        	;
 1208                        	; void __fastcall put_number( unsigned int number<_bx>, unsigned char length<_cl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
 1209                        	
 1210               0001     		.if	SUPPORT_SGX
 1211                        	put_number_sgx	.proc
 1216                        			.endp
 1217                        		.endif
 1218                        	
 1219                        	put_number_vdc	.proc
 1285                        			.endp
 1286                        	
 1287    02:C251             			.alias	_put_number.4 = put_number_vdc
 1288                        	
 1289                        	
 1290                        	
 1291                        	; ***************************************************************************
 1292                        	; ***************************************************************************
 1293                        	;
 1294                        	; void __fastcall put_raw( unsigned int data<_bx>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
 1295                        	
 1296               0001     		.if	SUPPORT_SGX
 1297                        	put_raw_sgx	.proc
 1302                        			.endp
 1303                        		.endif
 1304                        	
 1305                        	put_raw_vdc	.proc
 1318                        			.endp
 1319                        	
 1320    02:C251             			.alias	_put_raw.3		= put_raw_vdc
 1321                        	
 1322                        			.endprocgroup			; vdc_tty_out
 1323                        	
 1324                        	
 1325                        	
 1326                        	; ***************************************************************************
 1327                        	; ***************************************************************************
 1328                        	;
 1329                        	; void __fastcall put_string( unsigned char *string<_bp>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
 1330                        	;
 1331                        	; N.B. This is not a .proc right now because it is called from procedures
 1332                        	; that contain embedded strings, and the string aren't banked in before
 1333                        	; printing (yet).
 1334                        	
 1335               0001     		.if	SUPPORT_SGX
 1336    00:E665             	_sgx_put_string.3:
 1337    00:E665  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
 1338    00:E667  F0         			db	$F0			; Turn "clx" into a "beq".
 1339                        		.endif
 1340                        	
 1341    00:E668  82         	_put_string.3:	clx				; Offset to PCE VDC.
 1342                        	
 1343    00:E669  20 34 E4   			jsr	set_di_xy_mawr
 1344                        	
 1345    00:E66C  C2         			cly
 1346    00:E66D  B1 EC      	.chr_loop:	lda	[_bp], y
 1347    00:E66F  F0 15      			beq	.done
 1348                        	
 1349    00:E671  18         			clc
 1350    00:E672  7D 68 23   			adc.l	_vdc_font_base, x
 1351    00:E675  9D 02 02   			sta	VDC_DL, x
 1352    00:E678  62         			cla
 1353    00:E679  7D 69 23   			adc.h	_vdc_font_base, x
 1354    00:E67C  9D 03 02   			sta	VDC_DH, x
 1355                        	
 1356    00:E67F  C8         			iny
 1357    00:E680  D0 EB      			bne	.chr_loop
 1358    00:E682  E6 ED      			inc.h	<_bp
 1359    00:E684  80 E7      			bra	.chr_loop
 1360                        	
 1361    00:E686  60         	.done:		rts
 1362                        	
 1363                        	
 1364                        	
 1365                        	; ***************************************************************************
 1366                        	; ***************************************************************************
 1367                        	;
 1368                        	; void __fastcall set_color_rgb( unsigned int index<VCE_CTA>, unsigned char r<_al>, unsigned char g<_ah>, unsigned char b<acc> );
 1369                        	;
 1370                        	; r:	red	RED:	bit 3-5
 1371                        	; g:	green	GREEN:	bit 6-8
 1372                        	; b:	blue	BLUE:	bit 0-2
 1373                        	
 1374    00:E687             	_set_color_rgb.4:
 1375                        	;		and	#7
 1376    00:E687  85 00      			sta	<__temp
 1377    00:E689  A5 F8      			lda	<_al
 1378                        	;		and	#7
 1379    00:E68B  0A         			asl	a
 1380    00:E68C  0A         			asl	a
 1381    00:E68D  0A         			asl	a
 1382    00:E68E  05 00      			ora	<__temp
 1383    00:E690  0A         			asl	a
 1384    00:E691  0A         			asl	a
 1385    00:E692  85 00      			sta	<__temp
 1386    00:E694  A5 F9      			lda	<_ah
 1387                        	;		and	#7
 1388    00:E696  4A         			lsr	a
 1389    00:E697  66 00      			ror	<__temp
 1390    00:E699  4A         			lsr	a
 1391    00:E69A  66 00      			ror	<__temp
 1392    00:E69C  A8         			tay
 1393    00:E69D  A5 00      			lda	<__temp
 1394    00:E69F  8D 04 04   			sta.l	VCE_CTW
 1395    00:E6A2  8C 05 04   			sty.h	VCE_CTW
 1396    00:E6A5  60         			rts
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   60                        		.endif
   61                        	
   62               0001     		.ifdef	HUCC_USES_STRING		; Set in hucc_string.h
                             #[3]   "..\..\..\include\hucc\hucc-string.asm"
   63                        			include	"hucc-string.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-string.asm
    5                        	;
    6                        	; Not-quite-standard, but fast, replacements for <string.h>.
    7                        	;
    8                        	; Copyright John Brandwood 2024.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; !!! WARNING : non-standard return values !!!
   18                        	;
   19                        	; Strings are limited to a maximum of 255 characters (+ the terminator)!
   20                        	;
   21                        	; The memcpy(), strcpy() and strcat() functions do NOT return the destination
   22                        	; address, and they are declared "void" to check that the value is not used.
   23                        	;
   24                        	; mempcpy() is provided which returns the end address instead of the starting
   25                        	; address, because this is typically more useful.
   26                        	;
   27                        	; Please note that both memcpy() and memset() are implemented using a TII for
   28                        	; speed, and so the length should be < 16 bytes if used in time-critical bits
   29                        	; of code (such as when using a split screen) because they delay interrupts.
   30                        	;
   31                        	; strncpy() and strncat() are not provided, because strncpy() was not created
   32                        	; for the purpose of avoiding string overruns, and strncat() is just a poorly
   33                        	; designed function.
   34                        	;
   35                        	; POSIX strlcpy() and strlcat() are provided instead, but once again they are
   36                        	; slightly non-standard in that the return value when there is an overflow is
   37                        	; the buffer size (so that the overflow can be detected), instead of the full
   38                        	; size of the destination string that was too big to fit in the buffer.
   39                        	;
   40                        	; ***************************************************************************
   41                        	; ***************************************************************************
   42                        	
   43                        	
   44                        	
   45                        	; ***************************************************************************
   46                        	; ***************************************************************************
   47                        	;
   48                        	; void __fastcall strcpy( char *destination<_di>, char *source<_bp> );
   49                        	; void __fastcall strcat( char *destination<_di>, char *source<_bp> );
   50                        	;
   51                        	; unsigned int __fastcall strlcpy( char *destination<_di>, char *source<_bp>, unsigned char size<acc> );
   52                        	; unsigned int __fastcall strlcat( char *destination<_di>, char *source<_bp>, unsigned char size<acc> );
   53                        	; unsigned int __fastcall strlen( char *source<_bp> );
   54                        	;
   55                        	; NOT WORKING YET (needs compiler changes) ...
   56                        	;
   57                        	; void __fastcall strcpy( char *destination<_di>, char __far *source<_bp_bank:_bp> );
   58                        	; void __fastcall strcat( char *destination<_di>, char __far *source<_bp_bank:_bp> );
   59                        	;
   60                        	; unsigned int __fastcall strlcpy( char *destination<_di>, char __far *source<_bp_bank:_bp>, unsigned char size<acc> );
   61                        	; unsigned int __fastcall strlcat( char *destination<_di>, char __far *source<_bp_bank:_bp>, unsigned char size<acc> );
   62                        	; unsigned int __fastcall strlen( char __far *source<_bp_bank:_bp> );
   63                        	
   64    00:E6A6  62         	_strcat:	cla				; Max string length == 256!
   65    00:E6A7  A0 01      			ldy.h	#256
   66                        	
   67    00:E6A9  AA         	_strlcat:	tax				; X = buffer length (1..256).
   68                        	
   69               0000     		.ifdef	_DEBUG
   74                        		.endif
   75                        	
   76    00:E6AA  43 08      			tma3				; Preserve MPR3 and MPR4.
   77    00:E6AC  48         			pha
   78    00:E6AD  43 10      			tma4
   79    00:E6AF  48         			pha
   80                        	
   81                        	;		ldy	<_bp_bank		; Map the source string.
   82                        	;		beq	.no_bank
   83                        	;		jsr	map_bp_to_mpr34
   84                        	
   85    00:E6B0  C2         	.no_bank:	cly
   86                        	
   87    00:E6B1  B1 F0      	.find:		lda	[_di], y		; Find the end of the string.
   88    00:E6B3  F0 08      			beq	.adjust
   89    00:E6B5  C8         			iny
   90    00:E6B6  CA         			dex
   91    00:E6B7  D0 F8      			bne	.find
   92    00:E6B9  98         			tya				; A:Y = buffer length.
   93    00:E6BA  62         			cla
   94    00:E6BB  80 28      			bra	str_overflow
   95                        	
   96    00:E6BD  98         	.adjust:	tya				; Subtract Y from _bp so that
   97    00:E6BE  49 FF      			eor	#$FF			; _bp and _di use the same Y.
   98    00:E6C0  38         			sec
   99    00:E6C1  65 EC      			adc.l	<_bp
  100    00:E6C3  85 EC      			sta.l	<_bp
  101    00:E6C5  B0 0F      			bcs	str_copy
  102    00:E6C7  C6 ED      			dec.h	<_bp
  103    00:E6C9  80 0B      			bra	str_copy
  104                        	
  105                        			;
  106                        	
  107    00:E6CB  62         	_strcpy:	cla				; Max string length == 256!
  108    00:E6CC  A0 01      			ldy.h	#256
  109                        	
  110    00:E6CE  AA         	_strlcpy:	tax				; X = buffer length (1..256).
  111                        	
  112               0000     		.ifdef	_DEBUG
  117                        		.endif
  118                        	
  119    00:E6CF  43 08      			tma3				; Preserve MPR3 and MPR4.
  120    00:E6D1  48         			pha
  121    00:E6D2  43 10      			tma4
  122    00:E6D4  48         			pha
  123                        	
  124                        	;		ldy	<_bp_bank		; Map the source string.
  125                        	;		beq	.no_bank
  126                        	;		jsr	map_bp_to_mpr34
  127                        	
  128    00:E6D5  C2         	.no_bank:	cly
  129                        	
  130    00:E6D6  B1 EC      	str_copy:	lda	[_bp], y
  131    00:E6D8  91 F0      			sta	[_di], y
  132    00:E6DA  F0 1E      			beq	str_exit		; A:Y = string length.
  133    00:E6DC  C8         			iny
  134    00:E6DD  CA         			dex
  135    00:E6DE  D0 F6      			bne	str_copy
  136                        	
  137    00:E6E0  88         			dey
  138    00:E6E1  62         			cla
  139    00:E6E2  91 F0      			sta	[_di], y
  140    00:E6E4  C8         			iny				; A:Y = buffer length.
  141    00:E6E5  D0 13      	str_overflow:	bne	str_exit
  142    00:E6E7  1A         			inc	a			; A:Y = buffer length = 256.
  143    00:E6E8  80 10      			bra	str_exit
  144                        	
  145                        			;
  146                        	
  147    00:E6EA  43 08      	_strlen:	tma3
  148    00:E6EC  48         			pha
  149    00:E6ED  43 10      			tma4
  150    00:E6EF  48         			pha
  151                        	
  152                        	;		ldy	<_bp_bank
  153                        	;		beq	.no_bank
  154                        	;		jsr	map_bp_to_mpr34
  155                        	
  156    00:E6F0  C2         	.no_bank:	cly
  157                        	
  158    00:E6F1  B1 EC      	.find:		lda	[_bp], y
  159    00:E6F3  F0 05      			beq	str_exit
  160    00:E6F5  C8         			iny
  161    00:E6F6  D0 F9      			bne	.find
  162    00:E6F8  A9 01      			lda.h	#256			; A:Y = overflow length = 256.
  163                        	
  164    00:E6FA  AA         	str_exit:	tax				; X:Y = string or buffer length.
  165                        	
  166    00:E6FB  68         			pla				; Restore MPR3 and MPR4.
  167    00:E6FC  53 10      			tam4
  168    00:E6FE  68         			pla
  169    00:E6FF  53 08      			tam3
  170                        	
  171    00:E701  8A         			txa				; A:Y = string or buffer length.
  172    00:E702  42         			say				; Y:A = string or buffer length.
  173                        	
  174    00:E703  60         			rts
  175                        	
  176    00:E704             			.alias	_strlen.1		= _strlen
  177    00:E704             			.alias	_strcpy.2		= _strcpy
  178    00:E704             			.alias	_strcat.2		= _strcat
  179    00:E704             			.alias	_strlcpy.3		= _strlcpy
  180    00:E704             			.alias	_strlcat.3		= _strlcat
  181                        	
  182                        	
  183                        	
  184                        	; ***************************************************************************
  185                        	; ***************************************************************************
  186                        	;
  187                        	; void __fastcall memcpy( unsigned char *destination<ram_tii_dst>, unsigned char  *source<ram_tii_src>, unsigned int count<acc> );
  188                        	; unsigned char * __fastcall mempcpy( unsigned char *destination<ram_tii_dst>, unsigned char  *source<ram_tii_src>, unsigned int count<acc> );
  189                        	;
  190                        	; void __fastcall farmemcpy( unsigned char *destination<ram_tii_dst>, unsigned char __far *source<_bp_bank:ram_tii_src>, unsigned int count<acc> );
  191                        	; unsigned char * __fastcall farmempcpy( unsigned char *destination<ram_tii_dst>, unsigned char __far *source<_bp_bank:ram_tii_src>, unsigned int count<acc> );
  192                        	;
  193                        	; void __fastcall far_memcpy( unsigned char *destination<ram_tii_dst>, unsigned int count<acc> );
  194                        	; unsigned char * __fastcall far_mempcpy( unsigned char *destination<ram_tii_dst>, unsigned int count<acc> );
  195                        	;
  196                        	
  197    00:E704             	_memcpy.3:
  198    00:E704  64 02      	_mempcpy.3:	stz	<_bp_bank		; Map the source memory.
  199                        	
  200    00:E706             	_farmemcpy.3:
  201    00:E706  8C FE 22   	_farmempcpy.3:	sty.h	ram_tii_len		; Check for zero length.
  202    00:E709  8D FD 22   			sta.l	ram_tii_len
  203    00:E70C  0D FE 22   			ora.h	ram_tii_len
  204    00:E70F  F0 18      			beq	.zero_length
  205                        	
  206    00:E711  43 08      			tma3				; Preserve MPR3 and MPR4.
  207    00:E713  48         			pha
  208    00:E714  43 10      			tma4
  209    00:E716  48         			pha
  210                        	
  211    00:E717  A5 02      			lda	<_bp_bank		; Map the source memory.
  212    00:E719  F0 05      			beq	.no_bank
  213                        	
  214    00:E71B  53 08      			tam3				; Put bank into MPR3.
  215    00:E71D  1A         			inc	a
  216    00:E71E  53 10      			tam4				; Put next into MPR4.
  217                        	
  218                        	;		lda.h	ram_tii_src		; Remap ptr to MPR3.
  219                        	;		and	#$1F
  220                        	;		ora	#$60
  221                        	;		sta.h	ram_tii_src
  222                        	
  223    00:E720  20 F8 22   	.no_bank:	jsr	ram_tii			; Copy the memory.
  224                        	
  225    00:E723  68         			pla				; Restore MPR3 and MPR4.
  226    00:E724  53 10      			tam4
  227    00:E726  68         			pla
  228    00:E727  53 08      			tam3
  229                        	
  230    00:E729  18         	.zero_length:	clc				; Return the end address
  231    00:E72A  AD FB 22   			lda.l	ram_tii_dst		; like mempcpy().
  232    00:E72D  6D FD 22   			adc.l	ram_tii_len
  233    00:E730  A8         			tay
  234    00:E731  AD FC 22   			lda.h	ram_tii_dst
  235    00:E734  6D FE 22   			adc.h	ram_tii_len
  236    00:E737  42         			say
  237                        	
  238    00:E738  60         			rts
  239                        	
  240    00:E739             			.alias	_far_memcpy.2		= _farmemcpy.3
  241    00:E739             			.alias	_far_mempcpy.2		= _farmempcpy.3
  242                        	
  243                        	
  244                        	
  245                        	; ***************************************************************************
  246                        	; ***************************************************************************
  247                        	;
  248                        	; void __fastcall memset( unsigned char *destination<ram_tii_src>, unsigned char value<_al>, unsigned int count<acc> );
  249                        	
  250    00:E739  C9 00      	_memset:	cmp	#0			; Decrement the length, check
  251    00:E73B  D0 05      			bne	!+			; for zero and set C. 
  252    00:E73D  C0 00      			cpy	#0
  253    00:E73F  F0 23      			beq	.zero_length
  254    00:E741  88         			dey
  255    00:E742  3A         	!:		dec	a
  256    00:E743  8D FD 22   			sta.l	ram_tii_len
  257    00:E746  8C FE 22   			sty.h	ram_tii_len
  258                        	
  259    00:E749  AD F9 22   			lda.l	ram_tii_src		; ram_tii_dst = ram_tii_src + 1
  260    00:E74C  85 88      			sta.l	<__ptr
  261    00:E74E  69 00      			adc	#0
  262    00:E750  8D FB 22   			sta.l	ram_tii_dst
  263    00:E753  AD FA 22   			lda.h	ram_tii_src
  264    00:E756  85 89      			sta.h	<__ptr
  265    00:E758  69 00      			adc	#0
  266    00:E75A  8D FC 22   			sta.h	ram_tii_dst
  267                        	
  268    00:E75D  A5 F8      			lda	<_al			; Set the fill value.
  269    00:E75F  92 88      			sta	[__ptr]
  270                        	
  271    00:E761  4C F8 22   			jmp	ram_tii			; Copy the memory.
  272                        	
  273    00:E764  60         	.zero_length:	rts
  274                        	
  275    00:E765             			.alias	_memset.3		= _memset
  276                        	
  277                        	
  278                        	
  279                        	; ***************************************************************************
  280                        	; ***************************************************************************
  281                        	;
  282                        	; int __fastcall strcmp( char *string1<_di>, char *string2<_bp> );
  283                        	; int __fastcall strncmp( char *string1<_di>, char *string2<_bp>, unsigned int count<_ax> );
  284                        	;
  285                        	; int __fastcall __macro memcmp( unsigned char *string1<_di>, unsigned char *string2<_bp>, unsigned int count<_ax> );
  286                        	; int __fastcall farmemcmp( unsigned char *string1<_di>, unsigned char __far *string2<_bp_bank:_bp>, unsigned int count<_ax> );
  287                        	; int __fastcall far_memcmp( unsigned char *string1<_di>, unsigned int count<_ax> );
  288                        	;
  289                        	;  0 	if strings are equal
  290                        	;  1 	if the first non-matching character in string1 > string2 (in ASCII).
  291                        	; -1 	if the first non-matching character in string1 < string2 (in ASCII).
  292                        	
  293    02:C4F7             	hucc_memcmp	.procgroup
  294                        	
  295                        	_strcmp.2	.proc
  300                        			.endp				; Fall through.
  301                        	
  302    02:C4F7             	_strncmp.3	.proc
  303    02:C4F7  64 02      			stz	<_bp_bank		; Assume strings are mapped.
  304    02:C4F9  89 40      			bit	#$40			; Set the V bit for strcmp.
  305    02:C4FB  50         			db	$50			; Turn "clv" into "bvc".
  306    02:C4FC             			.ref	_farmemcmp.3		; Don't strip _farmemcmp.3!
  307                        			.endp				; Fall through.
  308                        	
  309    02:C4FC             	_farmemcmp.3	.proc
  310    02:C4FC  B8         			clv				; Clr the V bit for memcmp.
  311                        	
  312    02:C4FD  43 08      			tma3				; Preserve MPR3 and MPR4.
  313    02:C4FF  48         			pha
  314    02:C500  43 10      			tma4
  315    02:C502  48         			pha
  316                        	
  317    02:C503  A4 02      			ldy	<_bp_bank		; Map string2.
  318    02:C505  F0 03      			beq	.no_bank
  319                        	
  320    02:C507  20 3B E3   			jsr	map_bp_to_mpr34
  321                        	
  322    02:C50A  C2         	.no_bank:	cly
  323                        	
  324    02:C50B  A6 F8      			ldx.l	<_ax			; Increment length.l
  325    02:C50D  E8         			inx
  326    02:C50E  CA         	.loop:		dex				; Decrement length.l
  327    02:C50F  F0 17      			beq	.page
  328    02:C511  B1 F0      	.test:		lda	[_di], y		; string1 - string2
  329    02:C513  D1 EC      			cmp	[_bp], y
  330    02:C515  90 1E      			bcc	.return_neg		; string1 < string2 
  331    02:C517  D0 17      			bne	.return_pos		; string1 > string2
  332    02:C519  50 04      			bvc	!+			; Only check for end-of-string
  333    02:C51B  C9 00      			cmp	#0			; if the V flag is set.
  334    02:C51D  F0 0D      			beq	.return_same
  335    02:C51F  C8         	!:		iny
  336    02:C520  D0 EC      			bne	.loop
  337    02:C522  E6 F1      			inc.h	<_di
  338    02:C524  E6 ED      			inc.h	<_bp			; Limited to 8KB maximum!
  339                        	;		jsr	inc.h_bp_mpr34
  340    02:C526  80 E6      			bra	.loop
  341                        	
  342    02:C528  C6 F9      	.page:		dec.h	<_ax			; Decrement length.h 
  343    02:C52A  10 E5      			bpl	.test			; Limit comparison to 32KB.
  344                        	;		bra	cmp_same
  345                        	
  346    02:C52C  82         	.return_same:	clx				; Return code in Y:X, X -> A.
  347    02:C52D  C2         			cly
  348    02:C52E  80 09      			bra	!+
  349                        	
  350    02:C530  A2 01      	.return_pos:	ldx	#$01			; Return code in Y:X, X -> A.
  351    02:C532  C2         			cly
  352    02:C533  80 04      			bra	!+
  353                        	
  354    02:C535  A2 FF      	.return_neg:	ldx	#$FF			; Return code in Y:X, X -> A.
  355    02:C537  A0 FF      			ldy	#$FF
  356                        	
  357    02:C539  68         	!:		pla				; Restore MPR3 and MPR4.
  358    02:C53A  53 10      			tam4
  359    02:C53C  68         			pla
  360    02:C53D  53 08      			tam3
  361                        	
  362                        			leave				; Return and copy X -> A.
         02:C53F  4C EF FF   			jmp	leave_proc
  363                        	
  364                        			.endp
  365                        	
  366                        			.endprocgroup			; hucc_memcmp
  367                        	
  368    00:E765             			.alias	_far_memcmp.2		= _farmemcmp.3
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   64                        		.endif
   65                        	
   66               0001     		.ifdef	HUCC_USES_NEW_SCROLL		; Set in hucc_scroll.h
                             #[3]   "..\..\..\include\hucc\hucc-scroll.asm"
   67                        			include	"hucc-scroll.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-scroll.asm
    5                        	;
    6                        	; Routines for a fast split-screen scrolling system.
    7                        	;
    8                        	; Copyright John Brandwood 2024.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; The maximum number of splits for each screen layer is set in your project's
   18                        	; "hucc-config.inc" file, with the library having a limit of 128-per-layer.
   19                        	;
   20                        	; Your first active split must be defined to start at screen line 0, and then
   21                        	; the rest of the active splits must be in increasing line order to match the
   22                        	; way that the PC Engine displays the output image.
   23                        	;
   24                        	; You can have disabled splits interleaved with your active splits.
   25                        	;
   26                        	; Splits that are normally disabled can be used to create full screen effects
   27                        	; such as bouncing the screen up and down by adding blank areas at the top or
   28                        	; bottom of the screen, and then rapidly changing the height of those areas.
   29                        	;
   30                        	; ***************************************************************************
   31                        	; ***************************************************************************
   32                        	
   33                        	
   34                        	
   35               0000     		.ifndef	HUCC_PCE_SPLITS
   37                        		.endif
   38                        	
   39               0000     		.ifndef	HUCC_SGX_SPLITS
   41                        		.endif
   42                        	
   43               0000     		.if	(HUCC_PCE_SPLITS < 2) || (HUCC_PCE_SPLITS > 128)
   45                        		.endif
   46                        	
   47               0000     		.if	(HUCC_SGX_SPLITS < 2) || (HUCC_SGX_SPLITS > 128)
   49                        		.endif
   50                        	
   51               0144     	HUCC_1ST_RCR	=	$144
   52               00E0     	HUCC_SCR_HEIGHT	=	224
   53                        	
   54               E765     			.code
   55                        	
   56                        	
   57                        	
   58                        	; ***************************************************************************
   59                        	; ***************************************************************************
   60                        	;
   61                        	; void __fastcall scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
   62                        	; void __fastcall sgx_scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
   63                        	;
   64                        	; set screen scrolling
   65                        	
   66                        			.proc	_scroll_split.5
  143                        			.endp
  144                        	
  145               0001     		.if	SUPPORT_SGX
  146                        	
  147    02:C000             			.proc	_sgx_scroll_split.5
  148                        	
  149    02:C000  08         			php				; Disable interrupts while
  150    02:C001  78         			sei				; updating this structure.
  151                        	
  152    02:C002  A6 F8      			ldx	<_al			; Region number.
  153    02:C004  E0 08      			cpx	#HUCC_SGX_SPLITS
  154    02:C006  B0 FE      	.hang:		bcs	.hang			; Better a hang than a crash!
  155                        	
  156    02:C008  BD 01 24   			lda	sgx_region_sel, x	; Update the parameter copy
  157    02:C00B  5D 09 24   			eor	sgx_region_new, x	; that is not displayed now.
  158    02:C00E  D0 3B      			bne	.regionA
  159                        	
  160    02:C010  A5 F9      	.regionB:	lda	<_ah			; Scanline (i.e. top).
  161    02:C012  C9 E0      			cmp	#HUCC_SCR_HEIGHT	; Skip if offscreen.
  162    02:C014  B0 31      			bcs	!done+
  163    02:C016  9D 29 24   			sta	sgx_regionB_rcr, x
  164                        	
  165    02:C019  C9 00      			cmp	#0			; Either Y at top of the frame
  166    02:C01B  F0 01      			beq	!+			; or Y-1 because the RCR code
  167    02:C01D  18         			clc				; sets it on the line before.
  168    02:C01E  A5 FC      	!:		lda.l	<_cx
  169    02:C020  E9 00      			sbc	#0
  170    02:C022  9D 59 24   			sta	sgx_regionB_yl, x
  171    02:C025  A5 FD      			lda.h	<_cx
  172    02:C027  E9 00      			sbc	#0
  173    02:C029  9D 69 24   			sta	sgx_regionB_yh, x
  174                        	
  175    02:C02C  A5 FA      			lda.l	<_bx
  176    02:C02E  9D 39 24   			sta	sgx_regionB_xl, x
  177    02:C031  A5 FB      			lda.h	<_bx
  178    02:C033  9D 49 24   			sta	sgx_regionB_xh, x
  179                        	
  180    02:C036  A5 FE      			lda	<_dl
  181    02:C038  29 C0      			and	#$C0			; Flags (mark it as enabled).
  182    02:C03A  09 0C      			ora	#$0C
  183    02:C03C  9D 19 24   			sta	sgx_regionB_crl, x
  184                        	
  185    02:C03F  A9 01      			lda	#1			; Mark that we've changed the
  186    02:C041  9D 09 24   			sta	sgx_region_new, x	; selected region.
  187    02:C044  9D 01 24   			sta	sgx_region_sel, x
  188                        	
  189    02:C047  28         	!done:		plp				; Restore interrupts.
  190                        			leave				; All done!
         02:C048  4C EF FF   			jmp	leave_proc
  191                        	
  192    02:C04B  A5 F9      	.regionA:	lda	<_ah			; Scanline (i.e. top).
  193    02:C04D  C9 E0      			cmp	#HUCC_SCR_HEIGHT	; Skip if offscreen.
  194    02:C04F  B0 31      			bcs	!done+
  195    02:C051  9D 21 24   			sta	sgx_regionA_rcr, x
  196                        	
  197    02:C054  C9 00      			cmp	#0			; Either Y at top of the frame
  198    02:C056  F0 01      			beq	!+			; or Y-1 because the RCR code
  199    02:C058  18         			clc				; sets it on the line before.
  200    02:C059  A5 FC      	!:		lda.l	<_cx
  201    02:C05B  E9 00      			sbc	#0
  202    02:C05D  9D 51 24   			sta	sgx_regionA_yl, x
  203    02:C060  A5 FD      			lda.h	<_cx
  204    02:C062  E9 00      			sbc	#0
  205    02:C064  9D 61 24   			sta	sgx_regionA_yh, x
  206                        	
  207    02:C067  A5 FA      			lda.l	<_bx
  208    02:C069  9D 31 24   			sta	sgx_regionA_xl, x
  209    02:C06C  A5 FB      			lda.h	<_bx
  210    02:C06E  9D 41 24   			sta	sgx_regionA_xh, x
  211                        	
  212    02:C071  A5 FE      			lda	<_dl
  213    02:C073  29 C0      			and	#$C0			; Flags (mark it as enabled).
  214    02:C075  09 0C      			ora	#$0C
  215    02:C077  9D 11 24   			sta	sgx_regionA_crl, x
  216                        	
  217    02:C07A  A9 01      			lda	#1			; Mark that we've changed the
  218    02:C07C  9D 09 24   			sta	sgx_region_new, x	; selected region.
  219    02:C07F  9E 01 24   			stz	sgx_region_sel, x
  220                        	
  221    02:C082  28         	!done:		plp				; Restore interrupts.
  222                        			leave				; All done!
         02:C083  4C EF FF   			jmp	leave_proc
  223                        	
  224                        			.endp
  225                        	
  226                        		.endif	SUPPORT_SGX
  227                        	
  228                        	
  229                        	
  230                        	; ***************************************************************************
  231                        	; ***************************************************************************
  232                        	;
  233                        	; void __fastcall disable_split( unsigned char index<acc> );
  234                        	; void __fastcall sgx_disable_split( unsigned char index<acc> );
  235                        	;
  236                        	; disable screen scrolling for a scroll region
  237                        	
  238    00:E765             	_disable_split.1:
  239    00:E765  08         			php				; Disable interrupts while
  240    00:E766  78         			sei				; updating this structure.
  241                        	
  242    00:E767  C9 08      			cmp	#HUCC_PCE_SPLITS	; Better a hang than a crash!
  243    00:E769  B0 FE      	.hang:		bcs	.hang
  244    00:E76B  AA         			tax
  245                        	
  246    00:E76C  BD 80 23   			lda	vdc_region_sel, x	; Update the parameter copy
  247    00:E76F  5D 88 23   			eor	vdc_region_new, x	; that is not displayed now.
  248    00:E772  D0 0D      			bne	.regionA
  249                        	
  250    00:E774  9E 98 23   	.regionB:	stz	vdc_regionB_crl, x	; Region disabled if $00.
  251                        	
  252    00:E777  A9 01      			lda	#1			; Mark that we've changed the
  253    00:E779  9D 88 23   			sta	vdc_region_new, x	; selected region.
  254    00:E77C  9D 80 23   			sta	vdc_region_sel, x
  255                        	
  256    00:E77F  28         			plp				; Restore interrupts.
  257    00:E780  60         			rts
  258                        	
  259    00:E781  9E 90 23   	.regionA:	stz	vdc_regionA_crl, x	; Region disabled if $00.
  260                        	
  261    00:E784  A9 01      			lda	#1			; Mark that we've changed the
  262    00:E786  9D 88 23   			sta	vdc_region_new, x	; selected region.
  263    00:E789  9E 80 23   			stz	vdc_region_sel, x
  264                        	
  265    00:E78C  28         			plp				; Restore interrupts.
  266    00:E78D  60         			rts
  267                        	
  268               0001     		.if	SUPPORT_SGX
  269                        	
  270    00:E78E             	_sgx_disable_split.1:
  271    00:E78E  08         			php				; Disable interrupts while
  272    00:E78F  78         			sei				; updating this structure.
  273                        	
  274    00:E790  C9 08      			cmp	#HUCC_SGX_SPLITS	; Better a hang than a crash!
  275    00:E792  B0 FE      	.hang:		bcs	.hang
  276    00:E794  AA         			tax
  277                        	
  278    00:E795  BD 01 24   			lda	sgx_region_sel, x	; Update the parameter copy
  279    00:E798  5D 09 24   			eor	sgx_region_new, x	; that is not displayed now.
  280    00:E79B  D0 0D      			bne	.regionA
  281                        	
  282    00:E79D  9E 19 24   	.regionB:	stz	sgx_regionB_crl, x	; Region disabled if $00.
  283                        	
  284    00:E7A0  A9 01      			lda	#1			; Mark that we've changed the
  285    00:E7A2  9D 09 24   			sta	sgx_region_new, x	; selected region.
  286    00:E7A5  9D 01 24   			sta	sgx_region_sel, x
  287                        	
  288    00:E7A8  28         			plp				; Restore interrupts.
  289    00:E7A9  60         			rts
  290                        	
  291    00:E7AA  9E 11 24   	.regionA:	stz	sgx_regionA_crl, x	; Region disabled if $00.
  292                        	
  293    00:E7AD  A9 01      			lda	#1			; Mark that we've changed the
  294    00:E7AF  9D 09 24   			sta	sgx_region_new, x	; selected region.
  295    00:E7B2  9E 01 24   			stz	sgx_region_sel, x
  296                        	
  297    00:E7B5  28         			plp				; Restore interrupts.
  298    00:E7B6  60         			rts
  299                        	
  300                        		.endif	SUPPORT_SGX
  301                        	
  302                        	
  303                        	
  304                        	; ***************************************************************************
  305                        	; ***************************************************************************
  306                        	;
  307                        	; vbl_init_scroll
  308                        	;
  309                        	; From Charles MacDonald's pcetech.txt ...
  310                        	;
  311                        	;  Raster Compare Register (RCR):
  312                        	;
  313                        	;  The range of the RCR is 263 lines, relative to the start of the active
  314                        	;  display period. (defined by VSW, VDS, and VCR) The VDC treats the first
  315                        	;  scanline of the active display period as $0040, so the valid ranges for
  316                        	;  the RCR register are $0040 to $0146.
  317                        	;
  318                        	;  For example, assume VSW=$02, VDS=$17. This positions the first line of
  319                        	;  the active display period at line 25 of the frame. An RCR value of $0040
  320                        	;  (zero) causes an interrupt at line 25, and a value of $0146 (262) causes an
  321                        	;  interrupt at line 24 of the next frame.
  322                        	;
  323                        	;  Any other RCR values that are out of range ($00-$3F, $147-$3FF) will never
  324                        	;  result in a successful line compare.
  325                        	;
  326                        	; Processing time:
  327                        	;
  328                        	; Old HuC rcr_init: 2148 cycles if all 8 regions pre-sorted
  329                        	; Old HuC rcr_init: 4346 cycles if all 8 regions need sorting
  330                        	;
  331                        	; New HuCC vbl_init_scroll:   8 disabled splits:  290 cycles
  332                        	; New HuCC vbl_init_scroll:   8  enabled splits:  384 cycles
  333                        	;
  334                        	; New HuCC vbl_init_scroll:  16 disabled splits:  506 cycles
  335                        	; New HuCC vbl_init_scroll:  16  enabled splits:  672 cycles
  336                        	;
  337                        	; New HuCC vbl_init_scroll:  32 disabled splits:  953 cycles
  338                        	; New HuCC vbl_init_scroll:  32  enabled splits: 1263 cycles
  339                        	;
  340                        	; New HuCC vbl_init_scroll:  64 disabled splits: 1802 cycles
  341                        	; New HuCC vbl_init_scroll:  64  enabled splits: 2400 cycles
  342                        	;
  343                        	; New HuCC vbl_init_scroll: 128 disabled splits: 3530 cycles
  344                        	; New HuCC vbl_init_scroll: 128  enabled splits: 4704 cycles
  345                        	;
  346                        	; Memory used is 16 bytes per scroll per VDC!
  347                        	
  348               2380     			.bss
  349                        	
  350    F8:2380             	vdc_region_sel:	.ds	HUCC_PCE_SPLITS		; Use A or B region next frame?
  351    F8:2388             	vdc_region_new:	.ds	HUCC_PCE_SPLITS		; 1 if vdc_region_sel modified.
  352                        	
  353    F8:2390             	vdc_regionA_crl:.ds	HUCC_PCE_SPLITS		; Two copies of each setting
  354    F8:2398             	vdc_regionB_crl:.ds	HUCC_PCE_SPLITS		; HUCC_PCE_SPLITS bytes apart,
  355    F8:23A0             	vdc_regionA_rcr:.ds	HUCC_PCE_SPLITS		; one setting for the current
  356    F8:23A8             	vdc_regionB_rcr:.ds	HUCC_PCE_SPLITS		; frame, and one setting that
  357    F8:23B0             	vdc_regionA_xl:	.ds	HUCC_PCE_SPLITS		; gets modified and then used
  358    F8:23B8             	vdc_regionB_xl:	.ds	HUCC_PCE_SPLITS		; on the next frame after the
  359    F8:23C0             	vdc_regionA_xh:	.ds	HUCC_PCE_SPLITS		; change is made.
  360    F8:23C8             	vdc_regionB_xh:	.ds	HUCC_PCE_SPLITS		; Regions will have different
  361    F8:23D0             	vdc_regionA_yl:	.ds	HUCC_PCE_SPLITS		; A or B currently active!
  362    F8:23D8             	vdc_regionB_yl:	.ds	HUCC_PCE_SPLITS
  363    F8:23E0             	vdc_regionA_yh:	.ds	HUCC_PCE_SPLITS
  364    F8:23E8             	vdc_regionB_yh:	.ds	HUCC_PCE_SPLITS
  365                        	
  366    F8:23F0             	vdc_next_region:.ds	1			; Linked list of region indexes
  367    F8:23F1             	vdc_regionA_nxt:.ds	HUCC_PCE_SPLITS		; for the current frame.
  368    F8:23F9             	vdc_regionB_nxt:.ds	HUCC_PCE_SPLITS
  369                        	
  370               0001     		.if	SUPPORT_SGX
  371                        	
  372    F8:2401             	sgx_region_sel:	.ds	HUCC_SGX_SPLITS		; Use A or B region next frame?
  373    F8:2409             	sgx_region_new:	.ds	HUCC_SGX_SPLITS		; 1 if sgx_region_sel modified.
  374                        	
  375    F8:2411             	sgx_regionA_crl:.ds	HUCC_SGX_SPLITS		; Two copies of each setting
  376    F8:2419             	sgx_regionB_crl:.ds	HUCC_SGX_SPLITS		; HUCC_SGX_SPLITS bytes apart,
  377    F8:2421             	sgx_regionA_rcr:.ds	HUCC_SGX_SPLITS		; one setting for the current
  378    F8:2429             	sgx_regionB_rcr:.ds	HUCC_SGX_SPLITS		; frame, and one setting that
  379    F8:2431             	sgx_regionA_xl:	.ds	HUCC_SGX_SPLITS		; gets modified and then used
  380    F8:2439             	sgx_regionB_xl:	.ds	HUCC_SGX_SPLITS		; on the next frame after the
  381    F8:2441             	sgx_regionA_xh:	.ds	HUCC_SGX_SPLITS		; change is made.
  382    F8:2449             	sgx_regionB_xh:	.ds	HUCC_SGX_SPLITS		; Regions will have different
  383    F8:2451             	sgx_regionA_yl:	.ds	HUCC_SGX_SPLITS		; A or B currently active!
  384    F8:2459             	sgx_regionB_yl:	.ds	HUCC_SGX_SPLITS
  385    F8:2461             	sgx_regionA_yh:	.ds	HUCC_SGX_SPLITS
  386    F8:2469             	sgx_regionB_yh:	.ds	HUCC_SGX_SPLITS
  387                        	
  388    F8:2471             	sgx_next_region:.ds	1			; Linked list of region indexes
  389    F8:2472             	sgx_regionA_nxt:.ds	HUCC_SGX_SPLITS		; for the current frame.
  390    F8:247A             	sgx_regionB_nxt:.ds	HUCC_SGX_SPLITS
  391                        	
  392                        		.endif
  393                        	
  394               E7B7     			.code
  395                        	
  396    02:C086             	vbl_init_scroll	.proc
  397                        	
  398    02:C086  62         			cla				; A = previous active index
  399    02:C087  A2 08      			ldx	#HUCC_PCE_SPLITS	; so $00 for end-of-screen.
  400                        	
  401    02:C089  18         			clc				; For regionB indexes.
  402                        	
  403    02:C08A  CA         	!next_region:	dex				; All regions updated?
  404    02:C08B  30 20      			bmi	!save_first+
  405                        	
  406    02:C08D  9E 88 23   			stz	vdc_region_new, x	; Clear region modified flag.
  407                        	
  408    02:C090  BC 80 23   			ldy	vdc_region_sel, x	; 0=regionA or 1=regionB.
  409    02:C093  F0 0D      			beq	!use_regionA+
  410                        	
  411    02:C095  BC 98 23   	!use_regionB:	ldy	vdc_regionB_crl, x	; Region disabled if $00.
  412    02:C098  F0 F0      			beq	!next_region-
  413    02:C09A  9D F9 23   			sta	vdc_regionB_nxt, x	; Save index of next region.
  414    02:C09D  8A         			txa				; A = current region index.
  415    02:C09E  69 08      			adc	#HUCC_PCE_SPLITS	; Always leaves CC!
  416    02:C0A0  80 E8      			bra	!next_region-
  417                        	
  418    02:C0A2  BC 90 23   	!use_regionA:	ldy	vdc_regionA_crl, x	; Region disabled if $00.
  419    02:C0A5  F0 E3      			beq	!next_region-
  420    02:C0A7  9D F1 23   			sta	vdc_regionA_nxt, x	; Save index of next region.
  421    02:C0AA  8A         			txa				; A = current region index.
  422    02:C0AB  80 DD      			bra	!next_region-
  423                        	
  424    02:C0AD  8D F0 23   	!save_first:	sta	vdc_next_region		; Save index of 1st region.
  425                        	
  426    02:C0B0  AA         			tax				; NZ if first active region
  427    02:C0B1  D0 03      			bne	!init_first+		; is not region 0.
  428    02:C0B3  98         			tya				; NZ if region 0 is active.
  429    02:C0B4  F0 0F      			beq	!+			; If no active leave RCR=0.
  430                        	
  431    02:C0B6  A9 06      	!init_first:	lda	#VDC_RCR		; 1st RCR always happens just
  432    02:C0B8  8D 00 02   			sta	VDC_AR			; before the display starts.
  433    02:C0BB  A9 44      			lda.l	#HUCC_1ST_RCR
  434    02:C0BD  8D 02 02   			sta	VDC_DL
  435    02:C0C0  A9 01      			lda.h	#HUCC_1ST_RCR
  436    02:C0C2  8D 03 02   			sta	VDC_DH
  437                        	
  438               0001     		.if	SUPPORT_SGX
  439                        	
  440    02:C0C5  62         	!:		cla				; A = previous active index
  441    02:C0C6  A2 08      			ldx	#HUCC_SGX_SPLITS	; so $00 for end-of-screen.
  442                        	
  443    02:C0C8  18         			clc				; For regionB indexes.
  444                        	
  445    02:C0C9  CA         	!next_region:	dex				; All regions updated?
  446    02:C0CA  30 20      			bmi	!save_first+
  447                        	
  448    02:C0CC  9E 09 24   			stz	sgx_region_new, x	; Clear region modified flag.
  449                        	
  450    02:C0CF  BC 01 24   			ldy	sgx_region_sel, x	; 0=regionA or 1=regionB.
  451    02:C0D2  F0 0D      			beq	!use_regionA+
  452                        	
  453    02:C0D4  BC 19 24   	!use_regionB:	ldy	sgx_regionB_crl, x	; Region disabled if $00.
  454    02:C0D7  F0 F0      			beq	!next_region-
  455    02:C0D9  9D 7A 24   			sta	sgx_regionB_nxt, x	; Save index of next region.
  456    02:C0DC  8A         			txa				; A = current region index.
  457    02:C0DD  69 08      			adc	#HUCC_SGX_SPLITS	; Always leaves CC!
  458    02:C0DF  80 E8      			bra	!next_region-
  459                        	
  460    02:C0E1  BC 11 24   	!use_regionA:	ldy	sgx_regionA_crl, x	; Region disabled if $00.
  461    02:C0E4  F0 E3      			beq	!next_region-
  462    02:C0E6  9D 72 24   			sta	sgx_regionA_nxt, x	; Save index of next region.
  463    02:C0E9  8A         			txa				; A = current region index.
  464    02:C0EA  80 DD      			bra	!next_region-
  465                        	
  466    02:C0EC  8D 71 24   	!save_first:	sta	sgx_next_region		; Save index of 1st region.
  467                        	
  468    02:C0EF  AA         			tax				; NZ if first active region
  469    02:C0F0  D0 03      			bne	!init_first+		; is not region 0.
  470    02:C0F2  98         			tya				; NZ if region 0 is active.
  471    02:C0F3  F0 0F      			beq	!+			; If no active leave RCR=0.
  472                        	
  473    02:C0F5  A9 06      	!init_first:	lda	#VDC_RCR		; 1st RCR always happens just
  474    02:C0F7  8D 10 02   			sta	SGX_AR			; before the display starts.
  475    02:C0FA  A9 44      			lda.l	#HUCC_1ST_RCR
  476    02:C0FC  8D 12 02   			sta	SGX_DL
  477    02:C0FF  A9 01      			lda.h	#HUCC_1ST_RCR
  478    02:C101  8D 13 02   			sta	SGX_DH
  479                        	
  480                        		.endif	SUPPORT_SGX
  481                        	
  482                        	!:		leave				; All done!
         02:C104  4C EF FF   			jmp	leave_proc
  483                        	
  484                        			.endp
  485                        	
  486                        	
  487                        	
  488               0001     		.if	SUPPORT_SGX
  489                        	
  490                        	; ***************************************************************************
  491                        	; ***************************************************************************
  492                        	;
  493                        	; VDC_RCR_MACRO and SGX_RCR_MACRO
  494                        	;
  495                        	; A 16-byte TIA takes 142..234 cycles in 5MHz, 128..200 cycles in 7MHz.
  496                        	; A 32-byte TIA takes 270..364 cycles in 5MHz, 242..312 cycles in 7MHz. (527 DUO)
  497                        	;
  498                        	; You need to write the last RCR setting within 540 cycles in order to catch
  499                        	; the next line (at 256/336/512 resolution).
  500                        	;
  501                        	; That gives 305 cycles from the RCR to write the last setting, or there
  502                        	; will be a visible glitch on the screen.
  503                        	
  504               0000     		.ifndef	USING_RCR_MACROS
  506                        		.endif
  507                        	
  508                        	;		;;;				; 8 (cycles for the INT)
  509                        	;		bbs1	<irq_vec, .hook		; 8
  510                        	;		jmp	[irq1_hook]		; 7
  511                        	
  512                        	;		;;;				; 8 (cycles for the INT)
  513                        	;		jmp	irq1_handler		; 4
  514                        	
  515                        	;irq1_handler:	pha				; 3 Save all registers.
  516                        	;		phx				; 3
  517                        	;		phy				; 3
  518                        	;
  519                        	;		lda	VDC_SR			; 6 Acknowledge the VDC's IRQ.
  520                        	;		sta	<vdc_sr			; 4 Remember what caused it.
  521                        	;
  522                        	;		ldx	SGX_SR			; 6 Read SGX_SR after VDC_SR in
  523                        	;		stx	<sgx_sr			; 4 case this is not an SGX!
  524                        	;
  525                        	;!:		and	#$04			; 2 Is this an HSYNC interrupt?
  526                        	;		beq	!+			; 2
  527                        	
  528                        			.macro	VDC_RCR_MACRO
  529                        	
  530                        			st0	#VDC_RCR		; 5
  531                        	
  532                        			ldx	vdc_next_region		; 5 X and Y can be greater than
  533                        			ldy	vdc_regionA_nxt, x	; 5 HUCC_PCE_SPLITS if regionB!
  534                        			clc				; 2
  535                        			bne	!set_next_rcr+		; 4 Stop RCR if next line is 0.
  536                        	
  537                        			and	const_0000		; 5 A=$00 with the same #cycles
  538                        			bra	!clr_next_rcr+		; 4 as if the branch were taken.
  539                        	
  540                        	!set_next_rcr:	lda	vdc_regionA_rcr, y	; 5 Set next RCR 1 line before
  541                        			adc	#64-1			; 2 the region begins, or 0 to
  542                        	!clr_next_rcr:	sta	VDC_DL			; 6 disable.
  543                        			cla				; 2
  544                        			rol	a			; 2
  545                        			sta	VDC_DH			; 6
  546                        	
  547                        			st0	#VDC_BYR		; 5 Do BYR first to mitigate the
  548                        			lda	vdc_regionA_yl, x	; 5 glitch if the IRQ is delayed.
  549                        			sta	VDC_DL			; 6 = 105 cycles from RCR on SGX
  550                        			lda	vdc_regionA_yh, x	; 5
  551                        			sta	VDC_DH			; 6
  552                        	
  553                        			st0	#VDC_CR			; 5
  554                        			lda	vdc_regionA_crl, x	; 5
  555                        	;		asl	a
  556                        			sta	VDC_DL			; 6
  557                        	
  558                        			st0	#VDC_BXR		; 2
  559                        			lda	vdc_regionA_xl, x	; 5
  560                        			sta	VDC_DL			; 6
  561                        			lda	vdc_regionA_xh, x	; 5
  562                        			sta	VDC_DH			; 6 = 156 cycles from RCR if DUO
  563                        	
  564                        	;		bcc	!+
  565                        	;		lda	vdc_regionA_yh, x	; 5
  566                        	;		sta.l	VCE_CTW			; 6
  567                        	
  568                        			sty	vdc_next_region		; 5
  569                        	
  570                        			.endm
  571                        	
  572                        	;!:		bbr2	<sgx_sr, !+		; 6 Is this an HSYNC interrupt?
  573                        	
  574                        			.macro	SGX_RCR_MACRO
  575                        	
  576                        			lda	#VDC_RCR		; 2
  577                        			sta	SGX_AR			; 6
  578                        	
  579                        			ldx	sgx_next_region		; 5 X and Y can be greater than
  580                        			ldy	sgx_regionA_nxt, x	; 5 HUCC_SGX_SPLITS if regionB!
  581                        			clc				; 2
  582                        			bne	!set_next_rcr+		; 4 Stop RCR if next line is 0.
  583                        	
  584                        			and	const_0000		; 5 A=$00 with the same #cycles
  585                        			bra	!clr_next_rcr+		; 4 as if the branch were taken.
  586                        	
  587                        	!set_next_rcr:	lda	sgx_regionA_rcr, y	; 5 Set next RCR 1 line before
  588                        			adc	#64-1			; 2 the region begins, or 0 to
  589                        	!clr_next_rcr:	sta	SGX_DL			; 6 disable.
  590                        			cla				; 2
  591                        			rol	a			; 2
  592                        			sta	SGX_DH			; 6
  593                        	
  594                        			lda	#VDC_BYR		; 2 Do BYR first to mitigate the
  595                        			sta	SGX_AR			; 6 glitch if the IRQ is delayed.
  596                        			lda	sgx_regionA_yl, x	; 5
  597                        			sta	SGX_DL			; 6
  598                        			lda	sgx_regionA_yh, x	; 5
  599                        			sta	SGX_DH			; 6
  600                        	
  601                        			lda	#VDC_CR			; 2
  602                        			sta	SGX_AR			; 6
  603                        			lda	sgx_regionA_crl, x	; 5
  604                        			sta	SGX_DL			; 6
  605                        	
  606                        			lda	#VDC_BXR		; 2
  607                        			sta	SGX_AR			; 6
  608                        			lda	sgx_regionA_xl, x	; 5
  609                        			sta	SGX_DL			; 6
  610                        			lda	sgx_regionA_xh, x	; 5
  611                        			sta	SGX_DH			; 6 = 293 cycles (282 if no YH)
  612                        	
  613                        			sty	sgx_next_region		; 5
  614                        	
  615                        			.endm
  616                        	
  617                        		.else	SUPPORT_SGX
  697                        		.endif	SUPPORT_SGX
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   68                        		.else
   72                        		.endif	HUCC_USES_NEW_SCROLL
   73                        	
   74               0001     		.ifdef	HUCC_USES_OLD_SPR		; Set in hucc_old_spr.h
                             #[3]   "..\..\..\include\hucc\hucc-old-spr.asm"
   75                        			include	"hucc-old-spr.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-old-spr.asm
    5                        	;
    6                        	; Based on the original HuC and MagicKit functions by David Michel and the
    7                        	; other original HuC developers.
    8                        	;
    9                        	; Modifications copyright John Brandwood 2024.
   10                        	;
   11                        	; Distributed under the Boost Software License, Version 1.0.
   12                        	; (See accompanying file LICENSE_1_0.txt or copy at
   13                        	;  http://www.boost.org/LICENSE_1_0.txt)
   14                        	;
   15                        	; ***************************************************************************
   16                        	; ***************************************************************************
   17                        	
   18                        	;
   19                        	; Include dependancies ...
   20                        	;
   21                        	
   22                        			include "common.asm"		; Common helpers.
   23                        			include "vce.asm"		; Useful VCE routines.
   24                        			include "vdc.asm"		; Useful VCE routines.
   25                        	
   26                        	
   27                        	
   28                        	; ***************************************************************************
   29                        	; ***************************************************************************
   30                        	;
   31                        	; HuC Sprite Functions
   32                        	;
   33                        	; ***************************************************************************
   34                        	; ***************************************************************************
   35                        	
   36               209C     			.zp
   37    F8:209C             	spr_ptr:	ds	2
   38               2482     			.bss
   39    F8:2482             	spr_sat:	ds	512
   40               E7B7     			.code
   41                        	
   42               0001     		.if	SUPPORT_SGX
   43               209E     			.zp
   44    F8:209E             	sgx_spr_ptr:	ds	2
   45               2682     			.bss
   46    F8:2682             	sgx_spr_sat:	ds	512	; N.B. Directly after spr_sat!
   47               E7B7     			.code
   48                        		.endif
   49                        	
   50                        	; Moved to hucc-old-map.asm just to save space. This NEEDS to be changed!
   51                        	;
   52                        	;		.bss
   53                        	;spr_max:	ds	1
   54                        	;spr_clr:	ds	1
   55                        	;	.if	SUPPORT_SGX
   56                        	;sgx_spr_max:	ds	1
   57                        	;sgx_spr_clr:	ds	1
   58                        	;	.endif
   59                        	;		.code
   60                        	
   61                        	
   62                        	
   63                        	; ***************************************************************************
   64                        	; ***************************************************************************
   65                        	;
   66                        	; void __fastcall init_satb( void );
   67                        	; void __fastcall reset_satb( void );
   68                        	;
   69                        	; void __fastcall sgx_init_satb( void );
   70                        	; void __fastcall sgx_reset_satb( void );
   71                        	
   72    00:E7B7             	_reset_satb:
   73    00:E7B7  C2         	_init_satb:	cly
   74    00:E7B8  62         			cla
   75    00:E7B9  99 82 24   	!:		sta	spr_sat + $0000, y
   76    00:E7BC  99 82 25   			sta	spr_sat + $0100, y
   77    00:E7BF  C8         			iny
   78    00:E7C0  D0 F7      			bne	!-
   79    00:E7C2  8C 56 23   			sty	spr_max
   80    00:E7C5  C8         			iny
   81    00:E7C6  8C 57 23   			sty	spr_clr
   82    00:E7C9  60         			rts
   83                        	
   84               0001     		.if	SUPPORT_SGX
   85    00:E7CA             	_sgx_reset_satb:
   86    00:E7CA  C2         	_sgx_init_satb:	cly
   87    00:E7CB  62         			cla
   88    00:E7CC  99 82 26   	!:		sta	sgx_spr_sat + $0000, y
   89    00:E7CF  99 82 27   			sta	sgx_spr_sat + $0100, y
   90    00:E7D2  C8         			iny
   91    00:E7D3  D0 F7      			bne	!-
   92    00:E7D5  8C 66 23   			sty	sgx_spr_max
   93    00:E7D8  C8         			iny
   94    00:E7D9  8C 67 23   			sty	sgx_spr_clr
   95    00:E7DC  60         			rts
   96                        		.endif
   97                        	
   98                        	
   99                        	
  100                        	; ***************************************************************************
  101                        	; ***************************************************************************
  102                        	;
  103                        	; void __fastcall satb_update( void );
  104                        	; void __fastcall sgx_satb_update( void );
  105                        	
  106    02:C542             	old_satb_group	.procgroup
  107                        	
  108               0001     		.if	SUPPORT_SGX
  109                        			.proc	_sgx_satb_update
  115                        			.endp
  116                        		.endif
  117                        	
  118    02:C542             			.proc	_satb_update
  119                        	
  120    02:C542  82         			clx				; Offset to PCE VDC.
  121                        	
  122    02:C543  A9 7F      			lda.h	#$7F00			; HuC puts the SAT here in VRAM
  123                        	;		lda.h	#$0800			; but we put it here instead
  124    02:C545  64 F0      			stz.l	<_di
  125    02:C547  85 F1      			sta.h	<_di
  126    02:C549  20 7F E3   			jsr	set_di_to_mawr
  127                        	
  128               0001     		.if	SUPPORT_SGX
  129    02:C54C  8A         			txa				; Select which VDC to write
  130    02:C54D  1A         			inc	a			; to.
  131    02:C54E  1A         			inc	a
  132    02:C54F  8D F3 22   			sta.l	ram_tia_dst
  133                        		.endif
  134                        	
  135    02:C552  A9 10      			lda	#VRAM_XFER_SIZE		; Split into 16-byte chunks
  136    02:C554  8D F5 22   			sta.l	ram_tia_len		; for stable IRQ response.
  137                        	
  138    02:C557  BC 56 23   			ldy	spr_max, x		; Highest sprite that was set.
  139    02:C55A  C8         			iny
  140                        	
  141    02:C55B  BD 57 23   			lda	spr_clr, x
  142    02:C55E  F0 05      			beq	!+
  143    02:C560  9E 57 23   			stz	spr_clr, x
  144    02:C563  A0 40      			ldy	#64
  145                        	
  146    02:C565  98         	!:		tya
  147    02:C566  F0 22      			beq	.exit
  148                        	
  149    02:C568  3A         			dec	a			; round up to the next group of 2 sprites
  150    02:C569  4A         			lsr	a
  151               0000     		.if	VRAM_XFER_SIZE == 32
  153                        		.endif
  154    02:C56A  1A         			inc	a
  155    02:C56B  A8         			tay
  156                        	
  157    02:C56C  A9 24      			lda.h	#spr_sat
  158                        	
  159               0001     		.if	SUPPORT_SGX
  160    02:C56E  E0 00      			cpx	#0
  161    02:C570  F0 02      			beq	!+
  162                        	
  163    02:C572  A9 26      			lda.h	#sgx_spr_sat
  164                        		.endif
  165                        	
  166    02:C574  8D F2 22   	!:		sta.h	ram_tia_src
  167                        	
  168    02:C577  A9 82      			lda.l	#spr_sat		; Same for SGX and PCE!
  169    02:C579  8D F1 22   	.chunk_loop:	sta.l	ram_tia_src
  170                        	
  171    02:C57C  20 F0 22   			jsr	ram_tia			; transfer 16-bytes
  172                        	
  173    02:C57F  18         			clc				; increment source
  174    02:C580  69 10      			adc	#VRAM_XFER_SIZE
  175    02:C582  90 03      			bcc	.same_page
  176    02:C584  EE F2 22   			inc.h	ram_tia_src
  177                        	
  178    02:C587  88         	.same_page:	dey
  179    02:C588  D0 EF      			bne	.chunk_loop
  180                        	
  181                        	.exit:		leave
         02:C58A  4C EF FF   			jmp	leave_proc
  182                        	
  183                        			.endp
  184                        	
  185                        			.endprocgroup	; old_satb_group
  186                        	
  187                        	
  188                        	
  189                        	; ***************************************************************************
  190                        	; ***************************************************************************
  191                        	;
  192                        	; void __fastcall spr_set( unsigned char num<acc> );
  193                        	
  194    00:E7DD  CD 56 23   	_spr_set.1:	cmp	spr_max
  195    00:E7E0  90 03      			bcc	!+
  196    00:E7E2  8D 56 23   			sta	spr_max
  197    00:E7E5  A0 24      	!:		ldy.h	#spr_sat
  198    00:E7E7  0A         			asl	a
  199    00:E7E8  0A         			asl	a
  200    00:E7E9  0A         			asl	a
  201    00:E7EA  90 02      			bcc	!+
  202    00:E7EC  C8         			iny
  203    00:E7ED  18         			clc
  204    00:E7EE  69 82      	!:		adc.l	#spr_sat
  205    00:E7F0  85 9C      			sta.l	<spr_ptr
  206    00:E7F2  90 01      			bcc	!+
  207    00:E7F4  C8         			iny
  208    00:E7F5  84 9D      	!:		sty.h	<spr_ptr
  209    00:E7F7  60         			rts
  210                        	
  211                        	
  212                        	
  213                        	; ***************************************************************************
  214                        	; ***************************************************************************
  215                        	;
  216                        	; void __fastcall spr_hide( void );
  217                        	
  218    00:E7F8  A0 01      	_spr_hide:	ldy	#1
  219    00:E7FA  B1 9C      			lda	[spr_ptr], y
  220    00:E7FC  09 02      			ora	#2
  221    00:E7FE  91 9C      			sta	[spr_ptr], y
  222    00:E800  60         			rts
  223                        	
  224                        	
  225                        	
  226                        	; ***************************************************************************
  227                        	; ***************************************************************************
  228                        	;
  229                        	; void __fastcall spr_show( void );
  230                        	
  231    00:E801  A0 01      	_spr_show:	ldy	#1
  232    00:E803  B1 9C      			lda	[spr_ptr], y
  233    00:E805  29 01      			and	#1
  234    00:E807  91 9C      			sta	[spr_ptr], y
  235    00:E809  60         			rts
  236                        	
  237                        	
  238                        	
  239                        	; ***************************************************************************
  240                        	; ***************************************************************************
  241                        	;
  242                        	; void __fastcall spr_x( unsigned int value<acc> );
  243                        	
  244    00:E80A  02         	_spr_x.1:	sxy
  245    00:E80B  18         			clc
  246    00:E80C  69 20      			adc	#32
  247    00:E80E  A0 02      			ldy	#2
  248    00:E810  91 9C      			sta	[spr_ptr], y
  249    00:E812  8A         			txa
  250    00:E813  69 00      			adc	#0
  251    00:E815  C8         			iny
  252    00:E816  91 9C      			sta	[spr_ptr], y
  253    00:E818  60         			rts
  254                        	
  255                        	
  256                        	
  257                        	; ***************************************************************************
  258                        	; ***************************************************************************
  259                        	;
  260                        	; void __fastcall spr_y( unsigned int value<acc> );
  261                        	
  262    00:E819  18         	_spr_y.1:	clc
  263    00:E81A  69 40      			adc	#64
  264    00:E81C  92 9C      			sta	[spr_ptr]
  265    00:E81E  98         			tya
  266    00:E81F  69 00      			adc	#0
  267    00:E821  A0 01      			ldy	#1
  268    00:E823  91 9C      			sta	[spr_ptr], y
  269    00:E825  60         			rts
  270                        			
  271                        	
  272                        	
  273                        	; ***************************************************************************
  274                        	; ***************************************************************************
  275                        	;
  276                        	; void __fastcall spr_pattern( unsigned int vaddr<acc> );
  277                        	
  278    00:E826  84 00      	_spr_pattern.1:	sty	<__temp		;     zp=fedcba98 a=76543210
  279    00:E828  0A         			asl	a		; c=f zp=edcba987 a=6543210_
  280    00:E829  26 00      			rol	<__temp
  281    00:E82B  2A         			rol	a		; c=e zp=dcba9876 a=543210_f
  282    00:E82C  26 00      			rol	<__temp
  283    00:E82E  2A         			rol	a		; c=d zp=cba98765 a=43210_fe
  284    00:E82F  26 00      			rol	<__temp
  285    00:E831  2A         			rol	a		; c=4 zp=cba98765 a=3210_fed
  286    00:E832  A0 05      			ldy	#5
  287    00:E834  91 9C      			sta	[spr_ptr], y
  288    00:E836  A5 00      			lda	<__temp
  289    00:E838  88         			dey
  290    00:E839  91 9C      			sta	[spr_ptr], y
  291    00:E83B  60         			rts
  292                        	
  293                        	
  294                        	
  295                        	; ***************************************************************************
  296                        	; ***************************************************************************
  297                        	;
  298                        	; void __fastcall spr_ctrl( unsigned char mask<_al>, unsigned char value<acc> );
  299                        	
  300    00:E83C  25 F8      	_spr_ctrl.2:	and	<_al
  301    00:E83E  85 00      			sta	<__temp
  302    00:E840  A5 F8      			lda	<_al
  303    00:E842  49 FF      			eor	#$FF
  304    00:E844  A0 07      			ldy	#7
  305    00:E846  31 9C      			and	[spr_ptr], y
  306    00:E848  05 00      			ora	<__temp
  307    00:E84A  91 9C      			sta	[spr_ptr], y
  308    00:E84C  60         			rts
  309                        	
  310                        	
  311                        	
  312                        	; ***************************************************************************
  313                        	; ***************************************************************************
  314                        	;
  315                        	; void __fastcall spr_pal( unsigned char palette<acc> )
  316                        	
  317    00:E84D  29 0F      	_spr_pal.1:	and	#$0F
  318    00:E84F  85 00      			sta	<__temp
  319    00:E851  A0 06      			ldy	#6
  320    00:E853  B1 9C      			lda	[spr_ptr], y
  321    00:E855  29 F0      			and	#$F0
  322    00:E857  05 00      			ora	<__temp
  323    00:E859  91 9C      			sta	[spr_ptr], y
  324    00:E85B  60         			rts
  325                        	
  326                        	
  327                        	
  328                        	; ***************************************************************************
  329                        	; ***************************************************************************
  330                        	;
  331                        	; void __fastcall spr_pri( unsigned char priority<acc> )
  332                        	
  333    00:E85C  C9 01      	_spr_pri.1:	cmp	#1
  334    00:E85E  A0 06      			ldy	#6
  335    00:E860  B1 9C      			lda	[spr_ptr], y
  336    00:E862  29 7F      			and	#$7F
  337    00:E864  90 02      			bcc	!+
  338    00:E866  09 80      			ora	#$80
  339    00:E868  91 9C      	!:		sta	[spr_ptr], y
  340    00:E86A  60         			rts
  341                        	
  342                        	
  343                        	
  344                        	; ***************************************************************************
  345                        	; ***************************************************************************
  346                        	;
  347                        	; unsigned int __fastcall spr_get_x( void );
  348                        	
  349    00:E86B  38         	_spr_get_x:	sec
  350    00:E86C  A0 02      			ldy	#2
  351    00:E86E  B1 9C      			lda	[spr_ptr], y
  352    00:E870  E9 20      			sbc	#32
  353    00:E872  AA         			tax
  354    00:E873  C8         			iny
  355    00:E874  B1 9C      			lda	[spr_ptr], y
  356    00:E876  E9 00      			sbc	#0
  357    00:E878  A8         			tay
  358    00:E879  8A         			txa
  359    00:E87A  60         			rts
  360                        	
  361                        	
  362                        	
  363                        	; ***************************************************************************
  364                        	; ***************************************************************************
  365                        	;
  366                        	; unsigned int __fastcall spr_get_y( void );
  367                        	
  368    00:E87B  38         	_spr_get_y:	sec
  369    00:E87C  B2 9C      			lda	[spr_ptr]
  370    00:E87E  E9 40      			sbc	#64
  371    00:E880  AA         			tax
  372    00:E881  A0 01      			ldy	#1
  373    00:E883  B1 9C      			lda	[spr_ptr], y
  374    00:E885  E9 00      			sbc	#0
  375    00:E887  A8         			tay
  376    00:E888  8A         			txa
  377    00:E889  60         			rts
  378                        	
  379                        	
  380                        	
  381               0001     		.if	SUPPORT_SGX
  382                        	
  383                        	; ***************************************************************************
  384                        	; ***************************************************************************
  385                        	;
  386                        	; void __fastcall sgx_spr_set( unsigned char num<acc> );
  387                        	
  388    00:E88A  CD 66 23   	_sgx_spr_set.1:	cmp	sgx_spr_max
  389    00:E88D  90 03      			bcc	!+
  390    00:E88F  8D 66 23   			sta	sgx_spr_max
  391    00:E892  A0 26      	!:		ldy.h	#sgx_spr_sat
  392    00:E894  0A         			asl	a
  393    00:E895  0A         			asl	a
  394    00:E896  0A         			asl	a
  395    00:E897  90 02      			bcc	!+
  396    00:E899  C8         			iny
  397    00:E89A  18         			clc
  398    00:E89B  69 82      	!:		adc.l	#sgx_spr_sat
  399    00:E89D  85 9E      			sta.l	<sgx_spr_ptr
  400    00:E89F  90 01      			bcc	!+
  401    00:E8A1  C8         			iny
  402    00:E8A2  84 9F      	!:		sty.h	<sgx_spr_ptr
  403    00:E8A4  60         			rts
  404                        	
  405                        	
  406                        	
  407                        	; ***************************************************************************
  408                        	; ***************************************************************************
  409                        	;
  410                        	; void __fastcall sgx_spr_hide( void );
  411                        	
  412    00:E8A5  A0 01      	_sgx_spr_hide:	ldy	#1
  413    00:E8A7  B1 9E      			lda	[sgx_spr_ptr], y
  414    00:E8A9  09 02      			ora	#2
  415    00:E8AB  91 9E      			sta	[sgx_spr_ptr], y
  416    00:E8AD  60         			rts
  417                        	
  418                        	
  419                        	
  420                        	; ***************************************************************************
  421                        	; ***************************************************************************
  422                        	;
  423                        	; void __fastcall sgx_spr_show( void );
  424                        	
  425    00:E8AE  A0 01      	_sgx_spr_show:	ldy	#1
  426    00:E8B0  B1 9E      			lda	[sgx_spr_ptr], y
  427    00:E8B2  29 01      			and	#1
  428    00:E8B4  91 9E      			sta	[sgx_spr_ptr], y
  429    00:E8B6  60         			rts
  430                        	
  431                        	
  432                        	
  433                        	; ***************************************************************************
  434                        	; ***************************************************************************
  435                        	;
  436                        	; void __fastcall sgx_spr_x( unsigned int value<acc> );
  437                        	
  438    00:E8B7  02         	_sgx_spr_x.1:	sxy
  439    00:E8B8  18         			clc
  440    00:E8B9  69 20      			adc	#32
  441    00:E8BB  A0 02      			ldy	#2
  442    00:E8BD  91 9E      			sta	[sgx_spr_ptr], y
  443    00:E8BF  8A         			txa
  444    00:E8C0  69 00      			adc	#0
  445    00:E8C2  C8         			iny
  446    00:E8C3  91 9E      			sta	[sgx_spr_ptr], y
  447    00:E8C5  60         			rts
  448                        	
  449                        	
  450                        	
  451                        	; ***************************************************************************
  452                        	; ***************************************************************************
  453                        	;
  454                        	; void __fastcall sgx_spr_y( unsigned int value<acc> );
  455                        	
  456    00:E8C6  18         	_sgx_spr_y.1:	clc
  457    00:E8C7  69 40      			adc	#64
  458    00:E8C9  92 9E      			sta	[sgx_spr_ptr]
  459    00:E8CB  98         			tya
  460    00:E8CC  69 00      			adc	#0
  461    00:E8CE  A0 01      			ldy	#1
  462    00:E8D0  91 9E      			sta	[sgx_spr_ptr], y
  463    00:E8D2  60         			rts
  464                        			
  465                        	
  466                        	
  467                        	; ***************************************************************************
  468                        	; ***************************************************************************
  469                        	;
  470                        	; void __fastcall sgx_spr_pattern( unsigned int vaddr<acc> );
  471                        	
  472    00:E8D3             	_sgx_spr_pattern.1:
  473    00:E8D3  84 00      			sty	<__temp		;     zp=fedcba98 a=76543210
  474    00:E8D5  0A         			asl	a		; c=f zp=edcba987 a=6543210_
  475    00:E8D6  26 00      			rol	<__temp
  476    00:E8D8  2A         			rol	a		; c=e zp=dcba9876 a=543210_f
  477    00:E8D9  26 00      			rol	<__temp
  478    00:E8DB  2A         			rol	a		; c=d zp=cba98765 a=43210_fe
  479    00:E8DC  26 00      			rol	<__temp
  480    00:E8DE  2A         			rol	a		; c=4 zp=cba98765 a=3210_fed
  481    00:E8DF  A0 05      			ldy	#5
  482    00:E8E1  91 9E      			sta	[sgx_spr_ptr], y
  483    00:E8E3  A5 00      			lda	<__temp
  484    00:E8E5  88         			dey
  485    00:E8E6  91 9E      			sta	[sgx_spr_ptr], y
  486    00:E8E8  60         			rts
  487                        	
  488                        	
  489                        	
  490                        	; ***************************************************************************
  491                        	; ***************************************************************************
  492                        	;
  493                        	; void __fastcall sgx_spr_ctrl( unsigned char mask<_al>, unsigned char value<acc> );
  494                        	
  495    00:E8E9  25 F8      	_sgx_spr_ctrl.2:and	<_al
  496    00:E8EB  85 00      			sta	<__temp
  497    00:E8ED  A5 F8      			lda	<_al
  498    00:E8EF  49 FF      			eor	#$FF
  499    00:E8F1  A0 07      			ldy	#7
  500    00:E8F3  31 9E      			and	[sgx_spr_ptr], y
  501    00:E8F5  05 00      			ora	<__temp
  502    00:E8F7  91 9E      			sta	[sgx_spr_ptr], y
  503    00:E8F9  60         			rts
  504                        	
  505                        	
  506                        	
  507                        	; ***************************************************************************
  508                        	; ***************************************************************************
  509                        	;
  510                        	; void __fastcall sgx_spr_pal( unsigned char palette<acc> )
  511                        	
  512    00:E8FA  29 0F      	_sgx_spr_pal.1:	and	#$0F
  513    00:E8FC  85 00      			sta	<__temp
  514    00:E8FE  A0 06      			ldy	#6
  515    00:E900  B1 9E      			lda	[sgx_spr_ptr], y
  516    00:E902  29 F0      			and	#$F0
  517    00:E904  05 00      			ora	<__temp
  518    00:E906  91 9E      			sta	[sgx_spr_ptr], y
  519    00:E908  60         			rts
  520                        	
  521                        	
  522                        	
  523                        	; ***************************************************************************
  524                        	; ***************************************************************************
  525                        	;
  526                        	; void __fastcall sgx_spr_pri( unsigned char priority<acc> )
  527                        	
  528    00:E909  C9 01      	_sgx_spr_pri.1:	cmp	#1
  529    00:E90B  A0 06      			ldy	#6
  530    00:E90D  B1 9E      			lda	[sgx_spr_ptr], y
  531    00:E90F  29 7F      			and	#$7F
  532    00:E911  90 02      			bcc	!+
  533    00:E913  09 80      			ora	#$80
  534    00:E915  91 9E      	!:		sta	[sgx_spr_ptr], y
  535    00:E917  60         			rts
  536                        	
  537                        	
  538                        	
  539                        	; ***************************************************************************
  540                        	; ***************************************************************************
  541                        	;
  542                        	; unsigned int __fastcall sgx_spr_get_x( void );
  543                        	
  544    00:E918  38         	_sgx_spr_get_x:	sec
  545    00:E919  A0 02      			ldy	#2
  546    00:E91B  B1 9E      			lda	[sgx_spr_ptr], y
  547    00:E91D  E9 20      			sbc	#32
  548    00:E91F  AA         			tax
  549    00:E920  C8         			iny
  550    00:E921  B1 9E      			lda	[sgx_spr_ptr], y
  551    00:E923  E9 00      			sbc	#0
  552    00:E925  A8         			tay
  553    00:E926  8A         			txa
  554    00:E927  60         			rts
  555                        	
  556                        	
  557                        	
  558                        	; ***************************************************************************
  559                        	; ***************************************************************************
  560                        	;
  561                        	; unsigned int __fastcall sgx_spr_get_y( void );
  562                        	
  563    00:E928  38         	_sgx_spr_get_y:	sec
  564    00:E929  B2 9E      			lda	[sgx_spr_ptr]
  565    00:E92B  E9 40      			sbc	#64
  566    00:E92D  AA         			tax
  567    00:E92E  A0 01      			ldy	#1
  568    00:E930  B1 9E      			lda	[sgx_spr_ptr], y
  569    00:E932  E9 00      			sbc	#0
  570    00:E934  A8         			tay
  571    00:E935  8A         			txa
  572    00:E936  60         			rts
  573                        	
  574                        		.endif	SUPPORT_SGX
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   76                        		.endif
   77                        	
   78               0001     		.ifdef	HUCC_USES_BLKMAP		; Set in hucc_blkmap.h
                             #[3]   "..\..\..\include\hucc\blkmap.asm"
   79                        			include	"blkmap.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; blkmap.asm
    5                        	;
    6                        	; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
    7                        	;
    8                        	; Copyright John Brandwood 2025.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
   18                        	;
   19                        	; The maximum total size for a blkmap is 16KBytes, which allows for maps up
   20                        	; to 128x128 blocks (2048x2048 pixels).
   21                        	;
   22                        	; Huge multi-screen blkmaps are also supported (optionally).
   23                        	;
   24                        	; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
   25                        	;
   26                        	; The maximum total size for a multi-screen map is 8KBytes, which allows for
   27                        	; a total of 1024 screens.
   28                        	;
   29                        	; ***************************************************************************
   30                        	; ***************************************************************************
   31                        	
   32                        	;
   33                        	; Include dependancies ...
   34                        	;
   35                        	
   36                        			include "common.asm"		; Common helpers.
   37                        			include "vce.asm"		; Useful VCE routines.
   38                        			include "vdc.asm"		; Useful VCE routines.
   39                        	
   40                        	;
   41                        	; Support large blkmaps up to 16KBytes instead of the regular 8KBytes?
   42                        	;
   43                        	; The maximum X and Y size for regular blkmaps is 128 tiles (2048 pixels).
   44                        	;
   45                        	; This allows for individual maps up to 128x128 tiles (2048x2048 pixels) vs
   46                        	; default limit of 128x64 or 64x128.
   47                        	;
   48                        	
   49               0000     		.ifndef	BLKMAP_LARGEMAP
   51                        		.endif
   52                        	
   53                        	;
   54                        	; Support huge multi-screen maps, up to 32768 pixels wide/high?
   55                        	;
   56                        	; These are sectorized maps split into individual BAT-sized "screens", with
   57                        	; a maximum of 1024 screens per map.
   58                        	;
   59                        	; The BAT size that is used when drawing *must* be the same as the BAT size
   60                        	; that was chosen when creating the multi-screen map.
   61                        	;
   62                        	; Each screen can use a unique set of block definitions, or it might choose
   63                        	; to share the same block definitions that are used on another screen.
   64                        	;
   65                        	; Each screen may choose which 8KByte banks of character data to select for
   66                        	; the 4 banks (32KBytes) of VRAM that its block definitions use, with a max
   67                        	; of 16 banks of characters per multi-screen map.
   68                        	;
   69                        	; Loading those character banks dynamically is an exercise for the user!
   70                        	;
   71                        	; Enabling support adds extra library code, and slightly slows down the use
   72                        	; of regular blkmaps.
   73                        	;
   74                        	
   75               0000     		.ifndef	BLKMAP_MULTISCR
   77                        		.endif
   78                        	
   79                        	;
   80                        	; Block definitions can either use character data from VRAM $1000..$7FFF or
   81                        	; they can be limited to use the 32KByte of characters in VRAM $1000..$4FFF
   82                        	; which then frees up 2-bits for flag information for each character in the
   83                        	; block.
   84                        	;
   85                        	; These 2-bits are perfect for using as collision information in game maps,
   86                        	; allowing storage of states like transparent, solid, up-slope, down-slope.
   87                        	;
   88                        	; Typically this flag information is set by the map conversion tools from a
   89                        	; seperate "collision" map layer.
   90                        	;
   91                        	
   92               0000     		.ifndef	BLKDEF_CHR_FLAG
   94                        		.endif
   95                        	
   96                        	;
   97                        	; Block definitions are accessed in MPR2 ($4000..$5FFF), and must not cross
   98                        	; the bank boundary.
   99                        	;
  100                        	; When working this way, 8 pointers in ZP are used to access the individual
  101                        	; bytes in the block definition. This is fine when using a regular map on a
  102                        	; PC Engine, but it is awfully slow when using multi-screen maps or drawing
  103                        	; maps on both VDC chips in a SuperGRAFX because the pointer values must be
  104                        	; constantly changed.
  105                        	;
  106                        	; When using multi-screen maps, or when developing a SuperGRAFX game, or if
  107                        	; developing a CDROM game, then it is usually preferable to store the block
  108                        	; definitions with 2KByte alignment, especially if they are normally stored
  109                        	; compressed and then decompressed into a 2KByte buffer in RAM when needed.
  110                        	;
  111                        	; This option controls whether the definitions are stored 2KByte aligned or
  112                        	; if pointers should be used instead.
  113                        	;
  114                        	
  115               0000     		.ifndef	BLKDEF_POINTERS
  117                        		.endif
  118                        	
  119                        	;
  120                        	; Add a timing bar to the scroll_map() to see how long the drawing takes?
  121                        	;
  122                        	
  123               0000     		.ifndef	BLKMAP_TIMETEST
  125                        		.endif
  126                        	
  127                        	;
  128                        	;
  129                        	;
  130                        	
  131               0000     		.if	BLKDEF_POINTERS
  144                        		.else
  145                        	
  146                        		; If the block definititions are 2KByte aligned.
  147                        	
  148               4000     	BLK_4000_TL_L	=	$4000
  149               4100     	BLK_4000_TR_L	=	$4100
  150               4200     	BLK_4000_BL_L	=	$4200
  151               4300     	BLK_4000_BR_L	=	$4300
  152               4400     	BLK_4000_TL_H	=	$4400
  153               4500     	BLK_4000_TR_H	=	$4500
  154               4600     	BLK_4000_BL_H	=	$4600
  155               4700     	BLK_4000_BR_H	=	$4700
  156                        	
  157               4800     	BLK_4800_TL_L	=	$4800
  158               4900     	BLK_4800_TR_L	=	$4900
  159               4A00     	BLK_4800_BL_L	=	$4A00
  160               4B00     	BLK_4800_BR_L	=	$4B00
  161               4C00     	BLK_4800_TL_H	=	$4C00
  162               4D00     	BLK_4800_TR_H	=	$4D00
  163               4E00     	BLK_4800_BL_H	=	$4E00
  164               4F00     	BLK_4800_BR_H	=	$4F00
  165                        	
  166               5000     	BLK_5000_TL_L	=	$5000
  167               5100     	BLK_5000_TR_L	=	$5100
  168               5200     	BLK_5000_BL_L	=	$5200
  169               5300     	BLK_5000_BR_L	=	$5300
  170               5400     	BLK_5000_TL_H	=	$5400
  171               5500     	BLK_5000_TR_H	=	$5500
  172               5600     	BLK_5000_BL_H	=	$5600
  173               5700     	BLK_5000_BR_H	=	$5700
  174                        	
  175               5800     	BLK_5800_TL_L	=	$5800
  176               5900     	BLK_5800_TR_L	=	$5900
  177               5A00     	BLK_5800_BL_L	=	$5A00
  178               5B00     	BLK_5800_BR_L	=	$5B00
  179               5C00     	BLK_5800_TL_H	=	$5C00
  180               5D00     	BLK_5800_TR_H	=	$5D00
  181               5E00     	BLK_5800_BL_H	=	$5E00
  182               5F00     	BLK_5800_BR_H	=	$5F00
  183                        	
  184                        		.endif
  185                        	
  186               0080     	MAP_UNALIGNED_X	=	$80
  187               0040     	MAP_UNALIGNED_Y	=	$40
  188                        	
  189                        	;
  190                        	;
  191                        	;
  192                        	
  193               2882     			.bss
  194                        	
  195                        	; **************
  196                        	; 8-byte (or 2-byte) entry for each SCREEN in the MULTI_MAP.
  197                        	
  198               0000     			.rsset	0
  199               0000     		.if	BLKDEF_POINTERS
  202                        		.else
  203               0000     	SCR_MAP_PAGE	.rs	1	; 256-byte aligned.
  204               0001     	SCR_MAP_BANK	.rs	1
  205               0002     	SCR_BLK_PAGE	.rs	1	; >$4000, >$4800, >$5000, or >$5800.
  206               0003     	SCR_BLK_BANK	.rs	1
  207               0004     	SCR_TBL_PAGE	.rs	1	; 256-byte aligned.
  208               0005     	SCR_TBL_BANK	.rs	1
  209               0006     	SCR_CHR_12	.rs	1	; Which CHR banks are used by the BLK, with
  210               0007     	SCR_CHR_34	.rs	1	; a max of 16 CHR banks per MULTI_MAP.
  211                        		.endif
  212                        	
  213                        			; A simple macro to help build a multi-screen map.
  214                        	
  215               0000     		.ifndef	SCREEN
  224                        		.endif
  225                        	
  226    F8:2882             	map_blk_flag:	ds	1	; Returned from _get_map_block().
  227    F8:2883             	map_blk_mask:	ds	1	; Returned from _get_map_block().
  228                        	
  229                        	; **************
  230                        	; 16-bytes of VDC blkmap info.
  231                        	;
  232                        	; N.B. MUST be 16-bytes before the SGX versions to use PCE_VDC_OFFSET.
  233                        	
  234    F8:2884             	vdc_old_chr_x:	ds	1	; Previous top-left X in CHR (lo-byte only).
  235    F8:2885             	vdc_old_chr_y:	ds	1	; Previous top-left Y in CHR (lo-byte only).
  236                        	
  237    F8:2886             	vdc_tbl_addr:	ds	2	; 256-byte aligned.
  238    F8:2888             	vdc_tbl_bank:	ds	1
  239                        	
  240    F8:2889             	vdc_blk_addr:	ds	2	; 2KBytes of data, 256-byte aligned.
  241    F8:288B             	vdc_blk_bank:	ds	1
  242                        	
  243    F8:288C             	vdc_map_addr:	ds	2	; Mapped into MPR3..MPR5, max 16KBytes.
  244    F8:288E             	vdc_map_bank:	ds	1
  245                        	
  246    F8:288F             	vdc_scr_addr:	ds	2	; 8KByte maximum size.
  247    F8:2891             	vdc_scr_bank:	ds	1
  248    F8:2892             	vdc_scr_chr12:	ds	1	; Which CHR banks are used by the BLK, with
  249    F8:2893             	vdc_scr_chr34:	ds	1	; a max of 16 banks per multi-screen map.
  250                        	
  251               0001     		.if	SUPPORT_SGX
  252                        	
  253                        	; **************
  254                        	; 16-bytes of SGX blkmap info.
  255                        	;
  256                        	; N.B. MUST be 16-bytes after the VDC versions to use SGX_VDC_OFFSET.
  257                        	
  258    F8:2894             	sgx_old_chr_x:	ds	1	; Previous top-left X in CHR (lo-byte only).
  259    F8:2895             	sgx_old_chr_y:	ds	1	; Previous top-left Y in CHR (lo-byte only).
  260                        	
  261    F8:2896             	sgx_tbl_addr:	ds	2	; 256-byte aligned.
  262    F8:2898             	sgx_tbl_bank:	ds	1
  263                        	
  264    F8:2899             	sgx_blk_addr:	ds	2	; 2KBytes of data, 256-byte aligned.
  265    F8:289B             	sgx_blk_bank:	ds	1
  266                        	
  267    F8:289C             	sgx_map_addr:	ds	2	; Mapped into MPR3..MPR4, max 8KBytes.
  268    F8:289E             	sgx_map_bank:	ds	1
  269                        	
  270    F8:289F             	sgx_scr_addr:	ds	2	; 8KByte maximum size.
  271    F8:28A1             	sgx_scr_bank:	ds	1
  272    F8:28A2             	sgx_scr_chr12:	ds	1	; Which CHR banks are used by the BLK, with
  273    F8:28A3             	sgx_scr_chr34:	ds	1	; a max of 16 banks per multi-screen map.
  274                        	
  275                        		.endif	SUPPORT_SGX
  276                        	
  277               0000     		.if	0
  310                        		.endif	0
  311                        	
  312                        	; **************
  313                        	; Aliases for the asm variable names in HuCC.
  314                        	;
  315                        	
  316               0001     		.ifdef	HUCC
  317                        	
  318    F8:28A4             	_map_blk_flag	.alias	map_blk_flag
  319    F8:28A4             	_map_blk_mask	.alias	map_blk_mask
  320                        	
  321    F8:28A4             	_vdc_map_draw_w	.alias	vdc_map_draw_w
  322    F8:28A4             	_vdc_map_draw_h	.alias	vdc_map_draw_h
  323    F8:28A4             	_vdc_map_pxl_x	.alias	vdc_map_pxl_x
  324    F8:28A4             	_vdc_map_pxl_y	.alias	vdc_map_pxl_y
  325    F8:28A4             	_vdc_old_chr_x	.alias	vdc_old_chr_x
  326    F8:28A4             	_vdc_old_chr_y	.alias	vdc_old_chr_y
  327    F8:28A4             	_vdc_tbl_addr	.alias	vdc_tbl_addr
  328    F8:28A4             	_vdc_tbl_bank	.alias	vdc_tbl_bank
  329    F8:28A4             	_vdc_blk_addr	.alias	vdc_blk_addr
  330    F8:28A4             	_vdc_blk_bank	.alias	vdc_blk_bank
  331    F8:28A4             	_vdc_map_line_w	.alias	vdc_map_line_w
  332    F8:28A4             	_vdc_map_scrn_w	.alias	vdc_map_scrn_w
  333    F8:28A4             	_vdc_map_addr	.alias	vdc_map_addr
  334    F8:28A4             	_vdc_map_bank	.alias	vdc_map_bank
  335    F8:28A4             	_vdc_scr_addr	.alias	vdc_scr_addr
  336    F8:28A4             	_vdc_scr_bank	.alias	vdc_scr_bank
  337    F8:28A4             	_vdc_scr_chr12	.alias	vdc_scr_chr12
  338    F8:28A4             	_vdc_scr_chr34	.alias	vdc_scr_chr34
  339                        	
  340               0001     		.if	SUPPORT_SGX
  341    F8:28A4             	_sgx_map_draw_w	.alias	sgx_map_draw_w
  342    F8:28A4             	_sgx_map_draw_h	.alias	sgx_map_draw_h
  343    F8:28A4             	_sgx_map_pxl_x	.alias	sgx_map_pxl_x
  344    F8:28A4             	_sgx_map_pxl_y	.alias	sgx_map_pxl_y
  345    F8:28A4             	_sgx_old_chr_x	.alias	sgx_old_chr_x
  346    F8:28A4             	_sgx_old_chr_y	.alias	sgx_old_chr_y
  347    F8:28A4             	_sgx_tbl_addr	.alias	sgx_tbl_addr
  348    F8:28A4             	_sgx_tbl_bank	.alias	sgx_tbl_bank
  349    F8:28A4             	_sgx_blk_addr	.alias	sgx_blk_addr
  350    F8:28A4             	_sgx_blk_bank	.alias	sgx_blk_bank
  351    F8:28A4             	_sgx_map_line_w	.alias	sgx_map_line_w
  352    F8:28A4             	_sgx_map_scrn_w	.alias	sgx_map_scrn_w
  353    F8:28A4             	_sgx_map_addr	.alias	sgx_map_addr
  354    F8:28A4             	_sgx_map_bank	.alias	sgx_map_bank
  355    F8:28A4             	_sgx_scr_addr	.alias	sgx_scr_addr
  356    F8:28A4             	_sgx_scr_bank	.alias	sgx_scr_bank
  357    F8:28A4             	_sgx_scr_chr12	.alias	sgx_scr_chr12
  358    F8:28A4             	_sgx_scr_chr34	.alias	sgx_scr_chr34
  359                        		.endif	SUPPORT_SGX
  360                        	
  361                        		.endif	HUCC
  362                        	
  363                        	; **************
  364                        	; Temporary variables for drawing, using common zero-page locations.
  365                        	;
  366                        	
  367               20F8     	map_bat_x	=	_al	; Set by draw_map(), scroll_map() if drawing
  368               20F9     	map_bat_y	=	_ah	; aligned, or as parameters to blit_map().
  369                        	
  370               20FA     	map_draw_w	=	_bl	; Set by draw_map(), scroll_map(), but given
  371               20FB     	map_draw_h	=	_bh	; as parameters to blit_map().
  372                        	
  373               20FC     	map_pxl_x	=	_cx	; Set by draw_map(), scroll_map() and also by
  374               20FC     	map_chr_x	=	_cl	; blit__map(), from current vdc_map_pxl_x.
  375               20FD     	map_scrn_x	=	_ch
  376                        	
  377               20FE     	map_pxl_y	=	_dx	; Set by draw_map(), scroll_map() and also by
  378               20FE     	map_chr_y	=	_dl	; blit__map(), from current vdc_map_pxl_y.
  379               20FF     	map_scrn_y	=	_dh
  380                        	
  381               20EE     	map_line	=	_si	; Start of map data line being drawn.
  382                        	
  383               2000     	map_count	=	__temp + 0
  384               2001     	map_drawn	=	__temp + 1
  385                        	
  386               E937     			.code
  387                        	
  388                        	
  389                        	
  390    01:D0A4             	blkmap_group	.procgroup
  391                        	
  392                        	; ***************************************************************************
  393                        	; ***************************************************************************
  394                        	;
  395                        	; _set_blocks - Initialize the block definition pointers.
  396                        	; _sgx_set_blocks - Initialize the block definition pointers.
  397                        	;
  398                        	; void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blk<_al> );
  399                        	; void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blk<_al> );
  400                        	;
  401                        	
  402               0001     		.if	SUPPORT_SGX
  403                        	
  404                        			.proc	_sgx_set_blocks.3
  410                        			.endp
  411                        		.endif
  412                        	
  413    01:D0A4             			.proc	_set_blocks.3
  414                        	
  415    01:D0A4  82         			clx				; Offset to PCE VDC.
  416                        	
  417    01:D0A5  BD 87 28   			lda.h	vdc_tbl_addr, x		; Remap the address to MPR2.
  418    01:D0A8  29 1F      			and	#$1F
  419    01:D0AA  09 40      			ora	#$40
  420    01:D0AC  9D 87 28   			sta.h	vdc_tbl_addr, x
  421                        	
  422    01:D0AF  BD 8A 28   			lda.h	vdc_blk_addr, x		; Remap the address to MPR2.
  423    01:D0B2  29 1F      			and	#$1F
  424    01:D0B4  09 40      			ora	#$40
  425    01:D0B6  9D 8A 28   			sta.h	vdc_blk_addr, x
  426                        	
  427               0000     		.if	BLKDEF_POINTERS
  479                        		.endif	BLKDEF_POINTERS
  480                        	
  481                        			leave
         01:D0B9  4C EF FF   			jmp	leave_proc
  482                        	
  483                        			.endp
  484                        	
  485                        	
  486                        	
  487                        	; ***************************************************************************
  488                        	; ***************************************************************************
  489                        	;
  490                        	; _draw_map - Draw the entire screen at the current coordinates.
  491                        	; _sgx_draw_map - Draw the entire screen at the current coordinates.
  492                        	;
  493                        	; void __fastcall draw_map( void );
  494                        	; void __fastcall sgx_draw_map( void );
  495                        	;
  496                        	
  497               0001     		.if	SUPPORT_SGX
  498                        	
  499    01:D0BC             	_sgx_draw_map	.proc
  500                        	
  501    01:D0BC  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  502    01:D0BE  F0         			db	$F0			; Turn "clx" into a "beq".
  503                        	
  504    01:D0BF             			.ref	_draw_map
  505                        			.endp
  506                        		.endif
  507                        	
  508    01:D0BF             	_draw_map	.proc
  509                        	
  510    01:D0BF  82         			clx				; Offset to PCE VDC.
  511                        	
  512    01:D0C0  43 04      			tma2				; Preserve MPR2..MPR4.
  513    01:D0C2  48         			pha
  514    01:D0C3  43 08      			tma3
  515    01:D0C5  48         			pha
  516    01:D0C6  43 10      			tma4
  517    01:D0C8  48         			pha
  518               0000     		.if	BLKMAP_LARGEMAP
  521                        		.endif
  522                        	
  523    01:D0C9  20 CB D1   			jsr	map_pxl_2_chr		; Set up the draw coordinates.
  524                        	
  525    01:D0CC  A5 FC      			lda	<map_chr_x		; Reset previous X position.
  526    01:D0CE  9D 84 28   			sta	vdc_old_chr_x, x
  527                        	
  528    01:D0D1  A5 FE      			lda	<map_chr_y		; Reset previous Y position,
  529    01:D0D3  1A         			inc	a			; ready to draw multiple rows.
  530    01:D0D4  9D 85 28   			sta	vdc_old_chr_y, x
  531                        	
  532    01:D0D7  BD 4D 23   			lda	vdc_map_draw_w, x	; Draw the whole screen.
  533    01:D0DA  85 FA      			sta	<map_draw_w
  534    01:D0DC  BD 4E 23   			lda	vdc_map_draw_h, x
  535    01:D0DF  85 FB      			sta	<map_draw_h
  536                        	
  537    01:D0E1  20 21 D4   			jsr	map_scroll_y		; Draw N row of CHR to the BAT.
  538                        	
  539               0000     		.if	BLKMAP_LARGEMAP
  542                        		.endif
  543    01:D0E4  68         			pla				; Restore MPR2..MPR4.
  544    01:D0E5  53 10      			tam4
  545    01:D0E7  68         			pla
  546    01:D0E8  53 08      			tam3
  547    01:D0EA  68         			pla
  548    01:D0EB  53 04      			tam2
  549                        	
  550                        			leave
         01:D0ED  4C EF FF   			jmp	leave_proc
  551                        	
  552                        			.endp
  553                        	
  554                        	
  555                        	
  556                        	; ***************************************************************************
  557                        	; ***************************************************************************
  558                        	;
  559                        	; _scroll_map - Draw a single row of CHR into the BAT to update the edge.
  560                        	; _sgx_scroll_map - Draw a single row of CHR into the BAT to update the edge.
  561                        	;
  562                        	; void __fastcall scroll_map( void );
  563                        	; void __fastcall sgx_scroll_map( void );
  564                        	;
  565                        	
  566               0001     		.if	SUPPORT_SGX
  567                        	
  568    01:D0F0             	_sgx_scroll_map	.proc
  569                        	
  570    01:D0F0  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  571    01:D0F2  F0         			db	$F0			; Turn "clx" into a "beq".
  572                        	
  573    01:D0F3             			.ref	_scroll_map
  574                        			.endp
  575                        		.endif
  576                        	
  577    01:D0F3             	_scroll_map	.proc
  578                        	
  579    01:D0F3  82         			clx				; Offset to PCE VDC.
  580                        	
  581               0000     		.if	BLKMAP_TIMETEST
  587                        		.endif
  588                        	
  589    01:D0F4  43 04      			tma2				; Preserve MPR2..MPR4.
  590    01:D0F6  48         			pha
  591    01:D0F7  43 08      			tma3
  592    01:D0F9  48         			pha
  593    01:D0FA  43 10      			tma4
  594    01:D0FC  48         			pha
  595               0000     		.if	BLKMAP_LARGEMAP
  598                        		.endif
  599                        	
  600    01:D0FD  20 CB D1   			jsr	map_pxl_2_chr		; Set up the draw coordinates.
  601                        	
  602               0001     		.if	BLKMAP_MULTISCR
  603    01:D100  A5 FD      			lda	<map_scrn_x		; map_scroll_x can change this!
  604    01:D102  48         			pha
  605                        		.endif
  606                        	
  607    01:D103  BD 4E 23   			lda	vdc_map_draw_h, x	; Draw new LHS or RHS if needed.
  608    01:D106  85 FB      			sta	<map_draw_h
  609                        	;		lda	#1			; map_scroll_x only ever draws a
  610                        	;		sta	<map_draw_w		; single column.
  611    01:D108  20 02 D3   			jsr	map_scroll_x
  612                        	
  613    01:D10B  BD 84 28   			lda	vdc_old_chr_x, x	; Restore map_chr_x which could
  614    01:D10E  85 FC      			sta	<map_chr_x		; be changed by map_scroll_x.
  615                        	
  616               0001     		.if	BLKMAP_MULTISCR
  617    01:D110  68         			pla				; Restore before map_scroll_y.
  618    01:D111  85 FD      			sta	<map_scrn_x
  619                        		.endif
  620                        	
  621    01:D113  BD 4D 23   			lda	vdc_map_draw_w, x	; Draw new TOP or BTM if needed.
  622    01:D116  85 FA      			sta	<map_draw_w
  623    01:D118  A9 01      			lda	#1
  624    01:D11A  85 FB      			sta	<map_draw_h
  625    01:D11C  20 21 D4   			jsr	map_scroll_y
  626                        	
  627               0000     		.if	BLKMAP_LARGEMAP
  630                        		.endif
  631    01:D11F  68         			pla				; Restore MPR2..MPR4.
  632    01:D120  53 10      			tam4
  633    01:D122  68         			pla
  634    01:D123  53 08      			tam3
  635    01:D125  68         			pla
  636    01:D126  53 04      			tam2
  637                        	
  638               0000     		.if	BLKMAP_TIMETEST
  640                        		.endif
  641                        	
  642                        			leave
         01:D128  4C EF FF   			jmp	leave_proc
  643                        	
  644                        			.endp
  645                        	
  646                        	
  647                        	
  648                        	; ***************************************************************************
  649                        	; ***************************************************************************
  650                        	;
  651                        	; _blit_map - Draw a map rectangle to specific BAT coordinates.
  652                        	; _sgx_blit_map - Draw a map rectangle to specific BAT coordinates.
  653                        	;
  654                        	; void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
  655                        	; void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
  656                        	;
  657                        	; Normally you'd just use _draw_map() and _scroll_map(), but for those folks
  658                        	; who really wish to take manual control, you can use this.
  659                        	;
  660                        	
  661               0001     		.if	SUPPORT_SGX
  662                        	
  663                        	_sgx_blit_map	.proc
  669                        			.endp
  670                        		.endif
  671                        	
  672    01:D12B             	_blit_map	.proc
  673                        	
  674    01:D12B  82         			clx				; Offset to PCE VDC.
  675                        	
  676    01:D12C  BD 91 28   			lda	vdc_scr_bank, x		; Skip this if a multi-screen
  677    01:D12F  D0 36      			bne	.exit			; blkmap.
  678                        	
  679    01:D131  43 04      			tma2				; Preserve MPR2..MPR4.
  680    01:D133  48         			pha
  681    01:D134  43 08      			tma3
  682    01:D136  48         			pha
  683    01:D137  43 10      			tma4
  684    01:D139  48         			pha
  685               0000     		.if	BLKMAP_LARGEMAP
  688                        		.endif
  689                        	
  690    01:D13A  BD 55 23   			lda	vdc_map_option, x	; Preserve current map options.
  691    01:D13D  48         			pha
  692    01:D13E  09 C0      			ora	#MAP_UNALIGNED_X | MAP_UNALIGNED_Y
  693    01:D140  9D 55 23   			sta	vdc_map_option, x
  694                        	
  695    01:D143  20 CB D1   			jsr	map_pxl_2_chr		; Set up the draw coordinates.
  696                        	
  697    01:D146  A5 FA      			lda	<map_draw_w		; Are we drawing just 1 column?
  698    01:D148  C9 01      			cmp	#1
  699    01:D14A  F0 1E      			beq	.draw_column
  700                        	
  701                        			; Draw N rows.
  702                        	
  703    01:D14C  A5 FC      	.draw_rows:	lda	<map_chr_x		; Reset previous X position.
  704    01:D14E  9D 84 28   			sta	vdc_old_chr_x, x
  705                        	
  706    01:D151  A5 FE      			lda	<map_chr_y		; Reset previous Y position,
  707    01:D153  1A         			inc	a			; ready to draw rows upwards.
  708    01:D154  9D 85 28   			sta	vdc_old_chr_y, x
  709                        	
  710    01:D157  20 21 D4   			jsr	map_scroll_y		; Draw a row of CHR to the BAT.
  711                        	
  712                        			; Drawing completed.
  713                        	
  714    01:D15A  68         	.finished:	pla				; Restore previous map options.
  715    01:D15B  9D 55 23   			sta	vdc_map_option, x
  716                        	
  717               0000     		.if	BLKMAP_LARGEMAP
  720                        		.endif
  721    01:D15E  68         			pla				; Restore MPR2..MPR4.
  722    01:D15F  53 10      			tam4
  723    01:D161  68         			pla
  724    01:D162  53 08      			tam3
  725    01:D164  68         			pla
  726    01:D165  53 04      			tam2
  727                        	
  728                        	.exit:		leave
         01:D167  4C EF FF   			jmp	leave_proc
  729                        	
  730                        			; Draw 1 column.
  731                        	
  732    01:D16A  A5 FC      	.draw_column:	lda	<map_chr_x		; Reset previous X position.
  733    01:D16C  1A         			inc	a			; ready to draw 1 column.
  734    01:D16D  9D 84 28   			sta	vdc_old_chr_x, x
  735                        	
  736    01:D170  A5 FE      			lda	<map_chr_y		; Reset previous Y position.
  737    01:D172  9D 85 28   			sta	vdc_old_chr_y, x
  738                        	
  739    01:D175  20 02 D3   			jsr	map_scroll_x		; Draw a single column of CHR.
  740                        	
  741    01:D178  80 E0      			bra	.finished
  742                        	
  743                        			.endp
  744                        	
  745                        	
  746                        	
  747                        	; ***************************************************************************
  748                        	; ***************************************************************************
  749                        	;
  750                        	; _get_map_block - Get the block number used at a map pixel coordinate.
  751                        	; _sgx_get_map_block - Get the block number used at a map pixel coordinate.
  752                        	;
  753                        	; unsigned char __fastcall _get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
  754                        	; unsigned char __fastcall _sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
  755                        	;
  756                        	
  757               0001     		.if	SUPPORT_SGX
  758                        	
  759                        			.proc	_sgx_get_map_block.2
  765                        			.endp
  766                        		.endif
  767                        	
  768    01:D17A             			.proc	_get_map_block.2
  769                        	
  770    01:D17A  82         			clx				; Offset to PCE VDC.
  771                        	
  772    01:D17B  43 04      			tma2				; Preserve MPR2..MPR4.
  773    01:D17D  48         			pha
  774    01:D17E  43 08      			tma3
  775    01:D180  48         			pha
  776    01:D181  43 10      			tma4
  777    01:D183  48         			pha
  778               0000     		.if	BLKMAP_LARGEMAP
  781                        		.endif
  782                        	
  783    01:D184  20 DF D1   			jsr	xvt_pxl_2_chr		; Set up the query coordinates.
  784                        	
  785    01:D187  20 0D D2   			jsr	map_chr_2_data		; Page in the map address.
  786                        	
  787    01:D18A  B2 EC      			lda	[_bp]			; Read the BLK from the map.
  788    01:D18C  A8         			tay
  789                        	
  790    01:D18D  A5 FC      			lda	<map_chr_x		; Calc the BLK address offset
  791    01:D18F  4A         			lsr	a			; use depending upon even/odd
  792    01:D190  A5 FE      			lda	<map_chr_y		; CHR coordinates (not BAT to
  793    01:D192  29 01      			and	#1			; support unaligned drawing).
  794    01:D194  2A         			rol	a
  795    01:D195  09 04      			ora	#4			; Offset to BLK table top byte.
  796    01:D197  7D 8A 28   			adc.h	vdc_blk_addr, x		; What is the BLK data address?
  797    01:D19A  85 ED      			sta.h	<_bp			; $4000, $4800, $5000 or $5800.
  798    01:D19C  64 EC      			stz.l	<_bp
  799    01:D19E  B1 EC      			lda	[_bp], y		; Read the collision flags from
  800    01:D1A0  29 0C      			and	#%00001100		; the top byte of the CHR.
  801    01:D1A2  4A         			lsr	a
  802    01:D1A3  4A         			lsr	a
  803    01:D1A4  4A         			lsr	a			; Swizzle the bottom bit to get
  804    01:D1A5  90 02      			bcc	!+			; the same bit order as used in
  805    01:D1A7  09 02      			ora	#2			; .HALTMAP layer.
  806    01:D1A9  8D 82 28   	!:		sta	map_blk_flag
  807                        	
  808    01:D1AC  BD 88 28   			lda	vdc_tbl_bank, x		; Is there a table of flags?
  809    01:D1AF  F0 09      			beq	!+
  810    01:D1B1  53 08      			tam3
  811                        	;		inc	a
  812                        	;		tam4
  813                        	;		lda.l	vdc_tbl_addr, x
  814                        	;		sta.l	<_bp
  815    01:D1B3  BD 87 28   			lda.h	vdc_tbl_addr, x		; If so, it must be aligned!
  816    01:D1B6  85 ED      			sta.h	<_bp
  817    01:D1B8  B1 EC      			lda	[_bp], y		; Read the .MASKMAP/.OVERMAP
  818    01:D1BA  8D 83 28   	!:		sta	map_blk_mask		; flag value for this BLK.
  819                        	
  820               0000     		.if	BLKMAP_LARGEMAP
  823                        		.endif
  824    01:D1BD  68         			pla				; Restore MPR2..MPR4.
  825    01:D1BE  53 10      			tam4
  826    01:D1C0  68         			pla
  827    01:D1C1  53 08      			tam3
  828    01:D1C3  68         			pla
  829    01:D1C4  53 04      			tam2
  830                        	
  831    01:D1C6  02         			sxy				; Put the BLK number in X.
  832    01:D1C7  C2         			cly
  833                        	
  834                        			leave				; All done!
         01:D1C8  4C EF FF   			jmp	leave_proc
  835                        	
  836                        			.endp
  837                        	
  838                        	
  839                        	
  840                        	; ***************************************************************************
  841                        	; ***************************************************************************
  842                        	;
  843                        	; map_pxl_2_chr - Convert PXL to CHR, BLK and SCR coordinates.
  844                        	;
  845                        	
  846    01:D1CB  BD 53 23   	map_pxl_2_chr:	lda.l	vdc_map_pxl_y, x	; Get current map Y coordinate.
  847    01:D1CE  85 FE      			sta.l	<map_pxl_y
  848    01:D1D0  BD 54 23   			lda.h	vdc_map_pxl_y, x
  849    01:D1D3  85 FF      			sta.h	<map_pxl_y
  850                        	
  851    01:D1D5  BD 51 23   			lda.l	vdc_map_pxl_x, x	; Get current map X coordinate.
  852    01:D1D8  85 FC      			sta.l	<map_pxl_x
  853    01:D1DA  BD 52 23   			lda.h	vdc_map_pxl_x, x
  854    01:D1DD  85 FD      			sta.h	<map_pxl_x
  855                        	
  856    01:D1DF  A5 FD      	xvt_pxl_2_chr:	lda.h	<map_pxl_x		; Xvert map_pxl_x to map_chr_x.
  857               0001     		.if	BLKMAP_MULTISCR
  858    01:D1E1  A8         			tay				; Xvert map_pxl_x to map_scrn_x.
  859    01:D1E2  3C 48 23   			bit	vdc_bat_width, x
  860    01:D1E5  70 03      			bvs	.w64
  861    01:D1E7  10 02      			bpl	.w32
  862    01:D1E9  4A         	.w128:		lsr	a
  863    01:D1EA  4A         	.w64:		lsr	a
  864    01:D1EB  85 FD      	.w32:		sta	<map_scrn_x
  865    01:D1ED  98         			tya
  866                        		.endif
  867    01:D1EE  4A         			lsr	a
  868    01:D1EF  66 FC      			ror.l	<map_pxl_x
  869    01:D1F1  4A         			lsr	a
  870    01:D1F2  66 FC      			ror.l	<map_pxl_x
  871    01:D1F4  4A         			lsr	a
  872    01:D1F5  66 FC      			ror.l	<map_pxl_x		; Max map width is 256 CHR.
  873                        	
  874    01:D1F7  A5 FF      			lda.h	<map_pxl_y		; Xvert map_pxl_y to map_chr_y.
  875               0001     		.if	BLKMAP_MULTISCR
  876    01:D1F9  A8         			tay				; Xvert map_pxl_y to map_scrn_y.
  877    01:D1FA  3C 49 23   			bit	vdc_bat_height, x
  878    01:D1FD  50 01      			bvc	.h32
  879    01:D1FF  4A         	.h64:		lsr	a
  880    01:D200  85 FF      	.h32:		sta	<map_scrn_y
  881    01:D202  98         			tya
  882                        		.endif
  883    01:D203  4A         			lsr	a
  884    01:D204  66 FE      			ror.l	<map_pxl_y
  885    01:D206  4A         			lsr	a
  886    01:D207  66 FE      			ror.l	<map_pxl_y
  887    01:D209  4A         			lsr	a
  888    01:D20A  66 FE      			ror.l	<map_pxl_y		; Max map width is 256 CHR.
  889                        	
  890    01:D20C  60         			rts
  891                        	
  892                        	
  893                        	
  894                        	; ***************************************************************************
  895                        	; ***************************************************************************
  896                        	;
  897                        	; map_chr_2_data - Page in the MAP address for the CHR coordinates.
  898                        	;
  899                        	
  900    01:D20D             	map_chr_2_data:
  901                        	
  902               0001     		.if	BLKMAP_MULTISCR
  903                        	
  904                        			; Initialization for a multi-screen map.
  905                        	
  906    01:D20D  BD 91 28   			lda	vdc_scr_bank, x		; Skip this if regular blkmap.
  907    01:D210  F0 3A      			beq	.regular
  908                        	
  909    01:D212  A5 FC      	.multiscreen:	lda	<map_chr_x		; Compare old_x with cur_x.
  910    01:D214  3D 4A 23   			and	vdc_bat_x_mask, x
  911    01:D217  85 F8      			sta	<map_bat_x		; Save BAT X chr coordinate.
  912                        	
  913    01:D219  A5 FE      			lda	<map_chr_y		; Save BAT Y chr coordinate.
  914    01:D21B  3D 4B 23   			and	vdc_bat_y_mask, x
  915    01:D21E  85 F9      			sta	<map_bat_y
  916    01:D220  4A         			lsr	a			; Map BLK Y coordinate.
  917    01:D221  85 EF      			sta.h	<map_line
  918    01:D223  62         			cla
  919    01:D224  3C 48 23   			bit	vdc_bat_width, x
  920    01:D227  30 08      			bmi	.w128
  921    01:D229  70 03      			bvs	.w64
  922    01:D22B  46 EF      	.w32:		lsr.h	<map_line
  923    01:D22D  6A         			ror	a
  924    01:D22E  46 EF      	.w64:		lsr.h	<map_line
  925    01:D230  6A         			ror	a
  926    01:D231  46 EF      	.w128:		lsr.h	<map_line
  927    01:D233  6A         			ror	a
  928    01:D234  46 EF      			lsr.h	<map_line		; Hi-byte of (BLK Y * width).
  929    01:D236  6A         			ror	a
  930    01:D237  85 EE      			sta.l	<map_line		; Lo-byte of (BLK Y * width).
  931                        	
  932    01:D239  20 8D D2   			jsr	map_set_screen		; Put BLK & MAP in MPR2-MPR5.
  933                        	
  934    01:D23C  A5 F8      			lda	<map_bat_x		; Calc map data pointer.
  935    01:D23E  4A         			lsr	a			; Map BLK X coordinate.
  936    01:D23F  05 EE      			ora.l	<map_line
  937    01:D241  85 EC      			sta.l	<_bp
  938    01:D243  A5 EF      			lda.h	<map_line
  939    01:D245  18         			clc
  940    01:D246  7D 8D 28   			adc.h	vdc_map_addr, x		; N.B. 256-byte aligned!
  941    01:D249  85 ED      			sta.h	<_bp
  942                        	
  943    01:D24B  60         			rts
  944                        	
  945                        		.endif	BLKMAP_MULTISCR
  946                        	
  947                        			; Initialization for a regular map.
  948                        	
  949    01:D24C  A5 FC      	.regular:	lda	<map_chr_x		; Compare old_x with cur_x.
  950                        	;		bit	vdc_map_option, x	; Set bit7 to disable aligning
  951                        	;		bmi	!+			; BAT X with the map X.
  952    01:D24E  3D 4A 23   			and	vdc_bat_x_mask, x
  953    01:D251  85 F8      			sta	<map_bat_x		; Save BAT X chr coordinate.
  954                        	
  955    01:D253  A5 FE      	!:		lda	<map_chr_y		; A = map CHR Y coordinate.
  956    01:D255  A8         			tay
  957    01:D256  4A         			lsr	a
  958    01:D257  42         			say				; Y = map BLK Y coordinate.
  959                        	
  960                        	;		bit	vdc_map_option, x	; Set bit6 to disable aligning
  961                        	;		bvs	!+			; BAT Y with the map Y.
  962    01:D258  3D 4B 23   			and	vdc_bat_y_mask, x
  963    01:D25B  85 F9      			sta	<map_bat_y		; Save BAT Y chr coordinate.
  964                        	
  965               0000     		.if	BLKMAP_LARGEMAP
  970                        		.endif
  971                        	
  972    01:D25D  BD 4F 23   	!:		lda	vdc_map_line_w, x	; Map width in BLK.
  973               0000     		.if	FAST_MULTIPLY
  986                        		.else
  987    01:D260  84 EF      			sty.h	<map_line		; Takes 144..176 cycles.
  988    01:D262  A0 08      			ldy	#8
  989    01:D264  4A         			lsr	a
  990    01:D265  85 EE      			sta.l	<map_line
  991    01:D267  62         			cla
  992    01:D268  90 03      			bcc	.rotate
  993    01:D26A  18         	.add:		clc
  994    01:D26B  65 EF      			adc.h	<map_line
  995    01:D26D  6A         	.rotate:	ror	a
  996    01:D26E  66 EE      			ror.l	<map_line		; Lo-byte of (BLK Y * width).
  997    01:D270  88         			dey
  998    01:D271  B0 F7      			bcs	.add
  999    01:D273  D0 F8      			bne	.rotate
 1000    01:D275  A8         			tay				; Hi-byte of (BLK Y * width).
 1001                        		.endif
 1002                        	
 1003    01:D276  A5 FC      	!:		lda	<map_chr_x		; Map CHR X coordinate.
 1004    01:D278  4A         			lsr	a			; Map BLK X coordinate.
 1005    01:D279  18         			clc
 1006    01:D27A  65 EE      			adc.l	<map_line		; Lo-byte of (BLK Y * width).
 1007    01:D27C  90 01      			bcc	!+
 1008    01:D27E  C8         			iny				; Hi-byte of (BLK Y * width).
 1009                        	
 1010    01:D27F  18         	!:		clc				; Calc map data pointer.
 1011    01:D280  7D 8C 28   			adc.l	vdc_map_addr, x
 1012    01:D283  85 EC      			sta.l	<_bp			; Maximum map size is 16KBytes
 1013    01:D285  98         			tya				; so we don't need to consider
 1014    01:D286  7D 8D 28   			adc.h	vdc_map_addr, x		; bank overflow.
 1015    01:D289  85 ED      			sta.h	<_bp
 1016                        	
 1017    01:D28B  80 66      			bra	map_set_banks		; Put BLK & MAP in MPR2-MPR5.
 1018                        	
 1019                        	
 1020                        	
 1021               0001     		.if	BLKMAP_MULTISCR
 1022                        	
 1023                        	; ***************************************************************************
 1024                        	; ***************************************************************************
 1025                        	;
 1026                        	; map_set_screen -
 1027                        	;
 1028                        	; Maximum X and Y dimension of 128 screens (32768 pixels).
 1029                        	; Maximum 8KByte total size of screen data (1024 screens).
 1030                        	;
 1031                        	
 1032    01:D28D  A4 FF      	map_set_screen:	ldy	<map_scrn_y		; Map SCR Y coordinate.
 1033    01:D28F  BD 50 23   			lda	vdc_map_scrn_w, x	; Map width in SCREENS.
 1034                        	
 1035               0000     		.if	FAST_MULTIPLY
 1048                        		.else
 1049    01:D292  84 ED      			sty.h	<_bp			; Takes 144..176 cycles.
 1050    01:D294  A0 08      			ldy	#8
 1051    01:D296  4A         			lsr	a
 1052    01:D297  85 EC      			sta.l	<_bp
 1053    01:D299  62         			cla
 1054    01:D29A  90 03      			bcc	.rotate
 1055    01:D29C  18         	.add:		clc
 1056    01:D29D  65 ED      			adc.h	<_bp
 1057    01:D29F  6A         	.rotate:	ror	a
 1058    01:D2A0  66 EC      			ror.l	<_bp			; Lo-byte of (SCR Y * width).
 1059    01:D2A2  88         			dey
 1060    01:D2A3  B0 F7      			bcs	.add
 1061    01:D2A5  D0 F8      			bne	.rotate
 1062    01:D2A7  A8         			tay				; Hi-byte of (SCR Y * width).
 1063                        		.endif
 1064                        	
 1065    01:D2A8  A5 FD      			lda	<map_scrn_x		; Map SCR X coordinate.
 1066    01:D2AA  18         			clc
 1067    01:D2AB  65 EC      			adc.l	<_bp
 1068    01:D2AD  90 01      			bcc	!+
 1069    01:D2AF  C8         			iny
 1070                        	
 1071    01:D2B0  84 ED      	!:		sty.h	<_bp			; 2 bytes per screen entry, max
 1072    01:D2B2  0A         			asl	a			; 8KByte screen table.
 1073    01:D2B3  26 ED      			rol.h	<_bp
 1074               0001     		.if	BLKDEF_POINTERS == 0
 1075    01:D2B5  0A         			asl	a			; 8 bytes per screen entry when
 1076    01:D2B6  26 ED      			rol.h	<_bp			; not using BLK pointers.
 1077    01:D2B8  0A         			asl	a
 1078    01:D2B9  26 ED      			rol.h	<_bp
 1079                        		.endif
 1080                        	
 1081    01:D2BB  7D 8F 28   			adc.l	vdc_scr_addr, x		; Calc screen data pointer.
 1082    01:D2BE  85 EC      			sta.l	<_bp			; Maximum data size is 8KBytes
 1083    01:D2C0  A5 ED      			lda.h	<_bp			; so we don't need to consider
 1084    01:D2C2  7D 90 28   			adc.h	vdc_scr_addr, x		; bank overflow.
 1085    01:D2C5  85 ED      			sta.h	<_bp
 1086                        	
 1087    01:D2C7  BD 91 28   			lda	vdc_scr_bank, x		; Map the SCR data in MPR3..MPR4.
 1088    01:D2CA  53 08      			tam3
 1089    01:D2CC  1A         			inc	a
 1090    01:D2CD  53 10      			tam4
 1091                        	
 1092    01:D2CF  C2         			cly
 1093    01:D2D0  B1 EC      			lda	[_bp], y		; Get SCR_MAP_PAGE.
 1094    01:D2D2  9D 8D 28   			sta.h	vdc_map_addr, x
 1095    01:D2D5  C8         			iny
 1096    01:D2D6  B1 EC      			lda	[_bp], y		; Get SCR_MAP_BANK.
 1097    01:D2D8  9D 8E 28   			sta	vdc_map_bank, x
 1098                        	
 1099               0001     		.if	BLKDEF_POINTERS == 0
 1100    01:D2DB  C8         			iny
 1101    01:D2DC  B1 EC      			lda	[_bp], y		; Get SCR_BLK_PAGE.
 1102    01:D2DE  9D 8A 28   			sta.h	vdc_blk_addr, x
 1103    01:D2E1  C8         			iny
 1104    01:D2E2  B1 EC      			lda	[_bp], y		; Get SCR_BLK_BANK.
 1105    01:D2E4  9D 8B 28   			sta	vdc_blk_bank, x
 1106    01:D2E7  C8         			iny
 1107    01:D2E8  B1 EC      			lda	[_bp], y		; Get SCR_TBL_PAGE.
 1108    01:D2EA  9D 87 28   			sta.h	vdc_tbl_addr, x
 1109    01:D2ED  C8         			iny
 1110    01:D2EE  B1 EC      			lda	[_bp], y		; Get SCR_TBL_BANK.
 1111    01:D2F0  9D 88 28   			sta	vdc_tbl_bank, x
 1112               0000     		.if	0				; These are not currently used.
 1119                        		.endif
 1120                        		.endif
 1121                        	
 1122                        	;		lda	vdc_bat_width, x	; Set up the map width.
 1123                        	;		lsr	a			; This should have been set
 1124                        	;		sta	vdc_map_line_w, x	; with the multi-screen map.
 1125                        	
 1126                        	;		jmp	map_set_banks		; Put BLK & MAP in MPR2-MPR5.
 1127                        	
 1128                        			; Fall through to map_set_banks.
 1129                        	
 1130                        		.endif	BLKMAP_MULTISCR
 1131                        	
 1132                        	
 1133                        	
 1134                        	; ***************************************************************************
 1135                        	; ***************************************************************************
 1136                        	;
 1137                        	; map_set_banks - Put BLK & MAP in MPR2-MPR5.
 1138                        	;
 1139                        	
 1140    01:D2F3  BD 8B 28   	map_set_banks:	lda	vdc_blk_bank, x		; Put the BLK into MPR2.
 1141    01:D2F6  53 04      			tam2
 1142                        	
 1143    01:D2F8  BD 8E 28   			lda	vdc_map_bank, x		; Put the MAP into MPR3-MPR5.
 1144    01:D2FB  53 08      			tam3
 1145    01:D2FD  1A         			inc	a
 1146    01:D2FE  53 10      			tam4
 1147               0000     		.if	BLKMAP_LARGEMAP
 1156                        		.endif
 1157                        	
 1158    01:D300  60         	!:		rts
 1159                        	
 1160                        	
 1161                        	
 1162                        	; ***************************************************************************
 1163                        	; ***************************************************************************
 1164                        	;
 1165                        	; map_scroll_x - Update the BAT when X coordinate changes.
 1166                        	;
 1167                        	; N.B. This will alter map_chr_x and map_scrn_x if moved in +ve direction!
 1168                        	;
 1169                        	; N.B. This only ever draws a single column!
 1170                        	;
 1171                        	
 1172    01:D301  60         	!no_change:	rts
 1173                        	
 1174    01:D302             	map_scroll_x:
 1175                        	
 1176               0001     		.if	BLKMAP_MULTISCR
 1177                        	
 1178                        			; Initialization for a multi-screen map.
 1179                        	
 1180    01:D302  BD 91 28   			lda	vdc_scr_bank, x		; Skip this if regular blkmap.
 1181    01:D305  F0 56      			beq	.regular
 1182                        	
 1183    01:D307  A5 FC      	.multiscreen:	lda	<map_chr_x		; Compare old_x with cur_x.
 1184    01:D309  DD 84 28   			cmp	vdc_old_chr_x, x
 1185               0001     		.if	BLKMAP_TIMETEST == 0
 1186    01:D30C  F0 F3      			beq	!no_change-		; Do nothing if no change.
 1187                        		.endif
 1188    01:D30E  9D 84 28   			sta	vdc_old_chr_x, x
 1189    01:D311  30 11      			bmi	!+			; Test the sign of the change.
 1190                        	
 1191    01:D313  18         			clc				; Draw RHS if chr_x >= old_x.
 1192    01:D314  3D 4A 23   			and	vdc_bat_x_mask, x
 1193    01:D317  7D 4D 23   			adc	vdc_map_draw_w, x	; Usually (SCR_WIDTH / 8) + 1.
 1194    01:D31A  3A         			dec	a
 1195    01:D31B  85 FC      			sta	<map_chr_x		; Update CHR X chr coordinate.
 1196    01:D31D  3C 48 23   			bit	vdc_bat_width, x
 1197    01:D320  F0 02      			beq	!+
 1198    01:D322  E6 FD      			inc	<map_scrn_x		; Wrapped to the next screen.
 1199                        	
 1200    01:D324  3D 4A 23   	!:		and	vdc_bat_x_mask, x
 1201    01:D327  85 F8      			sta	<map_bat_x		; Save BAT X chr coordinate.
 1202                        	
 1203    01:D329  A5 FE      			lda	<map_chr_y		; Save BAT Y chr coordinate.
 1204    01:D32B  3D 4B 23   			and	vdc_bat_y_mask, x
 1205    01:D32E  85 F9      			sta	<map_bat_y
 1206    01:D330  4A         			lsr	a			; Map BLK Y coordinate.
 1207    01:D331  85 EF      			sta.h	<map_line
 1208    01:D333  62         			cla
 1209    01:D334  3C 48 23   			bit	vdc_bat_width, x
 1210    01:D337  30 08      			bmi	.w128
 1211    01:D339  70 03      			bvs	.w64
 1212    01:D33B  46 EF      	.w32:		lsr.h	<map_line
 1213    01:D33D  6A         			ror	a
 1214    01:D33E  46 EF      	.w64:		lsr.h	<map_line
 1215    01:D340  6A         			ror	a
 1216    01:D341  46 EF      	.w128:		lsr.h	<map_line
 1217    01:D343  6A         			ror	a
 1218    01:D344  46 EF      			lsr.h	<map_line		; Hi-byte of (BLK Y * width).
 1219    01:D346  6A         			ror	a
 1220    01:D347  85 EE      			sta.l	<map_line		; Lo-byte of (BLK Y * width).
 1221                        	
 1222    01:D349  20 8D D2   			jsr	map_set_screen		; Put BLK & MAP in MPR2-MPR5.
 1223                        	
 1224    01:D34C  A5 F8      			lda	<map_bat_x		; Calc map data pointer.
 1225    01:D34E  4A         			lsr	a			; Map BLK X coordinate.
 1226    01:D34F  05 EE      			ora.l	<map_line
 1227    01:D351  85 EC      			sta.l	<_bp
 1228    01:D353  A5 EF      			lda.h	<map_line
 1229    01:D355  18         			clc
 1230    01:D356  7D 8D 28   			adc.h	vdc_map_addr, x		; N.B. 256-byte aligned!
 1231    01:D359  85 ED      			sta.h	<_bp
 1232                        	
 1233    01:D35B  80 5D      			bra	.draw_col		; Now draw it.
 1234                        	
 1235                        		.endif	BLKMAP_MULTISCR
 1236                        	
 1237                        			; Initialization for a regular map.
 1238                        	
 1239    01:D35D  A5 FC      	.regular:	lda	<map_chr_x		; Compare old_x with cur_x.
 1240    01:D35F  DD 84 28   			cmp	vdc_old_chr_x, x
 1241               0001     		.if	BLKMAP_TIMETEST == 0
 1242    01:D362  F0 9D      			beq	!no_change-		; Do nothing if no change.
 1243                        		.endif
 1244    01:D364  9D 84 28   			sta	vdc_old_chr_x, x
 1245    01:D367  30 07      			bmi	!+			; Test the sign of the change.
 1246                        	
 1247    01:D369  18         			clc				; Draw RHS if chr_x >= old_x.
 1248    01:D36A  7D 4D 23   			adc	vdc_map_draw_w, x	; Usually (SCR_WIDTH / 8) + 1.
 1249    01:D36D  3A         			dec	a
 1250    01:D36E  85 FC      			sta	<map_chr_x		; Update CHR X chr coordinate.
 1251                        	
 1252    01:D370  3C 55 23   	!:		bit	vdc_map_option, x	; Set bit7 to disable aligning
 1253    01:D373  30 05      			bmi	!+			; BAT X with the map X.
 1254    01:D375  3D 4A 23   			and	vdc_bat_x_mask, x
 1255    01:D378  85 F8      			sta	<map_bat_x		; Save BAT X chr coordinate.
 1256                        	
 1257    01:D37A  A5 FE      	!:		lda	<map_chr_y		; A = map CHR Y coordinate.
 1258    01:D37C  A8         			tay
 1259    01:D37D  4A         			lsr	a
 1260    01:D37E  42         			say				; Y = map BLK Y coordinate.
 1261                        	
 1262    01:D37F  3C 55 23   			bit	vdc_map_option, x	; Set bit6 to disable aligning
 1263    01:D382  70 05      			bvs	!+			; BAT Y with the map Y.
 1264    01:D384  3D 4B 23   			and	vdc_bat_y_mask, x
 1265    01:D387  85 F9      			sta	<map_bat_y		; Save BAT Y chr coordinate.
 1266                        	
 1267               0000     		.if	BLKMAP_LARGEMAP
 1272                        		.endif
 1273                        	
 1274    01:D389  BD 4F 23   	!:		lda	vdc_map_line_w, x	; Map width in BLK.
 1275               0000     		.if	FAST_MULTIPLY
 1288                        		.else
 1289    01:D38C  84 EF      			sty.h	<map_line		; Takes 144..176 cycles.
 1290    01:D38E  A0 08      			ldy	#8
 1291    01:D390  4A         			lsr	a
 1292    01:D391  85 EE      			sta.l	<map_line
 1293    01:D393  62         			cla
 1294    01:D394  90 03      			bcc	.rotate
 1295    01:D396  18         	.add:		clc
 1296    01:D397  65 EF      			adc.h	<map_line
 1297    01:D399  6A         	.rotate:	ror	a
 1298    01:D39A  66 EE      			ror.l	<map_line		; Lo-byte of (BLK Y * width).
 1299    01:D39C  88         			dey
 1300    01:D39D  B0 F7      			bcs	.add
 1301    01:D39F  D0 F8      			bne	.rotate
 1302    01:D3A1  A8         			tay				; Hi-byte of (BLK Y * width).
 1303                        		.endif
 1304                        	
 1305    01:D3A2  A5 FC      	!:		lda	<map_chr_x		; Map CHR X coordinate.
 1306    01:D3A4  4A         			lsr	a			; Map BLK X coordinate.
 1307    01:D3A5  18         			clc
 1308    01:D3A6  65 EE      			adc.l	<map_line		; Lo-byte of (BLK Y * width).
 1309    01:D3A8  90 01      			bcc	!+
 1310    01:D3AA  C8         			iny				; Hi-byte of (BLK Y * width).
 1311                        	
 1312    01:D3AB  18         	!:		clc				; Calc map data pointer.
 1313    01:D3AC  7D 8C 28   			adc.l	vdc_map_addr, x
 1314    01:D3AF  85 EC      			sta.l	<_bp			; Maximum map size is 16KBytes
 1315    01:D3B1  98         			tya				; so we don't need to consider
 1316    01:D3B2  7D 8D 28   			adc.h	vdc_map_addr, x		; bank overflow.
 1317    01:D3B5  85 ED      			sta.h	<_bp
 1318                        	
 1319    01:D3B7  20 F3 D2   			jsr	map_set_banks		; Put BLK & MAP in MPR2-MPR5.
 1320                        	
 1321                        			; Draw the first part of the column.
 1322                        	
 1323    01:D3BA  A5 F8      	.draw_col:	lda	<map_bat_x		; Set the BAT VRAM destination
 1324    01:D3BC  85 F0      			sta.l	<_di			; coordinates.
 1325    01:D3BE  A5 F9      			lda	<map_bat_y
 1326    01:D3C0  85 F1      			sta.h	<_di
 1327                        	
 1328    01:D3C2  5D 4B 23   			eor	vdc_bat_y_mask, x	; Calc CHR before wrap.
 1329    01:D3C5  1A         			inc	a
 1330    01:D3C6  DD 4E 23   			cmp	vdc_map_draw_h, x	; Usually (SCR_HEIGHT / 8) + 1.
 1331    01:D3C9  90 03      			bcc	!+
 1332    01:D3CB  BD 4E 23   			lda	vdc_map_draw_h, x	; Maximum CHR to draw.
 1333    01:D3CE  85 00      	!:		sta	<map_count		; Set number of CHR to draw.
 1334    01:D3D0  85 01      			sta	<map_drawn		; Preserve number of CHR drawn.
 1335                        	
 1336    01:D3D2  A9 05      			lda	#VDC_CR			; Set VDC auto-increment from
 1337    01:D3D4  95 F7      			sta	<vdc_reg, x		; the BAT width, which is set
 1338    01:D3D6  9D 00 02   			sta	VDC_AR, x		; up by set_screen_size().
 1339    01:D3D9  B5 F4      			lda	<vdc_crh, x
 1340    01:D3DB  9D 03 02   			sta	VDC_DH, x
 1341                        	
 1342    01:D3DE  20 20 D7   			jsr	blk_col_strip		; Draw top of vertical strip.
 1343                        	
 1344                        			; Wrap around and draw the rest of the column (if needed).
 1345                        	
 1346    01:D3E1  38         			sec				; Are there any more CHR that
 1347    01:D3E2  BD 4E 23   			lda	vdc_map_draw_h, x	; need to be drawn?
 1348    01:D3E5  E5 01      			sbc	<map_drawn
 1349    01:D3E7  F0 2C      			beq	.done
 1350                        	
 1351    01:D3E9  85 00      			sta	<map_count		; Set number of CHR to draw.
 1352                        	
 1353    01:D3EB  A5 FE      			lda	<map_chr_y		; Update CHR Y coordinate for
 1354    01:D3ED  48         			pha				; drawing unaligned tiles.
 1355    01:D3EE  18         			clc
 1356    01:D3EF  65 01      			adc	<map_drawn
 1357    01:D3F1  85 FE      			sta	<map_chr_y
 1358                        	
 1359               0001     		.if	BLKMAP_MULTISCR
 1360    01:D3F3  BD 91 28   			lda	vdc_scr_bank, x		; Skip this if regular blkmap.
 1361    01:D3F6  F0 0F      			beq	!+
 1362                        	
 1363    01:D3F8  E6 FF      			inc	<map_scrn_y		; Wrapped to the next screen.
 1364                        	
 1365    01:D3FA  20 8D D2   			jsr	map_set_screen		; Put BLK & MAP in MPR2-MPR5.
 1366                        	
 1367    01:D3FD  A5 F8      			lda	<map_bat_x		; Calc map data pointer.
 1368    01:D3FF  4A         			lsr	a			; Map BLK X coordinate.
 1369    01:D400  85 EC      			sta.l	<_bp
 1370    01:D402  BD 8D 28   			lda.h	vdc_map_addr, x		; N.B. 256-byte aligned!
 1371    01:D405  85 ED      			sta.h	<_bp
 1372                        		.endif
 1373                        	
 1374    01:D407  A5 F8      	!:		lda	<map_bat_x		; Set the BAT VRAM destination
 1375    01:D409  85 F0      			sta.l	<_di			; coordinates.
 1376    01:D40B  64 F1      			stz.h	<_di			; Reset 1st row to draw.
 1377                        	
 1378    01:D40D  20 20 D7   			jsr	blk_col_strip		; Draw btm of vertical strip.
 1379                        	
 1380               0001     		.if	BLKMAP_MULTISCR
 1381    01:D410  C6 FF      			dec	<map_scrn_y		; Restore, no check if should.
 1382                        		.endif
 1383                        	
 1384    01:D412  68         			pla				; Restore CHR Y coordinate, we
 1385    01:D413  85 FE      			sta	<map_chr_y		; might draw another column!
 1386                        	
 1387    01:D415  A9 05      	.done:		lda	#VDC_CR			; Set VDC auto-increment to 1.
 1388    01:D417  95 F7      			sta	<vdc_reg, x
 1389    01:D419  9D 00 02   			sta	VDC_AR, x
 1390    01:D41C  9E 03 02   			stz	VDC_DH, x
 1391                        	
 1392    01:D41F  60         			rts
 1393                        	
 1394                        	
 1395                        	
 1396                        	; ***************************************************************************
 1397                        	; ***************************************************************************
 1398                        	;
 1399                        	; map_scroll_y - Update the BAT when Y coordinate changes.
 1400                        	;
 1401                        	; N.B. This will alter map_chr_y and map_scrn_y if moved in +ve direction!
 1402                        	;
 1403                        	; N.B. This draws multiple rows when called from _draw_map or _blit_map.
 1404                        	;
 1405                        	
 1406    01:D420  60         	!no_change:	rts
 1407                        	
 1408    01:D421             	map_scroll_y:
 1409                        	
 1410               0001     		.if	BLKMAP_MULTISCR
 1411                        	
 1412                        			; Initialization for a multi-screen map.
 1413                        	
 1414    01:D421  BD 91 28   			lda	vdc_scr_bank, x		; Skip this if regular blkmap.
 1415    01:D424  F0 56      			beq	.regular
 1416                        	
 1417    01:D426  A5 FE      	.multiscr:	lda	<map_chr_y		; Compare old_y with cur_y.
 1418    01:D428  DD 85 28   			cmp	vdc_old_chr_y, x
 1419               0001     		.if	BLKMAP_TIMETEST == 0
 1420    01:D42B  F0 F3      			beq	!no_change-		; Do nothing if no change.
 1421                        		.endif
 1422    01:D42D  9D 85 28   			sta	vdc_old_chr_y, x
 1423    01:D430  30 11      			bmi	!+			; Test the sign of the change.
 1424                        	
 1425    01:D432  18         			clc				; Draw bottom if chr_y >= old_y.
 1426    01:D433  3D 4B 23   			and	vdc_bat_y_mask, x
 1427    01:D436  7D 4E 23   			adc	vdc_map_draw_h, x	; Usually (SCR_HEIGHT / 8) + 1.
 1428    01:D439  3A         			dec	a
 1429    01:D43A  85 FE      			sta	<map_chr_y		; Update CHR Y chr coordinate.
 1430    01:D43C  3C 49 23   			bit	vdc_bat_height, x
 1431    01:D43F  F0 02      			beq	!+
 1432    01:D441  E6 FF      			inc	<map_scrn_y		; Wrapped to the next screen.
 1433                        	
 1434    01:D443  3D 4B 23   	!:		and	vdc_bat_y_mask, x
 1435    01:D446  85 F9      			sta	<map_bat_y		; Save BAT Y chr coordinate.
 1436                        	
 1437    01:D448  4A         			lsr	a			; Map BLK Y coordinate.
 1438    01:D449  85 EF      			sta.h	<map_line
 1439    01:D44B  62         			cla
 1440    01:D44C  3C 48 23   			bit	vdc_bat_width, x
 1441    01:D44F  30 08      			bmi	.w128
 1442    01:D451  70 03      			bvs	.w64
 1443    01:D453  46 EF      	.w32:		lsr.h	<map_line
 1444    01:D455  6A         			ror	a
 1445    01:D456  46 EF      	.w64:		lsr.h	<map_line
 1446    01:D458  6A         			ror	a
 1447    01:D459  46 EF      	.w128:		lsr.h	<map_line
 1448    01:D45B  6A         			ror	a
 1449    01:D45C  46 EF      			lsr.h	<map_line		; Hi-byte of (BLK Y * width).
 1450    01:D45E  6A         			ror	a
 1451    01:D45F  85 EE      			sta.l	<map_line		; Lo-byte of (BLK Y * width).
 1452                        	
 1453    01:D461  A5 FC      			lda	<map_chr_x
 1454    01:D463  3D 4A 23   			and	vdc_bat_x_mask, x
 1455    01:D466  85 F8      			sta	<map_bat_x		; Save BAT X chr coordinate.
 1456                        	
 1457                        			; Loop to here if drawing multiple multi-screen rows.
 1458                        	
 1459    01:D468  20 8D D2   	.multiscr_row:	jsr	map_set_screen		; Put BLK & MAP in MPR2-MPR5.
 1460                        	
 1461    01:D46B  A5 F8      			lda	<map_bat_x		; Calc map data pointer.
 1462    01:D46D  4A         			lsr	a			; Map BLK X coordinate.
 1463    01:D46E  05 EE      			ora.l	<map_line
 1464    01:D470  85 EC      			sta.l	<_bp
 1465    01:D472  A5 EF      			lda.h	<map_line
 1466    01:D474  18         			clc
 1467    01:D475  7D 8D 28   			adc.h	vdc_map_addr, x		; N.B. 256-byte aligned!
 1468    01:D478  85 ED      			sta.h	<_bp
 1469                        	
 1470    01:D47A  80 60      			bra	.draw_row		; Now draw it.
 1471                        	
 1472                        		.endif	BLKMAP_MULTISCR
 1473                        	
 1474                        			; Initialization for a regular blkmap.
 1475                        	
 1476    01:D47C  A5 FE      	.regular:	lda	<map_chr_y		; Compare old_y with cur_y.
 1477    01:D47E  DD 85 28   			cmp	vdc_old_chr_y, x
 1478               0001     		.if	BLKMAP_TIMETEST == 0
 1479    01:D481  F0 9D      			beq	!no_change-		; Do nothing if no change.
 1480                        		.endif
 1481    01:D483  9D 85 28   			sta	vdc_old_chr_y, x
 1482    01:D486  30 07      			bmi	!+			; Test the sign of the change.
 1483                        	
 1484    01:D488  18         			clc				; Draw bottom if chr_y >= old_y.
 1485    01:D489  7D 4E 23   			adc	vdc_map_draw_h, x	; Usually (SCR_HEIGHT / 8) + 1.
 1486    01:D48C  3A         			dec	a
 1487    01:D48D  85 FE      			sta	<map_chr_y		; Update CHR Y chr coordinate.
 1488                        	
 1489    01:D48F  A8         	!:		tay				; A = map CHR Y coordinate.
 1490    01:D490  4A         			lsr	a
 1491    01:D491  42         			say				; Y = map BLK Y coordinate.
 1492                        	
 1493    01:D492  3C 55 23   			bit	vdc_map_option, x	; Set bit6 to disable aligning
 1494    01:D495  70 05      			bvs	!+			; BAT Y with the map Y.
 1495    01:D497  3D 4B 23   			and	vdc_bat_y_mask, x
 1496    01:D49A  85 F9      			sta	<map_bat_y		; Save BAT Y chr coordinate.
 1497                        	
 1498    01:D49C  3C 55 23   	!:		bit	vdc_map_option, x	; Set bit7 to disable aligning
 1499    01:D49F  30 07      			bmi	!+			; BAT X with the map X.
 1500    01:D4A1  A5 FC      			lda	<map_chr_x
 1501    01:D4A3  3D 4A 23   			and	vdc_bat_x_mask, x
 1502    01:D4A6  85 F8      			sta	<map_bat_x		; Save BAT X chr coordinate.
 1503    01:D4A8             	!:
 1504                        	
 1505               0000     		.if	BLKMAP_LARGEMAP
 1510                        		.endif
 1511                        	
 1512    01:D4A8  BD 4F 23   			lda	vdc_map_line_w, x	; Map width in BLK.
 1513               0000     		.if	FAST_MULTIPLY
 1526                        		.else
 1527    01:D4AB  84 EF      			sty.h	<map_line		; Takes 144..176 cycles.
 1528    01:D4AD  A0 08      			ldy	#8
 1529    01:D4AF  4A         			lsr	a
 1530    01:D4B0  85 EE      			sta.l	<map_line
 1531    01:D4B2  62         			cla
 1532    01:D4B3  90 03      			bcc	.rotate
 1533    01:D4B5  18         	.add:		clc
 1534    01:D4B6  65 EF      			adc.h	<map_line
 1535    01:D4B8  6A         	.rotate:	ror	a
 1536    01:D4B9  66 EE      			ror.l	<map_line		; Lo-byte of (BLK Y * width).
 1537    01:D4BB  88         			dey
 1538    01:D4BC  B0 F7      			bcs	.add
 1539    01:D4BE  D0 F8      			bne	.rotate
 1540    01:D4C0  85 EF      			sta.h	<map_line		; Hi-byte of (BLK Y * width).
 1541                        		.endif
 1542                        	
 1543    01:D4C2  20 F3 D2   			jsr	map_set_banks		; Put BLK & MAP in MPR2-MPR5.
 1544                        	
 1545                        			; Loop to here if drawing multiple regular blkmap rows.
 1546                        	
 1547    01:D4C5  A4 EF      	.regular_row:	ldy.h	<map_line		; Hi-byte of (BLK Y * width).
 1548    01:D4C7  A5 FC      			lda	<map_chr_x		; Map CHR X coordinate.
 1549    01:D4C9  4A         			lsr	a			; Map BLK X coordinate.
 1550    01:D4CA  18         			clc
 1551    01:D4CB  65 EE      			adc.l	<map_line		; Lo-byte of (BLK Y * width).
 1552    01:D4CD  90 01      			bcc	!+
 1553    01:D4CF  C8         			iny
 1554    01:D4D0  18         	!:		clc				; Calc map data pointer.
 1555    01:D4D1  7D 8C 28   			adc.l	vdc_map_addr, x
 1556    01:D4D4  85 EC      			sta.l	<_bp			; Maximum map size is 16KBytes
 1557    01:D4D6  98         			tya				; so we don't need to consider
 1558    01:D4D7  7D 8D 28   			adc.h	vdc_map_addr, x		; bank overflow.
 1559    01:D4DA  85 ED      			sta.h	<_bp
 1560                        	
 1561                        			; Draw the first part of the row.
 1562                        	
 1563    01:D4DC  A5 F9      	.draw_row:	lda	<map_bat_y		; Set the BAT VRAM destination
 1564    01:D4DE  85 F1      			sta.h	<_di			; coordinates.
 1565    01:D4E0  A5 F8      			lda	<map_bat_x
 1566    01:D4E2  85 F0      			sta.l	<_di
 1567                        	
 1568    01:D4E4  5D 4A 23   			eor	vdc_bat_x_mask, x	; Calc CHR before wrap.
 1569    01:D4E7  1A         			inc	a
 1570    01:D4E8  C5 FA      			cmp	<map_draw_w		; Usually (SCR_WIDTH / 8) + 1.
 1571    01:D4EA  90 02      			bcc	!+
 1572    01:D4EC  A5 FA      			lda	<map_draw_w		; Maximum CHR to draw.
 1573    01:D4EE  85 00      	!:		sta	<map_count		; Set number of CHR to draw.
 1574    01:D4F0  85 01      			sta	<map_drawn		; Preserve number of CHR drawn.
 1575                        	
 1576    01:D4F2  20 62 D5   			jsr	blk_row_strip		; Draw lhs of horizontal strip.
 1577                        	
 1578                        			; Wrap around and draw the rest of the row (if needed).
 1579                        	
 1580    01:D4F5  38         			sec				; Are there any more CHR that
 1581    01:D4F6  A5 FA      			lda	<map_draw_w		; need to be drawn?
 1582    01:D4F8  E5 01      			sbc	<map_drawn
 1583    01:D4FA  F0 2E      			beq	.done_row
 1584                        	
 1585    01:D4FC  85 00      			sta	<map_count		; Set number of CHR to draw.
 1586                        	
 1587    01:D4FE  A5 FC      			lda	<map_chr_x		; Update CHR X coordinate for
 1588    01:D500  48         			pha				; drawing unaligned tiles.
 1589    01:D501  18         			clc
 1590    01:D502  65 01      			adc	<map_drawn
 1591    01:D504  85 FC      			sta	<map_chr_x
 1592                        	
 1593               0001     		.if	BLKMAP_MULTISCR
 1594    01:D506  BD 91 28   			lda	vdc_scr_bank, x		; Skip this if regular blkmap.
 1595    01:D509  F0 11      			beq	!+
 1596                        	
 1597    01:D50B  E6 FD      			inc	<map_scrn_x		; Wrapped to the next screen.
 1598                        	
 1599    01:D50D  20 8D D2   			jsr	map_set_screen		; Locate screen's BLK and MAP.
 1600                        	
 1601    01:D510  18         			clc				; Calc map data pointer.
 1602    01:D511  A5 EE      			lda.l	<map_line
 1603    01:D513  85 EC      			sta.l	<_bp
 1604    01:D515  A5 EF      			lda.h	<map_line
 1605    01:D517  7D 8D 28   			adc.h	vdc_map_addr, x		; N.B. 256-byte aligned!
 1606    01:D51A  85 ED      			sta.h	<_bp
 1607                        		.endif
 1608                        	
 1609    01:D51C  A5 F9      	!:		lda	<map_bat_y		; Set the BAT VRAM destination
 1610    01:D51E  85 F1      			sta.h	<_di			; coordinates.
 1611    01:D520  64 F0      			stz.l	<_di			; Reset 1st column to draw.
 1612                        	
 1613    01:D522  20 62 D5   			jsr	blk_row_strip		; Draw rhs of horizontal strip.
 1614                        	
 1615               0001     		.if	BLKMAP_MULTISCR
 1616    01:D525  C6 FD      			dec	<map_scrn_x		; Restore, no check if should.
 1617                        		.endif	BLKMAP_MULTISCR
 1618                        	
 1619    01:D527  68         			pla				; Restore CHR X coordinate, we
 1620    01:D528  85 FC      			sta	<map_chr_x		; might draw another row!
 1621                        	
 1622    01:D52A  C6 FB      	.done_row:	dec	<map_draw_h		; Are all desired rows drawn?
 1623    01:D52C  F0 33      			beq	.finished
 1624                        	
 1625    01:D52E  E6 FE      			inc	<map_chr_y		; Move CHR Y down by 1.
 1626                        	
 1627    01:D530  A5 FE      			lda	<map_chr_y		; If new BLK then ...
 1628    01:D532  4A         			lsr	a
 1629    01:D533  B0 0B      			bcs	!+
 1630    01:D535  BD 4F 23   			lda	vdc_map_line_w, x	; Move the map line pointer to
 1631    01:D538  65 EE      			adc.l	<map_line		; the next line.
 1632    01:D53A  85 EE      			sta.l	<map_line
 1633    01:D53C  90 02      			bcc	!+
 1634    01:D53E  E6 EF      			inc.h	<map_line
 1635                        	
 1636    01:D540  A5 F9      	!:		lda	<map_bat_y		; Move BAT Y down by 1.
 1637    01:D542  1A         			inc	a
 1638    01:D543  3D 4B 23   			and	vdc_bat_y_mask, x
 1639    01:D546  85 F9      			sta	<map_bat_y
 1640                        	
 1641               0001     		.if	BLKMAP_MULTISCR
 1642    01:D548  BC 91 28   			ldy	vdc_scr_bank, x		; Skip this if regular blkmap.
 1643    01:D54B  D0 03 4C C5			beq	.regular_row
         01:D54F  D4          
 1644                        	
 1645    01:D550  A8         			tay				; If wrapped to the top line of
 1646    01:D551  D0 0B      			bne	!+			; of the BAT then increment the
 1647    01:D553  E6 FF      			inc	<map_scrn_y		; screen.
 1648                        	
 1649    01:D555  BD 4C 23   			lda	vdc_bat_limit, x	; The map line must wrap around
 1650    01:D558  4A         			lsr	a			; too. This is simple since its
 1651    01:D559  4A         			lsr	a			; size (in bytes) is 1/4 of the
 1652    01:D55A  25 EF      			and.h	<map_line		; BAT size (in words) and it is
 1653    01:D55C  85 EF      			sta.h	<map_line		; a power-of-2.
 1654                        	
 1655    01:D55E  4C 68 D4   	!:		jmp	.multiscr_row		; Draw next row.
 1656                        		.else
 1658                        		.endif	BLKMAP_MULTISCR
 1659                        	
 1660    01:D561  60         	.finished:	rts
 1661                        	
 1662                        	
 1663                        	
 1664               0000     		.if	BLKDEF_POINTERS
 1858                        		.else	BLKDEF_POINTERS
 1859                        	
 1860                        	
 1861                        	
 1862                        	; ***************************************************************************
 1863                        	; ***************************************************************************
 1864                        	;
 1865                        	; blk_row_strip - Draw a single row of CHR into the BAT.
 1866                        	;
 1867                        	
 1868    01:D562  20 34 E4   	blk_row_strip:	jsr	set_di_xy_mawr		; Set the BAT VRAM destination.
 1869                        	
 1870    01:D565  A5 FC      			lda	<map_chr_x		; Select what drawing code to
 1871    01:D567  4A         			lsr	a			; use depending upon even/odd
 1872    01:D568  A5 FE      			lda	<map_chr_y		; CHR coordinates (not BAT to
 1873    01:D56A  29 01      			and	#1			; support unaligned drawing).
 1874    01:D56C  2A         			rol	a
 1875    01:D56D  0A         			asl	a
 1876    01:D56E  1D 8A 28   			ora.h	vdc_blk_addr, x		; What is the BLK data address?
 1877    01:D571  29 1E      			and	#%00011110		; $4000, $4800, $5000 or $5800.
 1878    01:D573  A8         			tay
 1879    01:D574  B9 81 D5   			lda.h	.jump_table, y		; Push the address of the code.
 1880    01:D577  48         			pha
 1881    01:D578  B9 80 D5   			lda.l	.jump_table, y
 1882    01:D57B  48         			pha
 1883                        	
 1884    01:D57C  B2 EC      			lda	[_bp]			; Get the first BLK number.
 1885    01:D57E  A8         			tay
 1886                        	
 1887    01:D57F  60         			rts				; Jump to the drawing code.
 1888                        	
 1889    01:D580  A2 D5      	.jump_table:	dw	b4000_top_even - 1
 1890    01:D582  B5 D5      			dw	b4000_top_odd - 1
 1891    01:D584  D2 D5      			dw	b4000_btm_even - 1
 1892    01:D586  E5 D5      			dw	b4000_btm_odd - 1
 1893                        	
 1894    01:D588  02 D6      			dw	b4800_top_even - 1
 1895    01:D58A  15 D6      			dw	b4800_top_odd - 1
 1896    01:D58C  32 D6      			dw	b4800_btm_even - 1
 1897    01:D58E  45 D6      			dw	b4800_btm_odd - 1
 1898                        	
 1899    01:D590  62 D6      			dw	b5000_top_even - 1
 1900    01:D592  75 D6      			dw	b5000_top_odd - 1
 1901    01:D594  92 D6      			dw	b5000_btm_even - 1
 1902    01:D596  A5 D6      			dw	b5000_btm_odd - 1
 1903                        	
 1904    01:D598  C2 D6      			dw	b5800_top_even - 1
 1905    01:D59A  D5 D6      			dw	b5800_top_odd - 1
 1906    01:D59C  F2 D6      			dw	b5800_btm_even - 1
 1907    01:D59E  05 D7      			dw	b5800_btm_odd - 1
 1908                        	
 1909                        			; top horizontal (32+2 rept)
 1910                        			;
 1911                        			; 89 cycles per block * 17 -> 1513 cycles
 1912                        	
 1913    01:D5A0  B2 EC      	!repeat:	lda	[_bp]			; 7
 1914    01:D5A2  A8         			tay				; 2
 1915                        	
 1916    01:D5A3  B9 00 40   	b4000_top_even:	lda	BLK_4000_TL_L, y	; 5
 1917    01:D5A6  9D 02 02   			sta	VDC_DL, x		; 6
 1918    01:D5A9  B9 00 44   			lda	BLK_4000_TL_H, y	; 5
 1919               0001     		.if	BLKDEF_CHR_FLAG
 1920    01:D5AC  29 F3      			and	#%11110011		; 2
 1921                        		.endif
 1922    01:D5AE  1A         			inc	a			; 2
 1923    01:D5AF  9D 03 02   			sta	VDC_DH, x		; 6
 1924                        	
 1925    01:D5B2  C6 00      			dec	<map_count		; 6
 1926    01:D5B4  F0 19      			beq	!end+			; 2
 1927                        	
 1928    01:D5B6  B9 00 41   	b4000_top_odd:	lda	BLK_4000_TR_L, y	; 5
 1929    01:D5B9  9D 02 02   			sta	VDC_DL, x		; 6
 1930    01:D5BC  B9 00 45   			lda	BLK_4000_TR_H, y	; 5
 1931               0001     		.if	BLKDEF_CHR_FLAG
 1932    01:D5BF  29 F3      			and	#%11110011		; 2
 1933                        		.endif
 1934    01:D5C1  1A         			inc	a			; 2
 1935    01:D5C2  9D 03 02   			sta	VDC_DH, x		; 6
 1936                        	
 1937    01:D5C5  E6 EC      			inc.l	<_bp			; 6
 1938    01:D5C7  D0 02      			bne	!+			; 2/4
 1939    01:D5C9  E6 ED      			inc.h	<_bp			; 6
 1940                        	
 1941    01:D5CB  C6 00      	!:		dec	<map_count		; 6
 1942    01:D5CD  D0 D1      			bne	!repeat-		; 4
 1943                        	
 1944    01:D5CF  60         	!end:		rts
 1945                        	
 1946                        			; btm horizontal (32+2 rept)
 1947                        			;
 1948                        			; 89 cycles per block * 17 -> 1513 cycles
 1949                        	
 1950    01:D5D0  B2 EC      	!repeat:	lda	[_bp]			; 7
 1951    01:D5D2  A8         			tay				; 2
 1952                        	
 1953    01:D5D3  B9 00 42   	b4000_btm_even:	lda	BLK_4000_BL_L, y	; 5
 1954    01:D5D6  9D 02 02   			sta	VDC_DL, x		; 6
 1955    01:D5D9  B9 00 46   			lda	BLK_4000_BL_H, y	; 5
 1956               0001     		.if	BLKDEF_CHR_FLAG
 1957    01:D5DC  29 F3      			and	#%11110011		; 2
 1958                        		.endif
 1959    01:D5DE  1A         			inc	a			; 2
 1960    01:D5DF  9D 03 02   			sta	VDC_DH, x		; 6
 1961                        	
 1962    01:D5E2  C6 00      			dec	<map_count		; 6
 1963    01:D5E4  F0 19      			beq	!end+			; 2
 1964                        	
 1965    01:D5E6  B9 00 43   	b4000_btm_odd:	lda	BLK_4000_BR_L, y	; 5
 1966    01:D5E9  9D 02 02   			sta	VDC_DL, x		; 6
 1967    01:D5EC  B9 00 47   			lda	BLK_4000_BR_H, y	; 5
 1968               0001     		.if	BLKDEF_CHR_FLAG
 1969    01:D5EF  29 F3      			and	#%11110011		; 2
 1970                        		.endif
 1971    01:D5F1  1A         			inc	a			; 2
 1972    01:D5F2  9D 03 02   			sta	VDC_DH, x		; 6
 1973                        	
 1974    01:D5F5  E6 EC      			inc.l	<_bp			; 6
 1975    01:D5F7  D0 02      			bne	!+			; 2/4
 1976    01:D5F9  E6 ED      			inc.h	<_bp			; 6
 1977                        	
 1978    01:D5FB  C6 00      	!:		dec	<map_count		; 6
 1979    01:D5FD  D0 D1      			bne	!repeat-		; 4
 1980                        	
 1981    01:D5FF  60         	!end:		rts
 1982                        	
 1983                        			; top horizontal (32+2 rept)
 1984                        			;
 1985                        			; 89 cycles per block * 17 -> 1513 cycles
 1986                        	
 1987    01:D600  B2 EC      	!repeat:	lda	[_bp]			; 7
 1988    01:D602  A8         			tay				; 2
 1989                        	
 1990    01:D603  B9 00 48   	b4800_top_even:	lda	BLK_4800_TL_L, y	; 5
 1991    01:D606  9D 02 02   			sta	VDC_DL, x		; 6
 1992    01:D609  B9 00 4C   			lda	BLK_4800_TL_H, y	; 5
 1993               0001     		.if	BLKDEF_CHR_FLAG
 1994    01:D60C  29 F3      			and	#%11110011		; 2
 1995                        		.endif
 1996    01:D60E  1A         			inc	a			; 2
 1997    01:D60F  9D 03 02   			sta	VDC_DH, x		; 6
 1998                        	
 1999    01:D612  C6 00      			dec	<map_count		; 6
 2000    01:D614  F0 19      			beq	!end+			; 2
 2001                        	
 2002    01:D616  B9 00 49   	b4800_top_odd:	lda	BLK_4800_TR_L, y	; 5
 2003    01:D619  9D 02 02   			sta	VDC_DL, x		; 6
 2004    01:D61C  B9 00 4D   			lda	BLK_4800_TR_H, y	; 5
 2005               0001     		.if	BLKDEF_CHR_FLAG
 2006    01:D61F  29 F3      			and	#%11110011		; 2
 2007                        		.endif
 2008    01:D621  1A         			inc	a			; 2
 2009    01:D622  9D 03 02   			sta	VDC_DH, x		; 6
 2010                        	
 2011    01:D625  E6 EC      			inc.l	<_bp			; 6
 2012    01:D627  D0 02      			bne	!+			; 2/4
 2013    01:D629  E6 ED      			inc.h	<_bp			; 6
 2014                        	
 2015    01:D62B  C6 00      	!:		dec	<map_count		; 6
 2016    01:D62D  D0 D1      			bne	!repeat-		; 4
 2017                        	
 2018    01:D62F  60         	!end:		rts
 2019                        	
 2020                        			; btm horizontal (32+2 rept)
 2021                        			;
 2022                        			; 89 cycles per block * 17 -> 1513 cycles
 2023                        	
 2024    01:D630  B2 EC      	!repeat:	lda	[_bp]			; 7
 2025    01:D632  A8         			tay				; 2
 2026                        	
 2027    01:D633  B9 00 4A   	b4800_btm_even:	lda	BLK_4800_BL_L, y	; 5
 2028    01:D636  9D 02 02   			sta	VDC_DL, x		; 6
 2029    01:D639  B9 00 4E   			lda	BLK_4800_BL_H, y	; 5
 2030               0001     		.if	BLKDEF_CHR_FLAG
 2031    01:D63C  29 F3      			and	#%11110011		; 2
 2032                        		.endif
 2033    01:D63E  1A         			inc	a			; 2
 2034    01:D63F  9D 03 02   			sta	VDC_DH, x		; 6
 2035                        	
 2036    01:D642  C6 00      			dec	<map_count		; 6
 2037    01:D644  F0 19      			beq	!end+			; 2
 2038                        	
 2039    01:D646  B9 00 4B   	b4800_btm_odd:	lda	BLK_4800_BR_L, y	; 5
 2040    01:D649  9D 02 02   			sta	VDC_DL, x		; 6
 2041    01:D64C  B9 00 4F   			lda	BLK_4800_BR_H, y	; 5
 2042               0001     		.if	BLKDEF_CHR_FLAG
 2043    01:D64F  29 F3      			and	#%11110011		; 2
 2044                        		.endif
 2045    01:D651  1A         			inc	a			; 2
 2046    01:D652  9D 03 02   			sta	VDC_DH, x		; 6
 2047                        	
 2048    01:D655  E6 EC      			inc.l	<_bp			; 6
 2049    01:D657  D0 02      			bne	!+			; 2/4
 2050    01:D659  E6 ED      			inc.h	<_bp			; 6
 2051                        	
 2052    01:D65B  C6 00      	!:		dec	<map_count		; 6
 2053    01:D65D  D0 D1      			bne	!repeat-		; 4
 2054                        	
 2055    01:D65F  60         	!end:		rts
 2056                        	
 2057                        			; top horizontal (32+2 rept)
 2058                        			;
 2059                        			; 89 cycles per block * 17 -> 1513 cycles
 2060                        	
 2061    01:D660  B2 EC      	!repeat:	lda	[_bp]			; 7
 2062    01:D662  A8         			tay				; 2
 2063                        	
 2064    01:D663  B9 00 50   	b5000_top_even:	lda	BLK_5000_TL_L, y	; 5
 2065    01:D666  9D 02 02   			sta	VDC_DL, x		; 6
 2066    01:D669  B9 00 54   			lda	BLK_5000_TL_H, y	; 5
 2067               0001     		.if	BLKDEF_CHR_FLAG
 2068    01:D66C  29 F3      			and	#%11110011		; 2
 2069                        		.endif
 2070    01:D66E  1A         			inc	a			; 2
 2071    01:D66F  9D 03 02   			sta	VDC_DH, x		; 6
 2072                        	
 2073    01:D672  C6 00      			dec	<map_count		; 6
 2074    01:D674  F0 19      			beq	!end+			; 2
 2075                        	
 2076    01:D676  B9 00 51   	b5000_top_odd:	lda	BLK_5000_TR_L, y	; 5
 2077    01:D679  9D 02 02   			sta	VDC_DL, x		; 6
 2078    01:D67C  B9 00 55   			lda	BLK_5000_TR_H, y	; 5
 2079               0001     		.if	BLKDEF_CHR_FLAG
 2080    01:D67F  29 F3      			and	#%11110011		; 2
 2081                        		.endif
 2082    01:D681  1A         			inc	a			; 2
 2083    01:D682  9D 03 02   			sta	VDC_DH, x		; 6
 2084                        	
 2085    01:D685  E6 EC      			inc.l	<_bp			; 6
 2086    01:D687  D0 02      			bne	!+			; 2/4
 2087    01:D689  E6 ED      			inc.h	<_bp			; 6
 2088                        	
 2089    01:D68B  C6 00      	!:		dec	<map_count		; 6
 2090    01:D68D  D0 D1      			bne	!repeat-		; 4
 2091                        	
 2092    01:D68F  60         	!end:		rts
 2093                        	
 2094                        			; btm horizontal (32+2 rept)
 2095                        			;
 2096                        			; 89 cycles per block * 17 -> 1513 cycles
 2097                        	
 2098    01:D690  B2 EC      	!repeat:	lda	[_bp]			; 7
 2099    01:D692  A8         			tay				; 2
 2100                        	
 2101    01:D693  B9 00 52   	b5000_btm_even:	lda	BLK_5000_BL_L, y	; 5
 2102    01:D696  9D 02 02   			sta	VDC_DL, x		; 6
 2103    01:D699  B9 00 56   			lda	BLK_5000_BL_H, y	; 5
 2104               0001     		.if	BLKDEF_CHR_FLAG
 2105    01:D69C  29 F3      			and	#%11110011		; 2
 2106                        		.endif
 2107    01:D69E  1A         			inc	a			; 2
 2108    01:D69F  9D 03 02   			sta	VDC_DH, x		; 6
 2109                        	
 2110    01:D6A2  C6 00      			dec	<map_count		; 6
 2111    01:D6A4  F0 19      			beq	!end+			; 2
 2112                        	
 2113    01:D6A6  B9 00 53   	b5000_btm_odd:	lda	BLK_5000_BR_L, y	; 5
 2114    01:D6A9  9D 02 02   			sta	VDC_DL, x		; 6
 2115    01:D6AC  B9 00 57   			lda	BLK_5000_BR_H, y	; 5
 2116               0001     		.if	BLKDEF_CHR_FLAG
 2117    01:D6AF  29 F3      			and	#%11110011		; 2
 2118                        		.endif
 2119    01:D6B1  1A         			inc	a			; 2
 2120    01:D6B2  9D 03 02   			sta	VDC_DH, x		; 6
 2121                        	
 2122    01:D6B5  E6 EC      			inc.l	<_bp			; 6
 2123    01:D6B7  D0 02      			bne	!+			; 2/4
 2124    01:D6B9  E6 ED      			inc.h	<_bp			; 6
 2125                        	
 2126    01:D6BB  C6 00      	!:		dec	<map_count		; 6
 2127    01:D6BD  D0 D1      			bne	!repeat-		; 4
 2128                        	
 2129    01:D6BF  60         	!end:		rts
 2130                        	
 2131                        			; top horizontal (32+2 rept)
 2132                        			;
 2133                        			; 89 cycles per block * 17 -> 1513 cycles
 2134                        	
 2135    01:D6C0  B2 EC      	!repeat:	lda	[_bp]			; 7
 2136    01:D6C2  A8         			tay				; 2
 2137                        	
 2138    01:D6C3  B9 00 58   	b5800_top_even:	lda	BLK_5800_TL_L, y	; 5
 2139    01:D6C6  9D 02 02   			sta	VDC_DL, x		; 6
 2140    01:D6C9  B9 00 5C   			lda	BLK_5800_TL_H, y	; 5
 2141               0001     		.if	BLKDEF_CHR_FLAG
 2142    01:D6CC  29 F3      			and	#%11110011		; 2
 2143                        		.endif
 2144    01:D6CE  1A         			inc	a			; 2
 2145    01:D6CF  9D 03 02   			sta	VDC_DH, x		; 6
 2146                        	
 2147    01:D6D2  C6 00      			dec	<map_count		; 6
 2148    01:D6D4  F0 19      			beq	!end+			; 2
 2149                        	
 2150    01:D6D6  B9 00 59   	b5800_top_odd:	lda	BLK_5800_TR_L, y	; 5
 2151    01:D6D9  9D 02 02   			sta	VDC_DL, x		; 6
 2152    01:D6DC  B9 00 5D   			lda	BLK_5800_TR_H, y	; 5
 2153               0001     		.if	BLKDEF_CHR_FLAG
 2154    01:D6DF  29 F3      			and	#%11110011		; 2
 2155                        		.endif
 2156    01:D6E1  1A         			inc	a			; 2
 2157    01:D6E2  9D 03 02   			sta	VDC_DH, x		; 6
 2158                        	
 2159    01:D6E5  E6 EC      			inc.l	<_bp			; 6
 2160    01:D6E7  D0 02      			bne	!+			; 2/4
 2161    01:D6E9  E6 ED      			inc.h	<_bp			; 6
 2162                        	
 2163    01:D6EB  C6 00      	!:		dec	<map_count		; 6
 2164    01:D6ED  D0 D1      			bne	!repeat-		; 4
 2165                        	
 2166    01:D6EF  60         	!end:		rts
 2167                        	
 2168                        			; btm horizontal (32+2 rept)
 2169                        			;
 2170                        			; 89 cycles per block * 17 -> 1513 cycles
 2171                        	
 2172    01:D6F0  B2 EC      	!repeat:	lda	[_bp]		; 7
 2173    01:D6F2  A8         			tay				; 2
 2174                        	
 2175    01:D6F3  B9 00 5A   	b5800_btm_even:	lda	BLK_5800_BL_L, y	; 5
 2176    01:D6F6  9D 02 02   			sta	VDC_DL, x		; 6
 2177    01:D6F9  B9 00 5E   			lda	BLK_5800_BL_H, y	; 5
 2178               0001     		.if	BLKDEF_CHR_FLAG
 2179    01:D6FC  29 F3      			and	#%11110011		; 2
 2180                        		.endif
 2181    01:D6FE  1A         			inc	a			; 2
 2182    01:D6FF  9D 03 02   			sta	VDC_DH, x		; 6
 2183                        	
 2184    01:D702  C6 00      			dec	<map_count		; 6
 2185    01:D704  F0 19      			beq	!end+			; 2
 2186                        	
 2187    01:D706  B9 00 5B   	b5800_btm_odd:	lda	BLK_5800_BR_L, y	; 5
 2188    01:D709  9D 02 02   			sta	VDC_DL, x		; 6
 2189    01:D70C  B9 00 5F   			lda	BLK_5800_BR_H, y	; 5
 2190               0001     		.if	BLKDEF_CHR_FLAG
 2191    01:D70F  29 F3      			and	#%11110011		; 2
 2192                        		.endif
 2193    01:D711  1A         			inc	a			; 2
 2194    01:D712  9D 03 02   			sta	VDC_DH, x		; 6
 2195                        	
 2196    01:D715  E6 EC      			inc.l	<_bp			; 6
 2197    01:D717  D0 02      			bne	!+			; 2/4
 2198    01:D719  E6 ED      			inc.h	<_bp			; 6
 2199                        	
 2200    01:D71B  C6 00      	!:		dec	<map_count		; 6
 2201    01:D71D  D0 D1      			bne	!repeat-		; 4
 2202                        	
 2203    01:D71F  60         	!end:		rts
 2204                        	
 2205                        	
 2206                        	
 2207                        	; ***************************************************************************
 2208                        	; ***************************************************************************
 2209                        	;
 2210                        	; blk_col_strip - Draw a single column of CHR into the BAT.
 2211                        	;
 2212                        	
 2213    01:D720  20 34 E4   	blk_col_strip:	jsr	set_di_xy_mawr		; Set the BAT VRAM destination.
 2214                        	
 2215    01:D723  A5 FC      			lda	<map_chr_x		; Select what drawing code to
 2216    01:D725  4A         			lsr	a			; use depending upon even/odd
 2217    01:D726  A5 FE      			lda	<map_chr_y		; CHR coordinates (not BAT to
 2218    01:D728  29 01      			and	#1			; support unaligned drawing).
 2219    01:D72A  2A         			rol	a
 2220    01:D72B  0A         			asl	a			; N.B. Always leaves C clear.
 2221    01:D72C  1D 8A 28   			ora.h	vdc_blk_addr, x		; What is the BLK data address?
 2222    01:D72F  29 1E      			and	#%00011110		; $4000, $4800, $5000 or $5800.
 2223    01:D731  A8         			tay
 2224    01:D732  B9 3F D7   			lda.h	.jump_table, y		; Push the address of the code.
 2225    01:D735  48         			pha
 2226    01:D736  B9 3E D7   			lda.l	.jump_table, y
 2227    01:D739  48         			pha
 2228                        	
 2229    01:D73A  B2 EC      			lda	[_bp]			; Get the first BLK number.
 2230    01:D73C  A8         			tay
 2231                        	
 2232    01:D73D  60         			rts				; Jump to the drawing code.
 2233                        	
 2234    01:D73E  60 D7      	.jump_table:	dw	b4000_lhs_even - 1
 2235    01:D740  96 D7      			dw	b4000_rhs_even - 1
 2236    01:D742  73 D7      			dw	b4000_lhs_odd - 1
 2237    01:D744  A9 D7      			dw	b4000_rhs_odd - 1
 2238                        	
 2239    01:D746  CC D7      			dw	b4800_lhs_even - 1
 2240    01:D748  02 D8      			dw	b4800_rhs_even - 1
 2241    01:D74A  DF D7      			dw	b4800_lhs_odd - 1
 2242    01:D74C  15 D8      			dw	b4800_rhs_odd - 1
 2243                        	
 2244    01:D74E  38 D8      			dw	b5000_lhs_even - 1
 2245    01:D750  6E D8      			dw	b5000_rhs_even - 1
 2246    01:D752  4B D8      			dw	b5000_lhs_odd - 1
 2247    01:D754  81 D8      			dw	b5000_rhs_odd - 1
 2248                        	
 2249    01:D756  A4 D8      			dw	b5800_lhs_even - 1
 2250    01:D758  DA D8      			dw	b5800_rhs_even - 1
 2251    01:D75A  B7 D8      			dw	b5800_lhs_odd - 1
 2252    01:D75C  ED D8      			dw	b5800_rhs_odd - 1
 2253                        	
 2254                        			; lhs vertical (28+2 rept)
 2255                        			;
 2256                        			; N.B. C is always clear on entry.
 2257                        			;
 2258                        			; 100 cycles per block * 15 -> 1500 cycles
 2259                        	
 2260    01:D75E  B2 EC      	!repeat:	lda	[_bp]			; 7
 2261    01:D760  A8         			tay				; 2
 2262                        	
 2263    01:D761  B9 00 40   	b4000_lhs_even:	lda	BLK_4000_TL_L, y	; 5
 2264    01:D764  9D 02 02   			sta	VDC_DL, x		; 6
 2265    01:D767  B9 00 44   			lda	BLK_4000_TL_H, y	; 5
 2266               0001     		.if	BLKDEF_CHR_FLAG
 2267    01:D76A  29 F3      			and	#%11110011		; 2
 2268                        		.endif
 2269    01:D76C  1A         			inc	a			; 2
 2270    01:D76D  9D 03 02   			sta	VDC_DH, x		; 6
 2271                        	
 2272    01:D770  C6 00      			dec	<map_count		; 6
 2273    01:D772  F0 1F      			beq	!end+			; 2
 2274                        	
 2275    01:D774  B9 00 42   	b4000_lhs_odd:	lda	BLK_4000_BL_L, y	; 5
 2276    01:D777  9D 02 02   			sta	VDC_DL, x		; 6
 2277    01:D77A  B9 00 46   			lda	BLK_4000_BL_H, y	; 5
 2278               0001     		.if	BLKDEF_CHR_FLAG
 2279    01:D77D  29 F3      			and	#%11110011		; 2
 2280                        		.endif
 2281    01:D77F  1A         			inc	a			; 2
 2282    01:D780  9D 03 02   			sta	VDC_DH, x		; 6
 2283                        	
 2284    01:D783  BD 4F 23   			lda	vdc_map_line_w, x	; 5
 2285    01:D786  65 EC      			adc.l	<_bp			; 4
 2286    01:D788  85 EC      			sta.l	<_bp			; 4
 2287    01:D78A  90 03      			bcc	!+			; 2/4
 2288    01:D78C  E6 ED      			inc.h	<_bp			; 6
 2289    01:D78E  18         			clc				; 2
 2290                        	
 2291    01:D78F  C6 00      	!:		dec	<map_count		; 6
 2292    01:D791  D0 CB      			bne	!repeat-		; 4
 2293                        	
 2294    01:D793  60         	!end:		rts
 2295                        	
 2296                        			; rhs vertical (28+2 rept)
 2297                        			;
 2298                        			; N.B. C is always clear on entry.
 2299                        			;
 2300                        			; 100 cycles per block * 15 -> 1500 cycles
 2301                        	
 2302    01:D794  B2 EC      	!repeat:	lda	[_bp]			; 7
 2303    01:D796  A8         			tay				; 2
 2304                        	
 2305    01:D797  B9 00 41   	b4000_rhs_even:	lda	BLK_4000_TR_L, y	; 5
 2306    01:D79A  9D 02 02   			sta	VDC_DL, x		; 6
 2307    01:D79D  B9 00 45   			lda	BLK_4000_TR_H, y	; 5
 2308               0001     		.if	BLKDEF_CHR_FLAG
 2309    01:D7A0  29 F3      			and	#%11110011		; 2
 2310                        		.endif
 2311    01:D7A2  1A         			inc	a			; 2
 2312    01:D7A3  9D 03 02   			sta	VDC_DH, x		; 6
 2313                        	
 2314    01:D7A6  C6 00      			dec	<map_count		; 6
 2315    01:D7A8  F0 1F      			beq	!end+			; 2
 2316                        	
 2317    01:D7AA  B9 00 43   	b4000_rhs_odd:	lda	BLK_4000_BR_L, y	; 5
 2318    01:D7AD  9D 02 02   			sta	VDC_DL, x		; 6
 2319    01:D7B0  B9 00 47   			lda	BLK_4000_BR_H, y	; 5
 2320               0001     		.if	BLKDEF_CHR_FLAG
 2321    01:D7B3  29 F3      			and	#%11110011		; 2
 2322                        		.endif
 2323    01:D7B5  1A         			inc	a			; 2
 2324    01:D7B6  9D 03 02   			sta	VDC_DH, x		; 6
 2325                        	
 2326    01:D7B9  BD 4F 23   			lda	vdc_map_line_w, x	; 5
 2327    01:D7BC  65 EC      			adc.l	<_bp			; 4
 2328    01:D7BE  85 EC      			sta.l	<_bp			; 4
 2329    01:D7C0  90 03      			bcc	!+			; 2/4
 2330    01:D7C2  E6 ED      			inc.h	<_bp			; 6
 2331    01:D7C4  18         			clc				; 2
 2332                        	
 2333    01:D7C5  C6 00      	!:		dec	<map_count		; 6
 2334    01:D7C7  D0 CB      			bne	!repeat-		; 4
 2335                        	
 2336    01:D7C9  60         	!end:		rts
 2337                        	
 2338                        			; lhs vertical (28+2 rept)
 2339                        			;
 2340                        			; N.B. C is always clear on entry.
 2341                        			;
 2342                        			; 100 cycles per block * 15 -> 1500 cycles
 2343                        	
 2344    01:D7CA  B2 EC      	!repeat:	lda	[_bp]			; 7
 2345    01:D7CC  A8         			tay				; 2
 2346                        	
 2347    01:D7CD  B9 00 48   	b4800_lhs_even:	lda	BLK_4800_TL_L, y	; 5
 2348    01:D7D0  9D 02 02   			sta	VDC_DL, x		; 6
 2349    01:D7D3  B9 00 4C   			lda	BLK_4800_TL_H, y	; 5
 2350               0001     		.if	BLKDEF_CHR_FLAG
 2351    01:D7D6  29 F3      			and	#%11110011		; 2
 2352                        		.endif
 2353    01:D7D8  1A         			inc	a			; 2
 2354    01:D7D9  9D 03 02   			sta	VDC_DH, x		; 6
 2355                        	
 2356    01:D7DC  C6 00      			dec	<map_count		; 6
 2357    01:D7DE  F0 1F      			beq	!end+			; 2
 2358                        	
 2359    01:D7E0  B9 00 4A   	b4800_lhs_odd:	lda	BLK_4800_BL_L, y	; 5
 2360    01:D7E3  9D 02 02   			sta	VDC_DL, x		; 6
 2361    01:D7E6  B9 00 4E   			lda	BLK_4800_BL_H, y	; 5
 2362               0001     		.if	BLKDEF_CHR_FLAG
 2363    01:D7E9  29 F3      			and	#%11110011		; 2
 2364                        		.endif
 2365    01:D7EB  1A         			inc	a			; 2
 2366    01:D7EC  9D 03 02   			sta	VDC_DH, x		; 6
 2367                        	
 2368    01:D7EF  BD 4F 23   			lda	vdc_map_line_w, x	; 5
 2369    01:D7F2  65 EC      			adc.l	<_bp			; 4
 2370    01:D7F4  85 EC      			sta.l	<_bp			; 4
 2371    01:D7F6  90 03      			bcc	!+			; 2/4
 2372    01:D7F8  E6 ED      			inc.h	<_bp			; 6
 2373    01:D7FA  18         			clc				; 2
 2374                        	
 2375    01:D7FB  C6 00      	!:		dec	<map_count		; 6
 2376    01:D7FD  D0 CB      			bne	!repeat-		; 4
 2377                        	
 2378    01:D7FF  60         	!end:		rts
 2379                        	
 2380                        			; rhs vertical (28+2 rept)
 2381                        			;
 2382                        			; N.B. C is always clear on entry.
 2383                        			;
 2384                        			; 100 cycles per block * 15 -> 1500 cycles
 2385                        	
 2386    01:D800  B2 EC      	!repeat:	lda	[_bp]			; 7
 2387    01:D802  A8         			tay				; 2
 2388                        	
 2389    01:D803  B9 00 49   	b4800_rhs_even:	lda	BLK_4800_TR_L, y	; 5
 2390    01:D806  9D 02 02   			sta	VDC_DL, x		; 6
 2391    01:D809  B9 00 4D   			lda	BLK_4800_TR_H, y	; 5
 2392               0001     		.if	BLKDEF_CHR_FLAG
 2393    01:D80C  29 F3      			and	#%11110011		; 2
 2394                        		.endif
 2395    01:D80E  1A         			inc	a			; 2
 2396    01:D80F  9D 03 02   			sta	VDC_DH, x		; 6
 2397                        	
 2398    01:D812  C6 00      			dec	<map_count		; 6
 2399    01:D814  F0 1F      			beq	!end+			; 2
 2400                        	
 2401    01:D816  B9 00 4B   	b4800_rhs_odd:	lda	BLK_4800_BR_L, y	; 5
 2402    01:D819  9D 02 02   			sta	VDC_DL, x		; 6
 2403    01:D81C  B9 00 4F   			lda	BLK_4800_BR_H, y	; 5
 2404               0001     		.if	BLKDEF_CHR_FLAG
 2405    01:D81F  29 F3      			and	#%11110011		; 2
 2406                        		.endif
 2407    01:D821  1A         			inc	a			; 2
 2408    01:D822  9D 03 02   			sta	VDC_DH, x		; 6
 2409                        	
 2410    01:D825  BD 4F 23   			lda	vdc_map_line_w, x	; 5
 2411    01:D828  65 EC      			adc.l	<_bp			; 4
 2412    01:D82A  85 EC      			sta.l	<_bp			; 4
 2413    01:D82C  90 03      			bcc	!+			; 2/4
 2414    01:D82E  E6 ED      			inc.h	<_bp			; 6
 2415    01:D830  18         			clc				; 2
 2416                        	
 2417    01:D831  C6 00      	!:		dec	<map_count		; 6
 2418    01:D833  D0 CB      			bne	!repeat-		; 4
 2419                        	
 2420    01:D835  60         	!end:		rts
 2421                        	
 2422                        			; lhs vertical (28+2 rept)
 2423                        			;
 2424                        			; N.B. C is always clear on entry.
 2425                        			;
 2426                        			; 100 cycles per block * 15 -> 1500 cycles
 2427                        	
 2428    01:D836  B2 EC      	!repeat:	lda	[_bp]			; 7
 2429    01:D838  A8         			tay				; 2
 2430                        	
 2431    01:D839  B9 00 50   	b5000_lhs_even:	lda	BLK_5000_TL_L, y	; 5
 2432    01:D83C  9D 02 02   			sta	VDC_DL, x		; 6
 2433    01:D83F  B9 00 54   			lda	BLK_5000_TL_H, y	; 5
 2434               0001     		.if	BLKDEF_CHR_FLAG
 2435    01:D842  29 F3      			and	#%11110011		; 2
 2436                        		.endif
 2437    01:D844  1A         			inc	a			; 2
 2438    01:D845  9D 03 02   			sta	VDC_DH, x		; 6
 2439                        	
 2440    01:D848  C6 00      			dec	<map_count		; 6
 2441    01:D84A  F0 1F      			beq	!end+			; 2
 2442                        	
 2443    01:D84C  B9 00 52   	b5000_lhs_odd:	lda	BLK_5000_BL_L, y	; 5
 2444    01:D84F  9D 02 02   			sta	VDC_DL, x		; 6
 2445    01:D852  B9 00 56   			lda	BLK_5000_BL_H, y	; 5
 2446               0001     		.if	BLKDEF_CHR_FLAG
 2447    01:D855  29 F3      			and	#%11110011		; 2
 2448                        		.endif
 2449    01:D857  1A         			inc	a			; 2
 2450    01:D858  9D 03 02   			sta	VDC_DH, x		; 6
 2451                        	
 2452    01:D85B  BD 4F 23   			lda	vdc_map_line_w, x	; 5
 2453    01:D85E  65 EC      			adc.l	<_bp			; 4
 2454    01:D860  85 EC      			sta.l	<_bp			; 4
 2455    01:D862  90 03      			bcc	!+			; 2/4
 2456    01:D864  E6 ED      			inc.h	<_bp			; 6
 2457    01:D866  18         			clc				; 2
 2458                        	
 2459    01:D867  C6 00      	!:		dec	<map_count		; 6
 2460    01:D869  D0 CB      			bne	!repeat-		; 4
 2461                        	
 2462    01:D86B  60         	!end:		rts
 2463                        	
 2464                        			; rhs vertical (28+2 rept)
 2465                        			;
 2466                        			; N.B. C is always clear on entry.
 2467                        			;
 2468                        			; 100 cycles per block * 15 -> 1500 cycles
 2469                        	
 2470    01:D86C  B2 EC      	!repeat:	lda	[_bp]			; 7
 2471    01:D86E  A8         			tay				; 2
 2472                        	
 2473    01:D86F  B9 00 51   	b5000_rhs_even:	lda	BLK_5000_TR_L, y	; 5
 2474    01:D872  9D 02 02   			sta	VDC_DL, x		; 6
 2475    01:D875  B9 00 55   			lda	BLK_5000_TR_H, y	; 5
 2476               0001     		.if	BLKDEF_CHR_FLAG
 2477    01:D878  29 F3      			and	#%11110011		; 2
 2478                        		.endif
 2479    01:D87A  1A         			inc	a			; 2
 2480    01:D87B  9D 03 02   			sta	VDC_DH, x		; 6
 2481                        	
 2482    01:D87E  C6 00      			dec	<map_count		; 6
 2483    01:D880  F0 1F      			beq	!end+			; 2
 2484                        	
 2485    01:D882  B9 00 53   	b5000_rhs_odd:	lda	BLK_5000_BR_L, y	; 5
 2486    01:D885  9D 02 02   			sta	VDC_DL, x		; 6
 2487    01:D888  B9 00 57   			lda	BLK_5000_BR_H, y	; 5
 2488               0001     		.if	BLKDEF_CHR_FLAG
 2489    01:D88B  29 F3      			and	#%11110011		; 2
 2490                        		.endif
 2491    01:D88D  1A         			inc	a			; 2
 2492    01:D88E  9D 03 02   			sta	VDC_DH, x		; 6
 2493                        	
 2494    01:D891  BD 4F 23   			lda	vdc_map_line_w, x	; 5
 2495    01:D894  65 EC      			adc.l	<_bp			; 4
 2496    01:D896  85 EC      			sta.l	<_bp			; 4
 2497    01:D898  90 03      			bcc	!+			; 2/4
 2498    01:D89A  E6 ED      			inc.h	<_bp			; 6
 2499    01:D89C  18         			clc				; 2
 2500                        	
 2501    01:D89D  C6 00      	!:		dec	<map_count		; 6
 2502    01:D89F  D0 CB      			bne	!repeat-		; 4
 2503                        	
 2504    01:D8A1  60         	!end:		rts
 2505                        	
 2506                        			; lhs vertical (28+2 rept)
 2507                        			;
 2508                        			; N.B. C is always clear on entry.
 2509                        			;
 2510                        			; 100 cycles per block * 15 -> 1500 cycles
 2511                        	
 2512    01:D8A2  B2 EC      	!repeat:	lda	[_bp]			; 7
 2513    01:D8A4  A8         			tay				; 2
 2514                        	
 2515    01:D8A5  B9 00 58   	b5800_lhs_even:	lda	BLK_5800_TL_L, y	; 5
 2516    01:D8A8  9D 02 02   			sta	VDC_DL, x		; 6
 2517    01:D8AB  B9 00 5C   			lda	BLK_5800_TL_H, y	; 5
 2518               0001     		.if	BLKDEF_CHR_FLAG
 2519    01:D8AE  29 F3      			and	#%11110011		; 2
 2520                        		.endif
 2521    01:D8B0  1A         			inc	a			; 2
 2522    01:D8B1  9D 03 02   			sta	VDC_DH, x		; 6
 2523                        	
 2524    01:D8B4  C6 00      			dec	<map_count		; 6
 2525    01:D8B6  F0 1F      			beq	!end+			; 2
 2526                        	
 2527    01:D8B8  B9 00 5A   	b5800_lhs_odd:	lda	BLK_5800_BL_L, y	; 5
 2528    01:D8BB  9D 02 02   			sta	VDC_DL, x		; 6
 2529    01:D8BE  B9 00 5E   			lda	BLK_5800_BL_H, y	; 5
 2530               0001     		.if	BLKDEF_CHR_FLAG
 2531    01:D8C1  29 F3      			and	#%11110011		; 2
 2532                        		.endif
 2533    01:D8C3  1A         			inc	a			; 2
 2534    01:D8C4  9D 03 02   			sta	VDC_DH, x		; 6
 2535                        	
 2536    01:D8C7  BD 4F 23   			lda	vdc_map_line_w, x	; 5
 2537    01:D8CA  65 EC      			adc.l	<_bp			; 4
 2538    01:D8CC  85 EC      			sta.l	<_bp			; 4
 2539    01:D8CE  90 03      			bcc	!+			; 2/4
 2540    01:D8D0  E6 ED      			inc.h	<_bp			; 6
 2541    01:D8D2  18         			clc				; 2
 2542                        	
 2543    01:D8D3  C6 00      	!:		dec	<map_count		; 6
 2544    01:D8D5  D0 CB      			bne	!repeat-		; 4
 2545                        	
 2546    01:D8D7  60         	!end:		rts
 2547                        	
 2548                        			; rhs vertical (28+2 rept)
 2549                        			;
 2550                        			; N.B. C is always clear on entry.
 2551                        			;
 2552                        			; 100 cycles per block * 15 -> 1500 cycles
 2553                        	
 2554    01:D8D8  B2 EC      	!repeat:	lda	[_bp]			; 7
 2555    01:D8DA  A8         			tay				; 2
 2556                        	
 2557    01:D8DB  B9 00 59   	b5800_rhs_even:	lda	BLK_5800_TR_L, y	; 5
 2558    01:D8DE  9D 02 02   			sta	VDC_DL, x		; 6
 2559    01:D8E1  B9 00 5D   			lda	BLK_5800_TR_H, y	; 5
 2560               0001     		.if	BLKDEF_CHR_FLAG
 2561    01:D8E4  29 F3      			and	#%11110011		; 2
 2562                        		.endif
 2563    01:D8E6  1A         			inc	a			; 2
 2564    01:D8E7  9D 03 02   			sta	VDC_DH, x		; 6
 2565                        	
 2566    01:D8EA  C6 00      			dec	<map_count		; 6
 2567    01:D8EC  F0 1F      			beq	!end+			; 2
 2568                        	
 2569    01:D8EE  B9 00 5B   	b5800_rhs_odd:	lda	BLK_5800_BR_L, y	; 5
 2570    01:D8F1  9D 02 02   			sta	VDC_DL, x		; 6
 2571    01:D8F4  B9 00 5F   			lda	BLK_5800_BR_H, y	; 5
 2572               0001     		.if	BLKDEF_CHR_FLAG
 2573    01:D8F7  29 F3      			and	#%11110011		; 2
 2574                        		.endif
 2575    01:D8F9  1A         			inc	a			; 2
 2576    01:D8FA  9D 03 02   			sta	VDC_DH, x		; 6
 2577                        	
 2578    01:D8FD  BD 4F 23   			lda	vdc_map_line_w, x	; 5
 2579    01:D900  65 EC      			adc.l	<_bp			; 4
 2580    01:D902  85 EC      			sta.l	<_bp			; 4
 2581    01:D904  90 03      			bcc	!+			; 2/4
 2582    01:D906  E6 ED      			inc.h	<_bp			; 6
 2583    01:D908  18         			clc				; 2
 2584                        	
 2585    01:D909  C6 00      	!:		dec	<map_count		; 6
 2586    01:D90B  D0 CB      			bne	!repeat-		; 4
 2587                        	
 2588    01:D90D  60         	!end:		rts
 2589                        	
 2590                        		.endif	BLKDEF_POINTERS
 2591                        	
 2592                        		.endprocgroup	; blkmap_group
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   80                        		.else
   84                        		.endif	HUCC_USES_BLKMAP
   85                        	
   86               0001     		.ifdef	HUCC_USES_CHRMAP		; Set in hucc_chrmap.h
                             #[3]   "..\..\..\include\hucc\chrmap.asm"
   87                        			include	"chrmap.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; chrmap.asm
    5                        	;
    6                        	; A simple map system based on 8x8 characters (aka "tiles") in BAT format.
    7                        	;
    8                        	; Copyright John Brandwood 2025.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; The maximum X and Y size for chrmaps is 256 characters (2048 pixels).
   18                        	;
   19                        	; The maximum total size for a chrmap is 16KBytes, which allows for maps up
   20                        	; to 256x32 tiles (2048x256 pixels).
   21                        	;
   22                        	; ***************************************************************************
   23                        	; ***************************************************************************
   24                        	
   25                        	;
   26                        	; Include dependancies ...
   27                        	;
   28                        	
   29                        			include "blkmap.asm"		; This defines the variables.
   30                        	
   31                        	;
   32                        	; Chrmaps in BAT format normally address all of VRAM from $0400..$7FFF, but
   33                        	; they can be limited to use the 32KByte of characters in VRAM $1000..$4FFF
   34                        	; which then frees up 2-bits for flag information for each character in the
   35                        	; BAT entry.
   36                        	;
   37                        	; These 2-bits are perfect for using as collision information in game maps,
   38                        	; allowing storage of states like transparent, solid, up-slope, down-slope.
   39                        	;
   40                        	; Typically this flag information is set by the map conversion tools from a
   41                        	; seperate "collision" map layer.
   42                        	;
   43                        	
   44               0000     		.ifndef	CHRMAP_BAT_FLAG
   46                        		.endif
   47                        	
   48                        	;
   49                        	;
   50                        	;
   51                        	
   52                        	
   53                        	
   54    0C:DCA0             	chrmap_group	.procgroup
   55                        	
   56                        	; ***************************************************************************
   57                        	; ***************************************************************************
   58                        	;
   59                        	; _draw_bat - Draw the entire screen at the current coordinates.
   60                        	; _sgx_draw_bat - Draw the entire screen at the current coordinates.
   61                        	;
   62                        	; void __fastcall draw_bat( void );
   63                        	; void __fastcall sgx_draw_bat( void );
   64                        	;
   65                        	
   66               0001     		.if	SUPPORT_SGX
   67                        	
   68                        	_sgx_draw_bat	.proc
   74                        			.endp
   75                        		.endif
   76                        	
   77    0C:DCA0             	_draw_bat	.proc
   78                        	
   79    0C:DCA0  82         			clx				; Offset to PCE VDC.
   80                        	
   81    0C:DCA1  43 08      			tma3				; Preserve MPR3..MPR5.
   82    0C:DCA3  48         			pha
   83    0C:DCA4  43 10      			tma4
   84    0C:DCA6  48         			pha
   85    0C:DCA7  43 20      			tma5
   86    0C:DCA9  48         			pha
   87                        	
   88    0C:DCAA  20 4D DD   			jsr	bat_pxl_2_chr		; Set up the draw coordinates.
   89                        	
   90    0C:DCAD  A5 FC      			lda	<map_chr_x		; Reset previous X position.
   91    0C:DCAF  9D 84 28   			sta	vdc_old_chr_x, x
   92                        	
   93    0C:DCB2  A5 FE      			lda	<map_chr_y		; Reset previous Y position,
   94    0C:DCB4  1A         			inc	a			; ready to draw rows upwards.
   95    0C:DCB5  9D 85 28   			sta	vdc_old_chr_y, x
   96                        	
   97    0C:DCB8  BD 4D 23   			lda	vdc_map_draw_w, x	; Draw the whole screen.
   98    0C:DCBB  85 FA      			sta	<map_draw_w
   99    0C:DCBD  BD 4E 23   			lda	vdc_map_draw_h, x
  100    0C:DCC0  85 FB      			sta	<map_draw_h
  101                        	
  102    0C:DCC2  20 30 DE   			jsr	bat_scroll_y		; Draw N row of CHR to the BAT.
  103                        	
  104    0C:DCC5  68         			pla				; Restore MPR3..MPR5.
  105    0C:DCC6  53 20      			tam5
  106    0C:DCC8  68         			pla
  107    0C:DCC9  53 10      			tam4
  108    0C:DCCB  68         			pla
  109    0C:DCCC  53 08      			tam3
  110                        	
  111                        			leave
         0C:DCCE  4C EF FF   			jmp	leave_proc
  112                        	
  113                        			.endp
  114                        	
  115                        	
  116                        	
  117                        	; ***************************************************************************
  118                        	; ***************************************************************************
  119                        	;
  120                        	; _scroll_bat - Draw a single row of CHR into the BAT to update the edge.
  121                        	; _sgx_scroll_bat - Draw a single row of CHR into the BAT to update the edge.
  122                        	;
  123                        	; void __fastcall scroll_bat( void );
  124                        	; void __fastcall sgx_scroll_bat( void );
  125                        	;
  126                        	
  127               0001     		.if	SUPPORT_SGX
  128                        	
  129                        	_sgx_scroll_bat	.proc
  135                        			.endp
  136                        		.endif
  137                        	
  138    0C:DCD1             	_scroll_bat	.proc
  139                        	
  140    0C:DCD1  82         			clx				; Offset to PCE VDC.
  141                        	
  142    0C:DCD2  43 08      			tma3				; Preserve MPR3..MPR5.
  143    0C:DCD4  48         			pha
  144    0C:DCD5  43 10      			tma4
  145    0C:DCD7  48         			pha
  146    0C:DCD8  43 20      			tma5
  147    0C:DCDA  48         			pha
  148                        	
  149    0C:DCDB  20 4D DD   			jsr	bat_pxl_2_chr		; Set up the draw coordinates.
  150                        	
  151    0C:DCDE  BD 4E 23   			lda	vdc_map_draw_h, x	; Draw new LHS or RHS if needed.
  152    0C:DCE1  85 FB      			sta	<map_draw_h
  153                        	;		lda	#1			; bat_scroll_x only ever draws a
  154                        	;		sta	<map_draw_w		; single column.
  155    0C:DCE3  20 71 DD   			jsr	bat_scroll_x
  156                        	
  157    0C:DCE6  BD 84 28   			lda	vdc_old_chr_x, x	; Restore map_chr_x which could
  158    0C:DCE9  85 FC      			sta	<map_chr_x		; be changed by bat_scroll_x.
  159                        	
  160    0C:DCEB  BD 4D 23   			lda	vdc_map_draw_w, x	; Draw new TOP or BTM if needed.
  161    0C:DCEE  85 FA      			sta	<map_draw_w
  162    0C:DCF0  A9 01      			lda	#1
  163    0C:DCF2  85 FB      			sta	<map_draw_h
  164    0C:DCF4  20 30 DE   			jsr	bat_scroll_y
  165                        	
  166    0C:DCF7  68         			pla				; Restore MPR3..MPR5.
  167    0C:DCF8  53 20      			tam5
  168    0C:DCFA  68         			pla
  169    0C:DCFB  53 10      			tam4
  170    0C:DCFD  68         			pla
  171    0C:DCFE  53 08      			tam3
  172                        	
  173                        			leave
         0C:DD00  4C EF FF   			jmp	leave_proc
  174                        	
  175                        			.endp
  176                        	
  177                        	
  178                        	
  179                        	; ***************************************************************************
  180                        	; ***************************************************************************
  181                        	;
  182                        	; _blit_bat - Draw a map rectangle to specific BAT coordinates.
  183                        	; _sgx_blit_bat - Draw a map rectangle to specific BAT coordinates.
  184                        	;
  185                        	; void __fastcall blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
  186                        	; void __fastcall sgx_blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
  187                        	;
  188                        	; Normally you'd just use _draw_bat() and _scroll_bat(), but for those folks
  189                        	; who really wish to take manual control, you can use this.
  190                        	;
  191                        	
  192               0001     		.if	SUPPORT_SGX
  193                        	
  194                        	_sgx_blit_bat	.proc
  200                        			.endp
  201                        		.endif
  202                        	
  203    0C:DD03             	_blit_bat	.proc
  204                        	
  205    0C:DD03  82         			clx				; Offset to PCE VDC.
  206                        	
  207    0C:DD04  43 08      			tma3				; Preserve MPR3..MPR5.
  208    0C:DD06  48         			pha
  209    0C:DD07  43 10      			tma4
  210    0C:DD09  48         			pha
  211    0C:DD0A  43 20      			tma5
  212    0C:DD0C  48         			pha
  213                        	
  214    0C:DD0D  BD 55 23   			lda	vdc_map_option, x	; Preserve current map options.
  215    0C:DD10  48         			pha
  216    0C:DD11  09 C0      			ora	#MAP_UNALIGNED_X | MAP_UNALIGNED_Y
  217    0C:DD13  9D 55 23   			sta	vdc_map_option, x
  218                        	
  219    0C:DD16  20 4D DD   			jsr	bat_pxl_2_chr		; Set up the draw coordinates.
  220                        	
  221    0C:DD19  A5 FA      			lda	<map_draw_w		; Are we drawing just 1 column?
  222    0C:DD1B  C9 01      			cmp	#1
  223    0C:DD1D  F0 1E      			beq	.draw_column
  224                        	
  225                        			; Draw N rows.
  226                        	
  227    0C:DD1F  A5 FC      	.draw_rows:	lda	<map_chr_x		; Reset previous X position.
  228    0C:DD21  9D 84 28   			sta	vdc_old_chr_x, x
  229                        	
  230    0C:DD24  A5 FE      			lda	<map_chr_y		; Reset previous Y position,
  231    0C:DD26  1A         			inc	a			; ready to draw rows upwards.
  232    0C:DD27  9D 85 28   			sta	vdc_old_chr_y, x
  233                        	
  234    0C:DD2A  20 30 DE   			jsr	bat_scroll_y		; Draw a row of CHR to the BAT.
  235                        	
  236                        			; Drawing completed.
  237                        	
  238    0C:DD2D  68         	.finished:	pla				; Restore previous map options.
  239    0C:DD2E  9D 55 23   			sta	vdc_map_option, x
  240                        	
  241    0C:DD31  68         			pla				; Restore MPR3..MPR5.
  242    0C:DD32  53 20      			tam5
  243    0C:DD34  68         			pla
  244    0C:DD35  53 10      			tam4
  245    0C:DD37  68         			pla
  246    0C:DD38  53 08      			tam3
  247                        	
  248                        	.exit:		leave
         0C:DD3A  4C EF FF   			jmp	leave_proc
  249                        	
  250                        			; Draw 1 column.
  251                        	
  252    0C:DD3D  A5 FC      	.draw_column:	lda	<map_chr_x		; Reset previous X position.
  253    0C:DD3F  1A         			inc	a			; ready to draw 1 column.
  254    0C:DD40  9D 84 28   			sta	vdc_old_chr_x, x
  255                        	
  256    0C:DD43  A5 FE      			lda	<map_chr_y		; Reset previous Y position.
  257    0C:DD45  9D 85 28   			sta	vdc_old_chr_y, x
  258                        	
  259    0C:DD48  20 71 DD   			jsr	bat_scroll_x		; Draw a single column of CHR.
  260                        	
  261    0C:DD4B  80 E0      			bra	.finished
  262                        	
  263                        			.endp
  264                        	
  265                        	
  266                        	
  267                        	; ***************************************************************************
  268                        	; ***************************************************************************
  269                        	;
  270                        	
  271    0C:DD4D  BD 51 23   	bat_pxl_2_chr:	lda.l	vdc_map_pxl_x, x	; Get current map X coordinate.
  272    0C:DD50  85 FC      			sta.l	<map_pxl_x
  273    0C:DD52  BD 52 23   			lda.h	vdc_map_pxl_x, x	; Xvert map_pxl_x to map_chr_x.
  274    0C:DD55  4A         			lsr	a
  275    0C:DD56  66 FC      			ror.l	<map_pxl_x
  276    0C:DD58  4A         			lsr	a
  277    0C:DD59  66 FC      			ror.l	<map_pxl_x
  278    0C:DD5B  4A         			lsr	a
  279    0C:DD5C  66 FC      			ror.l	<map_pxl_x		; Max map width is 256 CHR.
  280                        	
  281    0C:DD5E  BD 53 23   			lda.l	vdc_map_pxl_y, x	; Get current map Y coordinate.
  282    0C:DD61  85 FE      			sta.l	<map_pxl_y
  283    0C:DD63  BD 54 23   			lda.h	vdc_map_pxl_y, x	; Xvert map_pxl_y to map_chr_y.
  284    0C:DD66  4A         			lsr	a
  285    0C:DD67  66 FE      			ror.l	<map_pxl_y
  286    0C:DD69  4A         			lsr	a
  287    0C:DD6A  66 FE      			ror.l	<map_pxl_y
  288    0C:DD6C  4A         			lsr	a
  289    0C:DD6D  66 FE      			ror.l	<map_pxl_y		; Max map width is 256 CHR.
  290                        	
  291    0C:DD6F  60         			rts
  292                        	
  293                        	
  294                        	
  295                        	; ***************************************************************************
  296                        	; ***************************************************************************
  297                        	;
  298                        	; bat_scroll_x - Update the BAT when X coordinate changes.
  299                        	;
  300                        	; N.B. This only ever draws a single column!
  301                        	;
  302                        	
  303    0C:DD70  60         	!no_change:	rts
  304                        	
  305    0C:DD71  A5 FC      	bat_scroll_x:	lda	<map_chr_x		; Compare old_x with cur_x.
  306    0C:DD73  DD 84 28   			cmp	vdc_old_chr_x, x
  307    0C:DD76  F0 F8      			beq	!no_change-		; Do nothing if no change.
  308    0C:DD78  9D 84 28   			sta	vdc_old_chr_x, x
  309    0C:DD7B  30 05      			bmi	.moved			; Test the sign of the change.
  310                        	
  311    0C:DD7D  18         			clc				; Draw RHS if chr_x >= old_x.
  312    0C:DD7E  7D 4D 23   			adc	vdc_map_draw_w, x	; Usually (SCR_WIDTH / 8) + 1.
  313    0C:DD81  3A         			dec	a
  314                        	
  315    0C:DD82  48         	.moved:		pha				; Push chr_x in map section.
  316                        	
  317    0C:DD83  3C 55 23   			bit	vdc_map_option, x	; Set bit7 to disable aligning
  318    0C:DD86  30 05      			bmi	!+			; BAT X with the map X.
  319    0C:DD88  3D 4A 23   			and	vdc_bat_x_mask, x
  320    0C:DD8B  85 F8      			sta	<map_bat_x		; Save BAT X chr coordinate.
  321                        	
  322    0C:DD8D  A5 FE      	!:		lda	<map_chr_y		; Y = chr_y in map section.
  323    0C:DD8F  A8         			tay
  324                        	
  325    0C:DD90  3C 55 23   			bit	vdc_map_option, x	; Set bit6 to disable aligning
  326    0C:DD93  70 05      			bvs	!+			; BAT Y with the map Y.
  327    0C:DD95  3D 4B 23   			and	vdc_bat_y_mask, x
  328    0C:DD98  85 F9      			sta	<map_bat_y		; Save BAT Y chr coordinate.
  329                        	
  330               0000     		.if	FAST_MULTIPLY
  333                        		.endif
  334                        	
  335    0C:DD9A  BD 4F 23   	!:		lda	vdc_map_line_w, x	; Map width in CHR (0 == 256).
  336    0C:DD9D  D0 05      			bne	!+
  337                        	
  338    0C:DD9F  64 EE      			stz.l	<map_line		; Multiply by 256 is easy!
  339    0C:DDA1  98         			tya
  340    0C:DDA2  80 15      			bra	.double
  341                        	
  342               0000     		.if	FAST_MULTIPLY
  354                        		.else
  355    0C:DDA4  84 EF      	!:		sty.h	<map_line		; Takes 144..176 cycles.
  356    0C:DDA6  A0 08      			ldy	#8
  357    0C:DDA8  4A         			lsr	a
  358    0C:DDA9  85 EE      			sta.l	<map_line
  359    0C:DDAB  62         			cla
  360    0C:DDAC  90 03      			bcc	.rotate
  361    0C:DDAE  18         	.add:		clc
  362    0C:DDAF  65 EF      			adc.h	<map_line
  363    0C:DDB1  6A         	.rotate:	ror	a
  364    0C:DDB2  66 EE      			ror.l	<map_line		; Lo-byte of (CHR Y * width).
  365    0C:DDB4  88         			dey
  366    0C:DDB5  B0 F7      			bcs	.add
  367    0C:DDB7  D0 F8      			bne	.rotate
  368                        		.endif
  369                        	
  370    0C:DDB9  06 EE      	.double:	asl.l	<map_line		; Lo-byte of (CHR Y * width * 2).
  371    0C:DDBB  2A         			rol	a
  372    0C:DDBC  A8         			tay				; Hi-byte of (CHR Y * width * 2).
  373                        	
  374    0C:DDBD  BD 8E 28   			lda	vdc_map_bank, x		; Put the MAP into MPR3-MPR5.
  375    0C:DDC0  53 08      			tam3				; Allow for 16KByte chrmap.
  376    0C:DDC2  1A         			inc	a
  377    0C:DDC3  53 10      			tam4
  378    0C:DDC5  1A         			inc	a
  379    0C:DDC6  53 20      			tam5
  380                        	
  381    0C:DDC8  68         			pla				; Pop chr_x in map section.
  382    0C:DDC9  0A         			asl	a			; 2-bytes for a BAT value.
  383    0C:DDCA  90 02      			bcc	!+
  384    0C:DDCC  C8         			iny				; Hi-byte of (CHR Y * width * 2).
  385    0C:DDCD  18         			clc
  386    0C:DDCE  65 EE      	!:		adc.l	<map_line		; Lo-byte of (CHR Y * width * 2).
  387    0C:DDD0  90 01      			bcc	!+
  388    0C:DDD2  C8         			iny
  389                        	
  390    0C:DDD3  18         	!:		clc				; Calc map data pointer.
  391    0C:DDD4  7D 8C 28   			adc.l	vdc_map_addr, x
  392    0C:DDD7  85 EC      			sta.l	<_bp			; Maximum map size is 16KBytes
  393    0C:DDD9  98         			tya				; so we don't need to consider
  394    0C:DDDA  7D 8D 28   			adc.h	vdc_map_addr, x		; bank overflow.
  395    0C:DDDD  85 ED      			sta.h	<_bp
  396                        	
  397    0C:DDDF  C2         			cly				; Calculate the map line delta
  398    0C:DDE0  BD 4F 23   			lda	vdc_map_line_w, x	; in bytes.
  399    0C:DDE3  D0 01      			bne	!+
  400    0C:DDE5  C8         			iny
  401    0C:DDE6  0A         	!:		asl	a
  402    0C:DDE7  85 EE      			sta.l	<map_line
  403    0C:DDE9  98         			tya
  404    0C:DDEA  2A         			rol	a
  405    0C:DDEB  85 EF      			sta.h	<map_line
  406                        	
  407                        			; Draw the first part of the column.
  408                        	
  409    0C:DDED  A5 F8      	.draw_col:	lda	<map_bat_x		; Set the BAT VRAM destination
  410    0C:DDEF  85 F0      			sta.l	<_di			; coordinates.
  411    0C:DDF1  A5 F9      			lda	<map_bat_y
  412    0C:DDF3  85 F1      			sta.h	<_di
  413                        	
  414    0C:DDF5  5D 4B 23   			eor	vdc_bat_y_mask, x	; Calc CHR before wrap.
  415    0C:DDF8  1A         			inc	a
  416    0C:DDF9  C5 FB      			cmp	<map_draw_h		; Usually (SCR_HEIGHT / 8) + 1.
  417    0C:DDFB  90 02      			bcc	!+
  418    0C:DDFD  A5 FB      			lda	<map_draw_h		; Maximum CHR to draw.
  419    0C:DDFF  85 00      	!:		sta	<map_count		; Set number of CHR to draw.
  420    0C:DE01  85 01      			sta	<map_drawn		; Preserve number of CHR drawn.
  421                        	
  422    0C:DE03  A9 05      			lda	#VDC_CR			; Set VDC auto-increment from
  423    0C:DE05  95 F7      			sta	<vdc_reg, x		; the BAT width, which is set
  424    0C:DE07  9D 00 02   			sta	VDC_AR, x		; up by set_screen_size().
  425    0C:DE0A  B5 F4      			lda	<vdc_crh, x
  426    0C:DE0C  9D 03 02   			sta	VDC_DH, x
  427                        	
  428    0C:DE0F  20 11 DF   			jsr	bat_col_strip		; Draw top of vertical strip.
  429                        	
  430                        			; Wrap around and draw the rest of the column (if needed).
  431                        	
  432    0C:DE12  38         			sec				; Are there any more CHR that
  433    0C:DE13  A5 FB      			lda	<map_draw_h		; need to be drawn?
  434    0C:DE15  E5 01      			sbc	<map_drawn
  435    0C:DE17  F0 0B      			beq	.done
  436                        	
  437    0C:DE19  85 00      			sta	<map_count		; Set number of CHR to draw.
  438                        	
  439    0C:DE1B  A5 F8      			lda	<map_bat_x		; Set the BAT VRAM destination
  440    0C:DE1D  85 F0      			sta.l	<_di			; coordinates.
  441    0C:DE1F  64 F1      			stz.h	<_di			; Reset 1st row to draw.
  442                        	
  443    0C:DE21  20 11 DF   			jsr	bat_col_strip		; Draw btm of vertical strip.
  444                        	
  445    0C:DE24  A9 05      	.done:		lda	#VDC_CR			; Set VDC auto-increment to 1.
  446    0C:DE26  95 F7      			sta	<vdc_reg, x
  447    0C:DE28  9D 00 02   			sta	VDC_AR, x
  448    0C:DE2B  9E 03 02   			stz	VDC_DH, x
  449                        	
  450    0C:DE2E  60         			rts
  451                        	
  452                        	
  453                        	
  454                        	; ***************************************************************************
  455                        	; ***************************************************************************
  456                        	;
  457                        	; bat_scroll_y - Update the BAT when Y coordinate changes.
  458                        	;
  459                        	; N.B. This draws multiple rows when called from _draw_bat or _blit_bat.
  460                        	;
  461                        	
  462    0C:DE2F  60         	!no_change:	rts
  463                        	
  464    0C:DE30  A5 FE      	bat_scroll_y:	lda	<map_chr_y		; Compare old_y with cur_y.
  465    0C:DE32  DD 85 28   			cmp	vdc_old_chr_y, x
  466    0C:DE35  F0 F8      			beq	!no_change-		; Do nothing if no change.
  467    0C:DE37  9D 85 28   			sta	vdc_old_chr_y, x
  468    0C:DE3A  30 05      			bmi	.moved			; Test the sign of the change.
  469                        	
  470    0C:DE3C  18         			clc				; Draw bottom if chr_y >= old_y.
  471    0C:DE3D  7D 4E 23   			adc	vdc_map_draw_h, x	; Usually (SCR_HEIGHT / 8) + 1.
  472    0C:DE40  3A         			dec	a
  473                        	
  474    0C:DE41  A8         	.moved:		tay				; Y = chr_y in map section.
  475                        	
  476    0C:DE42  3C 55 23   			bit	vdc_map_option, x	; Set bit6 to disable aligning
  477    0C:DE45  70 05      			bvs	!+			; BAT Y with the map Y.
  478    0C:DE47  3D 4B 23   			and	vdc_bat_y_mask, x
  479    0C:DE4A  85 F9      			sta	<map_bat_y		; Save BAT Y chr coordinate.
  480                        	
  481    0C:DE4C  3C 55 23   	!:		bit	vdc_map_option, x	; Set bit7 to disable aligning
  482    0C:DE4F  30 07      			bmi	!+			; BAT X with the map X.
  483    0C:DE51  A5 FC      			lda	<map_chr_x
  484    0C:DE53  3D 4A 23   			and	vdc_bat_x_mask, x
  485    0C:DE56  85 F8      			sta	<map_bat_x		; Save BAT X chr coordinate.
  486                        	
  487               0000     		.if	FAST_MULTIPLY
  490                        		.endif
  491                        	
  492    0C:DE58  BD 4F 23   	!:		lda	vdc_map_line_w, x	; Map width in CHR (0 == 256).
  493    0C:DE5B  D0 05      			bne	!+
  494                        	
  495    0C:DE5D  64 EE      			stz.l	<map_line		; Multiply by 256 is easy!
  496    0C:DE5F  98         			tya
  497    0C:DE60  80 15      			bra	.double
  498                        	
  499               0000     		.if	FAST_MULTIPLY
  511                        		.else
  512    0C:DE62  84 EF      	!:		sty.h	<map_line		; Takes 144..176 cycles.
  513    0C:DE64  A0 08      			ldy	#8
  514    0C:DE66  4A         			lsr	a
  515    0C:DE67  85 EE      			sta.l	<map_line
  516    0C:DE69  62         			cla
  517    0C:DE6A  90 03      			bcc	.rotate
  518    0C:DE6C  18         	.add:		clc
  519    0C:DE6D  65 EF      			adc.h	<map_line
  520    0C:DE6F  6A         	.rotate:	ror	a
  521    0C:DE70  66 EE      			ror.l	<map_line		; Lo-byte of (CHR Y * width).
  522    0C:DE72  88         			dey
  523    0C:DE73  B0 F7      			bcs	.add
  524    0C:DE75  D0 F8      			bne	.rotate
  525                        		.endif
  526                        	
  527    0C:DE77  06 EE      	.double:	asl.l	<map_line		; Lo-byte of (CHR Y * width * 2).
  528    0C:DE79  2A         			rol	a
  529    0C:DE7A  85 EF      			sta.h	<map_line		; Hi-byte of (CHR Y * width * 2).
  530    0C:DE7C  A8         			tay
  531                        	
  532    0C:DE7D  BD 8E 28   			lda	vdc_map_bank, x		; Put the MAP into MPR3-MPR5.
  533    0C:DE80  53 08      			tam3				; Allow for 16KByte chrmap.
  534    0C:DE82  1A         			inc	a
  535    0C:DE83  53 10      			tam4
  536    0C:DE85  1A         			inc	a
  537    0C:DE86  53 20      			tam5
  538                        	
  539                        			; Loop to here if drawing multiple rows.
  540                        	
  541    0C:DE88  A5 FC      	.next_row:	lda	<map_chr_x		; Map CHR X coordinate.
  542    0C:DE8A  0A         			asl	a			; 2-bytes for a BAT value!
  543    0C:DE8B  90 02      			bcc	!+
  544    0C:DE8D  C8         			iny				; Hi-byte of (CHR Y * width * 2).
  545    0C:DE8E  18         			clc
  546    0C:DE8F  65 EE      	!:		adc.l	<map_line		; Lo-byte of (CHR Y * width * 2).
  547    0C:DE91  90 01      			bcc	!+
  548    0C:DE93  C8         			iny
  549    0C:DE94  18         	!:		clc				; Calc map data pointer.
  550    0C:DE95  7D 8C 28   			adc.l	vdc_map_addr, x
  551    0C:DE98  85 EC      			sta.l	<_bp			; Maximum map size is 16KBytes
  552    0C:DE9A  98         			tya				; so we don't need to consider
  553    0C:DE9B  7D 8D 28   			adc.h	vdc_map_addr, x		; bank overflow.
  554    0C:DE9E  85 ED      			sta.h	<_bp
  555                        	
  556                        			; Draw the first part of the row.
  557                        	
  558    0C:DEA0  A5 F9      	.draw_row:	lda	<map_bat_y		; Set the BAT VRAM destination
  559    0C:DEA2  85 F1      			sta.h	<_di			; coordinates.
  560    0C:DEA4  A5 F8      			lda	<map_bat_x
  561    0C:DEA6  85 F0      			sta.l	<_di
  562                        	
  563    0C:DEA8  5D 4A 23   			eor	vdc_bat_x_mask, x	; Calc CHR before wrap.
  564    0C:DEAB  1A         			inc	a
  565    0C:DEAC  C5 FA      			cmp	<map_draw_w		; Usually (SCR_WIDTH / 8) + 1.
  566    0C:DEAE  90 02      			bcc	!+
  567    0C:DEB0  A5 FA      			lda	<map_draw_w		; Maximum CHR to draw.
  568    0C:DEB2  85 00      	!:		sta	<map_count		; Set number of CHR to draw.
  569    0C:DEB4  85 01      			sta	<map_drawn		; Preserve number of CHR drawn.
  570                        	
  571    0C:DEB6  20 F0 DE   			jsr	bat_row_strip		; Draw lhs of horizontal strip.
  572                        	
  573                        			; Wrap around and draw the rest of the row (if needed).
  574                        	
  575    0C:DEB9  38         			sec				; Are there any more CHR that
  576    0C:DEBA  A5 FA      			lda	<map_draw_w		; need to be drawn?
  577    0C:DEBC  E5 01      			sbc	<map_drawn
  578    0C:DEBE  F0 0B      			beq	.done_row
  579                        	
  580    0C:DEC0  85 00      			sta	<map_count		; Set number of CHR to draw.
  581                        	
  582    0C:DEC2  A5 F9      			lda	<map_bat_y		; Set the BAT VRAM destination
  583    0C:DEC4  85 F1      			sta.h	<_di			; coordinates.
  584    0C:DEC6  64 F0      			stz.l	<_di			; Reset 1st column to draw.
  585                        	
  586    0C:DEC8  20 F0 DE   			jsr	bat_row_strip		; Draw rhs of horizontal strip.
  587                        	
  588    0C:DECB  C6 FB      	.done_row:	dec	<map_draw_h		; Are all desired rows drawn?
  589    0C:DECD  F0 20      			beq	.finished
  590                        	
  591    0C:DECF  A5 F9      			lda	<map_bat_y		; Move BAT Y down by 1.
  592    0C:DED1  1A         			inc	a
  593    0C:DED2  3D 4B 23   			and	vdc_bat_y_mask, x
  594    0C:DED5  85 F9      			sta	<map_bat_y
  595                        	
  596    0C:DED7  A4 EF      			ldy.h	<map_line		; Move the map line pointer to
  597    0C:DED9  C8         			iny				; the next line.
  598    0C:DEDA  BD 4F 23   			lda	vdc_map_line_w, x
  599    0C:DEDD  F0 0B      			beq	!++			; vdc_map_line_w == 0 == 256.
  600    0C:DEDF  0A         			asl	a			; 2-bytes for a BAT value!
  601    0C:DEE0  B0 01      			bcs	!+
  602    0C:DEE2  88         			dey				; Fix if vdc_map_line_w <= 127.
  603    0C:DEE3  18         	!:		clc
  604    0C:DEE4  65 EE      			adc.l	<map_line
  605    0C:DEE6  85 EE      			sta.l	<map_line
  606    0C:DEE8  90 01      			bcc	!++
  607    0C:DEEA  C8         	!:		iny
  608    0C:DEEB  84 EF      	!:		sty.h	<map_line		; Needed for .next_row!
  609                        	
  610    0C:DEED  80 99      			bra	.next_row		; Draw next row.
  611                        	
  612    0C:DEEF  60         	.finished:	rts
  613                        	
  614                        	
  615                        	
  616                        	; ***************************************************************************
  617                        	; ***************************************************************************
  618                        	;
  619                        	; bat_row_strip - Draw a single row of CHR into the BAT.
  620                        	;
  621                        	
  622    0C:DEF0  20 34 E4   	bat_row_strip:	jsr	set_di_xy_mawr		; Set the BAT VRAM destination.
  623                        	
  624    0C:DEF3  C2         			cly				; 2
  625    0C:DEF4  B1 EC      	.repeat:	lda	[_bp], y		; 7
  626    0C:DEF6  9D 02 02   			sta	VDC_DL, x		; 6
  627    0C:DEF9  C8         			iny				; 2
  628    0C:DEFA  B1 EC      			lda	[_bp], y		; 7
  629               0000     		.if	CHRMAP_BAT_FLAG
  634                        		.endif
  635    0C:DEFC  9D 03 02   			sta	VDC_DH, x		; 6
  636    0C:DEFF  C8         			iny				; 2
  637                        	
  638    0C:DF00  C6 00      	!:		dec	<map_count		; 6
  639    0C:DF02  D0 F0      			bne	.repeat			; 4
  640                        	
  641    0C:DF04  98         			tya				; 2
  642    0C:DF05  F0 07      			beq	!+			; 2/4
  643    0C:DF07  18         			clc				; 2
  644    0C:DF08  65 EC      			adc.l	<_bp			; 4
  645    0C:DF0A  85 EC      			sta.l	<_bp			; 4
  646    0C:DF0C  90 02      			bcc	.done			; 2/4
  647    0C:DF0E  E6 ED      	!:		inc.h	<_bp			; 6
  648                        	
  649    0C:DF10  60         	.done:		rts
  650                        	
  651                        	
  652                        	
  653                        	; ***************************************************************************
  654                        	; ***************************************************************************
  655                        	;
  656                        	; bat_col_strip - Draw a single column of CHR into the BAT.
  657                        	;
  658                        	
  659    0C:DF11  20 34 E4   	bat_col_strip:	jsr	set_di_xy_mawr		; Set the BAT VRAM destination.
  660                        	
  661    0C:DF14  A0 01      			ldy	#1			; 2
  662    0C:DF16  B2 EC      	.repeat:	lda	[_bp]			; 7
  663    0C:DF18  9D 02 02   			sta	VDC_DL, x		; 6
  664    0C:DF1B  B1 EC      			lda	[_bp], y		; 7
  665               0000     		.if	CHRMAP_BAT_FLAG
  670                        		.endif
  671    0C:DF1D  9D 03 02   			sta	VDC_DH, x		; 6
  672                        	
  673    0C:DF20  18         			clc				; 2
  674    0C:DF21  A5 EE      			lda.l	<map_line		; 4
  675    0C:DF23  65 EC      			adc.l	<_bp			; 4
  676    0C:DF25  85 EC      			sta.l	<_bp			; 4
  677    0C:DF27  A5 EF      			lda.h	<map_line		; 4
  678    0C:DF29  65 ED      			adc.h	<_bp			; 4
  679    0C:DF2B  85 ED      			sta.h	<_bp			; 4
  680                        	
  681    0C:DF2D  C6 00      			dec	<map_count		; 6
  682    0C:DF2F  D0 E5      			bne	.repeat			; 4
  683                        	
  684    0C:DF31  60         			rts
  685                        	
  686                        		.endprocgroup	; chrmap_group
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   88                        		.endif	HUCC_USES_CHRMAP
   89                        	
   90               0001     		.ifdef	HUCC_USES_OLD_LINE		; Set in hucc_old_line.h
                             #[3]   "..\..\..\include\hucc\hucc-old-line.asm"
   91                        			include	"hucc-old-line.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-old-line.asm
    5                        	;
    6                        	; Based on the original HuC and MagicKit functions by David Michel and the
    7                        	; other original HuC developers.
    8                        	;
    9                        	; Modifications copyright John Brandwood 2024-2025.
   10                        	;
   11                        	; Distributed under the Boost Software License, Version 1.0.
   12                        	; (See accompanying file LICENSE_1_0.txt or copy at
   13                        	;  http://www.boost.org/LICENSE_1_0.txt)
   14                        	;
   15                        	; ***************************************************************************
   16                        	; ***************************************************************************
   17                        	
   18                        	
   19                        	
   20                        	; ***************************************************************************
   21                        	; ***************************************************************************
   22                        	;
   23                        	; void __fastcall gfx_init( unsigned int start_vram_addr<_ax> );
   24                        	;
   25                        	; initialize graphics mode
   26                        	; - points graphics map to tiles at start_vram_addr
   27                        	
   28                        	_gfx_init.1	.proc
   73                        			.endp
   74                        	
   75                        	
   76                        	
   77                        	; ***************************************************************************
   78                        	; ***************************************************************************
   79                        	;
   80                        	; void __fastcall gfx_clear( unsigned int start_vram_addr<_di> );
   81                        	;
   82                        	; Clear the values in the graphics tiles
   83                        	; - places zeroes in graphics tiles at start_vram_addr
   84                        	
   85                        	_gfx_clear.1	.proc
  105                        			.endp
  106                        	
  107                        	
  108                        	
  109                        	; ***************************************************************************
  110                        	; ***************************************************************************
  111                        	;
  112                        	; void __fastcall gfx_line( unsigned int x1<_gfx_x1>, unsigned int y1<_gfx_y1>, unsigned int x2<_gfx_x2>, unsigned int y2<_gfx_y2>, unsigned char color<_gfx_color> );
  113                        	
  114                        	huc_gfx_line	.procgroup
  459                        			.endprocgroup	; huc_gfx_line
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   92                        		.endif
   93                        	
   94               0000     		.ifdef	HUCC_USES_ZX0			; Set in hucc_zx0.h
   96                        		.endif
   97                        	
   98                        	
   99                        	
  100                        	; ***************************************************************************
  101                        	; ***************************************************************************
  102                        	;
  103                        	; Check that C "__zp" declarations aren't overwriting System Card variables.
  104                        	;
  105                        	
  106               20A0     			.zp
  107               0000     		.if	(* > zpg_sys_top) || (USING_PSGDRIVER && (* > zpg_psg_top))
  109                        		.endif
  110                        	
  111                        	
  112                        	
  113                        	; ***************************************************************************
  114                        	; ***************************************************************************
  115                        	;
  116                        	; Check that there isn't too much C "const" data in the ".RODATA" section.
  117                        	;
  118                        	
  119               604A     			.rodata
  120               0000     		.if	(bank(*) - _bank_base) >= (CONST_BANK + 2)
  122                        		.endif
  123               E937     			.code
                             #[1]   "main.s"

PROCEDURE LIST (in order of size):

Size: $105A, Addr: $01:C04A,      .proc _update_PLAYER
Size: $086A, Addr: $01:D0A4, .procgroup blkmap_group
Size: $03DE, Addr: $01:D90E,      .proc _joypad_DIR
Size: $0390, Addr: $09:D860,      .proc huc_monofont_x
Size: $02DD, Addr: $01:DCEC,      .proc _init_LEVEL
Size: $0292, Addr: $0C:DCA0, .procgroup chrmap_group
Size: $0108, Addr: $09:DBF0,      .proc read_joypads
Size: $00F1, Addr: $09:DCF8,      .proc _recenter_CAMERA
Size: $00DF, Addr: $09:DDE9, .procgroup vdc_set_mode
Size: $00D4, Addr: $09:DEC8,      .proc _joypad_BUTTONS
Size: $00A2, Addr: $0C:DF32,      .proc _main
Size: $0086, Addr: $02:C000,      .proc _sgx_scroll_split.5
Size: $0081, Addr: $02:C086,      .proc vbl_init_scroll
Size: $0077, Addr: $02:C107,      .proc core_main
Size: $006A, Addr: $02:C17E, .procgroup load_vram_group
Size: $0069, Addr: $02:C1E8, .procgroup vdc_tty_out
Size: $0064, Addr: $09:DF9C,      .proc _check_BG
Size: $0062, Addr: $02:C251,      .proc _init_256x224
Size: $005E, Addr: $02:C2B3,      .proc _check_LADDER
Size: $0051, Addr: $02:C311,      .proc _check_WALL_TR
Size: $0051, Addr: $02:C362,      .proc _check_WALL_TL
Size: $0051, Addr: $02:C3B3,      .proc _check_WALL_BR
Size: $0051, Addr: $02:C404,      .proc _check_WALL_BL
Size: $0051, Addr: $02:C455,      .proc _check_FLOOR_R
Size: $0051, Addr: $02:C4A6,      .proc _check_FLOOR_L
Size: $004B, Addr: $02:C4F7, .procgroup hucc_memcmp
Size: $004B, Addr: $02:C542, .procgroup old_satb_group
Size: $0043, Addr: $02:C58D, .procgroup vdc_clear_vram
Size: $0043, Addr: $02:C5D0,      .proc sgx_detect
Size: $003F, Addr: $02:C613, .procgroup load_bat_group
Size: $003E, Addr: $02:C652,      .proc _vram2vram.3
Size: $003B, Addr: $02:C690,      .proc init_random
Size: $002E, Addr: $01:DFC9,      .proc _scroll_BG
Size: $002B, Addr: $0C:DFD4,      .proc _load_palette.3
Size: $001C, Addr: $02:C6CB,      .proc clear_vce
Size: $001A, Addr: $02:C6E7,      .proc _init_PLAYER
Size: $0010, Addr: $02:C701,      .proc _init_VARIABLES
