                             #[1]   "main.s"
   27                        	
   28               0010     	CORE_VERSION	=	$10			; Version 1.0
   29                        	
   30                        			; Get the user program's configuration settings, this will
   31                        			; be read from the current directory, if it exists, or the
   32                        			; "../include/" directory if not.
   33                        	
                             #[4]   "..\..\..\include\hucc\core-config.inc"
   34                        			include	"core-config.inc"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; core-config.inc
    5                        	;
    6                        	; Configuration settings for the "CORE(not TM)" PC Engine library code.
    7                        	;
    8                        	; Copyright John Brandwood 2021-2024.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; The idea is that you, a PCE developer, copy this file from the ../include/
   18                        	; directory and into your project's directory, and then customize the values
   19                        	; to suit your particular project.
   20                        	;
   21                        	; Because PCEAS searches the current (i.e. project) directory for an include
   22                        	; file first, then it will find your customized copy of the file rather than
   23                        	; the original copy in the ../include/ directory.
   24                        	;
   25                        	; That means that all of the different overlay programs in your project will
   26                        	; share the same overall library configuration for your game.
   27                        	;
   28                        	; ***************************************************************************
   29                        	; ***************************************************************************
   30                        	
   31                        	;
   32                        	; Are we going to take over MPR7?
   33                        	;
   34                        	; While this is the default for the "CORE(not TM)" library, it is definitely
   35                        	; possible to use the library to build CD-ROM code that runs with the System
   36                        	; Card in MPR7, and with the 1st bank remaining in MPR2.
   37                        	;
   38                        	; N.B. The CD-ROM Stage1 loader runs the library with USING_MPR7=0 while it
   39                        	;      installs the kernel into PCE RAM in MPR1.
   40                        	;
   41                        	
   42               0000     		.ifndef	USING_MPR7
   44                        		.endif
   45                        	
   46                        	;
   47                        	; Are we building a CD-ROM overlay that uses an already-built CD-ROM Stage1
   48                        	; loader to install the library's kernel code into PCE RAM in MPR1?
   49                        	;
   50                        	; If this is set, the library's kernel code will be excluded from the build,
   51                        	; which will save about 1KB-3KB of code space in every overlay program!
   52                        	;
   53                        	; N.B. The CD-ROM Stage1 loader sets USING_STAGE1=0 so it builds correctly.
   54                        	;
   55                        	
   56               0000     		.ifndef	USING_STAGE1
   58                        		.endif
   59                        	
   60                        	;
   61                        	; Are we currently building the CD-ROM Stage1 loader?
   62                        	;
   63                        	; If this is set, the library's startup code does not call the __sound_init
   64                        	; macro because the sound driver code is not usually a part of the kernel.
   65                        	;
   66                        	; N.B. The CD-ROM Stage1 loader sets BUILDING_STAGE1=1 so it builds correctly.
   67                        	;
   68                        	
   69               0000     		.ifndef	BUILDING_STAGE1
   71                        		.endif
   72                        	
   73                        	;
   74                        	; Is the last track of the CD a duplicate of the main ISO data track?
   75                        	;
   76                        	; Most CD games put two copies of the same ISO track on the CD, so that data
   77                        	; can be read from the secondary track if the drive has a problem reading it
   78                        	; it from the primary location.
   79                        	;
   80                        	; If set, the secondary track will be enabled when the library first starts.
   81                        	;
   82                        	
   83               0000     		.ifndef	SUPPORT_2ISO
   85                        		.endif
   86                        	
   87                        	;
   88                        	; Maximum number of directory entries to use from the ISO.
   89                        	;
   90                        	; The fewer that we choose, the less RAM memory we need. A setting of 64 is
   91                        	; a good compromise to use until you are putting lots of files on the ISO.
   92                        	;
   93                        	
   94               0000     		.ifndef	MAX_DIRSIZE
   96                        		.endif
   97                        	
   98                        	;
   99                        	; Use the System Card's PSG driver code instead of a modern alternative
  100                        	; sound driver like a DefleMask or Furnace player?
  101                        	;
  102                        	
  103               0000     		.ifndef	USING_PSGDRIVER
  105                        		.endif
  106                        	
  107                        	;
  108                        	; Support development for the Turbo EverDrive v2?
  109                        	;
  110                        	; This only applies to HuCard programs, but when chosen, the "CORE(not TM)"
  111                        	; kernel is moved from bank 0 to bank 2, and a minimal set of startup code
  112                        	; is put in bank 0.
  113                        	;
  114                        	; This is because the TED2 hardware occupies the whole of bank 0 when it is
  115                        	; activated, and so we need to run with a different bank in MPR7.
  116                        	;
  117                        	
  118               0000     		.ifndef	SUPPORT_TED2
  120                        		.endif
  121                        	
  122                        	;
  123                        	; Support development for the SuperGRAFX?
  124                        	;
  125                        	; This enables SuperGRAFX support in certain library functions.
  126                        	;
  127                        	
  128               0000     		.ifndef	SUPPORT_SGX
  130                        		.endif
  131                        	
  132                        	;
  133                        	; Choose SuperGRAFX VPC initialization mode.
  134                        	;
  135                        	; SGX_PARALLAX=0 (useful when VDC #1 is a fullscreen HUD)
  136                        	;
  137                        	;  FRONT
  138                        	;   SP1 = VDC #1 (pce) sprite pixels
  139                        	;   BG1 = VDC #1 (pce) background pixels
  140                        	;   SP2 = VDC #2 (sgx) sprite pixels
  141                        	;   BG2 = VDC #2 (sgx) background pixels
  142                        	;  BACK
  143                        	;
  144                        	; SGX_PARALLAX=1
  145                        	;
  146                        	;  FRONT
  147                        	;   SP1 = VDC #1 (pce) sprite pixels
  148                        	;   SP2 = VDC #2 (sgx) sprite pixels
  149                        	;   BG1 = VDC #1 (pce) background pixels
  150                        	;   BG2 = VDC #2 (sgx) background pixels
  151                        	;  BACK
  152                        	;
  153                        	
  154               0000     		.ifndef	SGX_PARALLAX
  156                        		.endif
  157                        	
  158                        	;
  159                        	; Support development for the ArcadeCard?
  160                        	;
  161                        	; This enables ArcadeCard support in certain library functions.
  162                        	;
  163                        	
  164               0000     		.ifndef	SUPPORT_ACD
  166                        		.endif
  167                        	
  168                        	;
  169                        	; Support development for the IFU's ADPCM hardware?
  170                        	;
  171                        	; Developers would normally just use the System Card functions for ADPCM, but
  172                        	; enabling this adds alternative functions, and allows ADPCM use on a HuCARD.
  173                        	;
  174                        	
  175               0000     		.ifndef	SUPPORT_ADPCM
  177                        		.endif
  178                        	
  179                        	;
  180                        	; Select which version of the joystick library code to include, only one of
  181                        	; these can be set to '1' ...
  182                        	;
  183                        	; SUPPORT_2BUTTON : Only returns buttons I and II.
  184                        	; SUPPORT_6BUTTON : Read buttons III-VI, but ignore a mouse.
  185                        	; SUPPORT_MOUSE	  : Read mouse, but ignore buttons III-VI.
  186                        	;
  187                        	; It doesn't make sense to design a game the relies on both the 6-button and
  188                        	; the mouse, so the joystick library is optimized for one or the other.
  189                        	;
  190                        	; Note that both those devices are always detected and no conflicts occur,
  191                        	; this just controls reading either buttons III-VI or the Mouse Y-movement.
  192                        	;
  193                        	
  194               0000     		.ifndef	SUPPORT_6BUTTON
  200                        		.endif
  201                        	
  202                        	;
  203                        	; How many joypad/mouse devices should be supported?
  204                        	;
  205                        	; This is normally 5, but can be set to 3 (or lower) in order to speed up
  206                        	; the processing and free up CPU time for other code, which is especially
  207                        	; useful for mouse games.
  208                        	;
  209                        	
  210               0000     		.ifndef	MAX_PADS
  212                        		.endif
  213                        	
  214                        	;
  215                        	; Implement a HuC-compatible seperate array for accumulating joypad presses?
  216                        	;
  217                        	; This is only really needed if your game is not expected to run at 60Hz and
  218                        	; so you will sometimes miss joypad presses.
  219                        	;
  220                        	; Alternatively you can set ACCUMULATE_JOY so that joypad presses are always
  221                        	; accumulated in the normal joytrg array, which is how asm programmers would
  222                        	; normally deal with this situation.
  223                        	;
  224                        	
  225               0000     		.ifndef HUC_JOY_EVENTS
  227                        		.endif
  228                        	
  229                        	;
  230                        	; Should "joytrg" accumulate presses, and so need to be explicitely cleared
  231                        	; after reading, or should it just be the result of the last read?
  232                        	;
  233                        	; This option has no effect if HUC_JOY_EVENTS is non-zero since that option
  234                        	; takes precedence over this one!
  235                        	;
  236                        	
  237               0000     		.ifndef ACCUMULATE_JOY
  239                        		.endif
  240                        	
  241                        	;
  242                        	; The DATA_BANK location needs to be set as early as possible so that library
  243                        	; code is able to put data in there before the total overall size of the code
  244                        	; is known.
  245                        	;
  246                        	; By default, DATA_BANK is the next bank after the CORE_BANK.
  247                        	;
  248                        	; RESERVE_BANKS allows developers to reserve some banks between the CORE_BANK
  249                        	; and the DATA_BANK that they can use however they wish.
  250                        	;
  251                        	; One use for RESERVE_BANKS is to create empty space that PCEAS can use when
  252                        	; it relocates procedures. This provides a way for a developer to group code
  253                        	; together at the start of memory, and leave the maximum number of banks for
  254                        	; loading dynamic data from CD-ROM.
  255                        	;
  256                        	; The KickC environment sets RESERVE_BANKS=1 (or higher) so that there is a
  257                        	; a bank for the permanent C code and static constants.
  258                        	;
  259                        	
  260               0000     		.ifndef	RESERVE_BANKS
  266                        		.endif	RESERVE_BANKS
                             #[3]   "..\..\..\include\hucc\core.inc"
   35                        	
   36                        	;
   37                        	; This is a simple macro to call System Card functions when using MPR7 for
   38                        	; running the "CORE(not TM)" PC Engine library code.
   39                        	;
   40                        	
   41                        	system		.macro
   42                        			ldy     #<\1
   43                        			jsr	call_bios
   44                        			.endm
   45                        	
   46                        	;
   47                        	; This replaces the System Card's ex_setvec, because "call_bios" uses the
   48                        	; Y register.
   49                        	;
   50                        	
   51                        	setvec		.macro
   52                        			php
   53                        			sei
   54                        			lda.l	#\2
   55                        			sta.l	\1
   56                        			lda.h	#\2
   57                        			sta.h	\1
   58                        			plp
   59                        			.endm
   60                        	
   61                        	;
   62                        	; Repurpose this System Card variable, since nmi_hook is never used.
   63                        	;
   64                        	; We'll use it as a vector to a user-supplied sound driver instead.
   65                        	;
   66                        	
   67               2206     	sound_hook	=	nmi_hook		; Sound Driver to run in VBL.
   68                        	
   69                        	;
   70                        	; CORE Zero-Page variables, relative to the System Card's ZP variables.
   71                        	;
   72                        	
   73               0000     		.if	USING_PSGDRIVER
   75                        		.else
   76               20EC     	core_zpend	=	$F8:20EC
   77                        		.endif	USING_PSGDRIVER
   78                        	
   79               0001     		.if	SUPPORT_SGX
   80                        	
   81                        			; Put some "CORE(not TM)" variables at the start of Zero Page.
   82                        			;
   83                        			; These are at the *start* of ZP so that the SuperGrafx shadow
   84                        			; "sgx_" registers are at a specific offset from their System
   85                        			; Card "vdc_" counterparts, and they MUST NOT be moved!
   86                        			;
   87                        			; This allows us to put SGX_VDC_OFFSET or PCE_VDC_OFFSET into
   88                        			; the X register, and then index into either set of hardware
   89                        			; registers and the "sgx_reg" or "vdc_reg" shadow-variables.
   90                        	
   91               0000     	PCE_VDC_OFFSET	=	$00		; Offset to PCE VDC chip & shadow vars.
   92               0010     	SGX_VDC_OFFSET	=	$10		; Offset to SGX VDC chip & shadow vars.
   93                        	
   94               2000     			.zp
   95               2000     			.org	$2000
   96    F8:2000             	__temp		ds	2		; $F8:2000 Use within any ASM routine.
   97    F8:2002             	_bp_bank	ds	1		; $F8:2002 Use within any ASM/HuCC routine.
   98    F8:2003             	sgx_crl		ds	1		; $F8:2003 SGX shadow (vdc_crl = $20F3).
   99    F8:2004             	sgx_crh		ds	1		; $F8:2004 SGX shadow (vdc_crh = $20F4).
  100    F8:2005             	core_1stbank	ds	1		; $F8:2005 1st bank of library code.
  101    F8:2006             	sgx_sr		ds	1		; $F8:2006 SGX shadow (vdc_sr  = $20F6).
  102    F8:2007             	sgx_reg		ds	1		; $F8:2007 SGX shadow (vdc_reg = $20F7).
  103                        	
  104               2008     	core_zp1st	=	*		; $F8:2008 1st free user address.
  105                        	
  106                        		.else	SUPPORT_SGX
  116                        		.endif	SUPPORT_SGX
  117                        	
  118                        	;
  119                        	; The kernel code in RAM follows the System Card's RAM variables.
  120                        	;
  121                        	
  122               0000     		.if	USING_PSGDRIVER
  124                        		.else
  125               22D0     	core_ram1st     =	$F8:22D0
  126                        		.endif	USING_PSGDRIVER
  127                        	
  128                        	;
  129                        	; Include the "CORE(not TM)" startup code to begin the HuCARD / Overlay.
  130                        	;
  131                        	
                             #[4]   "..\..\..\include\hucc\core-startup.asm"
  132                        			include	"core-startup.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; core-startup.asm
    5                        	;
    6                        	; The "CORE(not TM)" PC Engine library startup code that runs at boot/reset.
    7                        	;
    8                        	; Copyright John Brandwood 2021-2024.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; This is the initialization code in the 1st bank, and it is responsible for
   18                        	; setting up a consistant runtime environment for the developer's program,
   19                        	; so that the developer can concentrate on writing the program itself.
   20                        	;
   21                        	; The idea is that when a program is loaded, the first 40KB of it is mapped
   22                        	; as $4000..$DFFF, and initialization starts at $4000, with the developer's
   23                        	; program getting control after initialization, with a jump to "core_main".
   24                        	;
   25                        	; The initializtion sets up a small kernel of code that provides interrupt
   26                        	; handling that mimics a subset of the System Card's behavior, designed to
   27                        	; act in the same way on HuCARD and CD-ROM, with either the System Card in
   28                        	; MPR7, or with an overlay in MPR7.
   29                        	;
   30                        	; The kernel handles reading the joypad/mouse, and it offers handler hooks
   31                        	; for running the developer's interrupt code.  On CD-ROM systems, it also
   32                        	; handles the loading and running of subsequent overlay programs.
   33                        	;
   34                        	; On HuCARD, the kernel itself runs in MPR7; while on CD-ROM systems it is
   35                        	; run from RAM in MPR1, so that overlay programs are independant from each
   36                        	; other, and can be written in different programming languages.
   37                        	;
   38                        	;
   39                        	; 1) If we're running on a HuCARD, the initialization is simple!
   40                        	;
   41                        	;    The PC Engine's memory map is set to ...
   42                        	;
   43                        	;      MPR0 = bank $FF : PCE hardware
   44                        	;      MPR1 = bank $F8 : PCE RAM with Stack & ZP
   45                        	;      MPR2 = bank $00 : HuCARD ROM
   46                        	;      MPR3 = bank $01 : HuCARD ROM
   47                        	;      MPR4 = bank $02 : HuCARD ROM
   48                        	;      MPR5 = bank $03 : HuCARD ROM
   49                        	;      MPR6 = bank $04 : HuCARD ROM
   50                        	;      MPR7 = bank $00 : HuCARD ROM
   51                        	;
   52                        	;
   53                        	; 2) If we're running on a HuCARD that supports the Turbo Everdrive, then the
   54                        	;    first 2 banks are reserved for mapping the TED2 hardware and a RAM bank.
   55                        	;
   56                        	;    The PC Engine's memory map is set to ...
   57                        	;
   58                        	;      MPR0 = bank $FF : PCE hardware
   59                        	;      MPR1 = bank $F8 : PCE RAM with Stack & ZP
   60                        	;      MPR2 = bank $02 : HuCARD ROM
   61                        	;      MPR3 = bank $03 : HuCARD ROM
   62                        	;      MPR4 = bank $04 : HuCARD ROM
   63                        	;      MPR5 = bank $05 : HuCARD ROM
   64                        	;      MPR6 = bank $06 : HuCARD ROM
   65                        	;      MPR7 = bank $02 : HuCARD ROM
   66                        	;
   67                        	;
   68                        	; 3) If we're running on an old CD System, the overlay is loaded from the ISO
   69                        	;    into banks $80-$87 (64KB max).
   70                        	;
   71                        	;    The PC Engine's memory map is set to ...
   72                        	;
   73                        	;      MPR0 = bank $FF : PCE hardware
   74                        	;      MPR1 = bank $F8 : PCE RAM with Stack & ZP
   75                        	;      MPR2 = bank $80 : CD RAM
   76                        	;      MPR3 = bank $81 : CD RAM
   77                        	;      MPR4 = bank $82 : CD RAM
   78                        	;      MPR5 = bank $83 : CD RAM
   79                        	;      MPR6 = bank $84 : CD RAM
   80                        	;      MPR7 = bank $80 : CD RAM or System Card's bank $00
   81                        	;
   82                        	;
   83                        	; 4) If we're running on a SuperCD System, the overlay is loaded from the ISO
   84                        	;    into banks $68-$87 (256KB max).
   85                        	;
   86                        	;    The PC Engine's memory map is set to ...
   87                        	;
   88                        	;      MPR0 = bank $FF : PCE hardware
   89                        	;      MPR1 = bank $F8 : PCE RAM with Stack & ZP
   90                        	;      MPR2 = bank $68 : SCD RAM
   91                        	;      MPR3 = bank $69 : SCD RAM
   92                        	;      MPR4 = bank $6A : SCD RAM
   93                        	;      MPR5 = bank $6B : SCD RAM
   94                        	;      MPR6 = bank $6C : SCD RAM
   95                        	;      MPR7 = bank $68 : SCD RAM or System Card's bank $00
   96                        	;
   97                        	; ***************************************************************************
   98                        	; ***************************************************************************
   99                        	
  100                        	
  101                        	
  102               E000     			.code
  103               0000     			.bank	0
  104                        	
  105               0000     		.if	SUPPORT_TED2			; Do we want to use a TED2?
  177                        		.endif	SUPPORT_TED2
  178                        	
  179                        	
  180                        	
  181               0001     		.if	USING_MPR7
  182                        	
  183                        	; ***************************************************************************
  184                        	; ***************************************************************************
  185                        	;
  186                        	; RESET VECTORS (when running in MPR7, either as a HuCARD, or a CD overlay)
  187                        	;
  188                        	
  189                        			; Hardware reset and interrupt vectors.
  190                        	
  191               FFF4     			.org	$FFF4
  192                        	
  193    00:FFF4  10         	core_version:	db	CORE_VERSION		; CORE(not TM) Version.
  194    00:FFF5  80         			db	$80			; System Card compatibility.
  195                        	
  196    00:FFF6  5D E0      			dw	core_irq2		; IRQ2	(from CD/ADPCM)
  197    00:FFF8  64 E0      			dw	core_irq1		; IRQ1	(from VDC)
  198    00:FFFA  58 E1      			dw	core_timer		; TIMER (from CPU)
  199    00:FFFC  5E E1      			dw	core_rti		; NMI	(unused)
  200               0000     		.if	CDROM
  202                        		.else
  203    00:FFFE  21 E0      			dw	core_hw_reset		; RESET (HuCARD)
  204                        		.endif	CDROM
  205                        	
  206               0001     		.if	USING_NEWPROC			; If the ".proc" trampolines
  207               FFF3     	__trampolineptr =	$FFF3			; are in MPR7, tell PCEAS to
  208                        		.endif					; put them below the vectors.
  209                        	
  210                        		.else	USING_MPR7
  222                        		.endif	USING_MPR7
  223                        	
  224                        	
  225                        	
  226                        	; ***************************************************************************
  227                        	; ***************************************************************************
  228                        	;
  229                        	; !!! THE HuCARD/OVERLAY PROGRAM'S FIRST BANK STARTS HERE !!!
  230                        	;
  231                        	
  232                        			; Switch to MPR2 for the "CORE(not TM)" library init.
  233                        			;
  234                        			; This is also executed by a HuCARD once it has run
  235                        			; its initial hardware-reset code.
  236                        			;
  237                        			; When run, MPR2-MPR6 are always mapped to the 1st 5 banks of
  238                        			; the overlay program, and MPR7 contains the System Card.
  239                        	
  240               4000     			.org	$4000
  241                        	
  242               0000     	CORE_BANK	=	bank(*) - _bank_base	; It isn't always zero! ;-)
  243                        	
  244               0000     			.bank	CORE_BANK, "CORE_BANK"	; Give it a label.
  245                        	
  246               0001     		.if	USING_MPR7
  247               0007     	CORE_PAGE	=	7			; User code runs in MPR7.
  248                        		.else
  250                        		.endif	USING_MPR7
  251                        	
  252    00:4000  4C 06 40   	core_boot:	jmp	* + 6			; Allow someone to patch this.
  253                        	
  254                        			; Add an ident string so isoLINK can autodetect configuration.
  255                        			;
  256                        			; This allows isoLINK to decide whether to use the IPL-SCD boot
  257                        			; sector hack, and whether to include a SuperGRAFX signature in
  258                        			; the boot sector, without the user having to manually use some
  259                        			; command line parameters, although they are free to do that if
  260                        			; they wish.
  261                        	
  262               0001     		.if	SUPPORT_SGX
  263               0000     		.if	BUILDING_STAGE1
  265                        		.else
  266    00:4003  53 47 58   			db	"SGX"			; SGX SuperCD or SGX HuCARD.
  267                        		.endif	BUILDING_STAGE1
  268                        		.else
  282                        		.endif	SUPPORT_SGX
  283                        	
  284               0000     		.if	CDROM
  331                        		.else	CDROM
  332                        	
  333                        			; Set up HuCARD RAM in a compatible way to the System Card.
  334                        			;
  335                        			; Note that the entire RAM is cleared by "core_hw_reset".
  336                        	
  337    00:4006  A9 1F      			lda	#%11111			; Enable joypad soft-reset.
  338    00:4008  8D 27 22   			sta	joyena
  339                        	
  340                        		.endif	CDROM
  341                        	
  342                        			; Now that RAM is initialized ...
  343                        	
  344    00:400B  43 04      			tma2				; Remember overlay's 1st bank
  345    00:400D  85 05      			sta	<core_1stbank		; $00, $02, $68 or $80!
  346               0001     		.if	USING_MPR7
  347    00:400F  53 80      			tam7				; "CORE(not TM)" takes MPR7!
  348                        		.endif
  349                        	
  350    00:4011  A2 FF      			ldx	#$FF			; Initialize stack pointer.
  351    00:4013  9A         			txs
  352                        	
  353    00:4014  20 5F E1   			jsr	core_clr_hooks		; Reset default hooks.
  354                        	
  355                        	;		stz	TIMER_CR		; Stop HuC6280 timer.
  356                        	;		stz	IRQ_ACK			; Clr HuC6280 timer interrupt.
  357                        	;		stz	IRQ_MSK			; Clr HuC6280 interrupt mask.
  358                        	
  359    00:4017  AD 00 02   			lda	VDC_SR			; Purge any overdue VBL.
  360    00:401A  9C 41 22   			stz	irq_cnt			; Make it easy to check.
  361    00:401D  58         			cli				; Restore interrupts.
  362                        	
  363    00:401E  4C E5 FF   			jmp	core_main		; Start the game's code.
  364                        	
  365                        	
  366                        	
  367               0001     		.if	!CDROM
  368                        	
  369                        	; ***************************************************************************
  370                        	; ***************************************************************************
  371                        	;
  372                        	; HuCARD Kernel Code
  373                        	;
  374                        	; core_ram1st - Start of code to relocate to MPR1.
  375                        	; core_ramend - End of code to relocate to MPR1.
  376                        	;
  377                        	
  378                        			; In a HuCARD, BSS variables start as low as possible.
  379                        	
  380               2200     			.bss
  381               22D0     			.org	core_ram1st
  382               22D0     	core_ramend	=	*
  383               4021     			.code
  384                        	
  385                        			; Normal HuCARD hardware-reset code, executed in MPR7.
  386                        			;
  387                        			; This does the basic PCE startup that every HuCARD (including
  388                        			; a System Card) needs to do, and then it remaps memory to be
  389                        			; compatible with the "CORE(not TM)" CD overlay program start.
  390                        	
  391               E021     			.page	7			; This will run in MPR7.
  392                        	
  393    00:E021  78         	core_hw_reset:	sei				; Disable interrupts.
  394    00:E022  D4         			csh				; Set high-speed mode.
  395    00:E023  D8         			cld
  396                        	
  397    00:E024  A2 FF      			ldx	#$FF			; Initialize stack pointer.
  398    00:E026  9A         			txs
  399    00:E027  8A         			txa				; MPR0 = $FF : PCE hardware
  400    00:E028  53 01      			tam0				; MPR1 = $F8 : PCE RAM
  401    00:E02A  A9 F8      			lda	#$F8
  402    00:E02C  53 02      			tam1
  403                        	
  404    00:E02E  9C 01 0C   			stz	TIMER_CR		; HW reset already does these,
  405    00:E031  9C 03 14   			stz	IRQ_ACK			; but this may be a reset from
  406    00:E034  9C 02 14   			stz	IRQ_MSK			; software (i.e. joypad).
  407                        	
  408    00:E037  F3 53 E0 00			tai	const_0000, $2000, 8192 ; Clear RAM.
         00:E03B  20 00 20    
  409                        	
  410    00:E03E  43 80      			tma7				; Not always bank 0!
  411                        	
  412    00:E040  53 04      			tam2				; Set CD-ROM overlay memory map,
  413    00:E042  1A         			inc	a			; 1st 5 banks in MPR2-MPR6.
  414    00:E043  53 08      			tam3
  415    00:E045  1A         			inc	a
  416    00:E046  53 10      			tam4
  417    00:E048  1A         			inc	a
  418    00:E049  53 20      			tam5
  419    00:E04B  1A         			inc	a
  420    00:E04C  53 40      			tam6
  421                        	
  422    00:E04E  4C 00 40   			jmp	core_boot		; Continue execution in MPR2.
  423                        	
  424                        			; In a HuCARD, the kernel code is permanently in MPR7.
  425                        	
                             #[5]   "..\..\..\include\hucc\core-kernel.asm"
  426                        			include "core-kernel.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; core-kernel.asm
    5                        	;
    6                        	; The "CORE(not TM)" PC Engine library kernel code that runs after startup.
    7                        	;
    8                        	; Copyright John Brandwood 2021-2024.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; This code is permanently located in either MPR7 (HuCARD), or MPR1 (CD-ROM),
   18                        	; and it provides a consistant method of interrupt-handling on both systems
   19                        	; that is designed to be compatible with the System Card.
   20                        	;
   21                        	; The library uses the "irq1_hook" for its own VDC interrupt handler, and PCE
   22                        	; developers are expected to use "vsync_hook" and "hsync_hook" for their VDC
   23                        	; interrupt functions.  Plenty of memory is available in the 1st bank for the
   24                        	; developer to put those functions.
   25                        	;
   26                        	; The reason for using "irq1_hook", is so that the library can work properly
   27                        	; if either the current overlay program, or the System Card, are mapped into
   28                        	; MPR7 whenever an interrupt occurs.
   29                        	;
   30                        	; The VDC interupt handler itself is changed from the System Card's handler,
   31                        	; and it is designed to provide faster response to vsync_hook, and to enable
   32                        	; interrupts during the slow(ish) joypad and sound driver code, so that both
   33                        	; raster and timer interrupts are not delayed.
   34                        	;
   35                        	; Developers are free to enable interrupts during their own vsync_hook code,
   36                        	; if they wish to do so.
   37                        	;
   38                        	; On CD-ROM systems, this library kernel also provides a function to load and
   39                        	; run a new overlay program, without relying upon any of the code/data within
   40                        	; the current overlay program's memory (unlike HuC v3).
   41                        	;
   42                        	; ***************************************************************************
   43                        	; ***************************************************************************
   44                        	
   45                        	
   46                        	
   47                        	; ***************************************************************************
   48                        	; ***************************************************************************
   49                        	;
   50                        	; core_kernel - Start of kernel code.
   51                        	;
   52                        	
   53               E051     	core_kernel	=	*
   54                        	
   55                        	
   56                        	
   57                        	; ***************************************************************************
   58                        	; ***************************************************************************
   59                        	;
   60                        	; Useful constants, needed by joypad library code, and used by many others.
   61                        	;
   62                        	; The kernel starts with a non-zero byte so that core-startup.asm can check
   63                        	; whether it has already been loaded into RAM.
   64                        	;
   65                        	
   66    00:E051  FF FF      	const_FFFF:	dw	$FFFF			; Useful constant for TAI.
   67    00:E053  00 00      	const_0000:	dw	$0000			; Useful constant for TAI.
   68                        	
   69    00:E055  01 02 04 08	bit_mask:	db	$01,$02,$04,$08,$10,$20,$40,$80
         00:E059  10 20 40 80 
   70                        	
   71                        	
   72                        	
   73                        	; ***************************************************************************
   74                        	; ***************************************************************************
   75                        	;
   76                        	; core_irq2  - Minimal interrupt handler compatible with System Card.
   77                        	; core_irq1  - Minimal interrupt handler compatible with System Card.
   78                        	; core_timer - Minimal interrupt handler compatible with System Card.
   79                        	; core_rti   - Minimal interrupt handler compatible with System Card.
   80                        	;
   81                        	; Note that it takes 8 cycles to respond to an IRQ.
   82                        	;
   83                        	; These routines are copied to a location in RAM that does not vary when
   84                        	; a different overlay program is loaded.
   85                        	;
   86                        	; All overlay programs are set up to vector interrupts to these routines,
   87                        	; which is designed to avoid interrupt-related crashes when loading a new
   88                        	; overlay on top of an old overlay in memory.
   89                        	;
   90                        	; All of the game's actual interrupt handling itself is done in the "hook"
   91                        	; functions so that everything works the same if the System Card is banked
   92                        	; into MPR7 when an interrupt occurs.
   93                        	;
   94                        	; ***************************************************************************
   95                        	; ***************************************************************************
   96                        	;
   97                        	; Bit settings for irq_vec  ...
   98                        	;
   99                        	;   7 : 1 to skip BIOS hsync processsing
  100                        	;   6 : 1 to call [hsync_hook]
  101                        	;   5 : 1 to skip BIOS vsync processsing
  102                        	;   4 : 1 to call [vsync_hook]
  103                        	;
  104                        	;   3 : 1 to jump [nmi_hook]
  105                        	;   2 : 1 to jump [timer_hook]
  106                        	;   1 : 1 to jump [irq1_hook]
  107                        	;   0 : 1 to jump [irq2_hook]
  108                        	;
  109                        	; ***************************************************************************
  110                        	; ***************************************************************************
  111                        	
  112    00:E05D  8F F5 01   	core_irq2:	bbs0	<irq_vec, .hook		; 8 cycles if using hook.
  113                        	
  114               0000     		.if	CDROM
  138                        		.else
  139                        			; Does this HuCARD support the IFU's ADPCM hardware?
  140                        	
  141               0000     		.if	SUPPORT_ADPCM
  153                        		.endif	SUPPORT_ADPCM
  154                        	
  155    00:E060  40         			rti				; No IRQ2 hardware on HuCARD.
  156                        	
  157    00:E061  6C 00 22   	.hook:		jmp	[irq2_hook]		; 7 cycles.
  158                        		.endif	CDROM
  159                        	
  160                        	
  161                        	
  162                        	; ***************************************************************************
  163                        	; ***************************************************************************
  164                        	;
  165                        	; core_irq1 - Minimal interrupt handler compatible with System Card.
  166                        	;
  167                        	; irq1_handler - Basic "CORE(not TM)" IRQ1 handler to use as the "irq1_hook".
  168                        	;
  169                        	; Doing the IRQ1 handler processing in this hook means that things operate
  170                        	; the same whether the System Card or an Overlay is paged into MPR7.
  171                        	
  172               0000     		.ifndef	HUCC
  181                        		.else
  182                        			; Faster IRQ servicing for HuCC and code that would like to
  183                        			; avoid the 8 cycles used by the "bbs1" instruction that is
  184                        			; taken when the System Card is mapped into MPR7.
  185                        	
  186    00:E064             	core_irq1:	;;;				; 8 (cycles for the INT)
  187               0001     		.if	CDROM || !defined(NO_CORE_IRQ1_HOOK)
  188    00:E064  6C 02 22   			jmp	[irq1_hook]		; 7 cycles.
  189                        	
  190                        		.endif
  191                        		.endif
  192                        	
  193    00:E067  48         	irq1_handler:	pha				; 3 Save all registers.
  194    00:E068  DA         			phx				; 3
  195    00:E069  5A         			phy				; 3
  196                        	
  197               0000     		.ifndef	USING_RCR_MACROS		;   This slows things down
  206                        		.endif	USING_RCR_MACROS
  207                        	
  208    00:E06A  AD 00 02   			lda	VDC_SR			; 6 Acknowledge the VDC's IRQ.
  209    00:E06D  85 F6      			sta	<vdc_sr			; 4 Remember what caused it.
  210                        	
  211               0001     		.if	SUPPORT_SGX
  212    00:E06F  AE 10 02   			ldx	SGX_SR			; 6 Read SGX_SR after VDC_SR in
  213    00:E072  86 06      			stx	<sgx_sr			; 4 case this is not an SGX!
  214                        		.endif
  215                        	
  216                        			; Handle the VDC's RCR interrupt.
  217                        	
  218    00:E074  29 04      	!:		and	#$04			; 2 Is this an HSYNC interrupt?
  219    00:E076  F0 44      			beq	!+			; 2
  220                        	
  221               0001     		.ifdef	USING_RCR_MACROS
  222                        			VDC_RCR_MACRO
                             	
         00:E078  03 06      			st0	#VDC_RCR		; 5
                             	
         00:E07A  AE F3 23   			ldx	vdc_next_region		; 5 X and Y can be greater than
         00:E07D  BC F4 23   			ldy	vdc_regionA_nxt, x	; 5 HUCC_PCE_SPLITS if regionB!
         00:E080  18         			clc				; 2
         00:E081  D0 05      			bne	!set_next_rcr+		; 4 Stop RCR if next line is 0.
                             	
         00:E083  2D 53 E0   			and	const_0000		; 5 A=$00 with the same #cycles
         00:E086  80 05      			bra	!clr_next_rcr+		; 4 as if the branch were taken.
                             	
         00:E088  B9 A3 23   	!set_next_rcr:	lda	vdc_regionA_rcr, y	; 5 Set next RCR 1 line before
         00:E08B  69 3F      			adc	#64-1			; 2 the region begins, or 0 to
         00:E08D  8D 02 02   	!clr_next_rcr:	sta	VDC_DL			; 6 disable.
         00:E090  62         			cla				; 2
         00:E091  2A         			rol	a			; 2
         00:E092  8D 03 02   			sta	VDC_DH			; 6
                             	
         00:E095  03 08      			st0	#VDC_BYR		; 5 Do BYR first to mitigate the
         00:E097  BD D3 23   			lda	vdc_regionA_yl, x	; 5 glitch if the IRQ is delayed.
         00:E09A  8D 02 02   			sta	VDC_DL			; 6 = 105 cycles from RCR on SGX
         00:E09D  BD E3 23   			lda	vdc_regionA_yh, x	; 5
         00:E0A0  8D 03 02   			sta	VDC_DH			; 6
                             	
         00:E0A3  03 05      			st0	#VDC_CR			; 5
         00:E0A5  BD 93 23   			lda	vdc_regionA_crl, x	; 5
                             	;		asl	a
         00:E0A8  8D 02 02   			sta	VDC_DL			; 6
                             	
         00:E0AB  03 07      			st0	#VDC_BXR		; 2
         00:E0AD  BD B3 23   			lda	vdc_regionA_xl, x	; 5
         00:E0B0  8D 02 02   			sta	VDC_DL			; 6
         00:E0B3  BD C3 23   			lda	vdc_regionA_xh, x	; 5
         00:E0B6  8D 03 02   			sta	VDC_DH			; 6 = 156 cycles from RCR if DUO
                             	
                             	;		bcc	!+
                             	;		lda	vdc_regionA_yh, x	; 5
                             	;		sta.l	VCE_CTW			; 6
                             	
         00:E0B9  8C F3 23   			sty	vdc_next_region		; 5
                             	
  223                        		.else
  225                        		.endif
  226                        	
  227               0001     		.if	SUPPORT_SGX
  228                        	
  229                        			; Handle the SGX's RCR interrupt.
  230                        	
  231    00:E0BC  2F 06 50   	!:		bbr2	<sgx_sr, !+		; 6 Is this an HSYNC interrupt?
  232                        	
  233               0001     		.ifdef	USING_RCR_MACROS
  234                        			SGX_RCR_MACRO
                             	
         00:E0BF  A9 06      			lda	#VDC_RCR		; 2
         00:E0C1  8D 10 02   			sta	SGX_AR			; 6
                             	
         00:E0C4  AE 74 24   			ldx	sgx_next_region		; 5 X and Y can be greater than
         00:E0C7  BC 75 24   			ldy	sgx_regionA_nxt, x	; 5 HUCC_SGX_SPLITS if regionB!
         00:E0CA  18         			clc				; 2
         00:E0CB  D0 05      			bne	!set_next_rcr+		; 4 Stop RCR if next line is 0.
                             	
         00:E0CD  2D 53 E0   			and	const_0000		; 5 A=$00 with the same #cycles
         00:E0D0  80 05      			bra	!clr_next_rcr+		; 4 as if the branch were taken.
                             	
         00:E0D2  B9 24 24   	!set_next_rcr:	lda	sgx_regionA_rcr, y	; 5 Set next RCR 1 line before
         00:E0D5  69 3F      			adc	#64-1			; 2 the region begins, or 0 to
         00:E0D7  8D 12 02   	!clr_next_rcr:	sta	SGX_DL			; 6 disable.
         00:E0DA  62         			cla				; 2
         00:E0DB  2A         			rol	a			; 2
         00:E0DC  8D 13 02   			sta	SGX_DH			; 6
                             	
         00:E0DF  A9 08      			lda	#VDC_BYR		; 2 Do BYR first to mitigate the
         00:E0E1  8D 10 02   			sta	SGX_AR			; 6 glitch if the IRQ is delayed.
         00:E0E4  BD 54 24   			lda	sgx_regionA_yl, x	; 5
         00:E0E7  8D 12 02   			sta	SGX_DL			; 6
         00:E0EA  BD 64 24   			lda	sgx_regionA_yh, x	; 5
         00:E0ED  8D 13 02   			sta	SGX_DH			; 6
                             	
         00:E0F0  A9 05      			lda	#VDC_CR			; 2
         00:E0F2  8D 10 02   			sta	SGX_AR			; 6
         00:E0F5  BD 14 24   			lda	sgx_regionA_crl, x	; 5
         00:E0F8  8D 12 02   			sta	SGX_DL			; 6
                             	
         00:E0FB  A9 07      			lda	#VDC_BXR		; 2
         00:E0FD  8D 10 02   			sta	SGX_AR			; 6
         00:E100  BD 34 24   			lda	sgx_regionA_xl, x	; 5
         00:E103  8D 12 02   			sta	SGX_DL			; 6
         00:E106  BD 44 24   			lda	sgx_regionA_xh, x	; 5
         00:E109  8D 13 02   			sta	SGX_DH			; 6 = 293 cycles (282 if no YH)
                             	
         00:E10C  8C 74 24   			sty	sgx_next_region		; 5
                             	
  235                        		.else
  237                        		.endif
  238                        	
  239                        		.endif	SUPPORT_SGX
  240                        	
  241                        			; Handle the VDC's VBL interrupt.
  242                        	
  243    00:E10F  5F F6 32   	!:		bbr5	<vdc_sr, .exit_irq1	; 6 Is this a VBLANK interrupt?
  244                        	
  245               0001     		.ifdef	USING_RCR_MACROS		;   If we didn't do it earlier
  246               0000     		.if	CDROM				;   then we need to do it now.
  253                        		.endif	CDROM
  254                        		.endif	USING_RCR_MACROS
  255                        	
  256               0001     		.if	SUPPORT_SGX
  257    00:E112  A9 05      			lda	#VDC_CR			; Update the SGX's Control
  258    00:E114  8D 10 02   			sta	SGX_AR			; Register first, just in
  259    00:E117  8D 00 02   			sta	VDC_AR			; case this is not an SGX!
  260    00:E11A  A5 03      			lda	<sgx_crl		
  261    00:E11C  8D 12 02   			sta	SGX_DL
  262    00:E11F  A5 F3      			lda	<vdc_crl
  263    00:E121  8D 02 02   			sta	VDC_DL
  264                        	
  265                        	;		lda	<sgx_crh		; Do not mess with the SGX's
  266                        	;		sta	SGX_DH			; auto-increment!!!
  267                        	;		lda	<vdc_crh		; Do not mess with the VDC's
  268                        	;		sta	VDC_DH			; auto-increment!!!
  269                        		.else
  277                        		.endif	SUPPORT_SGX
  278                        	
  279    00:E124  EE 41 22   			inc	irq_cnt			; Mark that a VBLANK occurred.
  280                        	
  281    00:E127  4F F5 02   			bbr4	<irq_vec, .skip_hookv	; Is a driver registered?
  282                        	
  283    00:E12A  44 26      			bsr	.user_vsync		; Call game's VBLANK code.
  284                        	
  285    00:E12C  DF F5 15   	.skip_hookv:	bbs5	<irq_vec, .exit_vbl	; Should we skip "BIOS" stuff?
  286                        	
  287    00:E12F  58         			cli				; Allow HSYNC and TIMER IRQ.
  288                        	
  289    00:E130  20 DB FF   			call	read_joypads		; Update joypad state.
  290                        	
  291               0000     		.if	USING_PSGDRIVER
  305                        		.else
  306    00:E133  AD 07 22   			lda	sound_hook + 1		; Is a driver registered?
  307    00:E136  F0 0C      			beq	.exit_vbl
  308                        	
  309    00:E138  A9 80      			lda	#$80			; Acquire sound mutex to avoid
  310    00:E13A  0C E7 22   			tsb	sound_mutex		; conflict with a delayed VBL.
  311    00:E13D  30 05      			bmi	.exit_vbl
  312                        	
  313    00:E13F  44 14      			bsr	.user_sound		; Call the driver hook.
  314                        	
  315    00:E141  9C E7 22   			stz	sound_mutex		; Release sound mutex.
  316                        		.endif	USING_PSGDRIVER
  317                        	
  318    00:E144             	.exit_vbl:
  319                        	
  320               0001     		.ifdef	USING_RCR_MACROS		; If USING_RCR_MACROS then 
  321               0000     		.if	CDROM				; restore after the VBLANK.
  326                        		.endif	CDROM
  327                        		.endif	USING_RCR_MACROS
  328                        	
  329    00:E144             	.exit_irq1:
  330                        	
  331               0000     		.ifndef	USING_RCR_MACROS		; If !USING_RCR_MACROS then
  338                        		.endif	USING_RCR_MACROS
  339                        	
  340               0001     		.if	SUPPORT_SGX
  341    00:E144  A5 07      			lda	<sgx_reg		; Restore SGX_AR first, just
  342    00:E146  8D 10 02   			sta	SGX_AR			; in case this is not an SGX!
  343                        		.endif
  344                        	
  345    00:E149  A5 F7      			lda	<vdc_reg		; Restore VDC_AR in case we
  346    00:E14B  8D 00 02   			sta	VDC_AR			; changed it.
  347                        	
  348    00:E14E  7A         			ply				; Restore all registers.
  349    00:E14F  FA         			plx
  350    00:E150  68         			pla
  351                        	
  352    00:E151  40         			rti				; Return from interrupt.
  353                        	
  354    00:E152  6C 08 22   	.user_vsync:	jmp	[vsync_hook]		; 7
  355    00:E155  6C 06 22   	.user_sound:	jmp	[sound_hook]		; 7
  356                        	
  357               0000     		.ifndef	USING_RCR_MACROS
  362                        		.endif	USING_RCR_MACROS
  363                        	
  364                        	
  365                        	
  366                        	; ***************************************************************************
  367                        	; ***************************************************************************
  368                        	;
  369                        	; core_timer - Minimal interrupt handler compatible with System Card.
  370                        	;
  371                        	; tirq_handler - Basic "CORE(not TM)" TIRQ handler to use as the "timer_hook".
  372                        	;
  373                        	; Doing the TIRQ handler processing in this hook means that things operate
  374                        	; the same whether the System Card or an Overlay is paged into MPR7.
  375                        	
  376               0000     		.ifndef	HUCC
  385                        		.else
  386                        			; Faster IRQ servicing for HuCC and code that would like to
  387                        			; avoid the 8 cycles used by the "bbs2" instruction that is
  388                        			; taken when the System Card is mapped into MPR7.
  389                        	
  390    00:E158             	core_timer:	;;;				; 8 (cycles for the INT)
  391               0001     		.if	CDROM || !defined(NO_CORE_TIRQ_HOOK)
  392    00:E158  6C 04 22   			jmp	[timer_hook]		; 7 cycles.
  393                        		.endif
  394                        		.endif
  395                        	
  396    00:E15B             	tirq_handler:
  397               0000     		.ifdef	USING_TIRQ_MACRO
  399                        		.else
  400    00:E15B  9C 03 14   			stz	IRQ_ACK			; 5 Clear timer interrupt.
  401                        		.endif
  402                        	
  403    00:E15E  40         	core_rti:	rti
  404                        	
  405                        	
  406                        	
  407                        	; ***************************************************************************
  408                        	; ***************************************************************************
  409                        	;
  410                        	; core_clr_hooks - Reset default "CORE(not TM)" interrupt-handling hooks.
  411                        	;
  412                        	
  413    00:E15F  08         	core_clr_hooks:	php				; Preserve interrupt state.
  414    00:E160  78         			sei				; Disable interrupts.
  415                        	
  416               0000     		.if	USING_PSGDRIVER
  419                        		.else
  420    00:E161  9C 07 22   			stz.h	sound_hook		; Disable sound driver calls.
  421                        		.endif
  422                        	
  423    00:E164  A9 88      			lda	#<core_sw_reset		; Set up the soft-reset hook.
  424    00:E166  8D 84 22   			sta.l	reset_hook
  425    00:E169  A9 E1      			lda	#>core_sw_reset
  426    00:E16B  8D 85 22   			sta.h	reset_hook
  427                        	
  428    00:E16E  A9 67      			lda	#<irq1_handler		; Set up the IRQ1 hook.
  429    00:E170  8D 02 22   			sta.l	irq1_hook
  430    00:E173  A9 E0      			lda	#>irq1_handler
  431    00:E175  8D 03 22   			sta.h	irq1_hook
  432                        	
  433    00:E178  A9 5B      			lda	#<tirq_handler		; Set up the TIRQ hook.
  434    00:E17A  8D 04 22   			sta.l	timer_hook
  435    00:E17D  A9 E1      			lda	#>tirq_handler
  436    00:E17F  8D 05 22   			sta.h	timer_hook
  437                        	
  438    00:E182  A9 06      			lda	#%00000110		; Replace the System Card's
  439    00:E184  85 F5      			sta	<irq_vec		; IRQ1 and TIRQ processing.
  440                        	
  441    00:E186  28         			plp				; Restore interrupt state.
  442    00:E187  60         			rts
  443                        	
  444                        	
  445                        	
  446                        	; ***************************************************************************
  447                        	; ***************************************************************************
  448                        	;
  449                        	; Include the joypad library, with configuration from "core-config.inc".
  450                        	;
  451                        	
                             #[6]   "..\..\..\include\hucc\joypad.asm"
  452                        			include "joypad.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; joypad.asm
    5                        	;
    6                        	; Read 2-button & 6-button joypads & PCE mouse, with or without a MultiTap.
    7                        	;
    8                        	; Copyright John Brandwood 2019-2025.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; Unlike Lemmings, this code does not interfere with a Memory Base 128! ;-)
   18                        	;
   19                        	; ***************************************************************************
   20                        	; ***************************************************************************
   21                        	;
   22                        	; With SUPPORT_MOUSE ..... 2602 cycles to read 5 ports with 5 mice
   23                        	;
   24                        	; With HuC library code .. 2442 cycles to read 5 ports with 5 pads (2-button)
   25                        	; With HuC library code .. 2442 cycles to read 5 ports with 5 pads (6-button)
   26                        	;
   27                        	; With SUPPORT_MOUSE ....  2016 cycles to read 5 ports with 5 pads (2-button)
   28                        	; With SUPPORT_MOUSE ..... 1976 cycles to read 5 ports with 5 pads (6-button)
   29                        	;
   30                        	; With SUPPORT_MOUSE ....  1618 cycles to read 3 ports with 3 mice
   31                        	; With SUPPORT_MOUSE ..... 1462 cycles to read 3 ports with 2 mice
   32                        	; With SUPPORT_MOUSE ..... 1306 cycles to read 3 ports with 1 mouse
   33                        	;
   34                        	; With SUPPORT_6BUTTON ... 1235 cycles to read 5 ports with 5 pads (2-button)
   35                        	; With SUPPORT_6BUTTON ... 1215 cycles to read 5 ports with 5 pads (6-button)
   36                        	;
   37                        	; With SUPPORT_MOUSE ..... 1126 cycles to read 2 ports with 2 mice
   38                        	; With SUPPORT_MOUSE ...... 970 cycles to read 2 ports with 1 mouse
   39                        	;
   40                        	; Only SUPPORT_2BUTTON .... 971 cycles to read 5 ports with 5 pads (2-button)
   41                        	; Only SUPPORT_2BUTTON .... 861 cycles to read 5 ports with 5 pads (6-button)
   42                        	;
   43                        	; With SUPPORT_MOUSE ...... 634 cycles to read 1 port  with 1 mouse
   44                        	;
   45                        	; ***************************************************************************
   46                        	; ***************************************************************************
   47                        	
  142                        	
  143                        	;
  144                        	; Now choose which version of the code to include.
  145                        	;
  146                        	
  147               0000     		.if	SUPPORT_2BUTTON
  278                        		.endif	SUPPORT_2BUTTON
  279                        	
  280                        	
  281                        	
  282               0000     		.if	SUPPORT_MOUSE
  845                        		.else	SUPPORT_MOUSE
  846                        	
  847                        	
  848                        	
  849               0001     		.if	SUPPORT_6BUTTON			; Without mouse!
  850                        	
  851                        	; ***************************************************************************
  852                        	; ***************************************************************************
  853                        	;
  854                        	; read_joypads - full 6-button pad support, but mouse movement is ignored.
  855                        	;
  856                        	; This code distinguishes between a mouse and a 2-button or 6-button joypad,
  857                        	; so that unsupported devices do not have to be unplugged from the MultiTap.
  858                        	;
  859                        	; The code loops two times to get both sets of buttons on a 6-button joypad.
  860                        	;
  861                        	; N.B. Takes approx 1/3 frame to detect mice the first time it is run.
  862                        	;
  863                        	; bit values for joypad 2-button bytes: (MSB = #7; LSB = #0)
  864                        	; ----------------------------------------------------------
  865                        	; bit 0 (ie $01) = I
  866                        	; bit 1 (ie $02) = II
  867                        	; bit 2 (ie $04) = SELECT
  868                        	; bit 3 (ie $08) = RUN
  869                        	; bit 4 (ie $10) = UP
  870                        	; bit 5 (ie $20) = RIGHT
  871                        	; bit 6 (ie $40) = DOWN
  872                        	; bit 7 (ie $80) = LEFT
  873                        	;
  874                        	; bit values for joypad 6-button bytes: (MSB = #7; LSB = #0)
  875                        	; ----------------------------------------------------------
  876                        	; bit 0 (ie $01) = III
  877                        	; bit 1 (ie $02) = IV
  878                        	; bit 2 (ie $04) = V
  879                        	; bit 3 (ie $08) = VI
  880                        	; bit 4 (ie $10) = zero
  881                        	; bit 5 (ie $20) = zero
  882                        	; bit 6 (ie $40) = zero
  883                        	; bit 7 (ie $80) = zero, but set to one if 6-button pad detected.
  884                        	;
  885                        	
  886               E188     			.code
  887                        	
  888               0001     		.if	(* >= $4000)			; Make this a ".proc" if it
  889    09:DE82             	read_joypads	.proc                           ; not running in RAM.
  890                        		.else
  892                        		.endif
  893                        	
  894    09:DE82  A9 80      			lda	#$80			; Acquire port mutex to avoid
  895    09:DE84  0C D0 22   			tsb	port_mutex		; conflict with a delayed VBL
  896    09:DE87  30 75      			bmi	.exit			; or access to an MB128.
  897                        	
  898    09:DE89  73 28 22 32			tii	joynow,joyold,MAX_PADS	; Save the previous values.
         09:DE8D  22 05 00    
  899    09:DE90  73 D3 22 D8			tii	joy6now,joy6old,MAX_PADS
         09:DE94  22 05 00    
  900                        	
  901                        			; Reset the 6-btn bits, the user might change the joypad mode!
  902                        	
  903    09:DE97  F3 53 E0 D3			tai	const_0000, joy6now, MAX_PADS
         09:DE9B  22 05 00    
  904                        	
  905                        			; Detect attached mice the first time this routine is called.
  906                        	
  907    09:DE9E  AD D2 22   			lda	mouse_flg		; Has mouse detection happened?
  908    09:DEA1  30 28      			bmi	.calc_pressed
  909                        	
  910    09:DEA3  A9 05      			lda	#MAX_PADS		; Reset number of pads to read.
  911    09:DEA5  8D D1 22   			sta	num_ports
  912                        	
  913    09:DEA8  A9 1F      			lda	#%00011111		; Try reading everything as a
  914    09:DEAA  8D D2 22   			sta	mouse_flg		; mouse.
  915                        	
  916    09:DEAD  A0 17      			ldy	#23			; Initialize repeat count.
  917    09:DEAF  A9 80      			lda	#$80			; Initialize mouse detection.
  918    09:DEB1  5A         	.detect_loop:	phy
  919    09:DEB2  48         			pha
  920    09:DEB3  44 53      			bsr	.read_devices		; Read all devices as if mice.
  921    09:DEB5  68         			pla
  922    09:DEB6  82         			clx
  923    09:DEB7  BC E2 22   	.detect_port:	ldy	mouse_x, x		; A movement of zero means
  924    09:DEBA  D0 03      			bne	.detect_next		; this port is a mouse.
  925    09:DEBC  1D 55 E0   			ora	bit_mask, x
  926    09:DEBF  E8         	.detect_next:	inx				; Get the next pad from the
  927    09:DEC0  E0 05      			cpx	#MAX_PADS		; multitap.
  928    09:DEC2  D0 F3      			bne	.detect_port
  929    09:DEC4  7A         			ply				; Repeat the detection test.
  930    09:DEC5  88         			dey
  931    09:DEC6  D0 E9      			bne	.detect_loop
  932                        	
  933                        	;	.if	DETECT_PHANTOMS
  934                        	;		cmp	#(1 << MAX_PADS) + 127	; If we find a mouse in every
  935                        	;		bne	.detect_done		; port, then assume mirrored!
  936                        	;		lda	#1			; Report a single mouse in a
  937                        	;		sta	num_ports		; single port.
  938                        	;		lda	#$81
  939                        	;	.endif
  940                        	
  941    09:DEC8  8D D2 22   	.detect_done:	sta	mouse_flg		; Report mouse detection.
  942                        	
  943                        			; See what has just been pressed, and check for soft-reset.
  944                        	
  945    09:DECB  44 3B      	.calc_pressed:	bsr	.read_devices		; Read all devices normally.
  946                        	
  947    09:DECD  A2 04      			ldx	#MAX_PADS - 1
  948                        	
  949    09:DECF  BD D3 22   	.pressed_loop:	lda	joy6now, x		; Calc which buttons have just
  950    09:DED2  5D D8 22   			eor	joy6old, x		; been pressed (6-button).
  951    09:DED5  3D D3 22   			and	joy6now, x
  952               0000     		.if	HUC_JOY_EVENTS
  956                        		.else
  957               0000     		.if	ACCUMULATE_JOY
  959                        		.endif
  960    09:DED8  9D DD 22   			sta	joy6trg, x
  961                        		.endif
  962                        	
  963    09:DEDB  BD 28 22   			lda	joynow, x		; Calc which buttons have just
  964    09:DEDE  A8         			tay                             ; been pressed (2-button).
  965    09:DEDF  5D 32 22   			eor	joyold, x
  966    09:DEE2  3D 28 22   			and	joynow, x
  967               0000     		.if	HUC_JOY_EVENTS
  971                        		.else
  972               0000     		.if	ACCUMULATE_JOY
  974                        		.endif
  975    09:DEE5  9D 2D 22   			sta	joytrg, x
  976                        		.endif
  977                        	
  978    09:DEE8  C9 04      			cmp	#$04			; Detect the soft-reset combo,
  979    09:DEEA  D0 0C      			bne	.not_reset		; hold RUN then press SELECT.
  980    09:DEEC  C0 0C      			cpy	#$0C
  981    09:DEEE  D0 08      			bne	.not_reset
  982    09:DEF0  BD 55 E0   			lda	bit_mask, x
  983    09:DEF3  2C 27 22   			bit	joyena
  984    09:DEF6  D0 09      			bne	.soft_reset
  985                        	
  986    09:DEF8  CA         	.not_reset:	dex				; Check the next pad from the
  987    09:DEF9  10 D4      			bpl	.pressed_loop		; multitap.
  988                        	
  989    09:DEFB  9C D0 22   			stz	port_mutex		; Release port mutex.
  990                        	
  991               0001     		.if	(* >= $4000)			; This is a ".proc" if it is
  992                        	.exit:		leave                           ; not running in RAM.
         09:DEFE  4C EF FF   			jmp	leave_proc
  993                        		.else
  995                        		.endif
  996                        	
  997    09:DF01  78         	.soft_reset:	sei				; Disable interrupts.
  998    09:DF02  9C D0 22   			stz	port_mutex		; Release port mutex.
  999    09:DF05  6C 84 22   			jmp	[reset_hook]		; Jump to the soft-reset hook.
 1000                        	
 1001                        			; Read all of the devices attached to the MultiTap.
 1002                        	
 1003    09:DF08  A2 02      	.read_devices:	ldx	#2			; Repeat this loop 2 times.
 1004                        	
 1005    09:DF0A  A9 01      	.read_multitap:	lda	#$01			; CLR lo, SEL hi for d-pad.
 1006    09:DF0C  8D 00 10   			sta	IO_PORT
 1007    09:DF0F  A9 03      			lda	#$03			; CLR hi, SEL hi, reset tap.
 1008    09:DF11  8D 00 10   			sta	IO_PORT
 1009    09:DF14  C2         			cly				; Start at port 1.
 1010                        	
 1011    09:DF15  A9 01      	.read_port:	lda	#$01			; CLR lo, SEL hi for d-pad.
 1012    09:DF17  8D 00 10   			sta	IO_PORT			; Wait 1.25us (9 cycles).
 1013                        	
 1014    09:DF1A  B9 55 E0   			lda	bit_mask, y		; Is there a mouse attached?
 1015    09:DF1D  2D D2 22   			and	mouse_flg
 1016    09:DF20  D0 33      			bne	.read_mouse
 1017                        	
 1018    09:DF22  AD 00 10   	.read_pad:	lda	IO_PORT			; Read direction-pad bits.
 1019    09:DF25  9C 00 10   			stz	IO_PORT			; CLR lo, SEL lo for buttons.
 1020    09:DF28  0A         			asl	a			; Wait 1.25us (9 cycles).
 1021    09:DF29  0A         			asl	a
 1022    09:DF2A  0A         			asl	a
 1023    09:DF2B  0A         			asl	a
 1024    09:DF2C  F0 1B      			beq	.read_6button		; 6-btn pad if UDLR all held.
 1025                        	
 1026    09:DF2E  99 28 22   	.read_2button:	sta	joynow, y		; Get buttons of 2-btn pad.
 1027    09:DF31  AD 00 10   			lda	IO_PORT
 1028    09:DF34  29 0F      			and	#$0F
 1029    09:DF36  19 28 22   			ora	joynow, y
 1030    09:DF39  49 FF      			eor	#$FF
 1031    09:DF3B  99 28 22   			sta	joynow, y
 1032                        	
 1033    09:DF3E  C8         	.next_port:	iny				; Get the next pad from the
 1034    09:DF3F  CC D1 22   			cpy	num_ports		; multitap.
 1035    09:DF42  90 D1      			bcc	.read_port
 1036                        	
 1037    09:DF44  CA         			dex				; Do the next complete pass.
 1038    09:DF45  CA         			dex
 1039    09:DF46  10 C2      			bpl	.read_multitap		; Have we finished 2 passes?
 1040    09:DF48  60         			rts				; Now that everything is read.
 1041                        	
 1042    09:DF49  AD 00 10   	.read_6button:	lda	IO_PORT			; Get buttons of 6-btn pad.
 1043    09:DF4C  29 0F      			and	#$0F
 1044    09:DF4E  49 8F      			eor	#$8F			; Set bit-7 to show that a
 1045    09:DF50  99 D3 22   			sta	joy6now, y		; 6-button pad is present.
 1046    09:DF53  80 E9      			bra	.next_port
 1047                        	
 1048    09:DF55  7C 86 DF   	.read_mouse:	jmp	[.mouse_vectors, x]	; Which mouse info is next?
 1049                        	
 1050                        			; Mouse processing, normally four passes, here just two.
 1051                        	
 1052    09:DF58  A9 1C      	.mouse_x_hi:	lda	#28			; 189 cycle delay after CLR lo
 1053    09:DF5A  3A         	.wait_loop:	dec	a			; on port to allow the mouse
 1054    09:DF5B  D0 FD      			bne	.wait_loop		; to buffer and reset counters.
 1055                        	
 1056    09:DF5D  AD 00 10   			lda	IO_PORT			; Read direction-pad bits.
 1057    09:DF60  9C 00 10   			stz	IO_PORT			; CLR lo, SEL lo for buttons.
 1058    09:DF63  0A         			asl	a			; Wait 1.25us (9 cycles).
 1059    09:DF64  0A         			asl	a
 1060    09:DF65  0A         			asl	a
 1061    09:DF66  0A         			asl	a
 1062    09:DF67  99 E2 22   			sta	mouse_x, y		; Save port's X-hi nibble.
 1063                        	
 1064    09:DF6A  AD 00 10   			lda	IO_PORT			; Get mouse buttons.
 1065    09:DF6D  29 0F      			and	#$0F
 1066    09:DF6F  49 0F      			eor	#$0F
 1067    09:DF71  99 28 22   			sta	joynow, y
 1068    09:DF74  80 C8      			bra	.next_port
 1069                        	
 1070    09:DF76  AD 00 10   	.mouse_x_lo:	lda	IO_PORT			; Read direction-pad bits.
 1071    09:DF79  9C 00 10   			stz	IO_PORT			; CLR lo, SEL lo for buttons.
 1072    09:DF7C  29 0F      			and	#$0F			; Wait 1.25us (9 cycles).
 1073    09:DF7E  19 E2 22   			ora	mouse_x, y		; Add port's X-hi nibble.
 1074                        	;		eor	#$FF			; Negate so LEFT is -ve.
 1075                        	;		inc	a
 1076    09:DF81  99 E2 22   			sta	mouse_x, y
 1077    09:DF84  80 B8      			bra	.next_port
 1078                        	
 1079    09:DF86  76 DF      	.mouse_vectors: dw	.mouse_x_lo		; Pass 2
 1080    09:DF88  58 DF      			dw	.mouse_x_hi		; Pass 1
 1081                        	
 1082               0001     		.if	(* >= $4000)			; This is a ".proc" if it is
 1083                        			.endp                           ; not running in RAM.
 1084               22D0     			.bss				; Put the variables in RAM.
 1085                        		.endif
 1086                        	
 1087    F8:22D0             	port_mutex:	ds	1			; NZ when controller port busy.
 1088    F8:22D1             	num_ports:	ds	1			; Set to 1 if no multitap.
 1089    F8:22D2             	mouse_flg:	ds	1			; Which ports are mice?
 1090               0000     		.if	HUC_JOY_EVENTS
 1093                        		.endif
 1094    F8:22D3             	joy6now:	ds	MAX_PADS
 1095    F8:22D8             	joy6old:	ds	MAX_PADS
 1096    F8:22DD             	joy6trg:	ds	MAX_PADS
 1097    F8:22E2             	mouse_x:	ds	MAX_PADS
 1098                        	
 1099               E188     			.code
 1100                        	
 1101                        		.endif	SUPPORT_6BUTTON			; Without mouse!
 1102                        	
 1103                        		.endif	SUPPORT_MOUSE
                             #[5]   "..\..\..\include\hucc\core-kernel.asm"
  453                        	
  454                        	
  455                        	
  456               0001     		.if	!CDROM
  457                        	
  458                        	; ***************************************************************************
  459                        	; ***************************************************************************
  460                        	;
  461                        	; core_sw_reset - Default HuCARD handler for a joypad "soft-reset".
  462                        	;
  463                        	
  464    00:E188  78         	core_sw_reset:	sei				; Disable interrupts.
  465                        	
  466    00:E189  6C FE FF   			jmp	[$FFFE]			; Jump to the HuCARD reset.
  467                        	
  468                        	
  469                        	
  470                        		.else	!CDROM
  616                        		.endif	!CDROM
  617                        	
  618                        	
  619                        	
  620                        	; ***************************************************************************
  621                        	; ***************************************************************************
  622                        	
  623               0001     		.if	(core_kernel >= $4000)		; If not running in RAM, then
  624               22E7     			.bss				; put these variables in RAM.
  625                        		.endif
  626                        	
  627    F8:22E7             	sound_mutex:	ds	1			; NZ when controller port busy.
  628                        	
  629               0001     		.if	SUPPORT_SGX
  630    F8:22E8             	sgx_detected:	ds	1			; NZ if SuperGrafx detected.
  631    F8:22E9             	hsync_hook_sgx:	ds	2			; SGX version of hsync_hook.
  632                        		.endif
  633                        	
  634               0000     		.if	SUPPORT_ACD
  636                        		.endif
  637                        	
  638               0001     		.if	(core_kernel >= $4000)
  639               E18C     			.code
  640                        		.endif
                             #[4]   "..\..\..\include\hucc\core-startup.asm"
  427                        	
  428                        	
  429                        	
  430                        		.else	!CDROM
  524                        		.endif	!CDROM
  525                        	
  526                        	
  527                        	
  528                        	; ***************************************************************************
  529                        	; ***************************************************************************
  530                        	;
  531                        	; With the availability of so many different configuration options, we've now
  532                        	; built somewhere between a few hundred bytes, and a couple of KB, of code in
  533                        	; the CORE_BANK of the HuCARD / overlay program.
  534                        	;
  535                        	; This is the end of the "CORE(not TM)" library code!
  536                        	;
  537                        	; Remember that the ".proc" trampolines are located at the end of this bank,
  538                        	; so the amount of free space left depends upon the number of ".proc" calls.
  539                        	;
  540                        	
  541                        			; Switch to CORE_PAGE to run the developer's game code.
  542               E18C     			.page	CORE_PAGE
  543                        	
  544                        	
  545                        	
  546                        	; ***************************************************************************
  547                        	; ***************************************************************************
  548                        	;
  549                        	; The DATA_BANK location needs to be set as early as possible so that library
  550                        	; code is able to put data in there before the total overall size of the code
  551                        	; is known.
  552                        	;
  553                        	; By default, DATA_BANK is the next bank after the CORE_BANK.
  554                        	;
  555                        	; RESERVE_BANKS allows developers to reserve some banks between the CORE_BANK
  556                        	; and the DATA_BANK that they can use however they wish.
  557                        	;
  558                        	; One use for RESERVE_BANKS is to create empty space that PCEAS can use when
  559                        	; it relocates procedures. This provides a way for a developer to group code
  560                        	; together at the start of memory, and leave the maximum number of banks for
  561                        	; loading dynamic data from CD-ROM.
  562                        	;
  563                        	; The KickC environment sets RESERVE_BANKS=1 (or higher) so that there is a
  564                        	; a bank for the permanent C code and static constants.
  565                        	;
  566                        	; RESERVE_BANKS is normally defined in each project's "core-config.inc".
  567                        	;
  568                        	
  569                        			.opt	d+			; DATA labels use fixed MPR.
  570                        	
  571               0001     			.rsset	CORE_BANK + 1
  572                        	
  573               0000     		.ifdef	NEED_HOME_BANK
  580                        		.endif
  581                        	
  582               0001     		.ifdef	NEED_SOUND_BANK			; Defined in hucc-sound.inc
  583               0000     		.if	NEED_SOUND_BANK			; if the driver wants a bank.
  585                        		.endif
  586                        		.endif
  587                        	
  588               0001     		.ifdef	RESERVE_BANKS			; For CORE projects.
  589               0001     	RESERVED_BANK	.rs	RESERVE_BANKS
  590                        		.endif
  591                        	
  592               0001     		.ifdef	HUCC
  593               0001     		.ifdef	HUC_RESERVE_BANKS		; For HuCC projects.
  594               0001     	HUC_USER_BANK	.rs	HUC_RESERVE_BANKS
  595                        		.endif
  596                        	
  597               0001     	CONST_BANK	.rs	2
  598               6000     			.rodata
  599               0001     			.bank	CONST_BANK, ".rodata"
  600                        		.endif	HUCC
  601                        	
  602               0003     	DATA_BANK	.rs	0
  603               6000     			.data
  604               0000     		.if	BUILDING_STAGE1
  606                        		.else
  607               0003     			.bank	DATA_BANK, ".data"
  608                        		.endif
  609               6000     			.org	$6000
  610                        	
  611               E18C     			.code
                             #[3]   "..\..\..\include\hucc\core.inc"
                             #[2]   "..\..\..\include\hucc\hucc.asm"
  120                        		.else
  126                        		.endif
  127                        	
  128                        			; Allocate this as early as possible to ensure bank-aligned
  129                        			; so that there is no wasted space for aligning the table.
  130                        	
  131               0000     		.if	FAST_MULTIPLY
  138                        		.endif
  139                        	
  140                        			;
  141                        	
  144                        	
  145                        			; The hardware stack is used for expressions.
  146                        	
  147               00FF     	__tos		=	$F8:2101, 255
  148                        	
  149               2008     			.zp
  150               2008     			.align	2
  151    F8:2008             	__stack:	ds	HUCC_STACK_SZ
  152                        	
  153    F8:2088             	__ptr:		ds	2
  154    F8:208A             	__fptr:		ds	2
  155    F8:208C             	__fbank:	ds	1
  156    F8:208D             	__sp:		ds	1
  157                        	
  158                        			; REGTEMP 6-byte stack for temporaries used by SDCC.
  159                        			; Keep the size in sync with NUM_TEMP_REGS in sdcc/src/mos6502/gen.h!
  160                        	
  161    F8:208E             	REGTEMP:	ds	6
  162                        	
  163                        			; HuCC's non-recursive consecutive varargs for printf().
  164                        	
  165               2008     	__vararg1	=	__stack + 0
  166               200A     	__vararg2	=	__stack + 2
  167               200C     	__vararg3	=	__stack + 4
  168               200E     	__vararg4	=	__stack + 6
  169                        	
  170                        			; Pointer used by poke() because __ptr could be overwritten.
  171                        	
  172               20EE     	__poke		=	__si
  173                        	
  174                        			; Used for indirect calls because __ptr could be overwritten.
  175                        	
  176               20EE     	__func		=	__si
  177                        	
  178                        			; Data pointer used by SDCC for indirect indexed memory access.
  179                        	
  180               2088     	DPTR		=	__ptr
  181                        	
  182                        			; Values returned from SDCC functions that don't fit into XA.
  183                        			; These are also used as workspace for SDCC library functions,
  184                        			; including HuCC's multiplication and division functions.
  185                        	
  186    F8:2094             	___SDCC_m6502_ret0:	ds	1
  187    F8:2095             	___SDCC_m6502_ret1:	ds	1
  188    F8:2096             	___SDCC_m6502_ret2:	ds	1
  189    F8:2097             	___SDCC_m6502_ret3:	ds	1
  190                        	
  191               0000     		.if	0
  196                        		.endif
  197                        	
  198                        			; Permanent pointers for fast table-of-squares multiplication.
  199                        	
  200               0000     		.if	FAST_MULTIPLY
  205                        		.endif
  206                        	
  207                        			; HuCC keeps a realtime clock, updated in hucc_vbl.
  208                        			;
  209                        			; Defining this here means that it will go before any HuCC
  210                        			; variables in "globals.h", and so it won't get cleared in
  211                        			; a CDROM game when loading different overlays.
  212                        	
  213               22EB     			.bss
  214    F8:22EB             	old_cnt:	ds	1			; irq_cnt of previous vsync().
  215    F8:22EC             	clock_hh:	ds	1			; System Clock, hours	(0-11)
  216    F8:22ED             	clock_mm:	ds	1			; System Clock, minutes (0-59)
  217    F8:22EE             	clock_ss:	ds	1			; System Clock, seconds (0-59)
  218    F8:22EF             	clock_tt:	ds	1			; System Clock, ticks	(0-59)
  219               E18C     			.code
  220                        	
  221                        			; Critical HuCC libraries that the compiler depends upon.
  222                        			;
  223                        			; These include various macros that must be defined before
  224                        			; they are encountered in any compiler-generated code.
  225                        	
                             #[3]   "..\..\..\include\hucc\hucc-codegen.asm"
  226                        			include "hucc-codegen.asm"	; HuCC i-code macros and funcs.
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-codegen.asm
    5                        	;
    6                        	; The HuCC compiler translates C code into these macros, it does not directly
    7                        	; generate HuC6280 instructions.
    8                        	;
    9                        	; Based on the original HuC macros created by David Michel and the other HuC
   10                        	; developers, later modified and improved by Ulrich Hecht.
   11                        	;
   12                        	; Modifications copyright John Brandwood 2024.
   13                        	;
   14                        	; Distributed under the Boost Software License, Version 1.0.
   15                        	; (See accompanying file LICENSE_1_0.txt or copy at
   16                        	;  http://www.boost.org/LICENSE_1_0.txt)
   17                        	;
   18                        	; ***************************************************************************
   19                        	; ***************************************************************************
   20                        	;
   21                        	; NAMING SCHEME FOR HuCC MACROS ...
   22                        	;
   23                        	;   __function.parameters
   24                        	;
   25                        	; {parameters} is a list of alphanumeric specifiers, starting with {size} and
   26                        	; followed by {where}, followed by {index} if an array, then optional {value}
   27                        	; and finally ending with optional {suffix}
   28                        	;
   29                        	; {size}
   30                        	;   w : 16-bit signed int (default "int" in HuCC)
   31                        	;   c : 16-bit unsigned int (a "cardinal" in Pascal terms)
   32                        	;   b :  8-bit signed char
   33                        	;   u :  8-bit unsigned char (default "char" in HuCC)
   34                        	;
   35                        	; {where} or {index}
   36                        	;   r : HuCC primary register, made up of the Y:A cpu registers
   37                        	;   t : top of expression stack
   38                        	;   p : indirect pointer, usually [__ptr]
   39                        	;   f : structure field (member) offset value
   40                        	;   i : immediate value, i.e. a decimal number
   41                        	;   m : memory, i.e. C global, static, and "-fno-recursive" variables
   42                        	;   s : stack, i.e. C function parameters and locals (not "-fno-recursive")
   43                        	;   a : array, i.e. C global, static, "-fno-recursive" arrays <= 256 bytes
   44                        	;   x : array index already in the X register
   45                        	;   y : array index already in the Y register
   46                        	;
   47                        	; {value} OPTIONAL
   48                        	;   i : immediate value, i.e. a decimal number
   49                        	;   z : zero value
   50                        	;
   51                        	; {suffix} OPTIONAL
   52                        	;   q : quick, used for optimized math on only 8-bit values, because all math
   53                        	;       is normally promoted to "int" size in C; and when optimized stores do
   54                        	;       not need to preserve the primary register contents
   55                        	;
   56                        	; ***************************************************************************
   57                        	; ***************************************************************************
   58                        	
   59                        	
   60                        	
 8399                        	
 8400                        	; ***************************************************************************
 8401                        	; ***************************************************************************
 8402                        	; subroutines for logical and arithmetic shifts by a constant amount
 8403                        	; ***************************************************************************
 8404                        	; ***************************************************************************
 8405                        	
 8406                        	; **************
 8407                        	; Y:A = Y:A << const
 8408                        	
 8409    00:E1BE  0A         	aslw15:		asl	a
 8410    00:E1BF  0A         	aslw14:		asl	a
 8411    00:E1C0  0A         	aslw13:		asl	a
 8412    00:E1C1  0A         	aslw12:		asl	a
 8413    00:E1C2  0A         	aslw11:		asl	a
 8414    00:E1C3  0A         	aslw10:		asl	a
 8415    00:E1C4  0A         	aslw9:		asl	a
 8416    00:E1C5  A8         	aslw8:		tay
 8417    00:E1C6  62         			cla
 8418    00:E1C7  60         			rts
 8419                        	
 8420               0001     		.if	1
 8421    00:E1C8  66 00      	aslw5:		ror	<__temp
 8422    00:E1CA  6A         			ror	a
 8423    00:E1CB  66 00      	aslw6:		ror	<__temp
 8424    00:E1CD  6A         			ror	a
 8425    00:E1CE  66 00      	aslw7:		ror	<__temp
 8426    00:E1D0  6A         			ror	a
 8427    00:E1D1  A4 00      			ldy	<__temp
 8428    00:E1D3  60         			rts
 8429                        		.else
 8436                        		.endif
 8437    00:E1D4  0A         	aslw4:		asl	a
 8438    00:E1D5  26 00      			rol	<__temp
 8439    00:E1D7  0A         	aslw3:		asl	a
 8440    00:E1D8  26 00      			rol	<__temp
 8441    00:E1DA  0A         	aslw2:		asl	a
 8442    00:E1DB  26 00      			rol	<__temp
 8443    00:E1DD  0A         	aslw1:		asl	a
 8444    00:E1DE  26 00      			rol	<__temp
 8445    00:E1E0  A4 00      	aslw0:		ldy	<__temp
 8446    00:E1E2  60         			rts
 8447                        	
 8448                        	; **************
 8449                        	; Y:A = Y:A >> const
 8450                        	
 8451    00:E1E3  C9 80      	asrw15:		cmp	#$80
 8452    00:E1E5  6A         			ror	a
 8453    00:E1E6  C9 80      	asrw14:		cmp	#$80
 8454    00:E1E8  6A         			ror	a
 8455    00:E1E9  C9 80      	asrw13:		cmp	#$80
 8456    00:E1EB  6A         			ror	a
 8457    00:E1EC  C9 80      	asrw12:		cmp	#$80
 8458    00:E1EE  6A         			ror	a
 8459    00:E1EF  C9 80      	asrw11:		cmp	#$80
 8460    00:E1F1  6A         			ror	a
 8461    00:E1F2  C9 80      	asrw10:		cmp	#$80
 8462    00:E1F4  6A         			ror	a
 8463    00:E1F5  C9 80      	asrw9:		cmp	#$80
 8464    00:E1F7  6A         			ror	a
 8465    00:E1F8  C9 80      	asrw8:		cmp	#$80
 8466    00:E1FA  C2         			cly
 8467    00:E1FB  90 01      			bcc	!+
 8468    00:E1FD  88         			dey
 8469    00:E1FE  60         	!:		rts
 8470                        	
 8471    00:E1FF  C0 80      	asrw7:		cpy	#$80
 8472    00:E201  66 00      			ror	<__temp
 8473    00:E203  6A         			ror	a
 8474    00:E204  C0 80      	asrw6:		cpy	#$80
 8475    00:E206  66 00      			ror	<__temp
 8476    00:E208  6A         			ror	a
 8477    00:E209  C0 80      	asrw5:		cpy	#$80
 8478    00:E20B  66 00      			ror	<__temp
 8479    00:E20D  6A         			ror	a
 8480    00:E20E  C0 80      	asrw4:		cpy	#$80
 8481    00:E210  66 00      			ror	<__temp
 8482    00:E212  6A         			ror	a
 8483    00:E213  C0 80      	asrw3:		cpy	#$80
 8484    00:E215  66 00      			ror	<__temp
 8485    00:E217  6A         			ror	a
 8486    00:E218  C0 80      	asrw2:		cpy	#$80
 8487    00:E21A  66 00      			ror	<__temp
 8488    00:E21C  6A         			ror	a
 8489    00:E21D  C0 80      	asrw1:		cpy	#$80
 8490    00:E21F  66 00      			ror	<__temp
 8491    00:E221  6A         			ror	a
 8492    00:E222  A4 00      	asrw0:		ldy	<__temp
 8493    00:E224  60         			rts
 8494                        	
 8495                        	; **************
 8496                        	; Y:A = Y:A >> const
 8497                        	
 8498    00:E225  4A         	lsrw15:		lsr	a
 8499    00:E226  4A         	lsrw14:		lsr	a
 8500    00:E227  4A         	lsrw13:		lsr	a
 8501    00:E228  4A         	lsrw12:		lsr	a
 8502    00:E229  4A         	lsrw11:		lsr	a
 8503    00:E22A  4A         	lsrw10:		lsr	a
 8504    00:E22B  4A         	lsrw9:		lsr	a
 8505    00:E22C  C2         	lsrw8:		cly
 8506    00:E22D  60         			rts
 8507                        	
 8508    00:E22E  46 00      	lsrw7:		lsr	<__temp
 8509    00:E230  6A         			ror	a
 8510    00:E231  46 00      	lsrw6:		lsr	<__temp
 8511    00:E233  6A         			ror	a
 8512    00:E234  46 00      	lsrw5:		lsr	<__temp
 8513    00:E236  6A         			ror	a
 8514    00:E237  46 00      	lsrw4:		lsr	<__temp
 8515    00:E239  6A         			ror	a
 8516    00:E23A  46 00      	lsrw3:		lsr	<__temp
 8517    00:E23C  6A         			ror	a
 8518    00:E23D  46 00      	lsrw2:		lsr	<__temp
 8519    00:E23F  6A         			ror	a
 8520    00:E240  46 00      	lsrw1:		lsr	<__temp
 8521    00:E242  6A         			ror	a
 8522    00:E243  A4 00      	lsrw0:		ldy	<__temp
 8523    00:E245  60         			rts
 8524                        	
 8525                        	
 8526                        	
 8527                        	; ***************************************************************************
 8528                        	; ***************************************************************************
 8529                        	; subroutines for logical and arithmetic shifts by a variable amount
 8530                        	; ***************************************************************************
 8531                        	; ***************************************************************************
 8532                        	
 8533                        	; **************
 8534                        	; Y:A = Y:A << X
 8535                        	
 8536    00:E246  84 00      	asl.wx:		sty	<__temp
 8537    00:E248  E0 10      			cpx	#16
 8538    00:E24A  B0 37      			bcs	!zero+
 8539    00:E24C  CA         			dex
 8540    00:E24D  30 06      			bmi	.done
 8541    00:E24F  0A         	.loop:		asl	a
 8542    00:E250  26 00      			rol	<__temp
 8543    00:E252  CA         			dex
 8544    00:E253  10 FA      			bpl	.loop
 8545    00:E255  A4 00      	.done:		ldy	<__temp
 8546    00:E257  60         			rts
 8547                        	
 8548                        	; **************
 8549                        	; Y:A = Y:A >> X
 8550                        	
 8551    00:E258  84 00      	asr.wx:		sty	<__temp
 8552    00:E25A  10 17      			bpl	!positive+
 8553    00:E25C  E0 10      	!negative:	cpx	#16
 8554    00:E25E  B0 0D      			bcs	.sign
 8555    00:E260  CA         			dex
 8556    00:E261  30 07      			bmi	.done
 8557    00:E263  38         	.loop:		sec
 8558    00:E264  66 00      			ror	<__temp
 8559    00:E266  6A         			ror	a
 8560    00:E267  CA         			dex
 8561    00:E268  10 F9      			bpl	.loop
 8562    00:E26A  A4 00      	.done:		ldy	<__temp
 8563    00:E26C  60         			rts
 8564                        	
 8565    00:E26D  A9 FF      	.sign:		lda	#$FF
 8566    00:E26F  A8         			tay
 8567    00:E270  60         			rts
 8568                        	
 8569                        	; **************
 8570                        	; Y:A = Y:A >> X
 8571                        	
 8572    00:E271  84 00      	lsr.wx:		sty	<__temp
 8573    00:E273  E0 10      	!positive:	cpx	#16
 8574    00:E275  B0 0C      			bcs	!zero+
 8575    00:E277  CA         			dex
 8576    00:E278  30 06      			bmi	.done
 8577    00:E27A  46 00      	.loop:		lsr	<__temp
 8578    00:E27C  6A         			ror	a
 8579    00:E27D  CA         			dex
 8580    00:E27E  10 FA      			bpl	.loop
 8581    00:E280  A4 00      	.done:		ldy	<__temp
 8582    00:E282  60         			rts
 8583                        	
 8584    00:E283  62         	!zero:		cla
 8585    00:E284  C2         			cly
 8586    00:E285  60         			rts
 8587                        	
 8588                        	
 8589                        	
 8590                        	; ***************************************************************************
 8591                        	; ***************************************************************************
 8592                        	; POTENTIAL OPTIMIZATIONS, NOT YET ADDED
 8593                        	; ***************************************************************************
 8594                        	; ***************************************************************************
                             #[2]   "..\..\..\include\hucc\hucc.asm"
                             #[3]   "..\..\..\include\hucc\hucc-baselib.asm"
  227                        			include	"hucc-baselib.asm"	; HuCC base library macros.
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-baselib.asm
    5                        	;
    6                        	; Basic library functions provided (mostly) as macros.
    7                        	;
    8                        	; Copyright John Brandwood 2024-2025.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	
   17                        	
   18                        	
   19                        	; ***************************************************************************
   20                        	; ***************************************************************************
   21                        	;
   22                        	; Make certain System Card variables accessible to HuCC.
   23                        	
   24    00:E286             	_irq_cnt	.alias	irq_cnt
   25    00:E286             	_joynow		.alias	joynow
   26    00:E286             	_joytrg		.alias	joytrg
   27    00:E286             	_joy6now	.alias	joy6now
   28    00:E286             	_joy6trg	.alias	joy6trg
   29    00:E286             	_bg_x1		.alias	bg_x1
   30    00:E286             	_bg_y1		.alias	bg_y1
   31    00:E286             	_bg_x2		.alias	bg_x2
   32    00:E286             	_bg_y2		.alias	bg_y2
   33                        	
   34                        	
   35                        	
   36                        	; ***************************************************************************
   37                        	; ***************************************************************************
   38                        	;
   39                        	; void __fastcall dump_screen( void );
   40                        	;
   41                        	; THIS IS AN ILLEGAL INSTRUCTION ONLY IMPLEMENTED BY THE TGEMU EMULATOR!
   42                        	
   43    00:E286  33         	_dump_screen:	db	0x33
   44                        	
   45                        	
   46                        	
   47                        	; ***************************************************************************
   48                        	; ***************************************************************************
   49                        	;
   50                        	; void __fastcall abort( void );
   51                        	;
   52                        	; THIS IS AN ILLEGAL INSTRUCTION ONLY IMPLEMENTED BY THE TGEMU EMULATOR!
   53                        	
   54    00:E287  E2         	_abort:		db	0xE2
   55                        	
   56                        	
   57                        	
   58                        	; ***************************************************************************
   59                        	; ***************************************************************************
   60                        	;
   61                        	; void __fastcall exit( int value<acc> );
   62                        	;
   63                        	; THIS IS AN ILLEGAL INSTRUCTION ONLY IMPLEMENTED BY THE TGEMU EMULATOR!
   64                        	
   65    00:E288  AA         	_exit.1:	tax				; Put the return code into X.
   66    00:E289  63         			db	0x63
   67                        	
   68    00:E28A  80 FE      	.hang:		bra	.hang			; Hang if used in normal code.
   69                        	
   70                        	
   71                        	
   72                        	; ***************************************************************************
   73                        	; ***************************************************************************
   74                        	;
   75                        	; unsigned char __fastcall __macro cd_execoverlay( unsigned char ovl_index<acc> );
   76                        	;
   77                        	; Execute program overlay from disc
   78                        	;
   79                        	; N.B. This does not return, even if there's an error.
   80                        	
   81                        			.macro	_cd_execoverlay.1
   82                        			tax
   83                        			jmp	exec_overlay
   84                        			.endm
   85                        	
   86                        	
   87                        	
   88                        	; ***************************************************************************
   89                        	; ***************************************************************************
   90                        	;
   91                        	; void __fastcall __nop set_far_base( unsigned char data_bank<_bp_bank>, unsigned char *data_addr<_bp> );
   92                        	; void __fastcall set_far_offset( unsigned int offset<_bp>, unsigned char data_bank<_bp_bank>, unsigned char *data_addr<acc> );
   93                        	
   94    00:E28C             	_set_far_offset.3:
   95    00:E28C  18         			clc
   96    00:E28D  65 EC      			adc.l	<_bp
   97    00:E28F  85 EC      			sta.l	<_bp
   98    00:E291  98         			tya
   99    00:E292  29 1F      			and	#$1F
  100    00:E294  65 ED      			adc.h	<_bp
  101    00:E296  A8         			tay
  102    00:E297  29 1F      			and	#$1F
  103    00:E299  09 60      			ora	#$60
  104    00:E29B  85 ED      			sta.h	<_bp
  105    00:E29D  98         			tya
  106    00:E29E  6A         			ror	a
  107    00:E29F  4A         			lsr	a
  108    00:E2A0  4A         			lsr	a
  109    00:E2A1  4A         			lsr	a
  110    00:E2A2  4A         			lsr	a
  111    00:E2A3  18         			clc
  112    00:E2A4  65 02      			adc	<_bp_bank
  113    00:E2A6  85 02      			sta	<_bp_bank
  114    00:E2A8  60         			rts
  115                        	
  116                        	
  117                        	; ***************************************************************************
  118                        	; ***************************************************************************
  119                        	;
  120                        	; void __fastcall __macro reset_mpr2( void );
  121                        	; void __fastcall __macro reset_mpr34( void );
  122                        	;
  123                        	; void * __fastcall __macro set_mpr2( void __far *addr<_bp_bank:_bp> );
  124                        	; void * __fastcall __macro set_mpr34( void __far *addr<_bp_bank:_bp> );
  125                        	;
  126                        	; void * __fastcall __macro far_set_mpr2( void );
  127                        	; void * __fastcall __macro far_set_mpr34( void );
  128                        	
  129                        	_reset_mpr2	.macro
  130                        		.if	SUPPORT_SGX
  131                        			lda	#$F9
  132                        		.else
  133                        			lda	#$87
  134                        		.endif
  135                        			tam2
  136                        			.endm
  137                        	
  138                        	_reset_mpr34	.macro
  139                        			lda	#CONST_BANK + _bank_base
  140                        			tam3
  141                        			inc	a
  142                        			tam4
  143                        			.endm
  144                        	
  145                        	_farset_mpr2.1	.macro
  146                        			lda	<_bp_bank
  147                        			tam2
  148                        			lda.l	<_bp
  149                        			ldy.h	<_bp
  150                        			.endm
  151                        	
  152                        	_farset_mpr34.1	.macro
  153                        			lda	<_bp_bank
  154                        			tam3
  155                        			inc	a
  156                        			tam4
  157                        			lda.l	<_bp
  158                        			ldy.h	<_bp
  159                        			.endm
  160                        	
  161                        	_far_set_mpr2	.macro
  162                        			lda	<_bp_bank
  163                        			tam2
  164                        			lda.l	<_bp
  165                        			ldy.h	<_bp
  166                        			.endm
  167                        	
  168                        	_far_set_mpr34	.macro
  169                        			lda	<_bp_bank
  170                        			tam3
  171                        			inc	a
  172                        			tam4
  173                        			lda.l	<_bp
  174                        			ldy.h	<_bp
  175                        			.endm
  176                        	
  177                        	
  178                        	
  179                        	; ***************************************************************************
  180                        	; ***************************************************************************
  181                        	;
  182                        	; unsigned char __fastcall __macro ac_exists( void );
  183                        	
  184                        	_ac_exists	.macro
  185                        			cla
  186                        			ldy	ACD_FLAG
  187                        			cpy	#ACD_ID
  188                        			bne	!+
  189                        			inc	a
  190                        	!:		cly
  191                        			.endm
  192                        	
  193                        	
  194                        	
  195                        	; ***************************************************************************
  196                        	; ***************************************************************************
  197                        	;
  198                        	; unsigned char __fastcall __macro _sgx_detect( void );
  199                        	
  200                        	_sgx_detect	.macro
  201                        			lda	sgx_detected
  202                        			cly
  203                        			.endm
  204                        	
  205                        	
  206                        	
  207                        	; ***************************************************************************
  208                        	; ***************************************************************************
  209                        	;
  210                        	; unsigned int __fastcall __macro peek( unsigned int addr<__ptr> );
  211                        	
  212                        	_peek.1		.macro
  213                        			lda	[__ptr]
  214                        			cly
  215                        			.endm
  216                        	
  217                        	
  218                        	
  219                        	; ***************************************************************************
  220                        	; ***************************************************************************
  221                        	;
  222                        	; unsigned int __fastcall __macro peekw( unsigned int addr<__ptr> );
  223                        	
  224                        	_peekw.1	.macro
  225                        			lda	[__ptr]
  226                        			pha
  227                        			ldy	#1
  228                        			lda	[__ptr], y
  229                        			tay
  230                        			pla
  231                        			.endm
  232                        	
  233                        	
  234                        	
  235                        	; ***************************************************************************
  236                        	; ***************************************************************************
  237                        	;
  238                        	; void __fastcall __macro poke( unsigned int addr<__poke>, unsigned char with<acc> );
  239                        	;
  240                        	; N.B. Because the <acc> value can be a complex C calculation, it isn't safe
  241                        	; to use __ptr as the destination, which can be overwritten in C macros.
  242                        	
  243                        	_poke.2		.macro
  244                        			sta	[__poke]
  245                        			.endm
  246                        	
  247                        	
  248                        	
  249                        	; ***************************************************************************
  250                        	; ***************************************************************************
  251                        	;
  252                        	; void __fastcall __macro pokew( unsigned int addr<__poke>, unsigned int with<acc> );
  253                        	;
  254                        	; N.B. Because the <acc> value can be a complex C calculation, it isn't safe
  255                        	; to use __ptr as the destination, which can be overwritten in C macros.
  256                        	
  257                        	_pokew.2	.macro
  258                        			sta	[__poke]
  259                        			tya
  260                        			ldy	#1
  261                        			sta	[__poke], y
  262                        			.endm
  263                        	
  264                        	
  265                        	
  266                        	; ***************************************************************************
  267                        	; ***************************************************************************
  268                        	;
  269                        	; unsigned char __fastcall __macro clock_hh( void );
  270                        	
  271                        	_clock_hh	.macro
  272                        			lda	clock_hh
  273                        			cly
  274                        			.endm
  275                        	
  276                        	
  277                        	
  278                        	; ***************************************************************************
  279                        	; ***************************************************************************
  280                        	;
  281                        	; unsigned char __fastcall __macro clock_mm( void );
  282                        	
  283                        	_clock_mm	.macro
  284                        			lda	clock_mm
  285                        			cly
  286                        			.endm
  287                        	
  288                        	
  289                        	
  290                        	; ***************************************************************************
  291                        	; ***************************************************************************
  292                        	;
  293                        	; unsigned char __fastcall __macro clock_ss( void );
  294                        	
  295                        	_clock_ss	.macro
  296                        			lda	clock_ss
  297                        			cly
  298                        			.endm
  299                        	
  300                        	
  301                        	
  302                        	; ***************************************************************************
  303                        	; ***************************************************************************
  304                        	;
  305                        	; unsigned char __fastcall __macro clock_tt( void );
  306                        	
  307                        	_clock_tt	.macro
  308                        			lda	clock_tt
  309                        			cly
  310                        			.endm
  311                        	
  312                        	
  313                        	
  314                        	; ***************************************************************************
  315                        	; ***************************************************************************
  316                        	;
  317                        	; void __fastcall __macro clock_reset( void );
  318                        	
  319                        	_clock_reset	.macro
  320                        			stz	clock_hh
  321                        			stz	clock_mm
  322                        			stz	clock_ss
  323                        			stz	clock_tt
  324                        			.endm
  325                        	
  326                        	
  327                        	
  328                        	; ***************************************************************************
  329                        	; ***************************************************************************
  330                        	;
  331                        	; unsigned int __fastcall __macro joy( unsigned char which<acc> );
  332                        	
  333                        	_joy.1		.macro
  334                        			tax
  335                        			lda	joynow, x
  336                        		.if	SUPPORT_6BUTTON
  337                        			ldy	joy6now, x
  338                        		.else
  339                        			cly
  340                        		.endif
  341                        			.endm
  342                        	
  343                        	
  344                        	
  345                        	; ***************************************************************************
  346                        	; ***************************************************************************
  347                        	;
  348                        	; unsigned int __fastcall __macro joytrg( unsigned char which<acc> );
  349                        	
  350                        	_joytrg.1	.macro
  351                        			tax
  352                        			lda	joytrg, x
  353                        		.if	SUPPORT_6BUTTON
  354                        			ldy	joy6trg, x
  355                        		.else
  356                        			cly
  357                        		.endif
  358                        			.endm
  359                        	
  360                        	
  361                        	
  362                        	; ***************************************************************************
  363                        	; ***************************************************************************
  364                        	;
  365                        	; unsigned int __fastcall __macro joybuf( unsigned char which<acc> );
  366                        	
  367                        	_joybuf.1	.macro
  368                        		.if	HUC_JOY_EVENTS
  369                        			tax
  370                        			lda	joybuf, x
  371                        		.if	SUPPORT_6BUTTON
  372                        			ldy	joy6buf, x
  373                        		.else
  374                        			cly
  375                        		.endif
  376                        		.else
  377                        			.fail	You must enable HUC_JOY_EVENTS in your hucc-config.inc!
  378                        		.endif
  379                        			.endm
  380                        	
  381                        	
  382                        	
  383                        	; ***************************************************************************
  384                        	; ***************************************************************************
  385                        	;
  386                        	; unsigned int __fastcall __macro get_joy_events( unsigned char which<acc> );
  387                        	;
  388                        	; N.B. This is just a version of joybuf() that clears the accumulated events.
  389                        	
  390                        			.macro	_get_joy_events.1
  391                        		.if	HUC_JOY_EVENTS
  392                        			tax
  393                        			lda	joybuf, x
  394                        			stz	joybuf, x
  395                        		.if	SUPPORT_6BUTTON
  396                        			ldy	joy6buf, x
  397                        			stz	joy6buf, x
  398                        		.else
  399                        			cly
  400                        		.endif
  401                        		.else
  402                        		.if	ACCUMULATE_JOY
  403                        			tax
  404                        			lda	joytrg, x
  405                        			stz	joytrg, x
  406                        		.if	SUPPORT_6BUTTON
  407                        			ldy	joy6trg, x
  408                        			stz	joy6trg, x
  409                        		.else
  410                        			cly
  411                        		.endif
  412                        		.else
  413                        			.fail	You must enable HUC_JOY_EVENTS or ACCUMULATE_JOY in your hucc-config.inc!
  414                        		.endif
  415                        		.endif
  416                        			.endm
  417                        	
  418                        	
  419                        	
  420                        	; ***************************************************************************
  421                        	; ***************************************************************************
  422                        	;
  423                        	; void __fastcall __macro clear_joy_events( unsigned char mask<acc> );
  424                        	
  425                        			.macro	_clear_joy_events.1
  426                        			php
  427                        			sei
  428                        			and	#(1 << MAX_PADS) - 1
  429                        			ldx	#$FF
  430                        	.loop:		inx
  431                        			lsr	a
  432                        			bcc	.next
  433                        		.if	HUC_JOY_EVENTS
  434                        			stz	joybuf, x
  435                        		.if	SUPPORT_6BUTTON
  436                        			stz	joy6buf, x
  437                        		.endif
  438                        		.else
  439                        		.if	ACCUMULATE_JOY
  440                        			stz	joytrg, x
  441                        		.if	SUPPORT_6BUTTON
  442                        			stz	joy6trg, x
  443                        		.endif
  444                        		.else
  445                        			.fail	You must enable HUC_JOY_EVENTS or ACCUMULATE_JOY in your hucc-config.inc!
  446                        		.endif
  447                        		.endif
  448                        	.next:		bne	.loop
  449                        			plp
  450                        			.endm
  451                        	
  452                        	
  453                        	
  454                        	; ***************************************************************************
  455                        	; ***************************************************************************
  456                        	;
  457                        	; void __fastcall srand( unsigned char seed<acc> );
  458                        	
  459               0001     		.ifndef	HUCC_NO_DEFAULT_RANDOM
  460                        	_srand.1	.macro
  461                        			tay
  462                        			jsr	init_random
  463                        			.endm
  464                        		.endif
  465                        	
  466                        	
  467                        	
  468                        	; ***************************************************************************
  469                        	; ***************************************************************************
  470                        	;
  471                        	; unsigned int __fastcall rand( void );
  472                        	; unsigned char __fastcall rand8( void );
  473                        	
  474               0001     		.ifndef	HUCC_NO_DEFAULT_RANDOM
  475    00:E2A9  20 C3 E5   	_rand:		jsr	get_random		; Random in A, preserve Y.
  476    00:E2AC  A8         			tay
  477    00:E2AD  4C C3 E5   			jmp	get_random		; Random in A, preserve Y.
  478                        		.endif
  479                        	
  480                        	
  481                        	
  482                        	; ***************************************************************************
  483                        	; ***************************************************************************
  484                        	;
  485                        	; unsigned char __fastcall random8( unsigned char limit<acc> );
  486                        	;
  487                        	; IN :	A = range (0..255)
  488                        	; OUT : A = random number interval 0 <= x < A
  489                        	
  490               0001     		.ifndef	HUCC_NO_DEFAULT_RANDOM
  491                        	
  492    00:E2B0  A8         	_random8.1:	tay				; Preserve the limit.
  493    00:E2B1  20 C3 E5   			jsr	get_random		; Random in A, preserve Y.
  494                        	
  495    00:E2B4  20 F0 E4   			jsr	__muluchar
  496    00:E2B7  98         			tya				; Do a 8.0 x 0.8 fixed point
  497    00:E2B8  C2         			cly				; fractional multiply.
  498    00:E2B9  60         			rts
  499                        		.endif
  500                        	
  501                        	
  502                        	
  503                        	; ***************************************************************************
  504                        	; ***************************************************************************
  505                        	;
  506                        	; unsigned char __fastcall random( unsigned char limit<acc> );
  507                        	;
  508                        	; IN :	A = range (0..128), 129..255 is treated as 128
  509                        	; OUT : A = random number interval 0 <= x < A
  510                        	
  511               0001     		.ifndef	HUCC_NO_DEFAULT_RANDOM
  512                        	
  513    00:E2BA  A8         	_random.1:	tay				; Preserve the limit.
  514    00:E2BB  20 C3 E5   			jsr	get_random		; Random in A, preserve Y.
  515                        	
  516    00:E2BE  C0 80      			cpy	#128			; Check the limit.
  517    00:E2C0  90 04      			bcc	!+
  518                        	
  519    00:E2C2  29 7F      			and	#$7F			; Just mask the random if
  520    00:E2C4  C2         			cly				; the limit is >= 128.
  521    00:E2C5  60         			rts
  522                        	
  523    00:E2C6  20 F0 E4   	!:		jsr	__muluchar
  524    00:E2C9  98         			tya				; If the limit is < 128 then
  525    00:E2CA  C2         			cly				; do a 8.0 x 0.8 fixed point
  526    00:E2CB  60         			rts				; fractional multiply.
  527                        		.endif
  528                        	
  529                        	
  530                        	
  531                        	; ***************************************************************************
  532                        	; ***************************************************************************
  533                        	;
  534                        	; unsigned char __fastcall __builtin_ffs( unsigned int value<__temp> );
  535                        	
  536                        			.proc	___builtin_ffs.1
  556                        			.endp
  557                        	
  558                        	
  559                        	
  560                        	; ***************************************************************************
  561                        	; ***************************************************************************
  562                        	;
  563                        	; N.B. Declared in hucc-string.h, but defined here because they're macros!
  564                        	;
  565                        	; int __fastcall __macro memcmp( unsigned char *destination<_di>, unsigned char *source<_bp>, unsigned int count<acc> );
  566                        	
  567                        	_memcmp.3	.macro
  568                        			stz	<_bp_bank		; Map the source string.
  569                        			call	_farmemcmp.3
  570                        			.endm
  571                        	
  572                        	
  573                        	
  574                        	; ***************************************************************************
  575                        	; ***************************************************************************
  576                        	;
  577                        	; N.B. Declared in hucc-gfx.h, but defined here because they're macros!
  578                        	;
  579                        	; void __fastcall __macro get_color( unsigned int index<VCE_CTA> );
  580                        	
  581                        	_get_color.1	.macro
  582                        			lda.l	VCE_CTR
  583                        			ldy.h	VCE_CTR
  584                        			.endm
  585                        	
  586                        	
  587                        	
  588                        	; ***************************************************************************
  589                        	; ***************************************************************************
  590                        	;
  591                        	; N.B. Declared in hucc-gfx.h, but defined here because they're macros!
  592                        	;
  593                        	; void __fastcall __macro fade_to_black( unsigned int __far *from<_bp_bank:_bp>, unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_sub<_ah> );
  594                        	; void __fastcall __macro fade_to_white( unsigned int __far *from<_bp_bank:_bp>, unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_add<_ah> );
  595                        	; void __fastcall __macro cross_fade_to( unsigned int __far *from<_bp_bank:_bp>, unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char which_component<_ah );
  596                        	;
  597                        	; void __fastcall __macro far_fade_to_black( unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_sub<_ah> );
  598                        	; void __fastcall __macro far_fade_to_white( unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_add<_ah> );
  599                        	; void __fastcall __macro far_cross_fade_to( unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char which_component<_ah );
  600                        	
  601                        			.macro	_fade_to_black.4
  602                        			ldy	<_bp_bank
  603                        			call	fade_to_black
  604                        			.endm
  605                        	
  606                        			.macro	_fade_to_white.4
  607                        			ldy	<_bp_bank
  608                        			call	fade_to_white
  609                        			.endm
  610                        	
  611                        			.macro	_cross_fade_to.4
  612                        			ldy	<_bp_bank
  613                        			call	cross_fade_to
  614                        			.endm
  615                        	
  616                        			.macro	_far_fade_to_black.3
  617                        			ldy	<_bp_bank
  618                        			call	fade_to_black
  619                        			.endm
  620                        	
  621                        			.macro	_far_fade_to_white.3
  622                        			ldy	<_bp_bank
  623                        			call	fade_to_white
  624                        			.endm
  625                        	
  626                        			.macro	_far_cross_fade_to.3
  627                        			ldy	<_bp_bank
  628                        			call	cross_fade_to
  629                        			.endm
  630                        	
  631                        	
  632                        	
  633                        	; ***************************************************************************
  634                        	; ***************************************************************************
  635                        	;
  636                        	; N.B. Declared in hucc-gfx.h, but defined here because they're macros!
  637                        	;
  638                        	; void __fastcall __macro set_xres( unsigned int x_pixels<_ax> );
  639                        	; void __fastcall __macro sgx_set_xres( unsigned int x_pixels<_ax> );
  640                        	;
  641                        	; void __fastcall set_xres( unsigned int x_pixels<_ax>, unsigned char blur_flag<_bl> );
  642                        	; void __fastcall sgx_set_xres( unsigned int x_pixels<_ax>, unsigned char blur_flag<_bl> );
  643                        	
  644                        	_set_xres.1	.macro
  645                        			lda	#XRES_SOFT
  646                        			sta	<_bl
  647                        			call	_set_xres.2
  648                        			.endm
  649                        	
  650               0001     		.if	SUPPORT_SGX
  651                        			.macro	_sgx_set_xres.1
  652                        			lda	#XRES_SOFT
  653                        			sta	<_bl
  654                        			call	_sgx_set_xres.2
  655                        			.endm
  656                        		.endif
  657                        	
  658                        	
  659                        	
  660                        	; ***************************************************************************
  661                        	; ***************************************************************************
  662                        	;
  663                        	; N.B. Declared in hucc-gfx.h, but defined here because they're macros!
  664                        	;
  665                        	; unsigned int __fastcall __macro vram_addr( unsigned char bat_x<_al>, unsigned char bat_y<_ah> );
  666                        	; unsigned int __fastcall __macro sgx_vram_addr( unsigned char bat_x<_al>, unsigned char bat_y<_ah> );
  667                        	
  668                        			.macro	_vram_addr.2
  669                        			cla
  670                        			bit	vdc_bat_width
  671                        			bmi	!w128+
  672                        			bvs	!w64+
  673                        	!w32:		lsr	<_ah
  674                        			ror	a
  675                        	!w64:		lsr	<_ah
  676                        			ror	a
  677                        	!w128:		lsr	<_ah
  678                        			ror	a
  679                        			ora	<_al
  680                        			ldy	<_ah
  681                        			.endm
  682                        	
  683               0001     		.if	SUPPORT_SGX
  684                        			.macro	_sgx_vram_addr.2
  685                        			cla
  686                        			bit	sgx_bat_width
  687                        			bmi	!w128+
  688                        			bvs	!w64+
  689                        	!w32:		lsr	<_ah
  690                        			ror	a
  691                        	!w64:		lsr	<_ah
  692                        			ror	a
  693                        	!w128:		lsr	<_ah
  694                        			ror	a
  695                        			ora	<_al
  696                        			ldy	<_ah
  697                        			.endm
  698                        		.endif
  699                        	
  700                        	
  701                        	
  702                        	; ***************************************************************************
  703                        	; ***************************************************************************
  704                        	;
  705                        	; N.B. Declared in hucc-gfx.h, but defined here because they're macros!
  706                        	;
  707                        	; unsigned int __fastcall __macro get_vram( unsigned int address<_di> );
  708                        	; void __fastcall __macro put_vram( unsigned int address<_di>, unsigned int data<acc> );
  709                        	;
  710                        	; unsigned int __fastcall __macro sgx_get_vram( unsigned int address<_di> );
  711                        	; void __fastcall __macro sgx_put_vram( unsigned int address<_di>, unsigned int data<acc> );
  712                        	
  713                        			.macro	_get_vram.1
  714                        			jsr	vdc_di_to_marr
  715                        			lda	VDC_DL
  716                        			ldy	VDC_DH
  717                        			.endm
  718                        	
  719                        			.macro	_put_vram.2
  720                        			pha
  721                        			jsr	vdc_di_to_mawr
  722                        			pla
  723                        			sta	VDC_DL
  724                        			sty	VDC_DH
  725                        			.endm
  726                        	
  727               0001     		.if	SUPPORT_SGX
  728                        			.macro	_sgx_get_vram.1
  729                        			jsr	sgx_di_to_marr
  730                        			lda	SGX_DL
  731                        			ldy	SGX_DH
  732                        			.endm
  733                        	
  734                        			.macro	_sgx_put_vram.2
  735                        			pha
  736                        			jsr	sgx_di_to_mawr
  737                        			pla
  738                        			sta	SGX_DL
  739                        			sty	SGX_DH
  740                        			.endm
  741                        		.endif
  742                        	
  743                        	
  744                        	
  745                        	; ***************************************************************************
  746                        	; ***************************************************************************
  747                        	;
  748                        	; N.B. Declared in hucc-gfx.h, but defined here because they're macros!
  749                        	;
  750                        	; void __fastcall __macro set_bgpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp> );
  751                        	; void __fastcall __macro set_bgpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_palettes<_ah> );
  752                        	; void __fastcall __macro set_sprpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp> );
  753                        	; void __fastcall __macro set_sprpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_palettes<_ah> );
  754                        	
  755                        	_set_bgpal.2	.macro
  756                        			lda	#1
  757                        			sta	<_ah
  758                        			call	_load_palette.3
  759                        			.endm
  760                        	
  761                        	_set_bgpal.3	.macro
  762                        			call	_load_palette.3
  763                        			.endm
  764                        	
  765                        	_set_sprpal.2	.macro
  766                        			lda	#1
  767                        			sta	<_ah
  768                        			smb4	<_al
  769                        			call	_load_palette.3
  770                        			.endm
  771                        	
  772                        	_set_sprpal.3	.macro
  773                        			smb4	<_al
  774                        			call	_load_palette.3
  775                        			.endm
  776                        	
  777                        	
  778                        	
  779                        	; ***************************************************************************
  780                        	; ***************************************************************************
  781                        	;
  782                        	; N.B. Declared in hucc-gfx.h, but defined here because they're macros!
  783                        	;
  784                        	; void __fastcall __macro load_vram( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_words<_ax> );
  785                        	; void __fastcall __macro sgx_load_vram( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_words<_ax> );
  786                        	;
  787                        	; void __fastcall __macro far_load_vram( unsigned int vram<_di>, unsigned int num_words<_ax> );
  788                        	; void __fastcall __macro sgx_far_load_vram( unsigned int vram<_di>, unsigned int num_words<_ax> );
  789                        	;
  790                        	
  791               0001     		.if	SUPPORT_SGX
  792                        			.macro	_sgx_load_vram.3
  793                        			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  794                        			call	load_vram_x
  795                        			.endm
  796                        	
  797                        			.macro	_sgx_far_load_vram.2
  798                        			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  799                        			call	load_vram_x
  800                        			.endm
  801                        		.endif
  802                        	
  803                        			.macro	_load_vram.3
  804                        			clx				; Offset to PCE VDC.
  805                        			call	load_vram_x
  806                        			.endm
  807                        	
  808                        			.macro	_far_load_vram.2
  809                        			clx				; Offset to PCE VDC.
  810                        			call	load_vram_x
  811                        			.endm
  812                        	
  813                        	
  814                        	
  815                        	; ***************************************************************************
  816                        	; ***************************************************************************
  817                        	;
  818                        	; N.B. Declared in hucc-gfx.h, but defined here because they're macros!
  819                        	;
  820                        	; void __fastcall __macro load_sprites( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_groups<acc> );
  821                        	; void __fastcall __macro sgx_load_sprites( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_groups<acc> );
  822                        	; void __fastcall __macro far_load_sprites( unsigned int vram<_di>, unsigned int num_groups<acc> );
  823                        	; void __fastcall __macro sgx_far_load_sprites( unsigned int vram<_di>, unsigned int num_groups<acc> );
  824                        	
  825               0001     		.if	SUPPORT_SGX
  826                        			.macro	_sgx_load_sprites.3
  827                        			stz.l	<_ax
  828                        			asl	a
  829                        			sta.h	<_ax
  830                        			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  831                        			call	load_vram_x
  832                        			.endm
  833                        	
  834                        			.macro	_sgx_far_load_sprites.2
  835                        			stz.l	<_ax
  836                        			asl	a
  837                        			sta.h	<_ax
  838                        			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  839                        			call	load_vram_x
  840                        			.endm
  841                        		.endif
  842                        	
  843                        			.macro	_load_sprites.3
  844                        			stz.l	<_ax
  845                        			asl	a
  846                        			sta.h	<_ax
  847                        			clx				; Offset to PCE VDC.
  848                        			call	load_vram_x
  849                        			.endm
  850                        	
  851                        			.macro	_far_load_sprites.2
  852                        			stz.l	<_ax
  853                        			asl	a
  854                        			sta.h	<_ax
  855                        			clx				; Offset to PCE VDC.
  856                        			call	load_vram_x
  857                        			.endm
  858                        	
  859                        	
  860                        	
  861                        	; ***************************************************************************
  862                        	; ***************************************************************************
  863                        	;
  864                        	; N.B. Declared in hucc-gfx.h, but defined here because they're macros!
  865                        	;
  866                        	; void __fastcall load_default_font( void );
  867                        	; void __fastcall sgx_load_default_font( void );
  868                        	;
  869                        	
  870               0001     		.if	SUPPORT_SGX
  871                        			.macro	_sgx_load_default_font
  872                        			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  873                        			call	huc_monofont_x
  874                        			.endm
  875                        		.endif
  876                        	
  877                        			.macro	_load_default_font
  878                        			clx				; Offset to PCE VDC.
  879                        			call	huc_monofont_x
  880                        			.endm
  881                        	
  882                        	
  883                        	
  884                        	; ***************************************************************************
  885                        	; ***************************************************************************
  886                        	
  887               0000     		.if	0
  905                        		.endif
                             #[2]   "..\..\..\include\hucc\hucc.asm"
  228                        	
  229               0000     		.if	CDROM
  231                        		.endif
  232                        	
  233                        			; Definitions for compatibility with old HuC/MagicKit projects.
  234                        	
  235               0001     		.ifndef	HUCC_NO_DEPRECATED
                             #[3]   "..\..\..\include\hucc\hucc-deprecated.inc"
  236                        			include	"hucc-deprecated.inc"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-deprecated.inc
    5                        	;
    6                        	; Macros and definitions for compatibility with old HuC/MagicKit projects.
    7                        	;
    8                        	; Based on the original HuC and MagicKit definitions by David Michel and the
    9                        	; other original HuC developers.
   10                        	;
   11                        	; ***************************************************************************
   12                        	; ***************************************************************************
   13                        	
   14                        			; For compatibility with HuC projects that use the old name.
   15                        	
   16               0001     	HUC_USER_RESERVED = HUC_USER_BANK
   17                        	
   18                        			; For compatibility with code that expects the HuC naming that
   19                        			; is used in the newer HuC, rather than the original HuC v3.21.
   20                        			;
   21                        			; Code generated by HuCC uses the original single-underscore.
   22                        	
   23               0001     		.if	1				
   24               0002     	__bp		=	$F8:20EC, 2		; base pointer
   25               0002     	__si		=	$F8:20EE, 2		; source address
   26               0002     	__di		=	$F8:20F0, 2		; destination address
   27                        	
   28               0002     	__ax		=	$F8:20F8, 2
   29               0001     	__al		=	$F8:20F8, 1
   30               0001     	__ah		=	$F8:20F9, 1
   31                        	
   32               0002     	__bx		=	$F8:20FA, 2
   33               0001     	__bl		=	$F8:20FA, 1
   34               0001     	__bh		=	$F8:20FB, 1
   35                        	
   36               0002     	__cx		=	$F8:20FC, 2
   37               0001     	__cl		=	$F8:20FC, 1
   38               0001     	__ch		=	$F8:20FD, 1
   39                        	
   40               0002     	__dx		=	$F8:20FE, 2
   41               0001     	__dl		=	$F8:20FE, 1
   42               0001     	__dh		=	$F8:20FF, 1
   43                        		.endif
   44                        	
   45                        			; For compatibility with code that expects the HuC naming that
   46                        			; is used rather than the shorter upper-case #define naming.
   47                        	
   48               0001     		.if	1				
   49               0001     	video_reg	=	$FF:0200, 1		; Address/Status Register
   50               0001     	video_reg_l	=	$FF:0200, 1		; Address/Status Register
   51               0001     	video_reg_h	=	$FF:0201, 1		; Address/Status Register
   52               0002     	video_data	=	$FF:0202, 2		; Data (Read/Write) Low
   53               0001     	video_data_l	=	$FF:0202, 1		; Data (Read/Write) Low
   54               0001     	video_data_h	=	$FF:0203, 1		; Data (Read/Write) High
   55                        	
   56               0002     	color_ctrl	=	$FF:0400, 2		; Control Register
   57               0002     	color_reg	=	$FF:0402, 2		; Color Table Address
   58               0001     	color_reg_l	=	$FF:0402, 1		; Color Table Address
   59               0001     	color_reg_h	=	$FF:0402, 1		; Color Table Address
   60               0002     	color_data	=	$FF:0404, 2		; Color Table Data Read/Write
   61               0001     	color_data_l	=	$FF:0404, 1		; Color Table Data Read/Write
   62               0001     	color_data_h	=	$FF:0405, 1		; Color Table Data Read/Write
   63                        	
   64               0001     	psg_ch		=	$FF:0800, 1		; Channel Select
   65               0001     	psg_mainvol	=	$FF:0801, 1		; Main Amplitude Level
   66               0001     	psg_freqlo	=	$FF:0802, 1		; Frequency Low
   67               0001     	psg_freqhi	=	$FF:0803, 1		; Frequency High
   68               0001     	psg_ctrl	=	$FF:0804, 1		; Control & Channel Amplitude
   69               0001     	psg_pan		=	$FF:0805, 1		; L/R Amplitude Level
   70               0001     	psg_wavebuf	=	$FF:0806, 1		; Waveform
   71               0001     	psg_noise	=	$FF:0807, 1		; Noise
   72               0001     	psg_lfofreq	=	$FF:0808, 1		; LFO Frequency
   73               0001     	psg_lfoctrl	=	$FF:0809, 1		; LFO Control
   74                        	
   75               0001     	irq_m		=	irq_vec, 1		; Old System Card name.
   76               0002     	irq2_jmp	=	irq2_hook, 2		; Old System Card name.
   77               0002     	irq1_jmp	=	irq1_hook, 2		; Old System Card name.
   78               0002     	timer_jmp	=	timer_hook, 2		; Old System Card name.
   79               0002     	nmi_jmp		=	nmi_hook, 2		; Old System Card name.
   80               0002     	sat_adr		=	satb_addr, 2		; Old System Card name.
   81               0005     	joy		=	joynow, 5		; Old System Card name.
   82               0001     	mwr_m		=	vdc_mwr, 1		; Old System Card name.
   83               0001     	dcr_m		=	vdc_dcr, 1		; Old System Card name.
   84                        		.endif
   85                        	
   86                        			; Macros for compatibility with #asm usage in old HuC projects.
   87                        	
   88                        	stw		.macro
   89                        			lda.l	\1
   90                        			sta.l	\2
   91                        			lda.h	\1
   92                        			sta.h	\2
   93                        			.endm
   94                        	
   95                        	stb		.macro
   96                        			lda	\1
   97                        			sta	\2
   98                        			.endm
   99                        	
  100                        	addw		.macro
  101                        		.if	(\# = 3)
  102                        			clc
  103                        			lda.l	\2
  104                        			adc.l	\1
  105                        			sta.l	\3
  106                        			lda.h	\2
  107                        			adc.h	\1
  108                        			sta.h	\3
  109                        		.else
  110                        			clc
  111                        			lda.l	\2
  112                        			adc.l	\1
  113                        			sta.l	\2
  114                        			lda.h	\2
  115                        			adc.h	\1
  116                        			sta.h	\2
  117                        		.endif
  118                        			.endm
  119                        	
  120                        	add		.macro			; add byte-sized value to
  121                        		.if (\# = 2)			; register A (handle carry
  122                        			lda	\2		; flag)
  123                        			clc
  124                        			adc	\1
  125                        			sta	\2
  126                        		.else
  127                        			clc
  128                        			adc	\1
  129                        		.endif
  130                        			.endm
  131                        	
  132                        	subw		.macro
  133                        			sec
  134                        			lda.l	\2
  135                        			sbc.l	\1
  136                        			sta.l	\2
  137                        			lda.h	\2
  138                        			sbc.h	\1
  139                        			sta.h	\2
  140                        			.endm
  141                        	
  142                        	sub		.macro			; subtract byte-sized value
  143                        		.if (\# = 2)			; from register A (handle
  144                        			lda	\2		; carry flag)
  145                        			sec
  146                        			sbc	\1
  147                        			sta	\2
  148                        		.else
  149                        			sec
  150                        			sbc	\1
  151                        		.endif
  152                        			.endm
  153                        	
  154                        	incw		.macro			; increment a word-sized
  155                        			inc.l	\1		; value at stated memory
  156                        			bne	!+		; location
  157                        			inc.h	\1
  158                        	!:
  159                        			.endm
  160                        	
  161                        	decw		.macro			; decrement a word-sized
  162                        			lda	\1		; value at stated memory
  163                        			bne	!+		; location
  164                        			dec.h	\1
  165                        	!:		dec.l	\1
  166                        			.endm
  167                        	
  168                        	lbne		.macro
  169                        			bne	\1
  170                        			.endm
  171                        	
  172                        	lbeq		.macro
  173                        			beq	\1
  174                        			.endm
  175                        	
  176                        	lbpl		.macro
  177                        			bpl	\1
  178                        			.endm
  179                        	
  180                        	lbmi		.macro
  181                        			bmi	\1
  182                        			.endm
  183                        	
  184                        	lbcc		.macro
  185                        			bcc	\1
  186                        			.endm
  187                        	
  188                        	lbcs		.macro
  189                        			bcs	\1
  190                        			.endm
  191                        	
  192                        	lblo		.macro
  193                        			bcc	\1
  194                        			.endm
  195                        	
  196                        	lbhs		.macro
  197                        			bcs	\1
  198                        			.endm
  199                        	
  200                        	__ldwi		.macro
  201                        		__ld.wi		\1
  202                        			.endm
                             #[2]   "..\..\..\include\hucc\hucc.asm"
  237                        		.endif
  238                        	
  239                        			;
  240                        			;
  241                        			;
  242                        	
  243                        	
  244                        	
  245                        	; ***************************************************************************
  246                        	; ***************************************************************************
  247                        	;
  248                        	; core_main - This is executed after "CORE(not TM)" library initialization.
  249                        	;
  250                        	; This is the first code assembled after the library includes, so we're still
  251                        	; in the CORE_BANK, usually ".bank 0"; and because this is assembled with the
  252                        	; default configuration from "include/core-config.inc", which sets the option
  253                        	; "USING_MPR7", then we're running in MPR7 ($E000-$FFFF).
  254                        	
  255    02:C33C             	core_main	.proc
  256                        	
  257               0001     		.if	SUPPORT_SGX
  258    02:C33C  A9 F9      			lda	#$F9			; Map the 2nd SGX RAM bank.
  259                        		.else
  261                        		.endif
  262    02:C33E  53 04      			tam2
  263                        	
  264    02:C340  A9 01      			lda	#CONST_BANK + _bank_base; Map HuCC's .RODATA bank.
  265    02:C342  53 08      			tam3
  266    02:C344  1A         			inc	a
  267    02:C345  53 10      			tam4
  268                        	
  269               0000     		.ifdef	HOME_BANK
  271                        		.else
  272    02:C347  1A         			inc	a
  273                        		.endif
  274    02:C348  53 20      			tam5
  275                        	
  276    02:C34A  08         			php				; Disable interrupts while
  277    02:C34B  78         			sei				; clearing overlay's BSS.
  278                        	
  279               0000     		.ifndef	USING_RCR_MACROS
  294                        		.endif	USING_RCR_MACROS
  295                        	
  296    02:C34C  A9 CC      			lda	#<hucc_vbl		; Setup HuCC's VBL IRQ handler.
  297    02:C34E  8D 08 22   			sta.l	vsync_hook
  298    02:C351  A9 E2      			lda	#>hucc_vbl
  299    02:C353  8D 09 22   			sta.h	vsync_hook
  300                        	
  301               0000     		.if	CDROM				; Overlays should clear BSS.
  303                        		.else
  304    02:C356  73 A3 C3 F0			tii	.rom_tia, ram_tia, 16	; Only needed on HuCARD.
         02:C35A  22 10 00    
  305                        		.endif	CDROM
  306                        	
  307               0000     		.if	(__heap_start - __bss_init)	; Copy initialized BSS data.
  309                        		.endif
  310                        	
  311    02:C35D  F3 A1 C3 08			tai	.stack_fill, __stack, HUCC_STACK_SZ
         02:C361  20 80 00    
  312                        	
  313               0000     		.if	FAST_MULTIPLY
  322                        		.endif
  323                        	
  324    02:C364  A9 10      			lda	#$10			; Enable HuCC's vblank IRQ
  325    02:C366  04 F5      			tsb	<irq_vec		; handler.
  326                        	
  327                        			__sound_init			; Initialize a sound driver.
  328                        	
  329    02:C368  AD 00 02   			lda	VDC_SR			; Purge any overdue VBL.
  330    02:C36B  9C 41 22   			stz	irq_cnt			; Make it easy to check.
  331                        	
  332    02:C36E  28         			plp				; Restore interrupts.
  333                        	
  334               0001     		.ifndef	HUCC_NO_DEFAULT_SCREEN
  335    02:C36F  20 D1 FF   			call	_init_256x224		; HuCC initializes the VDC and
  336    02:C372  20 16 E4   			jsr	set_dspon		; turns the display on.
  337                        		.endif
  338                        	
  339               0001     		.ifndef	HUCC_NO_DEFAULT_FONT
  340    02:C375  A9 01      			lda	#1			; HuCC loads a default font.
  341    02:C377  8D 81 23   			sta	monofont_fg
  342    02:C37A  9C 82 23   			stz	monofont_bg
  343                        			_load_default_font
         02:C37D  82         			clx				; Offset to PCE VDC.
         02:C37E  20 C7 FF   			call	huc_monofont_x
  344    02:C381  A9 01      			lda	#$01			; Set the font palette entry to
  345    02:C383  8D 02 04   			sta.l	VCE_CTA			; cyan which is a) visible, but
  346    02:C386  9C 03 04   			stz.h	VCE_CTA			; b) a clear indicator that the
  347    02:C389  A0 96      			ldy	#$96			; user hasn't set a palette yet.
  348    02:C38B  8C 04 04   			sty.l	VCE_CTW
  349    02:C38E  8D 05 04   			sta.h	VCE_CTW
  350                        		.endif
  351                        	
  352               0001     		.ifndef	HUCC_NO_DEFAULT_RANDOM
  353    02:C391  AC 41 22   			ldy	irq_cnt			; Initialize random seed.
  354    02:C394  20 BD FF   			call	init_random
  355                        		.endif
  356                        	
  357    02:C397  A2 80      			ldx	#HUCC_STACK_SZ		; Initialize the HuCC stack.
  358    02:C399  86 8D      			stx	<__sp
  359                        	
  360    02:C39B  20 B3 FF   			call	_main			; Execute the HuCC program.
  361                        	
  362    02:C39E  4C 88 E2   			jmp	_exit.1			; Pass the exit code on.
  363                        	
  364    02:C3A1  EA EA      	.stack_fill:	db	$EA,$EA			; To make it easier to see.
  365                        	
  366               0001     		.if	!CDROM
  367                        	
  368    02:C3A3  E3 34 12 02	.rom_tia:	tia	$1234, VDC_DL, 32
         02:C3A7  02 20 00    
  369    02:C3AA  60         			rts
  370                        	
  371    02:C3AB  73 34 12 78	.rom_tii:	tii	$1234, $5678, $9ABC
         02:C3AF  56 BC 9A    
  372    02:C3B2  60         			rts
  373                        	
  374               22F0     			.bss
  375    F8:22F0             	ram_tia:	ds	8
  376    F8:22F8             	ram_tii:	ds	8
  377               C3B3     			.code
  378                        	
  379                        		.endif	!CDROM
  380                        	
  381                        			.endp
  382                        	
  383                        			;
  384                        			; Self-Modifying TIA and TII instruction subroutines.
  385                        			;
  386                        			; These need to be in permanently-accessible memory so that
  387                        			; HuCC code can modify the values as __fastcall parameters.
  388                        			;
  389                        	
  390               0000     		.if	CDROM
  398                        		.endif	CDROM
  399                        	
  400               22F0     			rsset	ram_tia
  401               22F0     	ram_tia_opc	rs	1
  402               22F1     	ram_tia_src	rs	2
  403               22F3     	ram_tia_dst	rs	2
  404               22F5     	ram_tia_len	rs	2
  405               22F7     	ram_tia_rts	rs	1
  406                        	
  407               22F8     			rsset	ram_tii
  408               22F8     	ram_tii_opc	rs	1
  409               22F9     	ram_tii_src	rs	2
  410               22FB     	ram_tii_dst	rs	2
  411               22FD     	ram_tii_len	rs	2
  412               22FF     	ram_tii_rts	rs	1
  413                        	
  414                        	
  415                        	
  416                        	; ***************************************************************************
  417                        	; ***************************************************************************
  418                        	;
  419                        	; hucc_vbl - vblank IRQ handler, called by the "CORE(not TM)" kernel.
  420                        	;
  421                        	; This uses the kernel's hook to process things during vblank. It returns
  422                        	; with a simple RTS, and it can corrupt any register.
  423                        	;
  424                        	; Any slow routines in here should enable interrupts and protect itself from
  425                        	; re-entrancy problems.
  426                        	;
  427                        	
  428    00:E2CC  20 A9 FF   	hucc_vbl:	call	vbl_init_scroll		; Prepare for the next frame.
  429                        	
  430    00:E2CF  F8         			sed				; Update the HuC system clock
  431    00:E2D0  38         			sec				; which is in BCD here rather
  432    00:E2D1  AD EF 22   			lda	clock_tt		; than the binary one in HuC.
  433    00:E2D4  69 00      			adc	#0			; BCD add ...
  434    00:E2D6  C9 60      			cmp	#$60			; ... but binary comparison.
  435    00:E2D8  90 28      			bcc	.ticks
  436    00:E2DA  AD EE 22   			lda	clock_ss
  437    00:E2DD  69 00      			adc	#0			; BCD add ...
  438    00:E2DF  C9 60      			cmp	#$60			; ... but binary comparison.
  439    00:E2E1  90 1B      			bcc	.seconds
  440    00:E2E3  AD ED 22   			lda	clock_mm
  441    00:E2E6  69 00      			adc	#0			; BCD add ...
  442    00:E2E8  C9 60      			cmp	#$60			; ... but binary comparison.
  443    00:E2EA  90 0E      			bcc	.minutes
  444    00:E2EC  AD EC 22   			lda	clock_hh
  445    00:E2EF  69 00      			adc	#0			; BCD add ...
  446    00:E2F1  C9 12      			cmp	#$12			; ... but binary comparison.
  447    00:E2F3  90 01      			bcc	.hours
  448    00:E2F5  62         			cla
  449    00:E2F6  8D EC 22   	.hours:		sta	clock_hh
  450    00:E2F9  62         			cla
  451    00:E2FA  8D ED 22   	.minutes:	sta	clock_mm
  452    00:E2FD  62         			cla
  453    00:E2FE  8D EE 22   	.seconds:	sta	clock_ss
  454    00:E301  62         			cla
  455    00:E302  8D EF 22   	.ticks:		sta	clock_tt
  456    00:E305  D8         			cld
  457                        	
  458    00:E306  4C 96 E3   			jmp	xfer_palettes		; Upload any palette changes.
                             #[1]   "main.s"
   15               6000     			.data
   16               0003     			.bank	DATA_BANK
   17                        	
   18               E309     		.code
   19                        	
   20                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 1; // **************************************************************************
   21                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 2; // **************************************************************************
   22                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 3; //
   23                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 4; // globals.h
   24                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 5; //
   25                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 6; // **************************************************************************
   26                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 7; // **************************************************************************
   27                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 8; //
   28                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 9; // The idea is that you, a PCE developer, copy this file from the ../include/
   29                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 10; // directory and into your project's directory, and then define the variables
   30                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 11; // that you want to have shared access to in all overlay programs on your CD.
   31                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 12; //
   32                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 13; // Because PCEAS searches the current (i.e. project) directory for an include
   33                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 14; // file first, then it will find your customized copy of the file rather than
   34                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 15; // the original copy in the ../include/ directory.
   35                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 16; //
   36                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 17; // **************************************************************************
   37                        		.dbg	line,	"..\..\..\include\hucc\globals.h", 18; // **************************************************************************
   38                        		.dbg	clear
   39               2300     		.bss
   40    F8:2300             	huc_globals:
   41                        	
   42    F8:2300             	huc_globals_end:
   43               E309     		.code
   44                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
   45                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
   46                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
   47                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
   48                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
   49                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
   50                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
   51                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
   52                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
   53                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
   54                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
   55                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
   56                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
   57                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
   58                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
   59                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
   60                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
   61                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
   62                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
   63                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
   64                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
   65                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
   66                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
   67                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
   68                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
   69                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
   70                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
   71                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
   72                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
   73                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
   74                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
   75                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 1; #ifndef _hucc_systemcard_h
   76                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 2; #define _hucc_systemcard_h
   77                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 4; /****************************************************************************
   78                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 5; ; ***************************************************************************
   79                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 6; ;
   80                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 7; ; hucc-systemcard.h
   81                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 8; ;
   82                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 9; ; Macros and library functions for using the System Card.
   83                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 10; ;
   84                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 11; ; Copyright John Brandwood 2024.
   85                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 12; ;
   86                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 13; ; Distributed under the Boost Software License, Version 1.0.
   87                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
   88                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
   89                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 16; ;
   90                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 17; ; ***************************************************************************
   91                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 18; ; ***************************************************************************
   92                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 19; ;
   93                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 20; ; Because these are mainly macros, and so must be included before being used
   94                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 21; ; in compiled code, the actual functions here are written to avoid using any
   95                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 22; ; BSS memory so that HuCC's overlay global-shared-variables are not effected.
   96                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 23; ;
   97                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 24; ; ***************************************************************************
   98                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 25; ; **************************************************************************/
   99                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 27; // *************
  100                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 28; // Backup RAM defines ...
  101                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 29; // *************
  102                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 31; #define  BM_OK             0
  103                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 32; #define  BM_NOT_FOUND      1
  104                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 33; #define  BM_BAD_CHECKSUM   2
  105                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 34; #define  BM_DIR_CORRUPTED  3
  106                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 35; #define  BM_FILE_EMPTY     4
  107                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 36; #define  BM_FULL           5
  108                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 37; #define  BM_NOT_FORMATED   0xFF			// HuC incorrect spelling.
  109                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 38; #define  BM_NOT_FORMATTED  0xFF			// HuCC can use a dictionary!
  110                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 40; #define  BRAM_STARTPTR     0x8010
  111                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 42; // *************
  112                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 43; // CD defines ...
  113                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 44; // *************
  114                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 46; #define	CDPLAY_MUTE		0
  115                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 47; #define	CDPLAY_REPEAT		1
  116                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 48; #define	CDPLAY_NORMAL		2
  117                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 49; #define	CDPLAY_ENDOFDISC	0
  118                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 51; #define	CDFADE_CANCEL	0
  119                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 52; #define	CDFADE_PCM6	8
  120                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 53; #define	CDFADE_ADPCM6	10
  121                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 54; #define	CDFADE_PCM2	12
  122                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 55; #define	CDFADE_ADPCM2	14
  123                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 57; #define CDTRK_AUDIO	0
  124                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 58; #define CDTRK_DATA	4
  125                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 60; // *************
  126                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 61; // ADPCM defines ...
  127                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 62; // *************
  128                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 64; #define	ADPLAY_AUTOSTOP		0
  129                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 65; #define	ADPLAY_REPEAT		0x80
  130                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 67; #define ADPLAY_FREQ_16KHZ	0xE
  131                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 68; #define ADPLAY_FREQ_10KHZ	0xD
  132                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 69; #define ADPLAY_FREQ_8KHZ	0xC
  133                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 70; #define ADPLAY_FREQ_6KHZ	0xB
  134                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 71; #define ADPLAY_FREQ_5KHZ	0xA
  135                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 73; #define ADREAD_RAM	0
  136                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 74; #define ADREAD_VRAM	0xFF
  137                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 76; #define ADWRITE_RAM	0
  138                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 77; #define ADWRITE_VRAM	0xFF
  139                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 79; // *************
  140                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 80; // Functions in hucc-systemcard.asm ...
  141                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 81; // *************
  142                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 83; #ifdef __HUCC__
  143                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 85; #asmdef	HUCC_USES_SYSTEMCARD 1
  144               0001     	HUCC_USES_SYSTEMCARD = 1
  145                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 87; extern void __fastcall __macro cd_boot( void );
  146                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 88; extern unsigned int __fastcall __macro cd_getver( void );
  147                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 89; extern void __fastcall __macro cd_reset( void );
  148                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 90; extern unsigned char __fastcall __macro cd_pause( void );
  149                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 91; extern unsigned char __fastcall cd_unpause( void );
  150                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 92; extern void __fastcall __macro cd_fade( unsigned char type<acc> );
  151                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 93; extern unsigned char __fastcall cd_playtrk( unsigned char start_track<_bx>, unsigned char end_track<_cx>, unsigned char mode<_dh> );
  152                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 94; extern unsigned char __fastcall cd_playmsf( unsigned char start_minute<_al>,  unsigned char start_second<_ah>,  unsigned char start_frame<_bl>, unsigned char end_minute<_cl>,  unsigned char end_second<_ch>,  unsigned char end_frame<_dl>,  unsigned char mode<_dh> );
  153                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 95; extern unsigned char __fastcall cd_fastvram( unsigned char ovl_index<_cl>, unsigned int sect_offset<_si>, unsigned int vramaddr<_bx>, unsigned int sectors<_al> );
  154                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 96; extern unsigned char __fastcall cd_loadvram( unsigned char ovl_index<_cl>, unsigned int sect_offset<_si>, unsigned int vramaddr<_bx>, unsigned int bytes<_ax> );
  155                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 97; extern unsigned char __fastcall cd_loaddata( unsigned char ovl_index<_cl>, unsigned int sect_offset<_si>, unsigned char __far *buffer<_bp_bank:_bp>, unsigned int bytes<__ptr> );
  156                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 98; extern unsigned char __fastcall cd_loadbank( unsigned char ovl_index<_cl>, unsigned int sect_offset<_si>, unsigned char bank<_bl>, unsigned int sectors<_al> );
  157                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 99; extern unsigned char __fastcall __macro cd_status( unsigned char mode<acc> );
  158                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 101; extern void __fastcall __macro ad_reset( void );
  159                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 102; extern unsigned char __fastcall __macro ad_trans( unsigned char ovl_index<_cl>, unsigned int sect_offset<_si>, unsigned char nb_sectors<_dh>, unsigned int ad_addr<_bx> );
  160                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 103; extern void __fastcall __macro ad_read( unsigned int ad_addr<_cx>, unsigned char mode<_dh>, unsigned int buf<_bx>, unsigned int bytes<_ax> );
  161                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 104; extern void __fastcall __macro ad_write( unsigned int ad_addr<_cx>, unsigned char mode<_dh>, unsigned int buf<_bx>, unsigned int bytes<_ax> );
  162                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 105; extern unsigned char __fastcall __macro ad_play( unsigned int ad_addr<_bx>, unsigned int bytes<_ax>, unsigned char freq<_dh>, unsigned char mode<_dl> );
  163                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 106; extern unsigned char __fastcall __macro ad_cplay( unsigned char ovl_index<_cl>, unsigned int sect_offset<_si>, unsigned int nb_sectors<_bx>, unsigned char freq<_dh> );
  164                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 107; extern void __fastcall __macro ad_stop( void );
  165                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 108; extern unsigned char __fastcall __macro ad_stat( void );
  166                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 110; extern unsigned char __fastcall bm_check( void );
  167                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 111; extern unsigned char __fastcall bm_format( void );
  168                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 112; extern unsigned int __fastcall __macro bm_free( void );
  169                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 113; extern unsigned char __fastcall __macro bm_read( unsigned char *buffer<_bx>, unsigned char *name<_ax>, unsigned int offset<_dx>, unsigned int length<_cx> );
  170                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 114; extern unsigned char __fastcall __macro bm_write( unsigned char *buffer<_bx>, unsigned char *name<_ax>, unsigned int offset<_dx>, unsigned int length<_cx> );
  171                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 115; extern unsigned char __fastcall __macro bm_delete( unsigned char *name<_ax> );
  172                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 117; // Deprecated functions ...
  173                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 119; extern unsigned char __fastcall __macro bm_exist( unsigned char *name<_ax> );
  174                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 120; extern unsigned char __fastcall __macro bm_create( unsigned char *name<_ax>, unsigned int length<_cx> );
  175                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 122; // void __fastcall _xsafe add_sectors( unsigned int sector_offset<acc> );
  176                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 124; #endif // __HUCC__
  177                        		.dbg	line,	"..\..\..\include\hucc\hucc-systemcard.h", 126; #endif // _hucc_systemcard_h
  178                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
  179                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 1; #ifndef _hucc_baselib_h
  180                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 2; #define _hucc_baselib_h
  181                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 4; /****************************************************************************
  182                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 5; ; ***************************************************************************
  183                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 6; ;
  184                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 7; ; hucc-baselib.h
  185                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 8; ;
  186                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 9; ; Basic library functions provided as macros.
  187                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 10; ;
  188                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 11; ; Copyright John Brandwood 2024.
  189                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 12; ;
  190                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 13; ; Distributed under the Boost Software License, Version 1.0.
  191                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
  192                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
  193                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 16; ;
  194                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 17; ; ***************************************************************************
  195                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 18; ; **************************************************************************/
  196                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 20; // *************
  197                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 21; // Joypad defines ...
  198                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 22; // *************
  199                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 24; #define	JOY_A		0x01
  200                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 25; #define	JOY_I		0x01
  201                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 26; #define	JOY_B		0x02
  202                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 27; #define	JOY_II		0x02
  203                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 28; #define	JOY_SLCT	0x04
  204                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 29; #define	JOY_SEL		0x04
  205                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 30; #define	JOY_STRT	0x08
  206                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 31; #define	JOY_RUN		0x08
  207                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 32; #define	JOY_UP		0x10
  208                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 33; #define	JOY_RGHT	0x20
  209                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 34; #define	JOY_RIGHT	0x20
  210                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 35; #define	JOY_DOWN	0x40
  211                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 36; #define	JOY_LEFT	0x80
  212                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 38; #define	JOY_C		0x0100
  213                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 39; #define	JOY_III		0x0100
  214                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 40; #define	JOY_D		0x0200
  215                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 41; #define	JOY_IV		0x0200
  216                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 42; #define	JOY_E		0x0400
  217                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 43; #define	JOY_V		0x0400
  218                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 44; #define	JOY_F		0x0800
  219                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 45; #define	JOY_VI		0x0800
  220                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 47; #define JOY_SIXBUT	0x8000
  221                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 48; #define JOY_TYPE6	0x8000
  222                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 50; // *************
  223                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 51; // SuperGRAFX VPC settings for set_vpc_ctl() ...
  224                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 52; // *************
  225                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 54; #define VPC_SPR1_BKG1_SPR2_BKG2	0x3000 // same as SGX_PARALLAX=0
  226                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 55; #define VPC_SPR1_SPR2_BKG1_BKG2	0x7000 // same as SGX_PARALLAX=1
  227                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 56; #define VPC_BKG1_BKG2_SPR1_SPR2	0xB000
  228                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 58; // *************
  229                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 59; // System Card variables ...
  230                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 60; // *************
  231                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 62; extern unsigned int si;
  232                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 63; extern unsigned int di;
  233                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 64; extern unsigned int bp;
  234                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 66; extern unsigned int ax;
  235                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 67; extern unsigned int bx;
  236                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 68; extern unsigned int cx;
  237                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 69; extern unsigned int dx;
  238                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 71; extern unsigned char al;
  239                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 72; extern unsigned char ah;
  240                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 73; extern unsigned char bl;
  241                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 74; extern unsigned char bh;
  242                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 75; extern unsigned char cl;
  243                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 76; extern unsigned char ch;
  244                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 77; extern unsigned char dl;
  245                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 78; extern unsigned char dh;
  246                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 80; extern unsigned char irq_cnt;
  247                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 81; extern unsigned char joynow[5];
  248                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 82; extern unsigned char joytrg[5];
  249                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 83; extern unsigned char joy6now[5];
  250                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 84; extern unsigned char joy6trg[5];
  251                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 85; extern unsigned int  bg_x1;
  252                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 86; extern unsigned int  bg_y1;
  253                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 87; extern unsigned int  bg_x2;
  254                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 88; extern unsigned int  bg_y2;
  255                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 90; // *************
  256                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 91; // Special macros to get information from PCEAS ...
  257                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 92; // *************
  258                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 94; #define BANK( datasym ) ((unsigned) (&__bank__ ## datasym))
  259                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 95; #define SIZEOF( datasym ) ((unsigned) (&__sizeof__ ## datasym))
  260                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 96; #define COUNTOF( datasym ) ((unsigned) (&__countof__ ## datasym))
  261                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 97; #define OVERLAY( datasym ) ((unsigned) (&__overlay__ ## datasym))
  262                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 100; // *************
  263                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 101; // Functions in hucc-baselib.asm ...
  264                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 102; // *************
  265                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 104; #ifdef __HUCC__
  266                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 106; #asmdef	HUCC_USES_BASELIB 1
  267               0001     	HUCC_USES_BASELIB = 1
  268                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 108; #define	_OPTIMIZE 1
  269                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 111; // *************
  270                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 112; // Hardware Detection
  271                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 113; // *************
  272                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 115; extern unsigned char __fastcall __macro sgx_detect( void );
  273                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 116; extern unsigned char __fastcall __macro ac_exists( void );
  274                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 119; // *************
  275                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 120; // Memory Access
  276                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 121; // *************
  277                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 123; extern unsigned char __fastcall __macro peek( unsigned int addr<__ptr> );
  278                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 124; extern unsigned int  __fastcall __macro peekw( unsigned int addr<__ptr> );
  279                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 126; extern void __fastcall __macro poke( unsigned int addr<__poke>, unsigned char with<acc> );
  280                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 127; extern void __fastcall __macro pokew( unsigned int addr<__poke>, unsigned int with<acc> );
  281                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 129; extern unsigned char __fastcall farpeek( void __far *addr<_bp_bank:_bp> );
  282                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 130; extern unsigned int  __fastcall farpeekw( void __far *addr<_bp_bank:_bp> );
  283                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 132; extern void __fastcall __nop set_far_base( unsigned char data_bank<_bp_bank>, unsigned char *data_addr<_bp> );
  284                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 133; extern void __fastcall set_far_offset( unsigned int offset<_bp>, unsigned char data_bank<_bp_bank>, unsigned char *data_addr<acc> );
  285                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 135; extern unsigned char __fastcall far_peek( void );
  286                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 136; extern unsigned int  __fastcall far_peekw( void );
  287                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 138; extern void __fastcall __macro reset_mpr2( void );
  288                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 139; extern void __fastcall __macro reset_mpr34( void );
  289                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 141; extern void * __fastcall __macro farset_mpr2( void __far *addr<_bp_bank:_bp> );
  290                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 142; extern void * __fastcall __macro farset_mpr34( void __far *addr<_bp_bank:_bp> );
  291                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 144; extern void * __fastcall __macro far_set_mpr2( void );
  292                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 145; extern void * __fastcall __macro far_set_mpr34( void );
  293                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 148; // *************
  294                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 149; // Clock Functions
  295                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 150; // *************
  296                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 152; extern unsigned char __fastcall __macro clock_hh( void );
  297                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 153; extern unsigned char __fastcall __macro clock_mm( void );
  298                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 154; extern unsigned char __fastcall __macro clock_ss( void );
  299                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 155; extern unsigned char __fastcall __macro clock_tt( void );
  300                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 156; extern void __fastcall __macro clock_reset( void );
  301                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 159; // *************
  302                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 160; // Joypad Functions
  303                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 161; // *************
  304                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 163; extern unsigned int __fastcall __macro joy( unsigned char which<acc> );
  305                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 164; extern unsigned int __fastcall __macro joytrg( unsigned char which<acc> );
  306                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 167; // *************
  307                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 168; // Number Functions
  308                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 169; // *************
  309                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 171; extern int __fastcall abs( int value<acc> );
  310                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 173; extern void __fastcall __macro srand( unsigned char seed<acc> );
  311                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 174; extern unsigned int __fastcall rand( void );
  312                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 175; extern unsigned char __fastcall rand8( void );
  313                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 177; // Note: "limit" is 0..255.
  314                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 178; extern unsigned char __fastcall random8( unsigned char limit<acc> );
  315                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 180; // Note: "limit" is 0..128, 129..255 are treated as 128!
  316                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 181; extern unsigned char __fastcall random( unsigned char limit<acc> );
  317                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 184; // *************
  318                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 185; // Overlay Execution
  319                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 186; // *************
  320                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 188; extern unsigned char __fastcall __macro cd_execoverlay( unsigned char ovl_index<acc> );
  321                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 191; // *************
  322                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 192; // Functions that are only optionally available if configured in your hucc-config.inc
  323                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 193; // *************
  324                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 195; extern unsigned int __fastcall __macro joybuf( unsigned char which<acc> );
  325                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 196; extern unsigned int __fastcall __macro get_joy_events( unsigned char which<acc> );
  326                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 197; extern void __fastcall __macro clear_joy_events( unsigned char mask<acc> );
  327                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 200; // *************
  328                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 201; // Functions that are only implemented in the TGEMU emulator for unit-testing
  329                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 202; // the compiler, and which should never be used in normal HuCC projects ...
  330                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 203; // *************
  331                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 205; extern void __fastcall dump_screen( void );
  332                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 206; extern void __fastcall abort( void );
  333                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 207; extern void __fastcall exit( int value<acc> );
  334                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 209; extern unsigned char __fastcall __builtin_ffs( unsigned int value<__temp> );
  335                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 211; #endif // __HUCC__
  336                        		.dbg	line,	"..\..\..\include\hucc\hucc-baselib.h", 213; #endif // _hucc_baselib_h
  337                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
  338                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 1; #ifndef _hucc_gfx_h
  339                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 2; #define _hucc_gfx_h
  340                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 4; /****************************************************************************
  341                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 5; ; ***************************************************************************
  342                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 6; ;
  343                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 7; ; huc-gfx.h
  344                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 8; ;
  345                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 9; ; Based on the original HuC and MagicKit functions by David Michel and the
  346                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 10; ; other original HuC developers.
  347                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 11; ;
  348                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 12; ; Modifications copyright John Brandwood 2024.
  349                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 13; ;
  350                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 14; ; Distributed under the Boost Software License, Version 1.0.
  351                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 15; ; (See accompanying file LICENSE_1_0.txt or copy at
  352                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 16; ;  http://www.boost.org/LICENSE_1_0.txt)
  353                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 17; ;
  354                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 18; ; ***************************************************************************
  355                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 19; ; **************************************************************************/
  356                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 21; // *************
  357                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 22; // Screen defines ...
  358                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 23; // *************
  359                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 25; #define	SCR_SIZE_32x32	0
  360                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 26; #define	SCR_SIZE_64x32	1
  361                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 27; #define	SCR_SIZE_128x32	2
  362                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 28; #define	SCR_SIZE_32x64	4
  363                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 29; #define	SCR_SIZE_64x64	5
  364                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 30; #define	SCR_SIZE_128x64	6
  365                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 32; #define	XRES_SHARP	0
  366                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 33; #define	XRES_SOFT	4
  367                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 34; #define	XRES_KEEP	128
  368                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 36; #define VPC_WIN_A	0x00
  369                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 37; #define VPC_WIN_B	0x01
  370                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 38; #define	VPC_WIN_AB	0x02
  371                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 39; #define	VPC_WIN_NONE	0x03
  372                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 40; #define	VPC_NORM	0x00
  373                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 41; #define	VPC_SPR		0x04
  374                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 42; #define	VPC_INV_SPR	0x08
  375                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 43; #define VDC1_ON		0x01
  376                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 44; #define	VDC1_OFF	0x00
  377                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 45; #define VDC2_ON		0x02
  378                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 46; #define	VDC2_OFF	0x00
  379                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 47; #define VDC_ON		0x03
  380                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 48; #define	VDC_OFF		0x00
  381                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 50; // *************
  382                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 51; // Functions in hucc-gfx.asm ...
  383                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 52; // *************
  384                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 54; #ifdef __HUCC__
  385                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 56; #asmdef	HUCC_USES_GFX 1
  386               0001     	HUCC_USES_GFX = 1
  387                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 58; // *************
  388                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 59; // Color and Palette Functions
  389                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 60; // *************
  390                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 62; extern void __fastcall clear_palette( void );
  391                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 64; extern void __fastcall __nop set_color( unsigned int index<VCE_CTA>, unsigned int value<VCE_CTW> );
  392                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 65; extern void __fastcall set_color_rgb( unsigned int index<VCE_CTA>, unsigned char r<_al>, unsigned char g<_ah>, unsigned char b<acc> );
  393                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 66; extern unsigned int __fastcall __macro get_color( unsigned int index<VCE_CTA> );
  394                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 68; extern void __fastcall load_palette( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp>, unsigned char num_palettes<_ah> );
  395                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 69; extern void __fastcall far_load_palette( unsigned char palette<_al>, unsigned char num_palettes<_ah> );
  396                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 71; extern void __fastcall read_palette( unsigned char palette<_al>, unsigned char num_palettes<_ah>, unsigned int *destination<_di> );
  397                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 73; extern void __fastcall __macro fade_to_black( unsigned int __far *from<_bp_bank:_bp>, unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_sub<_ah> );
  398                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 74; extern void __fastcall __macro fade_to_white( unsigned int __far *from<_bp_bank:_bp>, unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_add<_ah> );
  399                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 75; extern void __fastcall __macro cross_fade_to( unsigned int __far *from<_bp_bank:_bp>, unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char which_component<_ah> );
  400                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 77; extern void __fastcall __macro far_fade_to_black( unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_sub<_ah> );
  401                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 78; extern void __fastcall __macro far_fade_to_white( unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char value_to_add<_ah> );
  402                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 79; extern void __fastcall __macro far_cross_fade_to( unsigned int *destination<_di>, unsigned char num_colors<_al>, unsigned char which_component<_ah> );
  403                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 83; // *************
  404                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 84; // Video Functions
  405                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 85; // *************
  406                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 87; extern void __fastcall init_240x208( void );
  407                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 88; extern void __fastcall init_256x224( void );
  408                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 90; extern void __fastcall vsync( void );
  409                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 91; extern void __fastcall vsync( unsigned char count<_al> );
  410                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 93; extern void __fastcall disp_on( void );
  411                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 94; extern void __fastcall disp_off( void );
  412                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 96; extern void __fastcall set_screen_size( unsigned char value<_al> );
  413                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 98; extern void __fastcall set_xres( unsigned int x_pixels<_ax>, unsigned char blur_flag<_bl> );
  414                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 100; extern void __fastcall cls( void );
  415                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 101; extern void __fastcall cls( unsigned int tile<acc> );
  416                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 103; extern unsigned int __fastcall __macro vram_addr( unsigned char bat_x<_al>, unsigned char bat_y<_ah> );
  417                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 104; extern unsigned int __fastcall __macro get_vram( unsigned int address<_di> );
  418                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 105; extern void __fastcall __macro put_vram( unsigned int address<_di>, unsigned int data<acc> );
  419                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 107; extern void __fastcall __macro load_vram( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_words<_ax> );
  420                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 108; extern void __fastcall __macro far_load_vram( unsigned int vram<_di>,  unsigned int num_words<_ax> );
  421                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 110; extern void __fastcall load_bat( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
  422                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 111; extern void __fastcall far_load_bat( unsigned int vram<_di>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
  423                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 113; extern void __fastcall __macro load_sprites( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_groups<acc> );
  424                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 114; extern void __fastcall __macro far_load_sprites( unsigned int vram<_di>, unsigned int num_groups<acc> );
  425                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 116; extern void __fastcall vram2vram( unsigned int vram_dst<_ax>, unsigned int vram_src<_bx>, unsigned int word_len<_cx> );
  426                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 119; // *************
  427                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 120; // SuperGRAFX Video Functions
  428                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 121; // *************
  429                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 123; extern void __fastcall __nop vpc_set_ctl( unsigned int bits<VPC_CR> );
  430                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 124; extern void __fastcall __nop vpc_set_win1( unsigned int width<VPC_WINDOW1> );
  431                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 125; extern void __fastcall __nop vpc_set_win2( unsigned int width<VPC_WINDOW2> );
  432                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 127; extern void __fastcall sgx_set_screen_size( unsigned char value<_al> );
  433                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 129; extern void __fastcall sgx_set_xres( unsigned int x_pixels<_ax>, unsigned char blur_flag<_bl> );
  434                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 131; extern void __fastcall sgx_cls( void );
  435                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 132; extern void __fastcall sgx_cls( unsigned int tile<acc> );
  436                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 134; extern unsigned int __fastcall __macro sgx_vram_addr( unsigned char bat_x<_al>, unsigned char bat_y<_ah> );
  437                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 135; extern unsigned int __fastcall __macro sgx_get_vram( unsigned int address<_di> );
  438                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 136; extern void __fastcall __macro sgx_put_vram( unsigned int address<_di>, unsigned int data<acc> );
  439                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 138; extern void __fastcall __macro sgx_load_vram( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_words<_ax> );
  440                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 139; extern void __fastcall __macro sgx_far_load_vram( unsigned int vram<_di>, unsigned int num_words<_ax> );
  441                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 141; extern void __fastcall sgx_load_bat( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
  442                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 142; extern void __fastcall sgx_far_load_bat( unsigned int vram<_di>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
  443                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 144; extern void __fastcall __macro sgx_load_sprites( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_groups<acc> );
  444                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 145; extern void __fastcall __macro sgx_far_load_sprites( unsigned int vram<_di>, unsigned int num_groups<acc> );
  445                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 147; extern void __fastcall sgx_vram2vram( unsigned int vram_dst<_ax>, unsigned int vram_src<_bx>, unsigned int word_len<_cx> );
  446                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 150; // *************
  447                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 151; // Font Functions
  448                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 152; // *************
  449                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 154; extern void __fastcall set_font_addr( unsigned int vram<acc> );
  450                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 155; extern void __fastcall set_font_pal( unsigned char palette<acc> );
  451                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 157; extern void __fastcall load_font( unsigned char __far *font<_bp_bank:_bp>, unsigned char count<_al>, unsigned int vram<acc> );
  452                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 158; extern void __fastcall far_load_font( unsigned char count<_al>, unsigned int vram<acc> );
  453                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 160; extern void __fastcall __nop set_font_color( unsigned char foreground<monofont_fg>, unsigned char background<monofont_bg> );
  454                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 161; extern void __fastcall __macro load_default_font( void );
  455                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 164; // *************
  456                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 165; // SuperGRAFX Font Functions
  457                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 166; // *************
  458                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 168; extern void __fastcall sgx_set_font_addr( unsigned int vram<acc> );
  459                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 169; extern void __fastcall sgx_set_font_pal( unsigned char palette<acc> );
  460                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 171; extern void __fastcall sgx_load_font( char __far *font<_bp_bank:_bp>, unsigned char count<_al>, unsigned int vram<acc> );
  461                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 172; extern void __fastcall sgx_far_load_font( unsigned char count<_al>, unsigned int vram<acc> );
  462                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 174; extern void __fastcall __macro sgx_load_default_font( void );
  463                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 177; // *************
  464                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 178; // Deprecated functions ...
  465                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 179; // *************
  466                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 181; extern void __fastcall __macro set_xres( unsigned int x_pixels<_ax> );
  467                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 182; extern void __fastcall __macro sgx_set_xres( unsigned int x_pixels<_ax> );
  468                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 184; extern void __fastcall load_background( unsigned char __far *tiles<_bp_bank:_bp>, unsigned char __far *palettes<__fbank:__fptr>, unsigned char __far *bat<_cl:_bx>, unsigned char w<_dl>, unsigned char h<_dh> );
  469                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 186; extern void __fastcall __macro set_bgpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp> );
  470                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 187; extern void __fastcall __macro set_bgpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_palettes<_ah> );
  471                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 188; extern void __fastcall __macro set_sprpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp> );
  472                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 189; extern void __fastcall __macro set_sprpal( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_palettes<_ah> );
  473                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 191; extern void __fastcall load_font( char __far *font<_bp_bank:_bp>, unsigned char count<_al> );
  474                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 193; extern void __fastcall put_string( unsigned char *string<_bp>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
  475                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 195; extern void __fastcall put_char( unsigned char digit<_bl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
  476                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 196; extern void __fastcall put_digit( unsigned char digit<_bl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
  477                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 197; extern void __fastcall put_hex( unsigned int number<_bx>, unsigned char length<_cl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
  478                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 198; extern void __fastcall put_number( unsigned int number<_bx>, unsigned char length<_cl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
  479                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 199; extern void __fastcall put_raw( unsigned int data<_bx>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
  480                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 201; #endif // __HUCC__
  481                        		.dbg	line,	"..\..\..\include\hucc\hucc-gfx.h", 203; #endif // _hucc_gfx_h
  482                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
  483                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 1; #ifndef _hucc_string_h
  484                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 2; #define _hucc_string_h
  485                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 4; /****************************************************************************
  486                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 5; ; ***************************************************************************
  487                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 6; ;
  488                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 7; ; hucc-string.h
  489                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 8; ;
  490                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 9; ; Not-quite-standard, but fast, replacements for <string.h>.
  491                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 10; ;
  492                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 11; ; Copyright John Brandwood 2024.
  493                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 12; ;
  494                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 13; ; Distributed under the Boost Software License, Version 1.0.
  495                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
  496                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
  497                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 16; ;
  498                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 17; ; ***************************************************************************
  499                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 18; ; ***************************************************************************
  500                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 19; ;
  501                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 20; ; !!! WARNING : non-standard return values !!!
  502                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 21; ;
  503                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 22; ; Strings are limited to a maximum of 255 characters (+ the terminator)!
  504                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 23; ;
  505                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 24; ; The memcpy(), strcpy() and strcat() functions do NOT return the destination
  506                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 25; ; address, and they are declared "void" to check that the value is not used.
  507                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 26; ;
  508                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 27; ; mempcpy() is provided which returns the end address instead of the starting
  509                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 28; ; address, because this is typically more useful.
  510                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 29; ;
  511                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 30; ; Please note that both memcpy() and memset() are implemented using a TII for
  512                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 31; ; speed, and so the length should be < 16 bytes if used in time-critical bits
  513                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 32; ; of code (such as when using a split screen) because they delay interrupts.
  514                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 33; ;
  515                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 34; ; strncpy() and strncat() are not provided, because strncpy() was not created
  516                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 35; ; for the purpose of avoiding string overruns, and strncat() is just a poorly
  517                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 36; ; designed function IMHO.
  518                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 37; ;
  519                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 38; ; POSIX strlcpy() and strlcat() are provided instead, but once again they are
  520                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 39; ; slightly non-standard in that the return value when there is an overflow is
  521                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 40; ; the buffer size (so that the overflow can be detected), instead of the full
  522                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 41; ; size of the destination string that was too big to fit in the buffer.
  523                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 42; ;
  524                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 43; ; ***************************************************************************
  525                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 44; ; **************************************************************************/
  526                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 46; // *************
  527                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 47; // Functions in hucc-string.asm ...
  528                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 48; // *************
  529                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 50; #ifdef __HUCC__
  530                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 52; #asmdef	HUCC_USES_STRING 1
  531               0001     	HUCC_USES_STRING = 1
  532                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 54; extern void __fastcall strcpy( char *destination<_di>, char *source<_bp> );
  533                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 55; extern void __fastcall strcat( char *destination<_di>, char *source<_bp> );
  534                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 57; extern unsigned int __fastcall strlen( char *source<_bp> );
  535                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 59; extern unsigned int __fastcall strlcpy( char *destination<_di>, char *source<_bp>, unsigned char size<acc> );
  536                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 60; extern unsigned int __fastcall strlcat( char *destination<_di>, char *source<_bp>, unsigned char size<acc> );
  537                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 62; extern void __fastcall memcpy( unsigned char *destination<ram_tii_dst>, unsigned char *source<ram_tii_src>, unsigned int count<acc> );
  538                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 63; extern void __fastcall farmemcpy( unsigned char *destination<ram_tii_dst>, unsigned char __far *source<_bp_bank:ram_tii_src>, unsigned int count<acc> );
  539                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 64; extern void __fastcall far_memcpy( unsigned char *destination<ram_tii_dst>, unsigned int count<acc> );
  540                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 66; extern unsigned char * __fastcall mempcpy( unsigned char *destination<ram_tii_dst>, unsigned char *source<ram_tii_src>, unsigned int count<acc> );
  541                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 67; extern unsigned char * __fastcall farmempcpy( unsigned char *destination<ram_tii_dst>, unsigned char __far *source<_bp_bank:ram_tii_src>, unsigned int count<acc> );
  542                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 68; extern unsigned char * __fastcall far_mempcpy( unsigned char *destination<ram_tii_dst>, unsigned int count<acc> );
  543                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 70; extern void __fastcall memset( unsigned char *destination<ram_tii_src>, unsigned char value<_al>, unsigned int count<acc> );
  544                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 72; //  0 	if strings are equal
  545                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 73; //  1 	if the first non-matching character in string1 > string2 (in ASCII).
  546                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 74; // -1 	if the first non-matching character in string1 < string2 (in ASCII).
  547                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 76; extern int __fastcall strcmp( char *string1<_di>, char *string2<_bp> );
  548                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 77; extern int __fastcall strncmp( char *string1<_di>, char *string2<_bp>, unsigned int count<_ax> );
  549                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 79; extern int __fastcall __macro memcmp( unsigned char *string1<_di>, unsigned char *string2<_bp>, unsigned int count<acc> );
  550                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 80; extern int __fastcall farmemcmp( unsigned char *string1<_di>, unsigned char __far *string2<_bp_bank:_bp>, unsigned int count<acc> );
  551                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 81; extern int __fastcall far_memcmp( unsigned char *string1<_di>, unsigned int count<acc> );
  552                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 83; #endif // __HUCC__
  553                        		.dbg	line,	"..\..\..\include\hucc\hucc-string.h", 85; #endif // _hucc_string_h
  554                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
  555                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 1; #ifndef _hucc_old_scroll_h
  556                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 2; #define _hucc_old_scroll_h
  557                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 4; /****************************************************************************
  558                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 5; ; ***************************************************************************
  559                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 6; ;
  560                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 7; ; hucc-old-scroll.h
  561                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 8; ;
  562                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 9; ; Based on the original HuC and MagicKit functions by David Michel and the
  563                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 10; ; other original HuC developers.
  564                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 11; ;
  565                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 12; ; Modifications copyright John Brandwood 2024.
  566                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 13; ;
  567                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 14; ; Distributed under the Boost Software License, Version 1.0.
  568                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 15; ; (See accompanying file LICENSE_1_0.txt or copy at
  569                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 16; ;  http://www.boost.org/LICENSE_1_0.txt)
  570                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 17; ;
  571                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 18; ; ***************************************************************************
  572                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 19; ; ***************************************************************************
  573                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 20; ;
  574                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 21; ; HuC's old scrolling library is provided for use with existing HuC projects,
  575                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 22; ; but it should preferably be avoided in new projects because it is slow and
  576                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 23; ; forever limited by its choice to handle gaps between areas, and sorting.
  577                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 24; ;
  578                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 25; ; HuCC's new scrolling library puts the responibility for defining both gaps
  579                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 26; ; and the display order into the project's hands, but in return it runs much
  580                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 27; ; faster, using less than 1/6 of the processing time in VBLANK, and far less
  581                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 28; ; time in the RCR interrputs themselves. It also supports the 2nd SuperGRAFX
  582                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 29; ; screen layer, which HuC's old scrolling library ignores.
  583                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 30; ;
  584                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 31; ; ***************************************************************************
  585                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 32; ; **************************************************************************/
  586                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 34; // *************
  587                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 35; // Functions in hucc-old-scroll.asm ...
  588                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 36; // *************
  589                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 38; #ifdef __HUCC__
  590                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 40; #asmdef	HUCC_USES_OLD_SCROLL 1
  591               0001     	HUCC_USES_OLD_SCROLL = 1
  592                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 42; extern void __fastcall scroll( unsigned char num<_al>, unsigned int x<_cx>, unsigned int y<_dx>, unsigned char top<_ah>, unsigned char bottom<_bl>, unsigned char disp<acc> );
  593                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 43; extern void __fastcall scroll_disable( unsigned char num<acc> );
  594                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 45; #endif // __HUCC__
  595                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-scroll.h", 47; #endif // _hucc_old_scroll_h
  596                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
  597                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 1; #ifndef _hucc_old_spr_h
  598                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 2; #define _hucc_old_spr_h
  599                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 4; /****************************************************************************
  600                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 5; ; ***************************************************************************
  601                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 6; ;
  602                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 7; ; hucc-old-spr.h
  603                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 8; ;
  604                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 9; ; Based on the original HuC and MagicKit functions by David Michel and the
  605                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 10; ; other original HuC developers.
  606                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 11; ;
  607                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 12; ; Modifications copyright John Brandwood 2024.
  608                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 13; ;
  609                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 14; ; Distributed under the Boost Software License, Version 1.0.
  610                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 15; ; (See accompanying file LICENSE_1_0.txt or copy at
  611                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 16; ;  http://www.boost.org/LICENSE_1_0.txt)
  612                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 17; ;
  613                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 18; ; ***************************************************************************
  614                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 19; ; **************************************************************************/
  615                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 21; // *************
  616                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 22; // Sprite defines ...
  617                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 23; // *************
  618                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 25; #define FLIP_X_MASK 0x08
  619                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 26; #define FLIP_Y_MASK 0x80
  620                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 27; #define FLIP_MAS    0x88
  621                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 28; #define SIZE_MAS    0x31
  622                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 30; #define NO_FLIP     0x00
  623                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 31; #define NO_FLIP_X   0x00
  624                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 32; #define NO_FLIP_Y   0x00
  625                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 33; #define FLIP_X      0x08
  626                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 34; #define FLIP_Y      0x80
  627                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 35; #define SZ_16x16    0x00
  628                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 36; #define SZ_16x32    0x10
  629                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 37; #define SZ_16x64    0x30
  630                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 38; #define SZ_32x16    0x01
  631                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 39; #define SZ_32x32    0x11
  632                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 40; #define	SZ_32x64    0x31
  633                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 42; // *************
  634                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 43; // Functions in hucc-old-spr.asm ...
  635                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 44; // *************
  636                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 46; #ifdef __HUCC__
  637                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 48; #asmdef	HUCC_USES_OLD_SPR 1
  638               0001     	HUCC_USES_OLD_SPR = 1
  639                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 50; extern void __fastcall init_satb( void );
  640                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 51; extern void __fastcall reset_satb( void );
  641                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 52; extern void __fastcall satb_update( void );
  642                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 53; extern void __fastcall spr_set( unsigned char num<acc> );
  643                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 54; extern void __fastcall spr_hide( void );
  644                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 55; extern void __fastcall spr_show( void );
  645                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 56; extern void __fastcall spr_x( unsigned int value<acc> );
  646                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 57; extern void __fastcall spr_y( unsigned int value<acc> );
  647                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 58; extern void __fastcall spr_pattern( unsigned int vaddr<acc> );
  648                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 59; extern void __fastcall spr_ctrl( unsigned char mask<_al>, unsigned char value<acc> );
  649                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 60; extern void __fastcall spr_pal( unsigned char palette<acc> );
  650                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 61; extern void __fastcall spr_pri( unsigned char priority<acc> );
  651                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 63; extern unsigned int __fastcall spr_get_x( void );
  652                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 64; extern unsigned int __fastcall spr_get_y( void );
  653                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 66; extern void __fastcall sgx_init_satb( void );
  654                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 67; extern void __fastcall sgx_reset_satb( void );
  655                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 68; extern void __fastcall sgx_satb_update( void );
  656                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 69; extern void __fastcall sgx_spr_set( unsigned char num<acc> );
  657                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 70; extern void __fastcall sgx_spr_hide( void );
  658                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 71; extern void __fastcall sgx_spr_show( void );
  659                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 72; extern void __fastcall sgx_spr_x( unsigned int value<acc> );
  660                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 73; extern void __fastcall sgx_spr_y( unsigned int value<acc> );
  661                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 74; extern void __fastcall sgx_spr_pattern( unsigned int vaddr<acc> );
  662                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 75; extern void __fastcall sgx_spr_ctrl( unsigned char mask<_al>, unsigned char value<acc> );
  663                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 76; extern void __fastcall sgx_spr_pal( unsigned char palette<acc> );
  664                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 77; extern void __fastcall sgx_spr_pri( unsigned char priority<acc> );
  665                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 79; extern unsigned int __fastcall sgx_spr_get_x( void );
  666                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 80; extern unsigned int __fastcall sgx_spr_get_y( void );
  667                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 82; #endif // __HUCC__
  668                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-spr.h", 84; #endif // _hucc_old_spr_h
  669                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
  670                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 1; #ifndef _hucc_old_map_h
  671                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 2; #define _hucc_old_map_h
  672                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 4; /****************************************************************************
  673                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 5; ; ***************************************************************************
  674                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 6; ;
  675                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 7; ; hucc-old-map.h
  676                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 8; ;
  677                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 9; ; Based on the original HuC and MagicKit functions by David Michel and the
  678                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 10; ; other original HuC developers.
  679                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 11; ;
  680                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 12; ; Modifications copyright John Brandwood 2024.
  681                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 13; ;
  682                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 14; ; Distributed under the Boost Software License, Version 1.0.
  683                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 15; ; (See accompanying file LICENSE_1_0.txt or copy at
  684                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 16; ;  http://www.boost.org/LICENSE_1_0.txt)
  685                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 17; ;
  686                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 18; ; ***************************************************************************
  687                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 19; ; **************************************************************************/
  688                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 21; // *************
  689                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 22; // Functions in hucc-old-map.asm ...
  690                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 23; // *************
  691                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 25; #ifdef __HUCC__
  692                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 27; #asmdef	HUCC_USES_OLD_MAP 1
  693               0001     	HUCC_USES_OLD_MAP = 1
  694                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 29; extern void __fastcall set_tile_address( unsigned int vram<_di> );
  695                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 30; extern void __fastcall sgx_set_tile_address( unsigned int vram<_di> );
  696                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 32; extern void __fastcall __nop set_tile_data( unsigned char __far *tiles<vdc_tile_bank:vdc_tile_addr>, unsigned char num_tiles<vdc_num_tiles>, unsigned char __far *palette_table<vdc_attr_bank:vdc_attr_addr>, unsigned char tile_type<vdc_tile_type> );
  697                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 33; extern void __fastcall __nop sgx_set_tile_data( unsigned char __far *tiles<sgx_tile_bank:sgx_tile_addr>, unsigned char num_tiles<sgx_num_tiles>, unsigned char __far *palette_table<sgx_attr_bank:sgx_attr_addr>, unsigned char tile_type<sgx_tile_type> );
  698                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 35; extern void __fastcall __nop set_far_tile_data( unsigned char tile_bank<vdc_tile_bank>, unsigned char *tile_addr<vdc_tile_addr>, unsigned char num_tiles<vdc_num_tiles>, unsigned char palette_table_bank<vdc_attr_bank>, unsigned char *palette_table_addr<vdc_attr_addr>, unsigned char tile_type<vdc_tile_type> );
  699                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 36; extern void __fastcall __nop sgx_set_far_tile_data( unsigned char tile_bank<sgx_tile_bank>, unsigned char *tile_addr<sgx_tile_addr>, unsigned char num_tiles<sgx_num_tiles>, unsigned char palette_table_bank<sgx_attr_bank>, unsigned char *palette_table_addr<sgx_attr_addr>, unsigned char tile_type<sgx_tile_type> );
  700                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 38; extern void __fastcall __nop set_map_data( unsigned char __far *map<vdc_map_bank:vdc_map_addr>, unsigned char w<vdc_map_width>, unsigned char h<vdc_map_height> );
  701                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 39; extern void __fastcall __nop sgx_set_map_data( unsigned char __far *map<sgx_map_bank:sgx_map_addr>, unsigned char w<sgx_map_width>, unsigned char h<sgx_map_height> );
  702                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 41; extern void __fastcall __nop set_far_map_data( unsigned char map_bank<vdc_map_bank>, unsigned char *map_addr<vdc_map_addr>, unsigned char w<vdc_map_width>, unsigned char h<vdc_map_height> );
  703                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 42; extern void __fastcall __nop sgx_set_far_map_data( unsigned char map_bank<vdc_map_bank>, unsigned char *map_addr<vdc_map_addr>, unsigned char w<sgx_map_width>, unsigned char h<sgx_map_height> );
  704                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 44; extern void __fastcall load_tile( unsigned int vram<_di> );
  705                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 45; extern void __fastcall sgx_load_tile( unsigned int vram<_di> );
  706                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 47; extern void __fastcall load_map( unsigned char bat_x<_al>, unsigned char bat_y<_ah>, int map_x<_bx>, int map_y<_dx>, unsigned char tiles_w<_cl>, unsigned char tiles_h<_ch> );
  707                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 48; extern void __fastcall sgx_load_map( unsigned char bat_x<_al>, unsigned char bat_y<_ah>, int map_x<_bx>, int map_y<_dx>, unsigned char tiles_w<_cl>, unsigned char tiles_h<_ch> );
  708                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 50; extern unsigned char __fastcall map_get_tile( unsigned char map_x<_bl>, unsigned char map_y<_bh> );
  709                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 51; extern unsigned char __fastcall sgx_map_get_tile( unsigned char map_x<_bl>, unsigned char map_y<_bh> );
  710                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 53; extern void __fastcall map_put_tile( unsigned char map_x<_bl>, unsigned char map_y<_bh>, unsigned char tile<_al> );
  711                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 54; extern void __fastcall sgx_map_put_tile( unsigned char map_x<_bl>, unsigned char map_y<_bh>, unsigned char tile<_al> );
  712                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 56; extern void __fastcall put_tile( unsigned char tile<_bl>, unsigned char bat_x<_al>, unsigned char bat_y<_ah> );
  713                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 57; extern void __fastcall sgx_put_tile( unsigned char tile<_bl>, unsigned char bat_x<_al>, unsigned char bat_y<_ah> );
  714                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 59; // Deprecated functions ...
  715                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 61; extern void __fastcall set_tile_data( unsigned char *tile_ex<_di> );
  716                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 63; extern void __fastcall __nop set_map_pals( unsigned char __far *palette_table<vdc_attr_bank:vdc_attr_addr> );
  717                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 64; extern void __fastcall __nop set_map_tile_type( unsigned char tile_type<vdc_tile_type> );
  718                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 66; extern void __fastcall __nop sgx_set_map_pals( unsigned char __far *palette_table<sgx_attr_bank:sgx_attr_addr> );
  719                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 67; extern void __fastcall __nop sgx_set_map_tile_type( unsigned char tile_type<sgx_tile_type> );
  720                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 69; extern void __fastcall set_map_tile_base( unsigned int vram<_di> );
  721                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 70; extern void __fastcall sgx_set_map_tile_base( unsigned int vram<_di> );
  722                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 72; #endif // __HUCC__
  723                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-map.h", 74; #endif // _hucc_old_map_h
  724                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
  725                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 1; #ifndef _hucc_old_line_h
  726                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 2; #define _hucc_old_line_h
  727                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 4; /****************************************************************************
  728                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 5; ; ***************************************************************************
  729                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 6; ;
  730                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 7; ; hucc-old-line.h
  731                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 8; ;
  732                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 9; ; Based on the original HuC and MagicKit functions by David Michel and the
  733                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 10; ; other original HuC developers.
  734                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 11; ;
  735                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 12; ; Modifications copyright John Brandwood 2024.
  736                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 13; ;
  737                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 14; ; Distributed under the Boost Software License, Version 1.0.
  738                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 15; ; (See accompanying file LICENSE_1_0.txt or copy at
  739                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 16; ;  http://www.boost.org/LICENSE_1_0.txt)
  740                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 17; ;
  741                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 18; ; ***************************************************************************
  742                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 19; ; **************************************************************************/
  743                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 21; // *************
  744                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 22; // Functions in hucc-old-line.asm ...
  745                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 23; // *************
  746                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 25; #ifdef __HUCC__
  747                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 27; #asmdef	HUCC_USES_OLD_LINE 1
  748               0001     	HUCC_USES_OLD_LINE = 1
  749                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 29; extern void __fastcall gfx_init( unsigned int start_vram_addr<_ax> );
  750                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 30; extern void __fastcall gfx_clear( unsigned int start_vram_addr<_di> );
  751                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 31; extern void __fastcall gfx_plot( unsigned int x<_gfx_x1>, unsigned int y<_gfx_y1>, char color<_gfx_color> );
  752                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 32; extern void __fastcall gfx_line( unsigned int x1<_gfx_x1>, unsigned int y1<_gfx_y1>, unsigned int x2<_gfx_x2>, unsigned int y2<_gfx_y2>, unsigned char color<_gfx_color> );
  753                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 34; #endif // __HUCC__
  754                        		.dbg	line,	"..\..\..\include\hucc\hucc-old-line.h", 36; #endif // _hucc_old_line_h
  755                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
  756                        		.dbg	line,	"main.c", 1; #include "huc.h"
  757                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
  758                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
  759                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
  760                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
  761                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
  762                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
  763                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
  764                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
  765                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
  766                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
  767                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
  768                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
  769                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
  770                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
  771                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
  772                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
  773                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
  774                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
  775                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
  776                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
  777                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
  778                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
  779                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
  780                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
  781                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
  782                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
  783                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
  784                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
  785                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
  786                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
  787                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
  788                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
  789                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
  790                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
  791                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
  792                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
  793                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
  794                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
  795                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
  796                        		.dbg	line,	"main.c", 2; #include "hucc-scroll.h"
  797                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 1; #ifndef _hucc_scroll_h
  798                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 2; #define _hucc_scroll_h
  799                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 4; /****************************************************************************
  800                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 5; ; ***************************************************************************
  801                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 6; ;
  802                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 7; ; hucc-scroll.h
  803                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 8; ;
  804                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 9; ; Routines for a fast split-screen scrolling system.
  805                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 10; ;
  806                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 11; ; Copyright John Brandwood 2024.
  807                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 12; ;
  808                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 13; ; Distributed under the Boost Software License, Version 1.0.
  809                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
  810                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
  811                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 16; ;
  812                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 17; ; ***************************************************************************
  813                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 18; ; ***************************************************************************
  814                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 19; ;
  815                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 20; ; The maximum number of splits for each screen layer is set in your project's
  816                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 21; ; "hucc-config.inc" file, with the library having a limit of 128-per-layer.
  817                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 22; ;
  818                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 23; ; Your first active split must be defined to start at screen line 0, and then
  819                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 24; ; the rest of the active splits must be in increasing line order to match the
  820                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 25; ; way that the PC Engine displays the output image.
  821                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 26; ;
  822                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 27; ; You can have disabled splits interleaved with your active splits.
  823                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 28; ;
  824                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 29; ; Splits that are normally disabled can be used to create full screen effects
  825                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 30; ; such as bouncing the screen up and down by adding blank areas at the top or
  826                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 31; ; bottom of the screen, and then rapidly changing the height of those areas.
  827                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 32; ;
  828                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 33; ; ***************************************************************************
  829                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 34; ; **************************************************************************/
  830                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 36; // *************
  831                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 37; // VDC bits for display_flags ...
  832                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 38; // *************
  833                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 40; #ifndef BKG_OFF
  834                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 41; #define BKG_OFF 0x00
  835                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 42; #endif
  836                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 44; #ifndef SPR_OFF
  837                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 45; #define SPR_OFF 0x00
  838                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 46; #endif
  839                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 48; #ifndef BKG_ON
  840                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 49; #define BKG_ON 0x80
  841                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 50; #endif
  842                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 52; #ifndef SPR_ON
  843                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 53; #define SPR_ON 0x40
  844                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 54; #endif
  845                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 56; // *************
  846                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 57; // Functions in hucc-scroll.asm ...
  847                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 58; // *************
  848                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 60; #ifdef __HUCC__
  849                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 62; #asmdef	HUCC_USES_NEW_SCROLL 1
  850               0001     	HUCC_USES_NEW_SCROLL = 1
  851                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 64; extern void __fastcall scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
  852                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 65; extern void __fastcall sgx_scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
  853                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 67; extern void __fastcall disable_split( unsigned char index<acc> );
  854                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 68; extern void __fastcall sgx_disable_split( unsigned char index<acc> );
  855                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 70; extern void __fastcall __macro disable_all_splits( void );
  856                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 71; extern void __fastcall __macro sgx_disable_all_splits( void );
  857                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 73; #asm
  858                        		.dbg	clear
  859                        			.macro	_disable_all_splits
  860                        			ldy	#HUCC_PCE_SPLITS - 1
  861                        	!loop:		tya
  862                        			call	_disable_split.1
  863                        			dey
  864                        			bpl	!loop-
  865                        			.endm
  866                        			.macro	_sgx_disable_all_splits
  867                        			ldy	#HUCC_SGX_SPLITS - 1
  868                        	!loop:		tya
  869                        			call	_sgx_disable_split.1
  870                        			dey
  871                        			bpl	!loop-
  872                        			.endm
  873                        	
  874                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 89; #endasm
  875                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 91; #endif // __HUCC__
  876                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 93; #endif // _hucc_scroll_h
  877                        		.dbg	line,	"main.c", 3; #include "hucc-chrmap.h"
  878                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 1; #ifndef _hucc_chrmap_h
  879                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 2; #define _hucc_chrmap_h
  880                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 4; /****************************************************************************
  881                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 5; ; ***************************************************************************
  882                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 6; ;
  883                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 7; ; hucc-chrmap.h
  884                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 8; ;
  885                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 9; ; A simple map system based on 8x8 characters (aka "tiles") in BAT format.
  886                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 10; ;
  887                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 11; ; Copyright John Brandwood 2025.
  888                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 12; ;
  889                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
  890                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
  891                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
  892                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 16; ;
  893                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 17; ; ***************************************************************************
  894                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 18; ; ***************************************************************************
  895                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 19; ;
  896                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 20; ; The maximum X and Y size for chrmaps is 256 characters (2048 pixels).
  897                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 21; ;
  898                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 22; ; The maximum total size for a chrmap is 16KBytes, which allows for maps up
  899                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 23; ; to 256x32 tiles (2048x256 pixels).
  900                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 24; ;
  901                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 25; ; ***************************************************************************
  902                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 26; ; **************************************************************************/
  903                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 28; // *************
  904                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 29; // This code extends the blkmap library ...
  905                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 30; // *************
  906                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 32; #include "hucc-blkmap.h"
  907                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 1; #ifndef _hucc_blkmap_h
  908                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 2; #define _hucc_blkmap_h
  909                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 4; /****************************************************************************
  910                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 5; ; ***************************************************************************
  911                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 6; ;
  912                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 7; ; hucc-blkmap.h
  913                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 8; ;
  914                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 9; ; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
  915                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 10; ;
  916                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 11; ; Copyright John Brandwood 2025.
  917                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 12; ;
  918                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
  919                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
  920                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
  921                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 16; ;
  922                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 17; ; ***************************************************************************
  923                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 18; ; ***************************************************************************
  924                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 19; ;
  925                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 20; ; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
  926                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 21; ;
  927                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 22; ; The maximum total size for a blkmap is 16KBytes, which allows for maps up
  928                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 23; ; to 128x128 blocks (2048x2048 pixels).
  929                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 24; ;
  930                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 25; ; Huge multi-screen blkmaps are also supported (optionally).
  931                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 26; ;
  932                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 27; ; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
  933                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 28; ;
  934                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 29; ; The maximum total size for a multi-screen map is 8KBytes, which allows for
  935                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 30; ; a total of 1024 screens.
  936                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 31; ;
  937                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 32; ; ***************************************************************************
  938                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 33; ; **************************************************************************/
  939                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 35; // *************
  940                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 36; // Functions in blkmap.asm ...
  941                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 37; // *************
  942                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 39; #ifdef __HUCC__
  943                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 41; #asmdef	HUCC_USES_BLKMAP 1
  944               0001     	HUCC_USES_BLKMAP = 1
  945                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 43; // Current top-left of drawn map in pixels.
  946                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 44; extern unsigned int   vdc_map_pxl_x;
  947                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 45; extern unsigned int   vdc_map_pxl_y;
  948                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 47; // Width and height to draw/scroll in characters (not tiles).
  949                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 48; extern unsigned char  vdc_map_draw_w;
  950                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 49; extern unsigned char  vdc_map_draw_h;
  951                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 51; // Width of map (or multi-screen BAT) in tiles.
  952                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 52; extern unsigned char  vdc_map_line_w;
  953                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 54; // Width of map in screens (if multi-screen map).
  954                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 55; extern unsigned char  vdc_map_scrn_w;
  955                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 57; // Extra information returned by get_map_block() and sgx_get_map_block(),
  956                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 58; // which are the collision flags and the mask/overlay sprite for the BLK.
  957                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 59; extern unsigned char  map_blk_flag;
  958                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 60; extern unsigned char  map_blk_mask;
  959                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 62; extern unsigned char  vdc_scr_bank;
  960                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 63; extern unsigned char *vdc_scr_addr;
  961                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 65; extern unsigned char  vdc_map_bank;
  962                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 66; extern unsigned char *vdc_map_addr;
  963                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 68; extern unsigned char  vdc_blk_bank;
  964                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 69; extern unsigned char *vdc_blk_addr;
  965                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 71; extern unsigned char  vdc_tbl_bank;
  966                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 72; extern unsigned char *vdc_tbl_addr;
  967                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 74; extern void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blocks<_al> );
  968                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 75; extern void __fastcall __macro set_blkmap( unsigned char __far *blk_map<vdc_map_bank:vdc_map_addr>, unsigned char blocks_w<vdc_map_line_w> );
  969                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 76; extern void __fastcall __macro set_multimap( unsigned char __far *multi_map<vdc_scr_bank:vdc_scr_addr>, unsigned char screens_w<vdc_map_scrn_w> );
  970                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 78; extern void __fastcall draw_map( void );
  971                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 79; extern void __fastcall scroll_map( void );
  972                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 81; extern void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
  973                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 83; extern unsigned char __fastcall get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
  974                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 85; #asm
  975                        		.dbg	clear
  976                        			.macro	_set_blkmap.2
  977                        			stz	vdc_scr_bank
  978                        			.endm
  979                        			.macro	_set_multimap.2
  980                        			lda	vdc_bat_width
  981                        			lsr	a
  982                        			sta	vdc_map_line_w
  983                        			.endm
  984                        			.macro	SCREEN
  985                        			db	(((\1) & $1FFF) | $6000) >> 8, bank(\1)
  986                        			db	(((\2) & $1FFF) | $4000) >> 8, bank(\2)
  987                        			db	(((\3) & $1FFF) | $6000) >> 8, bank(\3)
  988                        			dw	(\4)
  989                        			.endm
  990                        	
  991                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 102; #endasm
  992                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 104; #ifdef _SGX
  993                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 106; // Current top-left of drawn map in pixels.
  994                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 107; extern unsigned int   sgx_map_pxl_x;
  995                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 108; extern unsigned int   sgx_map_pxl_y;
  996                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 110; // Width and height to draw/scroll in characters (not tiles).
  997                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 111; extern unsigned char  sgx_map_draw_w;
  998                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 112; extern unsigned char  sgx_map_draw_h;
  999                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 114; // Width of map (or multi-screen BAT) in tiles.
 1000                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 115; extern unsigned char  sgx_map_line_w;
 1001                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 117; // Width of map in screens (if multi-screen map).
 1002                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 118; extern unsigned char  sgx_map_scrn_w;
 1003                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 120; extern unsigned char  sgx_scr_bank;
 1004                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 121; extern unsigned char *sgx_scr_addr;
 1005                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 123; extern unsigned char  sgx_map_bank;
 1006                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 124; extern unsigned char *sgx_map_addr;
 1007                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 126; extern unsigned char  sgx_blk_bank;
 1008                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 127; extern unsigned char *sgx_blk_addr;
 1009                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 129; extern unsigned char  sgx_tbl_bank;
 1010                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 130; extern unsigned char *sgx_tbl_addr;
 1011                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 132; extern void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blocks<_al> );
 1012                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 133; extern void __fastcall __macro sgx_set_blkmap( unsigned char __far *blk_map<sgx_map_bank:sgx_map_addr>, unsigned char blocks_w<sgx_map_line_w> );
 1013                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 134; extern void __fastcall __macro sgx_set_multimap( unsigned char __far *multi_map<sgx_scr_bank:sgx_scr_addr>, unsigned char screens_w<sgx_map_scrn_w> );
 1014                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 136; extern void __fastcall sgx_draw_map( void );
 1015                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 137; extern void __fastcall sgx_scroll_map( void );
 1016                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 139; extern void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1017                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 141; extern unsigned char __fastcall sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 1018                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 143; #asm
 1019                        		.dbg	clear
 1020                        			.macro	_sgx_set_blkmap.2
 1021                        			stz	sgx_scr_bank
 1022                        			.endm
 1023                        			.macro	_sgx_set_multimap.2
 1024                        			lda	sgx_bat_width
 1025                        			lsr	a
 1026                        			sta	sgx_map_line_w
 1027                        			.endm
 1028                        	
 1029                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 153; #endasm
 1030                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 155; #endif
 1031                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 157; #endif // __HUCC__
 1032                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 159; #endif // _hucc_blkmap_h
 1033                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 34; // *************
 1034                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 35; // Functions in chrmap.asm ...
 1035                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 36; // *************
 1036                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 38; #ifdef __HUCC__
 1037                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 40; #asmdef	HUCC_USES_CHRMAP 1
 1038               0001     	HUCC_USES_CHRMAP = 1
 1039                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 42; extern void __fastcall __nop set_chrmap( unsigned char __far *chrmap<vdc_map_bank:vdc_map_addr>, unsigned char tiles_w<vdc_map_line_w> );
 1040                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 44; extern void __fastcall draw_bat( void );
 1041                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 45; extern void __fastcall scroll_bat( void );
 1042                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 47; extern void __fastcall blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1043                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 49; #ifdef _SGX
 1044                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 51; extern void __fastcall __nop sgx_set_chrmap( unsigned char __far *chrmap<sgx_map_bank:sgx_map_addr>, unsigned char tiles_w<sgx_map_line_w> );
 1045                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 53; extern void __fastcall sgx_draw_bat( void );
 1046                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 54; extern void __fastcall sgx_scroll_bat( void );
 1047                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 56; extern void __fastcall sgx_blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1048                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 58; #endif
 1049                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 60; #endif // __HUCC__
 1050                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 62; #endif // _hucc_chrmap_h
 1051                        		.dbg	line,	"main.c", 4; #include "hucc-blkmap.h"
 1052                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 1; #ifndef _hucc_blkmap_h
 1053                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 2; #define _hucc_blkmap_h
 1054                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 4; /****************************************************************************
 1055                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 5; ; ***************************************************************************
 1056                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 6; ;
 1057                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 7; ; hucc-blkmap.h
 1058                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 8; ;
 1059                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 9; ; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
 1060                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 10; ;
 1061                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 11; ; Copyright John Brandwood 2025.
 1062                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 12; ;
 1063                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 1064                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 1065                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 1066                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 16; ;
 1067                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 17; ; ***************************************************************************
 1068                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 18; ; ***************************************************************************
 1069                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 19; ;
 1070                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 20; ; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
 1071                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 21; ;
 1072                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 22; ; The maximum total size for a blkmap is 16KBytes, which allows for maps up
 1073                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 23; ; to 128x128 blocks (2048x2048 pixels).
 1074                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 24; ;
 1075                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 25; ; Huge multi-screen blkmaps are also supported (optionally).
 1076                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 26; ;
 1077                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 27; ; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
 1078                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 28; ;
 1079                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 29; ; The maximum total size for a multi-screen map is 8KBytes, which allows for
 1080                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 30; ; a total of 1024 screens.
 1081                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 31; ;
 1082                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 32; ; ***************************************************************************
 1083                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 33; ; **************************************************************************/
 1084                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 35; // *************
 1085                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 36; // Functions in blkmap.asm ...
 1086                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 37; // *************
 1087                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 39; #ifdef __HUCC__
 1088                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 41; #asmdef	HUCC_USES_BLKMAP 1
 1089                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 43; // Current top-left of drawn map in pixels.
 1090                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 44; extern unsigned int   vdc_map_pxl_x;
 1091                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 45; extern unsigned int   vdc_map_pxl_y;
 1092                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 47; // Width and height to draw/scroll in characters (not tiles).
 1093                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 48; extern unsigned char  vdc_map_draw_w;
 1094                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 49; extern unsigned char  vdc_map_draw_h;
 1095                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 51; // Width of map (or multi-screen BAT) in tiles.
 1096                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 52; extern unsigned char  vdc_map_line_w;
 1097                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 54; // Width of map in screens (if multi-screen map).
 1098                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 55; extern unsigned char  vdc_map_scrn_w;
 1099                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 57; // Extra information returned by get_map_block() and sgx_get_map_block(),
 1100                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 58; // which are the collision flags and the mask/overlay sprite for the BLK.
 1101                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 59; extern unsigned char  map_blk_flag;
 1102                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 60; extern unsigned char  map_blk_mask;
 1103                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 62; extern unsigned char  vdc_scr_bank;
 1104                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 63; extern unsigned char *vdc_scr_addr;
 1105                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 65; extern unsigned char  vdc_map_bank;
 1106                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 66; extern unsigned char *vdc_map_addr;
 1107                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 68; extern unsigned char  vdc_blk_bank;
 1108                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 69; extern unsigned char *vdc_blk_addr;
 1109                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 71; extern unsigned char  vdc_tbl_bank;
 1110                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 72; extern unsigned char *vdc_tbl_addr;
 1111                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 74; extern void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blocks<_al> );
 1112                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 75; extern void __fastcall __macro set_blkmap( unsigned char __far *blk_map<vdc_map_bank:vdc_map_addr>, unsigned char blocks_w<vdc_map_line_w> );
 1113                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 76; extern void __fastcall __macro set_multimap( unsigned char __far *multi_map<vdc_scr_bank:vdc_scr_addr>, unsigned char screens_w<vdc_map_scrn_w> );
 1114                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 78; extern void __fastcall draw_map( void );
 1115                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 79; extern void __fastcall scroll_map( void );
 1116                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 81; extern void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1117                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 83; extern unsigned char __fastcall get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 1118                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 85; #asm
 1119                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 86; .macro	_set_blkmap.2
 1120                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 87; stz	vdc_scr_bank
 1121                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 88; .endm
 1122                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 90; .macro	_set_multimap.2
 1123                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 91; lda	vdc_bat_width
 1124                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 92; lsr	a
 1125                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 93; sta	vdc_map_line_w
 1126                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 94; .endm
 1127                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 96; .macro	SCREEN
 1128                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 97; db	(((\1) & $1FFF) | $6000) >> 8, bank(\1)
 1129                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 98; db	(((\2) & $1FFF) | $4000) >> 8, bank(\2)
 1130                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 99; db	(((\3) & $1FFF) | $6000) >> 8, bank(\3)
 1131                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 100; dw	(\4)
 1132                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 101; .endm
 1133                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 102; #endasm
 1134                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 104; #ifdef _SGX
 1135                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 106; // Current top-left of drawn map in pixels.
 1136                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 107; extern unsigned int   sgx_map_pxl_x;
 1137                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 108; extern unsigned int   sgx_map_pxl_y;
 1138                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 110; // Width and height to draw/scroll in characters (not tiles).
 1139                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 111; extern unsigned char  sgx_map_draw_w;
 1140                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 112; extern unsigned char  sgx_map_draw_h;
 1141                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 114; // Width of map (or multi-screen BAT) in tiles.
 1142                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 115; extern unsigned char  sgx_map_line_w;
 1143                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 117; // Width of map in screens (if multi-screen map).
 1144                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 118; extern unsigned char  sgx_map_scrn_w;
 1145                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 120; extern unsigned char  sgx_scr_bank;
 1146                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 121; extern unsigned char *sgx_scr_addr;
 1147                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 123; extern unsigned char  sgx_map_bank;
 1148                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 124; extern unsigned char *sgx_map_addr;
 1149                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 126; extern unsigned char  sgx_blk_bank;
 1150                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 127; extern unsigned char *sgx_blk_addr;
 1151                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 129; extern unsigned char  sgx_tbl_bank;
 1152                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 130; extern unsigned char *sgx_tbl_addr;
 1153                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 132; extern void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blocks<_al> );
 1154                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 133; extern void __fastcall __macro sgx_set_blkmap( unsigned char __far *blk_map<sgx_map_bank:sgx_map_addr>, unsigned char blocks_w<sgx_map_line_w> );
 1155                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 134; extern void __fastcall __macro sgx_set_multimap( unsigned char __far *multi_map<sgx_scr_bank:sgx_scr_addr>, unsigned char screens_w<sgx_map_scrn_w> );
 1156                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 136; extern void __fastcall sgx_draw_map( void );
 1157                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 137; extern void __fastcall sgx_scroll_map( void );
 1158                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 139; extern void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1159                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 141; extern unsigned char __fastcall sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 1160                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 143; #asm
 1161                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 144; .macro	_sgx_set_blkmap.2
 1162                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 145; stz	sgx_scr_bank
 1163                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 146; .endm
 1164                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 148; .macro	_sgx_set_multimap.2
 1165                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 149; lda	sgx_bat_width
 1166                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 150; lsr	a
 1167                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 151; sta	sgx_map_line_w
 1168                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 152; .endm
 1169                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 153; #endasm
 1170                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 155; #endif
 1171                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 157; #endif // __HUCC__
 1172                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 159; #endif // _hucc_blkmap_h
 1173                        		.dbg	line,	"main.c", 9; #include "include/constants.c"
 1174                        		.dbg	line,	"include\constants.c", 1; //*****************************************************************************//
 1175                        		.dbg	line,	"include\constants.c", 2; //                                                                             //
 1176                        		.dbg	line,	"include\constants.c", 3; //                                SYSTEM CONSTANTS                             //
 1177                        		.dbg	line,	"include\constants.c", 4; //                                                                             //
 1178                        		.dbg	line,	"include\constants.c", 5; //*****************************************************************************//
 1179                        		.dbg	line,	"include\constants.c", 7; #define FALSE 0
 1180                        		.dbg	line,	"include\constants.c", 8; #define TRUE  1
 1181                        		.dbg	line,	"include\constants.c", 10; #define YES   1
 1182                        		.dbg	line,	"include\constants.c", 11; #define NO    2
 1183                        		.dbg	line,	"include\constants.c", 13; #define JOYPAD_1 0
 1184                        		.dbg	line,	"include\constants.c", 14; #define JOYPAD_2 1
 1185                        		.dbg	line,	"include\constants.c", 16; #define BAT_SIZE_W 2048 // IN PIXELS
 1186                        		.dbg	line,	"include\constants.c", 17; #define BAT_SIZE_H 256  // IN PIXELS
 1187                        		.dbg	line,	"include\constants.c", 19; #define JOY_DIR_PRESSED (JOY_DOWN | JOY_UP | JOY_RIGHT | JOY_LEFT)
 1188                        		.dbg	line,	"include\constants.c", 22; #define TILES_1   16
 1189                        		.dbg	line,	"include\constants.c", 23; #define TILES_2   32
 1190                        		.dbg	line,	"include\constants.c", 24; #define TILES_3   48
 1191                        		.dbg	line,	"include\constants.c", 25; #define TILES_4   64
 1192                        		.dbg	line,	"include\constants.c", 26; #define TILES_8   128
 1193                        		.dbg	line,	"include\constants.c", 27; #define TILES_16  256
 1194                        		.dbg	line,	"include\constants.c", 28; #define TILES_32  512
 1195                        		.dbg	line,	"include\constants.c", 29; #define TILES_48  768
 1196                        		.dbg	line,	"include\constants.c", 30; #define TILES_64  1024
 1197                        		.dbg	line,	"include\constants.c", 31; #define TILES_80  1280
 1198                        		.dbg	line,	"include\constants.c", 32; #define TILES_96  1536
 1199                        		.dbg	line,	"include\constants.c", 33; #define TILES_112 1792
 1200                        		.dbg	line,	"include\constants.c", 34; #define TILES_128 2048
 1201                        		.dbg	line,	"include\constants.c", 35; #define TILES_144 2304
 1202                        		.dbg	line,	"include\constants.c", 36; #define TILES_160 2560
 1203                        		.dbg	line,	"include\constants.c", 37; #define TILES_176 2816
 1204                        		.dbg	line,	"include\constants.c", 38; #define TILES_192 3072
 1205                        		.dbg	line,	"include\constants.c", 39; #define TILES_208 3328
 1206                        		.dbg	line,	"include\constants.c", 40; #define TILES_224 3584+256
 1207                        		.dbg	line,	"include\constants.c", 43; #define OFFSET_PLAYER_WALK_1     256
 1208                        		.dbg	line,	"include\constants.c", 44; #define OFFSET_PLAYER_WALK_2     512
 1209                        		.dbg	line,	"include\constants.c", 45; #define OFFSET_PLAYER_WALK_3     768
 1210                        		.dbg	line,	"include\constants.c", 46; #define OFFSET_PLAYER_WALK_4     1024
 1211                        		.dbg	line,	"include\constants.c", 47; #define OFFSET_PLAYER_WALK_5     1280
 1212                        		.dbg	line,	"include\constants.c", 48; #define OFFSET_PLAYER_WALK_6     1536
 1213                        		.dbg	line,	"include\constants.c", 55; #define SEQUENCE_TITLE      0
 1214                        		.dbg	line,	"include\constants.c", 56; #define SEQUENCE_INTRO      1
 1215                        		.dbg	line,	"include\constants.c", 57; #define SEQUENCE_GAME       2
 1216                        		.dbg	line,	"include\constants.c", 60; #define CAMERA_RECENTER_VELOCITY    4
 1217                        		.dbg	line,	"include\constants.c", 65; //-----------------------------------------------------------------------------//
 1218                        		.dbg	line,	"include\constants.c", 66; //                                                                             //
 1219                        		.dbg	line,	"include\constants.c", 67; //                                   PLAYER                                    //
 1220                        		.dbg	line,	"include\constants.c", 68; //                                                                             //
 1221                        		.dbg	line,	"include\constants.c", 69; //-----------------------------------------------------------------------------//
 1222                        		.dbg	line,	"include\constants.c", 71; #define AXIS_RIGHT          0
 1223                        		.dbg	line,	"include\constants.c", 72; #define AXIS_LEFT           1
 1224                        		.dbg	line,	"include\constants.c", 73; #define AXIS_UP             2
 1225                        		.dbg	line,	"include\constants.c", 74; #define AXIS_DOWN           3
 1226                        		.dbg	line,	"include\constants.c", 78; #define STATE_IDLE                  0
 1227                        		.dbg	line,	"include\constants.c", 79; #define STATE_WALK                  1
 1228                        		.dbg	line,	"include\constants.c", 80; #define STATE_PUNCH                 2
 1229                        		.dbg	line,	"include\constants.c", 81; #define STATE_JUMP                  4
 1230                        		.dbg	line,	"include\constants.c", 82; #define STATE_JUMP_RIGHT            5
 1231                        		.dbg	line,	"include\constants.c", 83; #define STATE_JUMP_LEFT             6
 1232                        		.dbg	line,	"include\constants.c", 84; #define STATE_CROUCH                7
 1233                        		.dbg	line,	"include\constants.c", 85; #define STATE_CROUCH_PUNCH          8
 1234                        		.dbg	line,	"include\constants.c", 86; #define STATE_FALL                  9
 1235                        		.dbg	line,	"include\constants.c", 87; #define STATE_HANG                  10
 1236                        		.dbg	line,	"include\constants.c", 88; #define STATE_CLIMB_UP              11
 1237                        		.dbg	line,	"include\constants.c", 89; #define STATE_CLIMB_DOWN            12
 1238                        		.dbg	line,	"include\constants.c", 90; #define STATE_JUMP_LADDER           13
 1239                        		.dbg	line,	"include\constants.c", 94; #define PLAYER_VRAM_ADR     0x4800
 1240                        		.dbg	line,	"include\constants.c", 96; #define PLAYER_BASE_Y_POS   128
 1241                        		.dbg	line,	"include\constants.c", 101; //-----------------------------------------------------------------------------//
 1242                        		.dbg	line,	"include\constants.c", 102; //                                                                             //
 1243                        		.dbg	line,	"include\constants.c", 103; //                                  COLLISIONS                                 //
 1244                        		.dbg	line,	"include\constants.c", 104; //                                                                             //
 1245                        		.dbg	line,	"include\constants.c", 105; //-----------------------------------------------------------------------------//
 1246                        		.dbg	line,	"include\constants.c", 107; #define TILE_EMPTY          0
 1247                        		.dbg	line,	"include\constants.c", 108; #define TILE_BG             1
 1248                        		.dbg	line,	"include\constants.c", 109; #define TILE_LADDER         2
 1249                        		.dbg	line,	"include\constants.c", 114; //-----------------------------------------------------------------------------//
 1250                        		.dbg	line,	"include\constants.c", 115; //                                                                             //
 1251                        		.dbg	line,	"include\constants.c", 116; //                                     HUD                                     //
 1252                        		.dbg	line,	"include\constants.c", 117; //                                                                             //
 1253                        		.dbg	line,	"include\constants.c", 118; //-----------------------------------------------------------------------------//
 1254                        		.dbg	line,	"include\constants.c", 120; #define LIFEBAR_1_VRAM_ADR      0x1000
 1255                        		.dbg	line,	"include\constants.c", 121; #define LIFEBAR_2_VRAM_ADR      LIFEBAR_1_VRAM_ADR+TILES_2
 1256                        		.dbg	line,	"include\constants.c", 122; #define LIFEBAR_3_VRAM_ADR      LIFEBAR_2_VRAM_ADR+TILES_2
 1257                        		.dbg	line,	"include\constants.c", 123; #define LIFEBAR_4_VRAM_ADR      LIFEBAR_3_VRAM_ADR+TILES_2
 1258                        		.dbg	line,	"include\constants.c", 124; #define LIFEBAR_5_VRAM_ADR      LIFEBAR_4_VRAM_ADR+TILES_2
 1259                        		.dbg	line,	"include\constants.c", 126; #define WEAPON_VRAM_ADR         LIFEBAR_5_VRAM_ADR+TILES_2
 1260                        		.dbg	line,	"include\constants.c", 127; #define ARMOR_VRAM_ADR          WEAPON_VRAM_ADR+TILES_4
 1261                        		.dbg	line,	"include\constants.c", 132; //-----------------------------------------------------------------------------//
 1262                        		.dbg	line,	"include\constants.c", 133; //                                                                             //
 1263                        		.dbg	line,	"include\constants.c", 134; //                                    LEVELS                                   //
 1264                        		.dbg	line,	"include\constants.c", 135; //                                                                             //
 1265                        		.dbg	line,	"include\constants.c", 136; //-----------------------------------------------------------------------------//
 1266                        		.dbg	line,	"include\constants.c", 138; #define LV1_WALL_VRAM_ADR       0x1000
 1267                        		.dbg	line,	"include\constants.c", 139; #define LV1_DOOR_VRAM_ADR       LV1_WALL_VRAM_ADR+256
 1268                        		.dbg	line,	"main.c", 10; #include "include/variables.c"
 1269                        		.dbg	line,	"include\variables.c", 1; #include "huc.h"
 1270                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
 1271                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
 1272                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
 1273                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
 1274                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
 1275                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
 1276                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
 1277                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
 1278                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
 1279                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
 1280                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
 1281                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 1282                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 1283                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 1284                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
 1285                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
 1286                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
 1287                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
 1288                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
 1289                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
 1290                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
 1291                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
 1292                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
 1293                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
 1294                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
 1295                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
 1296                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
 1297                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
 1298                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
 1299                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
 1300                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
 1301                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
 1302                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
 1303                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
 1304                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
 1305                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
 1306                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
 1307                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
 1308                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
 1309                        		.dbg	line,	"include\variables.c", 2; #include "hucc-scroll.h"
 1310                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 1; #ifndef _hucc_scroll_h
 1311                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 2; #define _hucc_scroll_h
 1312                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 4; /****************************************************************************
 1313                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 5; ; ***************************************************************************
 1314                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 6; ;
 1315                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 7; ; hucc-scroll.h
 1316                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 8; ;
 1317                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 9; ; Routines for a fast split-screen scrolling system.
 1318                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 10; ;
 1319                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 11; ; Copyright John Brandwood 2024.
 1320                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 12; ;
 1321                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 1322                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 1323                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 1324                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 16; ;
 1325                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 17; ; ***************************************************************************
 1326                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 18; ; ***************************************************************************
 1327                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 19; ;
 1328                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 20; ; The maximum number of splits for each screen layer is set in your project's
 1329                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 21; ; "hucc-config.inc" file, with the library having a limit of 128-per-layer.
 1330                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 22; ;
 1331                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 23; ; Your first active split must be defined to start at screen line 0, and then
 1332                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 24; ; the rest of the active splits must be in increasing line order to match the
 1333                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 25; ; way that the PC Engine displays the output image.
 1334                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 26; ;
 1335                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 27; ; You can have disabled splits interleaved with your active splits.
 1336                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 28; ;
 1337                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 29; ; Splits that are normally disabled can be used to create full screen effects
 1338                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 30; ; such as bouncing the screen up and down by adding blank areas at the top or
 1339                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 31; ; bottom of the screen, and then rapidly changing the height of those areas.
 1340                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 32; ;
 1341                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 33; ; ***************************************************************************
 1342                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 34; ; **************************************************************************/
 1343                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 36; // *************
 1344                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 37; // VDC bits for display_flags ...
 1345                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 38; // *************
 1346                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 40; #ifndef BKG_OFF
 1347                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 41; #define BKG_OFF 0x00
 1348                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 42; #endif
 1349                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 44; #ifndef SPR_OFF
 1350                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 45; #define SPR_OFF 0x00
 1351                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 46; #endif
 1352                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 48; #ifndef BKG_ON
 1353                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 49; #define BKG_ON 0x80
 1354                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 50; #endif
 1355                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 52; #ifndef SPR_ON
 1356                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 53; #define SPR_ON 0x40
 1357                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 54; #endif
 1358                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 56; // *************
 1359                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 57; // Functions in hucc-scroll.asm ...
 1360                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 58; // *************
 1361                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 60; #ifdef __HUCC__
 1362                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 62; #asmdef	HUCC_USES_NEW_SCROLL 1
 1363                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 64; extern void __fastcall scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
 1364                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 65; extern void __fastcall sgx_scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
 1365                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 67; extern void __fastcall disable_split( unsigned char index<acc> );
 1366                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 68; extern void __fastcall sgx_disable_split( unsigned char index<acc> );
 1367                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 70; extern void __fastcall __macro disable_all_splits( void );
 1368                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 71; extern void __fastcall __macro sgx_disable_all_splits( void );
 1369                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 73; #asm
 1370                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 74; .macro	_disable_all_splits
 1371                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 75; ldy	#HUCC_PCE_SPLITS - 1
 1372                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 76; !loop:		tya
 1373                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 77; call	_disable_split.1
 1374                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 78; dey
 1375                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 79; bpl	!loop-
 1376                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 80; .endm
 1377                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 82; .macro	_sgx_disable_all_splits
 1378                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 83; ldy	#HUCC_SGX_SPLITS - 1
 1379                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 84; !loop:		tya
 1380                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 85; call	_sgx_disable_split.1
 1381                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 86; dey
 1382                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 87; bpl	!loop-
 1383                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 88; .endm
 1384                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 89; #endasm
 1385                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 91; #endif // __HUCC__
 1386                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 93; #endif // _hucc_scroll_h
 1387                        		.dbg	line,	"include\variables.c", 3; #include "hucc-chrmap.h"
 1388                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 1; #ifndef _hucc_chrmap_h
 1389                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 2; #define _hucc_chrmap_h
 1390                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 4; /****************************************************************************
 1391                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 5; ; ***************************************************************************
 1392                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 6; ;
 1393                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 7; ; hucc-chrmap.h
 1394                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 8; ;
 1395                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 9; ; A simple map system based on 8x8 characters (aka "tiles") in BAT format.
 1396                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 10; ;
 1397                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 11; ; Copyright John Brandwood 2025.
 1398                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 12; ;
 1399                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 1400                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 1401                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 1402                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 16; ;
 1403                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 17; ; ***************************************************************************
 1404                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 18; ; ***************************************************************************
 1405                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 19; ;
 1406                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 20; ; The maximum X and Y size for chrmaps is 256 characters (2048 pixels).
 1407                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 21; ;
 1408                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 22; ; The maximum total size for a chrmap is 16KBytes, which allows for maps up
 1409                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 23; ; to 256x32 tiles (2048x256 pixels).
 1410                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 24; ;
 1411                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 25; ; ***************************************************************************
 1412                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 26; ; **************************************************************************/
 1413                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 28; // *************
 1414                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 29; // This code extends the blkmap library ...
 1415                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 30; // *************
 1416                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 32; #include "hucc-blkmap.h"
 1417                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 34; // *************
 1418                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 35; // Functions in chrmap.asm ...
 1419                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 36; // *************
 1420                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 38; #ifdef __HUCC__
 1421                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 40; #asmdef	HUCC_USES_CHRMAP 1
 1422                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 42; extern void __fastcall __nop set_chrmap( unsigned char __far *chrmap<vdc_map_bank:vdc_map_addr>, unsigned char tiles_w<vdc_map_line_w> );
 1423                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 44; extern void __fastcall draw_bat( void );
 1424                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 45; extern void __fastcall scroll_bat( void );
 1425                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 47; extern void __fastcall blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1426                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 49; #ifdef _SGX
 1427                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 51; extern void __fastcall __nop sgx_set_chrmap( unsigned char __far *chrmap<sgx_map_bank:sgx_map_addr>, unsigned char tiles_w<sgx_map_line_w> );
 1428                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 53; extern void __fastcall sgx_draw_bat( void );
 1429                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 54; extern void __fastcall sgx_scroll_bat( void );
 1430                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 56; extern void __fastcall sgx_blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1431                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 58; #endif
 1432                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 60; #endif // __HUCC__
 1433                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 62; #endif // _hucc_chrmap_h
 1434                        		.dbg	line,	"include\variables.c", 4; #include "hucc-blkmap.h"
 1435                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 1; #ifndef _hucc_blkmap_h
 1436                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 2; #define _hucc_blkmap_h
 1437                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 4; /****************************************************************************
 1438                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 5; ; ***************************************************************************
 1439                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 6; ;
 1440                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 7; ; hucc-blkmap.h
 1441                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 8; ;
 1442                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 9; ; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
 1443                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 10; ;
 1444                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 11; ; Copyright John Brandwood 2025.
 1445                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 12; ;
 1446                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 1447                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 1448                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 1449                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 16; ;
 1450                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 17; ; ***************************************************************************
 1451                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 18; ; ***************************************************************************
 1452                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 19; ;
 1453                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 20; ; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
 1454                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 21; ;
 1455                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 22; ; The maximum total size for a blkmap is 16KBytes, which allows for maps up
 1456                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 23; ; to 128x128 blocks (2048x2048 pixels).
 1457                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 24; ;
 1458                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 25; ; Huge multi-screen blkmaps are also supported (optionally).
 1459                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 26; ;
 1460                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 27; ; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
 1461                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 28; ;
 1462                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 29; ; The maximum total size for a multi-screen map is 8KBytes, which allows for
 1463                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 30; ; a total of 1024 screens.
 1464                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 31; ;
 1465                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 32; ; ***************************************************************************
 1466                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 33; ; **************************************************************************/
 1467                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 35; // *************
 1468                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 36; // Functions in blkmap.asm ...
 1469                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 37; // *************
 1470                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 39; #ifdef __HUCC__
 1471                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 41; #asmdef	HUCC_USES_BLKMAP 1
 1472                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 43; // Current top-left of drawn map in pixels.
 1473                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 44; extern unsigned int   vdc_map_pxl_x;
 1474                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 45; extern unsigned int   vdc_map_pxl_y;
 1475                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 47; // Width and height to draw/scroll in characters (not tiles).
 1476                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 48; extern unsigned char  vdc_map_draw_w;
 1477                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 49; extern unsigned char  vdc_map_draw_h;
 1478                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 51; // Width of map (or multi-screen BAT) in tiles.
 1479                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 52; extern unsigned char  vdc_map_line_w;
 1480                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 54; // Width of map in screens (if multi-screen map).
 1481                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 55; extern unsigned char  vdc_map_scrn_w;
 1482                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 57; // Extra information returned by get_map_block() and sgx_get_map_block(),
 1483                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 58; // which are the collision flags and the mask/overlay sprite for the BLK.
 1484                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 59; extern unsigned char  map_blk_flag;
 1485                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 60; extern unsigned char  map_blk_mask;
 1486                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 62; extern unsigned char  vdc_scr_bank;
 1487                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 63; extern unsigned char *vdc_scr_addr;
 1488                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 65; extern unsigned char  vdc_map_bank;
 1489                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 66; extern unsigned char *vdc_map_addr;
 1490                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 68; extern unsigned char  vdc_blk_bank;
 1491                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 69; extern unsigned char *vdc_blk_addr;
 1492                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 71; extern unsigned char  vdc_tbl_bank;
 1493                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 72; extern unsigned char *vdc_tbl_addr;
 1494                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 74; extern void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blocks<_al> );
 1495                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 75; extern void __fastcall __macro set_blkmap( unsigned char __far *blk_map<vdc_map_bank:vdc_map_addr>, unsigned char blocks_w<vdc_map_line_w> );
 1496                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 76; extern void __fastcall __macro set_multimap( unsigned char __far *multi_map<vdc_scr_bank:vdc_scr_addr>, unsigned char screens_w<vdc_map_scrn_w> );
 1497                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 78; extern void __fastcall draw_map( void );
 1498                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 79; extern void __fastcall scroll_map( void );
 1499                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 81; extern void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1500                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 83; extern unsigned char __fastcall get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 1501                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 85; #asm
 1502                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 86; .macro	_set_blkmap.2
 1503                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 87; stz	vdc_scr_bank
 1504                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 88; .endm
 1505                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 90; .macro	_set_multimap.2
 1506                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 91; lda	vdc_bat_width
 1507                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 92; lsr	a
 1508                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 93; sta	vdc_map_line_w
 1509                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 94; .endm
 1510                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 96; .macro	SCREEN
 1511                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 97; db	(((\1) & $1FFF) | $6000) >> 8, bank(\1)
 1512                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 98; db	(((\2) & $1FFF) | $4000) >> 8, bank(\2)
 1513                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 99; db	(((\3) & $1FFF) | $6000) >> 8, bank(\3)
 1514                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 100; dw	(\4)
 1515                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 101; .endm
 1516                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 102; #endasm
 1517                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 104; #ifdef _SGX
 1518                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 106; // Current top-left of drawn map in pixels.
 1519                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 107; extern unsigned int   sgx_map_pxl_x;
 1520                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 108; extern unsigned int   sgx_map_pxl_y;
 1521                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 110; // Width and height to draw/scroll in characters (not tiles).
 1522                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 111; extern unsigned char  sgx_map_draw_w;
 1523                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 112; extern unsigned char  sgx_map_draw_h;
 1524                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 114; // Width of map (or multi-screen BAT) in tiles.
 1525                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 115; extern unsigned char  sgx_map_line_w;
 1526                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 117; // Width of map in screens (if multi-screen map).
 1527                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 118; extern unsigned char  sgx_map_scrn_w;
 1528                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 120; extern unsigned char  sgx_scr_bank;
 1529                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 121; extern unsigned char *sgx_scr_addr;
 1530                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 123; extern unsigned char  sgx_map_bank;
 1531                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 124; extern unsigned char *sgx_map_addr;
 1532                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 126; extern unsigned char  sgx_blk_bank;
 1533                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 127; extern unsigned char *sgx_blk_addr;
 1534                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 129; extern unsigned char  sgx_tbl_bank;
 1535                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 130; extern unsigned char *sgx_tbl_addr;
 1536                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 132; extern void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blocks<_al> );
 1537                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 133; extern void __fastcall __macro sgx_set_blkmap( unsigned char __far *blk_map<sgx_map_bank:sgx_map_addr>, unsigned char blocks_w<sgx_map_line_w> );
 1538                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 134; extern void __fastcall __macro sgx_set_multimap( unsigned char __far *multi_map<sgx_scr_bank:sgx_scr_addr>, unsigned char screens_w<sgx_map_scrn_w> );
 1539                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 136; extern void __fastcall sgx_draw_map( void );
 1540                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 137; extern void __fastcall sgx_scroll_map( void );
 1541                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 139; extern void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1542                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 141; extern unsigned char __fastcall sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 1543                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 143; #asm
 1544                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 144; .macro	_sgx_set_blkmap.2
 1545                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 145; stz	sgx_scr_bank
 1546                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 146; .endm
 1547                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 148; .macro	_sgx_set_multimap.2
 1548                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 149; lda	sgx_bat_width
 1549                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 150; lsr	a
 1550                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 151; sta	sgx_map_line_w
 1551                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 152; .endm
 1552                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 153; #endasm
 1553                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 155; #endif
 1554                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 157; #endif // __HUCC__
 1555                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 159; #endif // _hucc_blkmap_h
 1556                        		.dbg	line,	"include\variables.c", 13; unsigned char   sequence_id,
 1557                        		.dbg	line,	"include\variables.c", 14; sequence_loaded,
 1558                        		.dbg	line,	"include\variables.c", 16; level_id,
 1559                        		.dbg	line,	"include\variables.c", 18; player_id,
 1560                        		.dbg	line,	"include\variables.c", 19; player_state,
 1561                        		.dbg	line,	"include\variables.c", 20; player_axis,
 1562                        		.dbg	line,	"include\variables.c", 21; player_previous_axis,
 1563                        		.dbg	line,	"include\variables.c", 22; player_counter_anim,
 1564                        		.dbg	line,	"include\variables.c", 23; player_index_jump,
 1565                        		.dbg	line,	"include\variables.c", 24; player_index_fall,
 1566                        		.dbg	line,	"include\variables.c", 26; jump_ladder,
 1567                        		.dbg	line,	"include\variables.c", 27; jump_max_index;
 1568                        		.dbg	line,	"include\variables.c", 29; //collision_side;
 1569                        		.dbg	line,	"include\variables.c", 34; signed int      player_pos_x,
 1570                        		.dbg	line,	"include\variables.c", 35; player_pos_y,
 1571                        		.dbg	line,	"include\variables.c", 36; camera_max_y_position;
 1572                        		.dbg	line,	"include\variables.c", 41; extern unsigned char tileset_LV1_BG_B[];
 1573                        		.dbg	line,	"include\variables.c", 42; extern unsigned char multimap_LV1_BG_B[];
 1574                        		.dbg	line,	"include\variables.c", 44; extern unsigned char tileset_LV1_BG_A[];
 1575                        		.dbg	line,	"include\variables.c", 45; extern unsigned char multimap_LV1_BG_A[];
 1576                        		.dbg	line,	"main.c", 15; #include "include/gfx_BG.c"
 1577                        		.dbg	line,	"include\gfx_BG.c", 1; #include "huc.h"
 1578                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
 1579                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
 1580                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
 1581                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
 1582                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
 1583                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
 1584                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
 1585                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
 1586                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
 1587                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
 1588                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
 1589                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 1590                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 1591                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 1592                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
 1593                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
 1594                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
 1595                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
 1596                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
 1597                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
 1598                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
 1599                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
 1600                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
 1601                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
 1602                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
 1603                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
 1604                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
 1605                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
 1606                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
 1607                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
 1608                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
 1609                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
 1610                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
 1611                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
 1612                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
 1613                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
 1614                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
 1615                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
 1616                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
 1617                        		.dbg	line,	"include\gfx_BG.c", 2; #include "hucc-scroll.h"
 1618                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 1; #ifndef _hucc_scroll_h
 1619                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 2; #define _hucc_scroll_h
 1620                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 4; /****************************************************************************
 1621                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 5; ; ***************************************************************************
 1622                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 6; ;
 1623                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 7; ; hucc-scroll.h
 1624                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 8; ;
 1625                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 9; ; Routines for a fast split-screen scrolling system.
 1626                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 10; ;
 1627                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 11; ; Copyright John Brandwood 2024.
 1628                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 12; ;
 1629                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 1630                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 1631                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 1632                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 16; ;
 1633                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 17; ; ***************************************************************************
 1634                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 18; ; ***************************************************************************
 1635                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 19; ;
 1636                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 20; ; The maximum number of splits for each screen layer is set in your project's
 1637                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 21; ; "hucc-config.inc" file, with the library having a limit of 128-per-layer.
 1638                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 22; ;
 1639                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 23; ; Your first active split must be defined to start at screen line 0, and then
 1640                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 24; ; the rest of the active splits must be in increasing line order to match the
 1641                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 25; ; way that the PC Engine displays the output image.
 1642                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 26; ;
 1643                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 27; ; You can have disabled splits interleaved with your active splits.
 1644                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 28; ;
 1645                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 29; ; Splits that are normally disabled can be used to create full screen effects
 1646                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 30; ; such as bouncing the screen up and down by adding blank areas at the top or
 1647                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 31; ; bottom of the screen, and then rapidly changing the height of those areas.
 1648                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 32; ;
 1649                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 33; ; ***************************************************************************
 1650                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 34; ; **************************************************************************/
 1651                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 36; // *************
 1652                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 37; // VDC bits for display_flags ...
 1653                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 38; // *************
 1654                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 40; #ifndef BKG_OFF
 1655                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 41; #define BKG_OFF 0x00
 1656                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 42; #endif
 1657                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 44; #ifndef SPR_OFF
 1658                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 45; #define SPR_OFF 0x00
 1659                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 46; #endif
 1660                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 48; #ifndef BKG_ON
 1661                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 49; #define BKG_ON 0x80
 1662                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 50; #endif
 1663                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 52; #ifndef SPR_ON
 1664                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 53; #define SPR_ON 0x40
 1665                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 54; #endif
 1666                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 56; // *************
 1667                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 57; // Functions in hucc-scroll.asm ...
 1668                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 58; // *************
 1669                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 60; #ifdef __HUCC__
 1670                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 62; #asmdef	HUCC_USES_NEW_SCROLL 1
 1671                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 64; extern void __fastcall scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
 1672                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 65; extern void __fastcall sgx_scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
 1673                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 67; extern void __fastcall disable_split( unsigned char index<acc> );
 1674                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 68; extern void __fastcall sgx_disable_split( unsigned char index<acc> );
 1675                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 70; extern void __fastcall __macro disable_all_splits( void );
 1676                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 71; extern void __fastcall __macro sgx_disable_all_splits( void );
 1677                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 73; #asm
 1678                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 74; .macro	_disable_all_splits
 1679                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 75; ldy	#HUCC_PCE_SPLITS - 1
 1680                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 76; !loop:		tya
 1681                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 77; call	_disable_split.1
 1682                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 78; dey
 1683                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 79; bpl	!loop-
 1684                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 80; .endm
 1685                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 82; .macro	_sgx_disable_all_splits
 1686                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 83; ldy	#HUCC_SGX_SPLITS - 1
 1687                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 84; !loop:		tya
 1688                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 85; call	_sgx_disable_split.1
 1689                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 86; dey
 1690                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 87; bpl	!loop-
 1691                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 88; .endm
 1692                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 89; #endasm
 1693                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 91; #endif // __HUCC__
 1694                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 93; #endif // _hucc_scroll_h
 1695                        		.dbg	line,	"include\gfx_BG.c", 3; #include "hucc-chrmap.h"
 1696                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 1; #ifndef _hucc_chrmap_h
 1697                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 2; #define _hucc_chrmap_h
 1698                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 4; /****************************************************************************
 1699                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 5; ; ***************************************************************************
 1700                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 6; ;
 1701                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 7; ; hucc-chrmap.h
 1702                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 8; ;
 1703                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 9; ; A simple map system based on 8x8 characters (aka "tiles") in BAT format.
 1704                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 10; ;
 1705                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 11; ; Copyright John Brandwood 2025.
 1706                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 12; ;
 1707                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 1708                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 1709                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 1710                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 16; ;
 1711                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 17; ; ***************************************************************************
 1712                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 18; ; ***************************************************************************
 1713                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 19; ;
 1714                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 20; ; The maximum X and Y size for chrmaps is 256 characters (2048 pixels).
 1715                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 21; ;
 1716                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 22; ; The maximum total size for a chrmap is 16KBytes, which allows for maps up
 1717                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 23; ; to 256x32 tiles (2048x256 pixels).
 1718                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 24; ;
 1719                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 25; ; ***************************************************************************
 1720                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 26; ; **************************************************************************/
 1721                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 28; // *************
 1722                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 29; // This code extends the blkmap library ...
 1723                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 30; // *************
 1724                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 32; #include "hucc-blkmap.h"
 1725                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 34; // *************
 1726                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 35; // Functions in chrmap.asm ...
 1727                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 36; // *************
 1728                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 38; #ifdef __HUCC__
 1729                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 40; #asmdef	HUCC_USES_CHRMAP 1
 1730                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 42; extern void __fastcall __nop set_chrmap( unsigned char __far *chrmap<vdc_map_bank:vdc_map_addr>, unsigned char tiles_w<vdc_map_line_w> );
 1731                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 44; extern void __fastcall draw_bat( void );
 1732                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 45; extern void __fastcall scroll_bat( void );
 1733                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 47; extern void __fastcall blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1734                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 49; #ifdef _SGX
 1735                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 51; extern void __fastcall __nop sgx_set_chrmap( unsigned char __far *chrmap<sgx_map_bank:sgx_map_addr>, unsigned char tiles_w<sgx_map_line_w> );
 1736                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 53; extern void __fastcall sgx_draw_bat( void );
 1737                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 54; extern void __fastcall sgx_scroll_bat( void );
 1738                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 56; extern void __fastcall sgx_blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1739                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 58; #endif
 1740                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 60; #endif // __HUCC__
 1741                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 62; #endif // _hucc_chrmap_h
 1742                        		.dbg	line,	"include\gfx_BG.c", 4; #include "hucc-blkmap.h"
 1743                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 1; #ifndef _hucc_blkmap_h
 1744                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 2; #define _hucc_blkmap_h
 1745                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 4; /****************************************************************************
 1746                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 5; ; ***************************************************************************
 1747                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 6; ;
 1748                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 7; ; hucc-blkmap.h
 1749                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 8; ;
 1750                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 9; ; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
 1751                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 10; ;
 1752                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 11; ; Copyright John Brandwood 2025.
 1753                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 12; ;
 1754                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 1755                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 1756                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 1757                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 16; ;
 1758                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 17; ; ***************************************************************************
 1759                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 18; ; ***************************************************************************
 1760                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 19; ;
 1761                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 20; ; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
 1762                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 21; ;
 1763                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 22; ; The maximum total size for a blkmap is 16KBytes, which allows for maps up
 1764                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 23; ; to 128x128 blocks (2048x2048 pixels).
 1765                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 24; ;
 1766                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 25; ; Huge multi-screen blkmaps are also supported (optionally).
 1767                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 26; ;
 1768                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 27; ; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
 1769                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 28; ;
 1770                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 29; ; The maximum total size for a multi-screen map is 8KBytes, which allows for
 1771                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 30; ; a total of 1024 screens.
 1772                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 31; ;
 1773                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 32; ; ***************************************************************************
 1774                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 33; ; **************************************************************************/
 1775                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 35; // *************
 1776                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 36; // Functions in blkmap.asm ...
 1777                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 37; // *************
 1778                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 39; #ifdef __HUCC__
 1779                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 41; #asmdef	HUCC_USES_BLKMAP 1
 1780                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 43; // Current top-left of drawn map in pixels.
 1781                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 44; extern unsigned int   vdc_map_pxl_x;
 1782                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 45; extern unsigned int   vdc_map_pxl_y;
 1783                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 47; // Width and height to draw/scroll in characters (not tiles).
 1784                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 48; extern unsigned char  vdc_map_draw_w;
 1785                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 49; extern unsigned char  vdc_map_draw_h;
 1786                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 51; // Width of map (or multi-screen BAT) in tiles.
 1787                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 52; extern unsigned char  vdc_map_line_w;
 1788                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 54; // Width of map in screens (if multi-screen map).
 1789                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 55; extern unsigned char  vdc_map_scrn_w;
 1790                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 57; // Extra information returned by get_map_block() and sgx_get_map_block(),
 1791                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 58; // which are the collision flags and the mask/overlay sprite for the BLK.
 1792                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 59; extern unsigned char  map_blk_flag;
 1793                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 60; extern unsigned char  map_blk_mask;
 1794                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 62; extern unsigned char  vdc_scr_bank;
 1795                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 63; extern unsigned char *vdc_scr_addr;
 1796                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 65; extern unsigned char  vdc_map_bank;
 1797                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 66; extern unsigned char *vdc_map_addr;
 1798                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 68; extern unsigned char  vdc_blk_bank;
 1799                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 69; extern unsigned char *vdc_blk_addr;
 1800                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 71; extern unsigned char  vdc_tbl_bank;
 1801                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 72; extern unsigned char *vdc_tbl_addr;
 1802                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 74; extern void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blocks<_al> );
 1803                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 75; extern void __fastcall __macro set_blkmap( unsigned char __far *blk_map<vdc_map_bank:vdc_map_addr>, unsigned char blocks_w<vdc_map_line_w> );
 1804                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 76; extern void __fastcall __macro set_multimap( unsigned char __far *multi_map<vdc_scr_bank:vdc_scr_addr>, unsigned char screens_w<vdc_map_scrn_w> );
 1805                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 78; extern void __fastcall draw_map( void );
 1806                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 79; extern void __fastcall scroll_map( void );
 1807                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 81; extern void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1808                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 83; extern unsigned char __fastcall get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 1809                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 85; #asm
 1810                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 86; .macro	_set_blkmap.2
 1811                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 87; stz	vdc_scr_bank
 1812                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 88; .endm
 1813                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 90; .macro	_set_multimap.2
 1814                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 91; lda	vdc_bat_width
 1815                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 92; lsr	a
 1816                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 93; sta	vdc_map_line_w
 1817                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 94; .endm
 1818                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 96; .macro	SCREEN
 1819                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 97; db	(((\1) & $1FFF) | $6000) >> 8, bank(\1)
 1820                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 98; db	(((\2) & $1FFF) | $4000) >> 8, bank(\2)
 1821                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 99; db	(((\3) & $1FFF) | $6000) >> 8, bank(\3)
 1822                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 100; dw	(\4)
 1823                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 101; .endm
 1824                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 102; #endasm
 1825                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 104; #ifdef _SGX
 1826                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 106; // Current top-left of drawn map in pixels.
 1827                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 107; extern unsigned int   sgx_map_pxl_x;
 1828                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 108; extern unsigned int   sgx_map_pxl_y;
 1829                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 110; // Width and height to draw/scroll in characters (not tiles).
 1830                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 111; extern unsigned char  sgx_map_draw_w;
 1831                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 112; extern unsigned char  sgx_map_draw_h;
 1832                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 114; // Width of map (or multi-screen BAT) in tiles.
 1833                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 115; extern unsigned char  sgx_map_line_w;
 1834                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 117; // Width of map in screens (if multi-screen map).
 1835                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 118; extern unsigned char  sgx_map_scrn_w;
 1836                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 120; extern unsigned char  sgx_scr_bank;
 1837                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 121; extern unsigned char *sgx_scr_addr;
 1838                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 123; extern unsigned char  sgx_map_bank;
 1839                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 124; extern unsigned char *sgx_map_addr;
 1840                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 126; extern unsigned char  sgx_blk_bank;
 1841                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 127; extern unsigned char *sgx_blk_addr;
 1842                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 129; extern unsigned char  sgx_tbl_bank;
 1843                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 130; extern unsigned char *sgx_tbl_addr;
 1844                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 132; extern void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blocks<_al> );
 1845                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 133; extern void __fastcall __macro sgx_set_blkmap( unsigned char __far *blk_map<sgx_map_bank:sgx_map_addr>, unsigned char blocks_w<sgx_map_line_w> );
 1846                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 134; extern void __fastcall __macro sgx_set_multimap( unsigned char __far *multi_map<sgx_scr_bank:sgx_scr_addr>, unsigned char screens_w<sgx_map_scrn_w> );
 1847                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 136; extern void __fastcall sgx_draw_map( void );
 1848                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 137; extern void __fastcall sgx_scroll_map( void );
 1849                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 139; extern void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 1850                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 141; extern unsigned char __fastcall sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 1851                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 143; #asm
 1852                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 144; .macro	_sgx_set_blkmap.2
 1853                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 145; stz	sgx_scr_bank
 1854                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 146; .endm
 1855                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 148; .macro	_sgx_set_multimap.2
 1856                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 149; lda	sgx_bat_width
 1857                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 150; lsr	a
 1858                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 151; sta	sgx_map_line_w
 1859                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 152; .endm
 1860                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 153; #endasm
 1861                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 155; #endif
 1862                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 157; #endif // __HUCC__
 1863                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 159; #endif // _hucc_blkmap_h
 1864                        		.dbg	line,	"include\gfx_BG.c", 13; //**************************************************************************************//
 1865                        		.dbg	line,	"include\gfx_BG.c", 14; //                                                                                      //
 1866                        		.dbg	line,	"include\gfx_BG.c", 15; //                                       LEVEL 1                                        //
 1867                        		.dbg	line,	"include\gfx_BG.c", 16; //                                                                                      //
 1868                        		.dbg	line,	"include\gfx_BG.c", 17; //**************************************************************************************//
 1869                        		.dbg	line,	"include\gfx_BG.c", 19; #incchr(tileset_LV1_WALL,"res/maps/tiles_LV1_WALL.png", 4 , 4);
 1870               6000     		.data
 1871    03:6000             	_tileset_LV1_WALL: 	.incchr		"res/maps/tiles_LV1_WALL.png", 4, 4
 1872               E309     		.code
 1873                        		.dbg	line,	"include\gfx_BG.c", 20; #incchr(tileset_LV1_DOOR_OPEN,"res/maps/tiles_LV1_DOOR_OPEN.png", 4 , 6);
 1874               6200     		.data
 1875    03:6200             	_tileset_LV1_DOOR_OPEN: 	.incchr		"res/maps/tiles_LV1_DOOR_OPEN.png", 4, 6
 1876               E309     		.code
 1877                        		.dbg	line,	"include\gfx_BG.c", 21; #incchr(tileset_LV1_DOOR_CLOSED,"res/maps/tiles_LV1_DOOR_CLOSED.png", 4 , 6);
 1878               6500     		.data
 1879    03:6500             	_tileset_LV1_DOOR_CLOSED: 	.incchr		"res/maps/tiles_LV1_DOOR_CLOSED.png", 4, 6
 1880               E309     		.code
 1881                        		.dbg	line,	"include\gfx_BG.c", 23; #incchr(tileset_LIFE_RED,"res/maps/tileset_LIFE_RED.png", 2 , 1);
 1882               6800     		.data
 1883    03:6800             	_tileset_LIFE_RED: 	.incchr		"res/maps/tileset_LIFE_RED.png", 2, 1
 1884               E309     		.code
 1885                        		.dbg	line,	"include\gfx_BG.c", 24; #incchr(tileset_LIFE_ORANGE,"res/maps/tileset_LIFE_ORANGE.png", 2 , 1);
 1886               6840     		.data
 1887    03:6840             	_tileset_LIFE_ORANGE: 	.incchr		"res/maps/tileset_LIFE_ORANGE.png", 2, 1
 1888               E309     		.code
 1889                        		.dbg	line,	"include\gfx_BG.c", 25; #incchr(tileset_LIFE_YELLOW,"res/maps/tileset_LIFE_YELLOW.png", 2 , 1);
 1890               6880     		.data
 1891    03:6880             	_tileset_LIFE_YELLOW: 	.incchr		"res/maps/tileset_LIFE_YELLOW.png", 2, 1
 1892               E309     		.code
 1893                        		.dbg	line,	"include\gfx_BG.c", 26; #incchr(tileset_LIFE_EMPTY,"res/maps/tileset_LIFE_EMPTY.png", 2 , 1);
 1894               68C0     		.data
 1895    03:68C0             	_tileset_LIFE_EMPTY: 	.incchr		"res/maps/tileset_LIFE_EMPTY.png", 2, 1
 1896               E309     		.code
 1897                        		.dbg	line,	"include\gfx_BG.c", 28; #incchr(tileset_ARMOR_1,"res/maps/tileset_ARMOR_1.png", 2 , 2);
 1898               6900     		.data
 1899    03:6900             	_tileset_ARMOR_1: 	.incchr		"res/maps/tileset_ARMOR_1.png", 2, 2
 1900               E309     		.code
 1901                        		.dbg	line,	"include\gfx_BG.c", 29; #incchr(tileset_ARMOR_2,"res/maps/tileset_ARMOR_2.png", 2 , 2);
 1902               6980     		.data
 1903    03:6980             	_tileset_ARMOR_2: 	.incchr		"res/maps/tileset_ARMOR_2.png", 2, 2
 1904               E309     		.code
 1905                        		.dbg	line,	"include\gfx_BG.c", 30; #incchr(tileset_ARMOR_4,"res/maps/tileset_ARMOR_4.png", 2 , 2);
 1906               6A00     		.data
 1907    03:6A00             	_tileset_ARMOR_4: 	.incchr		"res/maps/tileset_ARMOR_4.png", 2, 2
 1908               E309     		.code
 1909                        		.dbg	line,	"include\gfx_BG.c", 31; #incchr(tileset_ARMOR_8,"res/maps/tileset_ARMOR_8.png", 2 , 2);
 1910               6A80     		.data
 1911    03:6A80             	_tileset_ARMOR_8: 	.incchr		"res/maps/tileset_ARMOR_8.png", 2, 2
 1912               E309     		.code
 1913                        		.dbg	line,	"include\gfx_BG.c", 33; #incchr(tileset_WEAPON_1,"res/maps/tileset_WEAPON_1.png", 2 , 2);
 1914               6B00     		.data
 1915    03:6B00             	_tileset_WEAPON_1: 	.incchr		"res/maps/tileset_WEAPON_1.png", 2, 2
 1916               E309     		.code
 1917                        		.dbg	line,	"include\gfx_BG.c", 34; #incchr(tileset_WEAPON_2,"res/maps/tileset_WEAPON_2.png", 2 , 2);
 1918               6B80     		.data
 1919    03:6B80             	_tileset_WEAPON_2: 	.incchr		"res/maps/tileset_WEAPON_2.png", 2, 2
 1920               E309     		.code
 1921                        		.dbg	line,	"include\gfx_BG.c", 35; #incchr(tileset_WEAPON_4,"res/maps/tileset_WEAPON_4.png", 2 , 2);
 1922               6C00     		.data
 1923    03:6C00             	_tileset_WEAPON_4: 	.incchr		"res/maps/tileset_WEAPON_4.png", 2, 2
 1924               E309     		.code
 1925                        		.dbg	line,	"include\gfx_BG.c", 36; #incchr(tileset_WEAPON_5,"res/maps/tileset_WEAPON_5.png", 2 , 2);
 1926               6C80     		.data
 1927    03:6C80             	_tileset_WEAPON_5: 	.incchr		"res/maps/tileset_WEAPON_5.png", 2, 2
 1928               E309     		.code
 1929                        		.dbg	line,	"include\gfx_BG.c", 37; #incchr(tileset_WEAPON_8,"res/maps/tileset_WEAPON_8.png", 2 , 2);
 1930               6D00     		.data
 1931    03:6D00             	_tileset_WEAPON_8: 	.incchr		"res/maps/tileset_WEAPON_8.png", 2, 2
 1932               E309     		.code
 1933                        		.dbg	line,	"include\gfx_BG.c", 40; //--------------------------------------------------------------------------------------//
 1934                        		.dbg	line,	"include\gfx_BG.c", 41; //                                        VDC 2                                         //
 1935                        		.dbg	line,	"include\gfx_BG.c", 42; //--------------------------------------------------------------------------------------//
 1936                        		.dbg	line,	"include\gfx_BG.c", 44; #asm
 1937                        		.dbg	clear
 1938               0001     	OPTIMIZE	=	1
 1939               6D80     			.data
 1940                        	; EXTRACT TILESET
 1941                        	;----------------
 1942    03:6D80             	_tileset_LV1_BG_B:  incchr	"res/maps/template_LV1_WALL.png"
 1943    03:6F80             			incchr	"res/maps/template_LV1_DOOR.png"
 1944    03:7280             			incchr	"res/maps/tilemap_LV1_BG_B.png", OPTIMIZE
 1945                        	; EXTRACT BLOCKS
 1946                        	;--------------
 1947    07:6800             	blocks_LV1_BG_B1:	incblk	"res/maps/tilemap_LV1_BG_B.png" , 0x1000 ,    0 ,   0 ,  64 , 32 , _tileset_LV1_BG_B ; // 96x16 = 1536 | 32x16 =  512
 1948    07:7000             	blocks_LV1_BG_B2:	incblk	"res/maps/tilemap_LV1_BG_B.png" , 0x1000 , 1024 ,   0 ,  96 , 32 , _tileset_LV1_BG_B ; // 64x16 = 1024 | 32x16 =  512
 1949    07:7800             	blocks_LV1_BG_B3:	incblk	"res/maps/tilemap_LV1_BG_B.png" , 0x1000 ,    0 , 512 ,  64 , 32 , _tileset_LV1_BG_B ; // 96x16 = 1536 | 16x16 =  256
 1950    08:6000             	blocks_LV1_BG_B4:	incblk	"res/maps/tilemap_LV1_BG_B.png" , 0x1000 , 1024 , 512 ,  96 , 32 , _tileset_LV1_BG_B ; // 64x16 = 1024 | 16x16 =  256
 1951                        	; EXTRACT MAPS
 1952                        	;------------
 1953               6800     			align	256
 1954    08:6800             	MAP_LV1_BG_B1:		incmap	"res/maps/tilemap_LV1_BG_B.png",    0 ,   0 ,  64 , 32 , blocks_LV1_BG_B1 ; // 96x16 = 1536 | 32x16 =  512
 1955               7000     			align	256
 1956    08:7000             	MAP_LV1_BG_B2:		incmap	"res/maps/tilemap_LV1_BG_B.png", 1024 ,   0 ,  96 , 32 , blocks_LV1_BG_B2 ; // 64x16 = 1024 | 32x16 =  512
 1957               7C00     			align	256
 1958    08:7C00             	MAP_LV1_BG_B3:		incmap	"res/maps/tilemap_LV1_BG_B.png",    0 , 512 ,  64 , 32 , blocks_LV1_BG_B3 ; // 96x16 = 1536 | 16x16 =  256
 1959               6400     			align	256
 1960    09:6400             	MAP_LV1_BG_B4:		incmap	"res/maps/tilemap_LV1_BG_B.png", 1024 , 512 ,  96 , 32 , blocks_LV1_BG_B4 ; // 64x16 = 1024 | 16x16 =  256
 1961                        	; MASK (EMPTY)
 1962                        	;----------------
 1963    09:7000  00 00 00 00	dummy_tbl:	ds	256
         09:7004  00 00 00 00 
         09:7008  00 00 00 00 
         09:700C  00 00 00 00 
         09:7010  00 00 00 00 
         09:7014  00 00 00 00 
         09:7018  00 00 00 00 
         09:701C  00 00 00 00 
         09:7020  00 00 00 00 
         09:7024  00 00 00 00 
         09:7028  00 00 00 00 
         09:702C  00 00 00 00 
         09:7030  00 00 00 00 
         09:7034  00 00 00 00 
         09:7038  00 00 00 00 
         09:703C  00 00 00 00 
         09:7040  00 00 00 00 
         09:7044  00 00 00 00 
         09:7048  00 00 00 00 
         09:704C  00 00 00 00 
         09:7050  00 00 00 00 
         09:7054  00 00 00 00 
         09:7058  00 00 00 00 
         09:705C  00 00 00 00 
         09:7060  00 00 00 00 
         09:7064  00 00 00 00 
         09:7068  00 00 00 00 
         09:706C  00 00 00 00 
         09:7070  00 00 00 00 
         09:7074  00 00 00 00 
         09:7078  00 00 00 00 
         09:707C  00 00 00 00 
         09:7080  00 00 00 00 
         09:7084  00 00 00 00 
         09:7088  00 00 00 00 
         09:708C  00 00 00 00 
         09:7090  00 00 00 00 
         09:7094  00 00 00 00 
         09:7098  00 00 00 00 
         09:709C  00 00 00 00 
         09:70A0  00 00 00 00 
         09:70A4  00 00 00 00 
         09:70A8  00 00 00 00 
         09:70AC  00 00 00 00 
         09:70B0  00 00 00 00 
         09:70B4  00 00 00 00 
         09:70B8  00 00 00 00 
         09:70BC  00 00 00 00 
         09:70C0  00 00 00 00 
         09:70C4  00 00 00 00 
         09:70C8  00 00 00 00 
         09:70CC  00 00 00 00 
         09:70D0  00 00 00 00 
         09:70D4  00 00 00 00 
         09:70D8  00 00 00 00 
         09:70DC  00 00 00 00 
         09:70E0  00 00 00 00 
         09:70E4  00 00 00 00 
         09:70E8  00 00 00 00 
         09:70EC  00 00 00 00 
         09:70F0  00 00 00 00 
         09:70F4  00 00 00 00 
         09:70F8  00 00 00 00 
         09:70FC  00 00 00 00 
 1964                        	; SWIZZLE MAPS
 1965                        	;-------------
 1966    09:7100             	swizzle	MAP_LV1_BG_B1,  32, 16 ;
 1967    09:7100             	swizzle	MAP_LV1_BG_B2,  32, 16 ;
 1968    09:7100             	swizzle	MAP_LV1_BG_B3,  32, 16 ;
 1969    09:7100             	swizzle	MAP_LV1_BG_B4,  32, 16 ;
 1970                        	; BUILD MULTIMAP
 1971                        	;---------------
 1972    09:7100             	_multimap_LV1_BG_B:
 1973                        			; 1st line of 5 screens (512x256)
 1974                        			SCREEN MAP_LV1_BG_B1 + 0x0000, blocks_LV1_BG_B1, dummy_tbl, 0
         09:7100  68 08      			db	(((MAP_LV1_BG_B1 + 0x0000) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B1 + 0x0000)
         09:7102  48 07      			db	(((blocks_LV1_BG_B1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B1)
         09:7104  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7106  00 00      			dw	(0)
 1975                        			SCREEN MAP_LV1_BG_B1 + 0x0200, blocks_LV1_BG_B1, dummy_tbl, 0
         09:7108  6A 08      			db	(((MAP_LV1_BG_B1 + 0x0200) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B1 + 0x0200)
         09:710A  48 07      			db	(((blocks_LV1_BG_B1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B1)
         09:710C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:710E  00 00      			dw	(0)
 1976                        			SCREEN MAP_LV1_BG_B2 + 0x0000, blocks_LV1_BG_B2, dummy_tbl, 0
         09:7110  70 08      			db	(((MAP_LV1_BG_B2 + 0x0000) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B2 + 0x0000)
         09:7112  50 07      			db	(((blocks_LV1_BG_B2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B2)
         09:7114  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7116  00 00      			dw	(0)
 1977                        			SCREEN MAP_LV1_BG_B2 + 0x0200, blocks_LV1_BG_B2, dummy_tbl, 0
         09:7118  72 08      			db	(((MAP_LV1_BG_B2 + 0x0200) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B2 + 0x0200)
         09:711A  50 07      			db	(((blocks_LV1_BG_B2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B2)
         09:711C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:711E  00 00      			dw	(0)
 1978                        			SCREEN MAP_LV1_BG_B2 + 0x0400, blocks_LV1_BG_B2, dummy_tbl, 0
         09:7120  74 08      			db	(((MAP_LV1_BG_B2 + 0x0400) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B2 + 0x0400)
         09:7122  50 07      			db	(((blocks_LV1_BG_B2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B2)
         09:7124  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7126  00 00      			dw	(0)
 1979                        			; 2nd line of 5 screens (512x256)
 1980                        			SCREEN MAP_LV1_BG_B1 + 0x0400, blocks_LV1_BG_B1, dummy_tbl, 0
         09:7128  6C 08      			db	(((MAP_LV1_BG_B1 + 0x0400) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B1 + 0x0400)
         09:712A  48 07      			db	(((blocks_LV1_BG_B1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B1)
         09:712C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:712E  00 00      			dw	(0)
 1981                        			SCREEN MAP_LV1_BG_B1 + 0x0600, blocks_LV1_BG_B1, dummy_tbl, 0
         09:7130  6E 08      			db	(((MAP_LV1_BG_B1 + 0x0600) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B1 + 0x0600)
         09:7132  48 07      			db	(((blocks_LV1_BG_B1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B1)
         09:7134  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7136  00 00      			dw	(0)
 1982                        			SCREEN MAP_LV1_BG_B2 + 0x0600, blocks_LV1_BG_B2, dummy_tbl, 0
         09:7138  76 08      			db	(((MAP_LV1_BG_B2 + 0x0600) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B2 + 0x0600)
         09:713A  50 07      			db	(((blocks_LV1_BG_B2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B2)
         09:713C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:713E  00 00      			dw	(0)
 1983                        			SCREEN MAP_LV1_BG_B2 + 0x0800, blocks_LV1_BG_B2, dummy_tbl, 0
         09:7140  78 08      			db	(((MAP_LV1_BG_B2 + 0x0800) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B2 + 0x0800)
         09:7142  50 07      			db	(((blocks_LV1_BG_B2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B2)
         09:7144  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7146  00 00      			dw	(0)
 1984                        			SCREEN MAP_LV1_BG_B2 + 0x0A00, blocks_LV1_BG_B2, dummy_tbl, 0
         09:7148  7A 08      			db	(((MAP_LV1_BG_B2 + 0x0A00) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B2 + 0x0A00)
         09:714A  50 07      			db	(((blocks_LV1_BG_B2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B2)
         09:714C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:714E  00 00      			dw	(0)
 1985                        			; 3rd line of 5 screens (512x256)
 1986                        			SCREEN MAP_LV1_BG_B3 + 0x0000, blocks_LV1_BG_B3, dummy_tbl, 0
         09:7150  7C 08      			db	(((MAP_LV1_BG_B3 + 0x0000) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B3 + 0x0000)
         09:7152  58 07      			db	(((blocks_LV1_BG_B3) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B3)
         09:7154  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7156  00 00      			dw	(0)
 1987                        			SCREEN MAP_LV1_BG_B3 + 0x0200, blocks_LV1_BG_B3, dummy_tbl, 0
         09:7158  7E 08      			db	(((MAP_LV1_BG_B3 + 0x0200) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B3 + 0x0200)
         09:715A  58 07      			db	(((blocks_LV1_BG_B3) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B3)
         09:715C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:715E  00 00      			dw	(0)
 1988                        			SCREEN MAP_LV1_BG_B4 + 0x0000, blocks_LV1_BG_B4, dummy_tbl, 0
         09:7160  64 09      			db	(((MAP_LV1_BG_B4 + 0x0000) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B4 + 0x0000)
         09:7162  40 08      			db	(((blocks_LV1_BG_B4) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B4)
         09:7164  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7166  00 00      			dw	(0)
 1989                        			SCREEN MAP_LV1_BG_B4 + 0x0200, blocks_LV1_BG_B4, dummy_tbl, 0
         09:7168  66 09      			db	(((MAP_LV1_BG_B4 + 0x0200) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B4 + 0x0200)
         09:716A  40 08      			db	(((blocks_LV1_BG_B4) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B4)
         09:716C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:716E  00 00      			dw	(0)
 1990                        			SCREEN MAP_LV1_BG_B4 + 0x0400, blocks_LV1_BG_B4, dummy_tbl, 0
         09:7170  68 09      			db	(((MAP_LV1_BG_B4 + 0x0400) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B4 + 0x0400)
         09:7172  40 08      			db	(((blocks_LV1_BG_B4) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B4)
         09:7174  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7176  00 00      			dw	(0)
 1991                        			; 4th line of 5 screens (512x256)
 1992                        			SCREEN MAP_LV1_BG_B3 + 0x0400, blocks_LV1_BG_B3, dummy_tbl, 0
         09:7178  60 09      			db	(((MAP_LV1_BG_B3 + 0x0400) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B3 + 0x0400)
         09:717A  58 07      			db	(((blocks_LV1_BG_B3) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B3)
         09:717C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:717E  00 00      			dw	(0)
 1993                        			SCREEN MAP_LV1_BG_B3 + 0x0600, blocks_LV1_BG_B3, dummy_tbl, 0
         09:7180  62 09      			db	(((MAP_LV1_BG_B3 + 0x0600) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B3 + 0x0600)
         09:7182  58 07      			db	(((blocks_LV1_BG_B3) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B3)
         09:7184  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7186  00 00      			dw	(0)
 1994                        			SCREEN MAP_LV1_BG_B4 + 0x0600, blocks_LV1_BG_B4, dummy_tbl, 0
         09:7188  6A 09      			db	(((MAP_LV1_BG_B4 + 0x0600) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B4 + 0x0600)
         09:718A  40 08      			db	(((blocks_LV1_BG_B4) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B4)
         09:718C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:718E  00 00      			dw	(0)
 1995                        			SCREEN MAP_LV1_BG_B4 + 0x0800, blocks_LV1_BG_B4, dummy_tbl, 0
         09:7190  6C 09      			db	(((MAP_LV1_BG_B4 + 0x0800) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B4 + 0x0800)
         09:7192  40 08      			db	(((blocks_LV1_BG_B4) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B4)
         09:7194  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:7196  00 00      			dw	(0)
 1996                        			SCREEN MAP_LV1_BG_B4 + 0x0A00, blocks_LV1_BG_B4, dummy_tbl, 0
         09:7198  6E 09      			db	(((MAP_LV1_BG_B4 + 0x0A00) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_B4 + 0x0A00)
         09:719A  40 08      			db	(((blocks_LV1_BG_B4) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_B4)
         09:719C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         09:719E  00 00      			dw	(0)
 1997                        	;//--------------------------------------------------------------------------------------//
 1998                        	;//                                        VDC 1                                         //
 1999                        	;//--------------------------------------------------------------------------------------//
 2000                        	; EXTRACT TILESET
 2001                        	;----------------
 2002    09:71A0             	_tileset_LV1_BG_A:	incchr	"res/maps/template_LIFEBAR_1.png"
 2003    09:71E0             			incchr	"res/maps/template_LIFEBAR_2.png"
 2004    09:7220             			incchr	"res/maps/template_LIFEBAR_3.png"
 2005    09:7260             			incchr	"res/maps/template_LIFEBAR_4.png"
 2006    09:72A0             			incchr	"res/maps/template_LIFEBAR_5.png"
 2007    09:72E0             			incchr	"res/maps/tileset_WEAPON_1.png"
 2008    09:7360             			incchr	"res/maps/tileset_ARMOR_1.png"
 2009    09:73E0             			incchr	"res/maps/tilemap_LV1_BG_A.png", OPTIMIZE
 2010                        	; EXTRACT BLOCKS
 2011                        	;--------------
 2012    0A:6000             	blocks_LV1_BG_A1:	incblk	"res/maps/tilemap_LV1_BG_A.png" , 0x1000 ,    0 ,   0 , 128 , 64 , _tileset_LV1_BG_A ; // 128x16 = 2048 | 64x16 = 1024
 2013    0A:6800             	blocks_LV1_BG_A2:	incblk	"res/maps/tilemap_LV1_BG_A.png" , 0x1000 , 2048 ,   0 ,  32 , 64 , _tileset_LV1_BG_A ; //  32x16 =  512 | 64x16 = 1024
 2014                        	; EXTRACT MAPS
 2015                        	;------------
 2016               7000     			align	256
 2017    0A:7000             	MAP_LV1_BG_A1:		incmap	"res/maps/tilemap_LV1_BG_A.png",    0 ,   0 , 128 , 64 , blocks_LV1_BG_A1 ; // 128x16 = 2048 | 64x16 = 1024
 2018    0B:7000             			flagmap "res/maps/collision_LV1.png",       0 ,   0 , 128 , 64 , MAP_LV1_BG_A1
 2019               7000     			align	256
 2020    0B:7000             	MAP_LV1_BG_A2:		incmap	"res/maps/tilemap_LV1_BG_A.png", 2048 ,   0 ,  32 , 64 , blocks_LV1_BG_A2 ; //  32x16 =  512 | 64x16 = 1024
 2021    0B:7800             			flagmap "res/maps/collision_LV1.png",    2048 ,   0 ,  32 , 64 , MAP_LV1_BG_A2
 2022                        	; SWIZZLE MAPS
 2023                        	;-------------
 2024    0B:7800             	swizzle	MAP_LV1_BG_A1,  32, 16 ;
 2025    0B:7800             	swizzle	MAP_LV1_BG_A2,  32, 16 ;
 2026                        	; BUILD MULTIMAP
 2027                        	;---------------
 2028    0B:7800             	_multimap_LV1_BG_A:
 2029                        			; 1st line of 5 screens (512x256)
 2030                        			SCREEN MAP_LV1_BG_A1 + 0x0000, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7800  70 0A      			db	(((MAP_LV1_BG_A1 + 0x0000) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x0000)
         0B:7802  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:7804  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7806  00 00      			dw	(0)
 2031                        			SCREEN MAP_LV1_BG_A1 + 0x0200, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7808  72 0A      			db	(((MAP_LV1_BG_A1 + 0x0200) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x0200)
         0B:780A  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:780C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:780E  00 00      			dw	(0)
 2032                        			SCREEN MAP_LV1_BG_A1 + 0x0400, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7810  74 0A      			db	(((MAP_LV1_BG_A1 + 0x0400) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x0400)
         0B:7812  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:7814  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7816  00 00      			dw	(0)
 2033                        			SCREEN MAP_LV1_BG_A1 + 0x0600, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7818  76 0A      			db	(((MAP_LV1_BG_A1 + 0x0600) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x0600)
         0B:781A  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:781C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:781E  00 00      			dw	(0)
 2034                        			SCREEN MAP_LV1_BG_A2 + 0x0000, blocks_LV1_BG_A2, dummy_tbl, 0
         0B:7820  70 0B      			db	(((MAP_LV1_BG_A2 + 0x0000) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A2 + 0x0000)
         0B:7822  48 0A      			db	(((blocks_LV1_BG_A2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A2)
         0B:7824  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7826  00 00      			dw	(0)
 2035                        			; 2nd line of 5 screens (512x256)
 2036                        			SCREEN MAP_LV1_BG_A1 + 0x0800, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7828  78 0A      			db	(((MAP_LV1_BG_A1 + 0x0800) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x0800)
         0B:782A  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:782C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:782E  00 00      			dw	(0)
 2037                        			SCREEN MAP_LV1_BG_A1 + 0x0A00, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7830  7A 0A      			db	(((MAP_LV1_BG_A1 + 0x0A00) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x0A00)
         0B:7832  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:7834  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7836  00 00      			dw	(0)
 2038                        			SCREEN MAP_LV1_BG_A1 + 0x0C00, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7838  7C 0A      			db	(((MAP_LV1_BG_A1 + 0x0C00) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x0C00)
         0B:783A  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:783C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:783E  00 00      			dw	(0)
 2039                        			SCREEN MAP_LV1_BG_A1 + 0x0E00, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7840  7E 0A      			db	(((MAP_LV1_BG_A1 + 0x0E00) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x0E00)
         0B:7842  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:7844  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7846  00 00      			dw	(0)
 2040                        			SCREEN MAP_LV1_BG_A2 + 0x0200, blocks_LV1_BG_A2, dummy_tbl, 0
         0B:7848  72 0B      			db	(((MAP_LV1_BG_A2 + 0x0200) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A2 + 0x0200)
         0B:784A  48 0A      			db	(((blocks_LV1_BG_A2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A2)
         0B:784C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:784E  00 00      			dw	(0)
 2041                        			; 3rd line of 5 screens (512x256)
 2042                        			SCREEN MAP_LV1_BG_A1 + 0x1000, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7850  60 0B      			db	(((MAP_LV1_BG_A1 + 0x1000) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x1000)
         0B:7852  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:7854  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7856  00 00      			dw	(0)
 2043                        			SCREEN MAP_LV1_BG_A1 + 0x1200, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7858  62 0B      			db	(((MAP_LV1_BG_A1 + 0x1200) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x1200)
         0B:785A  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:785C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:785E  00 00      			dw	(0)
 2044                        			SCREEN MAP_LV1_BG_A1 + 0x1400, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7860  64 0B      			db	(((MAP_LV1_BG_A1 + 0x1400) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x1400)
         0B:7862  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:7864  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7866  00 00      			dw	(0)
 2045                        			SCREEN MAP_LV1_BG_A1 + 0x1600, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7868  66 0B      			db	(((MAP_LV1_BG_A1 + 0x1600) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x1600)
         0B:786A  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:786C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:786E  00 00      			dw	(0)
 2046                        			SCREEN MAP_LV1_BG_A2 + 0x0400, blocks_LV1_BG_A2, dummy_tbl, 0
         0B:7870  74 0B      			db	(((MAP_LV1_BG_A2 + 0x0400) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A2 + 0x0400)
         0B:7872  48 0A      			db	(((blocks_LV1_BG_A2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A2)
         0B:7874  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7876  00 00      			dw	(0)
 2047                        			; 4th line of 5 screens (512x256)
 2048                        			SCREEN MAP_LV1_BG_A1 + 0x1800, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7878  68 0B      			db	(((MAP_LV1_BG_A1 + 0x1800) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x1800)
         0B:787A  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:787C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:787E  00 00      			dw	(0)
 2049                        			SCREEN MAP_LV1_BG_A1 + 0x1A00, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7880  6A 0B      			db	(((MAP_LV1_BG_A1 + 0x1A00) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x1A00)
         0B:7882  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:7884  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7886  00 00      			dw	(0)
 2050                        			SCREEN MAP_LV1_BG_A1 + 0x1C00, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7888  6C 0B      			db	(((MAP_LV1_BG_A1 + 0x1C00) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x1C00)
         0B:788A  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:788C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:788E  00 00      			dw	(0)
 2051                        			SCREEN MAP_LV1_BG_A1 + 0x1E00, blocks_LV1_BG_A1, dummy_tbl, 0
         0B:7890  6E 0B      			db	(((MAP_LV1_BG_A1 + 0x1E00) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A1 + 0x1E00)
         0B:7892  40 0A      			db	(((blocks_LV1_BG_A1) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A1)
         0B:7894  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:7896  00 00      			dw	(0)
 2052                        			SCREEN MAP_LV1_BG_A2 + 0x0600, blocks_LV1_BG_A2, dummy_tbl, 0
         0B:7898  76 0B      			db	(((MAP_LV1_BG_A2 + 0x0600) & $1FFF) | $6000) >> 8, bank(MAP_LV1_BG_A2 + 0x0600)
         0B:789A  48 0A      			db	(((blocks_LV1_BG_A2) & $1FFF) | $4000) >> 8, bank(blocks_LV1_BG_A2)
         0B:789C  70 09      			db	(((dummy_tbl) & $1FFF) | $6000) >> 8, bank(dummy_tbl)
         0B:789E  00 00      			dw	(0)
 2053               E309     			.code
 2054                        	
 2055                        		.dbg	line,	"include\gfx_BG.c", 204; #endasm
 2056                        		.dbg	line,	"include\gfx_BG.c", 208; //--------------------------------------------------------------------------------------//
 2057                        		.dbg	line,	"include\gfx_BG.c", 209; //                                   EXTRACT PALETTES                                   //
 2058                        		.dbg	line,	"include\gfx_BG.c", 210; //--------------------------------------------------------------------------------------//
 2059                        		.dbg	line,	"include\gfx_BG.c", 212; // EXTRACT PALETTE //
 2060                        		.dbg	line,	"include\gfx_BG.c", 213; #incpal(palette_LV1,"res/maps/tilemap_LV1_BG_B.png");
 2061               78A0     		.data
 2062    0B:78A0             	_palette_LV1:	.incpal		"res/maps/tilemap_LV1_BG_B.png"
 2063               E309     		.code
 2064                        		.dbg	line,	"main.c", 16; #include "include/gfx_SPRITES.c"
 2065                        		.dbg	line,	"include\gfx_SPRITES.c", 1; #include "huc.h"
 2066                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
 2067                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
 2068                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
 2069                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
 2070                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
 2071                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
 2072                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
 2073                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
 2074                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
 2075                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
 2076                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
 2077                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 2078                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 2079                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 2080                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
 2081                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
 2082                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
 2083                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
 2084                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
 2085                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
 2086                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
 2087                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
 2088                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
 2089                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
 2090                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
 2091                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
 2092                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
 2093                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
 2094                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
 2095                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
 2096                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
 2097                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
 2098                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
 2099                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
 2100                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
 2101                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
 2102                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
 2103                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
 2104                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
 2105                        		.dbg	line,	"include\gfx_SPRITES.c", 10; // EXTRACT PLAYER TILES //
 2106                        		.dbg	line,	"include\gfx_SPRITES.c", 11; #incspr(tiles_SPR_PLAYER,"res/sprites/tiles_SPR_PLAYER.png")
 2107               7AA0     		.data
 2108    0B:7AA0             	_tiles_SPR_PLAYER:	.incspr		"res/sprites/tiles_SPR_PLAYER.png"
 2109               E309     		.code
 2110                        		.dbg	line,	"include\gfx_SPRITES.c", 13; // EXTRACT PLAYER PALETTE //
 2111                        		.dbg	line,	"main.c", 16; #incpal(palette_PLAYER,"res/palettes/palette_PLAYER.png");
 2112               7AA0     		.data
 2113    0C:7AA0             	_palette_PLAYER:	.incpal		"res/palettes/palette_PLAYER.png"
 2114               E309     		.code
 2115                        		.dbg	line,	"main.c", 20; #include "include/tables_player.c"
 2116                        		.dbg	line,	"include\tables_player.c", 3; const signed char       TABLE_PLAYER_JUMP_V[35]     =   {
 2117                        		.dbg	line,	"include\tables_player.c", 4; // UPWARD
 2118                        		.dbg	line,	"include\tables_player.c", 5; -4,
 2119                        		.dbg	line,	"include\tables_player.c", 6; -5,
 2120                        		.dbg	line,	"include\tables_player.c", 7; -10,
 2121                        		.dbg	line,	"include\tables_player.c", 8; -4,
 2122                        		.dbg	line,	"include\tables_player.c", 9; -4,
 2123                        		.dbg	line,	"include\tables_player.c", 10; -7,
 2124                        		.dbg	line,	"include\tables_player.c", 11; -6,
 2125                        		.dbg	line,	"include\tables_player.c", 12; -3,
 2126                        		.dbg	line,	"include\tables_player.c", 13; -5,
 2127                        		.dbg	line,	"include\tables_player.c", 14; -2,
 2128                        		.dbg	line,	"include\tables_player.c", 15; -4,
 2129                        		.dbg	line,	"include\tables_player.c", 16; -1,
 2130                        		.dbg	line,	"include\tables_player.c", 17; -1,
 2131                        		.dbg	line,	"include\tables_player.c", 18; -1,
 2132                        		.dbg	line,	"include\tables_player.c", 19; -1,
 2133                        		.dbg	line,	"include\tables_player.c", 20; 0,
 2134                        		.dbg	line,	"include\tables_player.c", 21; 0,
 2135                        		.dbg	line,	"include\tables_player.c", 22; 0,
 2136                        		.dbg	line,	"include\tables_player.c", 23; 0,
 2137                        		.dbg	line,	"include\tables_player.c", 24; // DOWNWARD
 2138                        		.dbg	line,	"include\tables_player.c", 25; 1,
 2139                        		.dbg	line,	"include\tables_player.c", 26; 1,
 2140                        		.dbg	line,	"include\tables_player.c", 27; 1,
 2141                        		.dbg	line,	"include\tables_player.c", 28; 1,
 2142                        		.dbg	line,	"include\tables_player.c", 29; 4,
 2143                        		.dbg	line,	"include\tables_player.c", 30; 2,
 2144                        		.dbg	line,	"include\tables_player.c", 31; 5,
 2145                        		.dbg	line,	"include\tables_player.c", 32; 3,
 2146                        		.dbg	line,	"include\tables_player.c", 33; 6,
 2147                        		.dbg	line,	"include\tables_player.c", 34; 7,
 2148                        		.dbg	line,	"include\tables_player.c", 35; 4,
 2149                        		.dbg	line,	"include\tables_player.c", 36; 4,
 2150                        		.dbg	line,	"include\tables_player.c", 37; 10,
 2151                        		.dbg	line,	"include\tables_player.c", 38; 4,
 2152                        		.dbg	line,	"include\tables_player.c", 39; 4,
 2153                        		.dbg	line,	"include\tables_player.c", 40; 5
 2154                        		.dbg	line,	"include\tables_player.c", 41; };
 2155                        		.dbg	line,	"include\tables_player.c", 44; const signed char       TABLE_PLAYER_FALL[21]       =   {
 2156                        		.dbg	line,	"include\tables_player.c", 45; 0,
 2157                        		.dbg	line,	"include\tables_player.c", 46; 0,
 2158                        		.dbg	line,	"include\tables_player.c", 47; 0,
 2159                        		.dbg	line,	"include\tables_player.c", 48; 0,
 2160                        		.dbg	line,	"include\tables_player.c", 49; 1,
 2161                        		.dbg	line,	"include\tables_player.c", 50; 1,
 2162                        		.dbg	line,	"include\tables_player.c", 51; 1,
 2163                        		.dbg	line,	"include\tables_player.c", 52; 1,
 2164                        		.dbg	line,	"include\tables_player.c", 53; 2,
 2165                        		.dbg	line,	"include\tables_player.c", 54; 2,
 2166                        		.dbg	line,	"include\tables_player.c", 55; 2,
 2167                        		.dbg	line,	"include\tables_player.c", 56; 2,
 2168                        		.dbg	line,	"include\tables_player.c", 57; 3,
 2169                        		.dbg	line,	"include\tables_player.c", 58; 3,
 2170                        		.dbg	line,	"include\tables_player.c", 59; 3,
 2171                        		.dbg	line,	"include\tables_player.c", 60; 4,
 2172                        		.dbg	line,	"include\tables_player.c", 61; 4,
 2173                        		.dbg	line,	"include\tables_player.c", 62; 4,
 2174                        		.dbg	line,	"include\tables_player.c", 63; 4,
 2175                        		.dbg	line,	"include\tables_player.c", 64; 4,
 2176                        		.dbg	line,	"include\tables_player.c", 65; 5
 2177                        		.dbg	line,	"include\tables_player.c", 66; };
 2178                        		.dbg	line,	"include\tables_player.c", 69; const signed char       TABLE_PLAYER_JUMP_LADDER[30]    =   {
 2179                        		.dbg	line,	"include\tables_player.c", 70; // UPWARD
 2180                        		.dbg	line,	"include\tables_player.c", 71; -4,
 2181                        		.dbg	line,	"include\tables_player.c", 72; -4,
 2182                        		.dbg	line,	"include\tables_player.c", 73; -3,
 2183                        		.dbg	line,	"include\tables_player.c", 74; -3,
 2184                        		.dbg	line,	"include\tables_player.c", 75; -3,
 2185                        		.dbg	line,	"include\tables_player.c", 76; -2,
 2186                        		.dbg	line,	"include\tables_player.c", 77; -2,
 2187                        		.dbg	line,	"include\tables_player.c", 78; -2,
 2188                        		.dbg	line,	"include\tables_player.c", 79; -1,
 2189                        		.dbg	line,	"include\tables_player.c", 80; -1,
 2190                        		.dbg	line,	"include\tables_player.c", 81; -1,
 2191                        		.dbg	line,	"include\tables_player.c", 82; -1,
 2192                        		.dbg	line,	"include\tables_player.c", 83; -1,
 2193                        		.dbg	line,	"include\tables_player.c", 84; 0,
 2194                        		.dbg	line,	"include\tables_player.c", 85; 0,
 2195                        		.dbg	line,	"include\tables_player.c", 86; 0,
 2196                        		.dbg	line,	"include\tables_player.c", 87; 0,
 2197                        		.dbg	line,	"include\tables_player.c", 88; // DOWNWARD
 2198                        		.dbg	line,	"include\tables_player.c", 89; 1,
 2199                        		.dbg	line,	"include\tables_player.c", 90; 1,
 2200                        		.dbg	line,	"include\tables_player.c", 91; 1,
 2201                        		.dbg	line,	"include\tables_player.c", 92; 1,
 2202                        		.dbg	line,	"include\tables_player.c", 93; 1,
 2203                        		.dbg	line,	"include\tables_player.c", 94; 2,
 2204                        		.dbg	line,	"include\tables_player.c", 95; 2,
 2205                        		.dbg	line,	"include\tables_player.c", 96; 2,
 2206                        		.dbg	line,	"include\tables_player.c", 97; 3,
 2207                        		.dbg	line,	"include\tables_player.c", 98; 3,
 2208                        		.dbg	line,	"include\tables_player.c", 99; 3,
 2209                        		.dbg	line,	"include\tables_player.c", 100; 4,
 2210                        		.dbg	line,	"include\tables_player.c", 101; 4
 2211                        		.dbg	line,	"main.c", 20; };
 2212                        		.dbg	line,	"main.c", 21; #include "include/routines_LEVELS.c"
 2213                        		.dbg	line,	"include\routines_LEVELS.c", 1; #include "huc.h"
 2214                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
 2215                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
 2216                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
 2217                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
 2218                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
 2219                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
 2220                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
 2221                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
 2222                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
 2223                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
 2224                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
 2225                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 2226                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 2227                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 2228                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
 2229                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
 2230                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
 2231                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
 2232                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
 2233                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
 2234                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
 2235                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
 2236                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
 2237                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
 2238                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
 2239                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
 2240                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
 2241                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
 2242                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
 2243                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
 2244                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
 2245                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
 2246                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
 2247                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
 2248                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
 2249                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
 2250                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
 2251                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
 2252                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
 2253                        		.dbg	line,	"include\routines_LEVELS.c", 2; #include "hucc-scroll.h"
 2254                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 1; #ifndef _hucc_scroll_h
 2255                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 2; #define _hucc_scroll_h
 2256                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 4; /****************************************************************************
 2257                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 5; ; ***************************************************************************
 2258                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 6; ;
 2259                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 7; ; hucc-scroll.h
 2260                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 8; ;
 2261                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 9; ; Routines for a fast split-screen scrolling system.
 2262                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 10; ;
 2263                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 11; ; Copyright John Brandwood 2024.
 2264                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 12; ;
 2265                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 2266                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 2267                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 2268                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 16; ;
 2269                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 17; ; ***************************************************************************
 2270                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 18; ; ***************************************************************************
 2271                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 19; ;
 2272                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 20; ; The maximum number of splits for each screen layer is set in your project's
 2273                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 21; ; "hucc-config.inc" file, with the library having a limit of 128-per-layer.
 2274                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 22; ;
 2275                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 23; ; Your first active split must be defined to start at screen line 0, and then
 2276                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 24; ; the rest of the active splits must be in increasing line order to match the
 2277                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 25; ; way that the PC Engine displays the output image.
 2278                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 26; ;
 2279                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 27; ; You can have disabled splits interleaved with your active splits.
 2280                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 28; ;
 2281                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 29; ; Splits that are normally disabled can be used to create full screen effects
 2282                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 30; ; such as bouncing the screen up and down by adding blank areas at the top or
 2283                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 31; ; bottom of the screen, and then rapidly changing the height of those areas.
 2284                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 32; ;
 2285                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 33; ; ***************************************************************************
 2286                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 34; ; **************************************************************************/
 2287                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 36; // *************
 2288                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 37; // VDC bits for display_flags ...
 2289                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 38; // *************
 2290                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 40; #ifndef BKG_OFF
 2291                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 41; #define BKG_OFF 0x00
 2292                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 42; #endif
 2293                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 44; #ifndef SPR_OFF
 2294                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 45; #define SPR_OFF 0x00
 2295                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 46; #endif
 2296                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 48; #ifndef BKG_ON
 2297                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 49; #define BKG_ON 0x80
 2298                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 50; #endif
 2299                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 52; #ifndef SPR_ON
 2300                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 53; #define SPR_ON 0x40
 2301                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 54; #endif
 2302                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 56; // *************
 2303                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 57; // Functions in hucc-scroll.asm ...
 2304                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 58; // *************
 2305                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 60; #ifdef __HUCC__
 2306                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 62; #asmdef	HUCC_USES_NEW_SCROLL 1
 2307                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 64; extern void __fastcall scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
 2308                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 65; extern void __fastcall sgx_scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
 2309                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 67; extern void __fastcall disable_split( unsigned char index<acc> );
 2310                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 68; extern void __fastcall sgx_disable_split( unsigned char index<acc> );
 2311                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 70; extern void __fastcall __macro disable_all_splits( void );
 2312                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 71; extern void __fastcall __macro sgx_disable_all_splits( void );
 2313                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 73; #asm
 2314                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 74; .macro	_disable_all_splits
 2315                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 75; ldy	#HUCC_PCE_SPLITS - 1
 2316                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 76; !loop:		tya
 2317                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 77; call	_disable_split.1
 2318                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 78; dey
 2319                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 79; bpl	!loop-
 2320                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 80; .endm
 2321                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 82; .macro	_sgx_disable_all_splits
 2322                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 83; ldy	#HUCC_SGX_SPLITS - 1
 2323                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 84; !loop:		tya
 2324                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 85; call	_sgx_disable_split.1
 2325                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 86; dey
 2326                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 87; bpl	!loop-
 2327                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 88; .endm
 2328                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 89; #endasm
 2329                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 91; #endif // __HUCC__
 2330                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 93; #endif // _hucc_scroll_h
 2331                        		.dbg	line,	"include\routines_LEVELS.c", 3; #include "hucc-chrmap.h"
 2332                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 1; #ifndef _hucc_chrmap_h
 2333                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 2; #define _hucc_chrmap_h
 2334                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 4; /****************************************************************************
 2335                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 5; ; ***************************************************************************
 2336                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 6; ;
 2337                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 7; ; hucc-chrmap.h
 2338                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 8; ;
 2339                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 9; ; A simple map system based on 8x8 characters (aka "tiles") in BAT format.
 2340                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 10; ;
 2341                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 11; ; Copyright John Brandwood 2025.
 2342                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 12; ;
 2343                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 2344                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 2345                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 2346                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 16; ;
 2347                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 17; ; ***************************************************************************
 2348                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 18; ; ***************************************************************************
 2349                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 19; ;
 2350                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 20; ; The maximum X and Y size for chrmaps is 256 characters (2048 pixels).
 2351                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 21; ;
 2352                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 22; ; The maximum total size for a chrmap is 16KBytes, which allows for maps up
 2353                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 23; ; to 256x32 tiles (2048x256 pixels).
 2354                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 24; ;
 2355                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 25; ; ***************************************************************************
 2356                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 26; ; **************************************************************************/
 2357                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 28; // *************
 2358                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 29; // This code extends the blkmap library ...
 2359                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 30; // *************
 2360                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 32; #include "hucc-blkmap.h"
 2361                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 34; // *************
 2362                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 35; // Functions in chrmap.asm ...
 2363                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 36; // *************
 2364                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 38; #ifdef __HUCC__
 2365                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 40; #asmdef	HUCC_USES_CHRMAP 1
 2366                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 42; extern void __fastcall __nop set_chrmap( unsigned char __far *chrmap<vdc_map_bank:vdc_map_addr>, unsigned char tiles_w<vdc_map_line_w> );
 2367                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 44; extern void __fastcall draw_bat( void );
 2368                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 45; extern void __fastcall scroll_bat( void );
 2369                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 47; extern void __fastcall blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 2370                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 49; #ifdef _SGX
 2371                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 51; extern void __fastcall __nop sgx_set_chrmap( unsigned char __far *chrmap<sgx_map_bank:sgx_map_addr>, unsigned char tiles_w<sgx_map_line_w> );
 2372                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 53; extern void __fastcall sgx_draw_bat( void );
 2373                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 54; extern void __fastcall sgx_scroll_bat( void );
 2374                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 56; extern void __fastcall sgx_blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 2375                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 58; #endif
 2376                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 60; #endif // __HUCC__
 2377                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 62; #endif // _hucc_chrmap_h
 2378                        		.dbg	line,	"include\routines_LEVELS.c", 4; #include "hucc-blkmap.h"
 2379                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 1; #ifndef _hucc_blkmap_h
 2380                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 2; #define _hucc_blkmap_h
 2381                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 4; /****************************************************************************
 2382                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 5; ; ***************************************************************************
 2383                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 6; ;
 2384                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 7; ; hucc-blkmap.h
 2385                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 8; ;
 2386                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 9; ; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
 2387                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 10; ;
 2388                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 11; ; Copyright John Brandwood 2025.
 2389                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 12; ;
 2390                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 2391                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 2392                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 2393                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 16; ;
 2394                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 17; ; ***************************************************************************
 2395                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 18; ; ***************************************************************************
 2396                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 19; ;
 2397                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 20; ; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
 2398                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 21; ;
 2399                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 22; ; The maximum total size for a blkmap is 16KBytes, which allows for maps up
 2400                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 23; ; to 128x128 blocks (2048x2048 pixels).
 2401                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 24; ;
 2402                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 25; ; Huge multi-screen blkmaps are also supported (optionally).
 2403                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 26; ;
 2404                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 27; ; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
 2405                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 28; ;
 2406                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 29; ; The maximum total size for a multi-screen map is 8KBytes, which allows for
 2407                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 30; ; a total of 1024 screens.
 2408                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 31; ;
 2409                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 32; ; ***************************************************************************
 2410                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 33; ; **************************************************************************/
 2411                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 35; // *************
 2412                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 36; // Functions in blkmap.asm ...
 2413                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 37; // *************
 2414                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 39; #ifdef __HUCC__
 2415                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 41; #asmdef	HUCC_USES_BLKMAP 1
 2416                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 43; // Current top-left of drawn map in pixels.
 2417                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 44; extern unsigned int   vdc_map_pxl_x;
 2418                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 45; extern unsigned int   vdc_map_pxl_y;
 2419                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 47; // Width and height to draw/scroll in characters (not tiles).
 2420                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 48; extern unsigned char  vdc_map_draw_w;
 2421                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 49; extern unsigned char  vdc_map_draw_h;
 2422                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 51; // Width of map (or multi-screen BAT) in tiles.
 2423                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 52; extern unsigned char  vdc_map_line_w;
 2424                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 54; // Width of map in screens (if multi-screen map).
 2425                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 55; extern unsigned char  vdc_map_scrn_w;
 2426                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 57; // Extra information returned by get_map_block() and sgx_get_map_block(),
 2427                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 58; // which are the collision flags and the mask/overlay sprite for the BLK.
 2428                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 59; extern unsigned char  map_blk_flag;
 2429                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 60; extern unsigned char  map_blk_mask;
 2430                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 62; extern unsigned char  vdc_scr_bank;
 2431                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 63; extern unsigned char *vdc_scr_addr;
 2432                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 65; extern unsigned char  vdc_map_bank;
 2433                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 66; extern unsigned char *vdc_map_addr;
 2434                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 68; extern unsigned char  vdc_blk_bank;
 2435                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 69; extern unsigned char *vdc_blk_addr;
 2436                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 71; extern unsigned char  vdc_tbl_bank;
 2437                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 72; extern unsigned char *vdc_tbl_addr;
 2438                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 74; extern void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blocks<_al> );
 2439                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 75; extern void __fastcall __macro set_blkmap( unsigned char __far *blk_map<vdc_map_bank:vdc_map_addr>, unsigned char blocks_w<vdc_map_line_w> );
 2440                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 76; extern void __fastcall __macro set_multimap( unsigned char __far *multi_map<vdc_scr_bank:vdc_scr_addr>, unsigned char screens_w<vdc_map_scrn_w> );
 2441                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 78; extern void __fastcall draw_map( void );
 2442                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 79; extern void __fastcall scroll_map( void );
 2443                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 81; extern void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 2444                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 83; extern unsigned char __fastcall get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 2445                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 85; #asm
 2446                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 86; .macro	_set_blkmap.2
 2447                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 87; stz	vdc_scr_bank
 2448                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 88; .endm
 2449                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 90; .macro	_set_multimap.2
 2450                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 91; lda	vdc_bat_width
 2451                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 92; lsr	a
 2452                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 93; sta	vdc_map_line_w
 2453                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 94; .endm
 2454                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 96; .macro	SCREEN
 2455                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 97; db	(((\1) & $1FFF) | $6000) >> 8, bank(\1)
 2456                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 98; db	(((\2) & $1FFF) | $4000) >> 8, bank(\2)
 2457                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 99; db	(((\3) & $1FFF) | $6000) >> 8, bank(\3)
 2458                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 100; dw	(\4)
 2459                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 101; .endm
 2460                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 102; #endasm
 2461                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 104; #ifdef _SGX
 2462                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 106; // Current top-left of drawn map in pixels.
 2463                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 107; extern unsigned int   sgx_map_pxl_x;
 2464                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 108; extern unsigned int   sgx_map_pxl_y;
 2465                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 110; // Width and height to draw/scroll in characters (not tiles).
 2466                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 111; extern unsigned char  sgx_map_draw_w;
 2467                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 112; extern unsigned char  sgx_map_draw_h;
 2468                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 114; // Width of map (or multi-screen BAT) in tiles.
 2469                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 115; extern unsigned char  sgx_map_line_w;
 2470                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 117; // Width of map in screens (if multi-screen map).
 2471                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 118; extern unsigned char  sgx_map_scrn_w;
 2472                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 120; extern unsigned char  sgx_scr_bank;
 2473                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 121; extern unsigned char *sgx_scr_addr;
 2474                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 123; extern unsigned char  sgx_map_bank;
 2475                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 124; extern unsigned char *sgx_map_addr;
 2476                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 126; extern unsigned char  sgx_blk_bank;
 2477                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 127; extern unsigned char *sgx_blk_addr;
 2478                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 129; extern unsigned char  sgx_tbl_bank;
 2479                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 130; extern unsigned char *sgx_tbl_addr;
 2480                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 132; extern void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blocks<_al> );
 2481                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 133; extern void __fastcall __macro sgx_set_blkmap( unsigned char __far *blk_map<sgx_map_bank:sgx_map_addr>, unsigned char blocks_w<sgx_map_line_w> );
 2482                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 134; extern void __fastcall __macro sgx_set_multimap( unsigned char __far *multi_map<sgx_scr_bank:sgx_scr_addr>, unsigned char screens_w<sgx_map_scrn_w> );
 2483                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 136; extern void __fastcall sgx_draw_map( void );
 2484                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 137; extern void __fastcall sgx_scroll_map( void );
 2485                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 139; extern void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 2486                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 141; extern unsigned char __fastcall sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 2487                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 143; #asm
 2488                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 144; .macro	_sgx_set_blkmap.2
 2489                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 145; stz	sgx_scr_bank
 2490                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 146; .endm
 2491                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 148; .macro	_sgx_set_multimap.2
 2492                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 149; lda	sgx_bat_width
 2493                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 150; lsr	a
 2494                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 151; sta	sgx_map_line_w
 2495                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 152; .endm
 2496                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 153; #endasm
 2497                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 155; #endif
 2498                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 157; #endif // __HUCC__
 2499                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 159; #endif // _hucc_blkmap_h
 2500                        		.dbg	line,	"include\routines_LEVELS.c", 13; int check_BG(signed char x_offset , signed char y_offset)
 2501                        		.dbg	line,	"include\routines_LEVELS.c", 14; {
 2502                        	;***********************
 2503                        	;***********************
 2504                        	
 2505                        		.hucc
 2506    0C:DF85             		.proc		_check_BG
 2507                        		__enter		_check_BG
 2508                        	
 2509                        		.dbg	line,	"include\routines_LEVELS.c", 15; int player_COLL_X;
 2510                        	
 2511                        		.dbg	line,	"include\routines_LEVELS.c", 16; int player_COLL_Y;
 2512                        	
 2513                        		.dbg	line,	"include\routines_LEVELS.c", 19; player_COLL_X = player_pos_x + x_offset;
 2514                        		__ld.bs		2  /* x_offset */
         0C:DF85  A6 8D      			ldx	<__sp
         0C:DF87  B5 0A      			lda	<__stack + 2, x
         0C:DF89  C2         			cly
         0C:DF8A  10 01      			bpl	!+	; signed
         0C:DF8C  88         			dey
         0C:DF8D             	!:
 2515                        		__add.wm	_player_pos_x
         0C:DF8D  18         			clc
         0C:DF8E  6D 16 23   			adc.l	_player_pos_x
         0C:DF91  42         			say
         0C:DF92  6D 17 23   			adc.h	_player_pos_x
         0C:DF95  42         			say
 2516                        		__st.wmq	__check_BG_end - 2  /* player_COLL_X */
         0C:DF96  8D 1E 23   			sta.l	__check_BG_end - 2
         0C:DF99  8C 1F 23   			sty.h	__check_BG_end - 2
 2517                        	
 2518                        		.dbg	line,	"include\routines_LEVELS.c", 20; player_COLL_Y = player_pos_y + 32 - y_offset;//32
 2519                        		__ld.wm		_player_pos_y
         0C:DF9C  AD 18 23   			lda.l	_player_pos_y
         0C:DF9F  AC 19 23   			ldy.h	_player_pos_y
 2520                        		__add.wi	32
         0C:DFA2  18         			clc
         0C:DFA3  69 20      			adc.l	#32
         0C:DFA5  90 01      			bcc	!+
         0C:DFA7  C8         			iny
         0C:DFA8             	!:
 2521                        		__push.wr
         0C:DFA8  5A         			phy
         0C:DFA9  48         			pha
 2522                        		__ld.bs		0  /* y_offset */
         0C:DFAA  A6 8D      			ldx	<__sp
         0C:DFAC  B5 08      			lda	<__stack + 0, x
         0C:DFAE  C2         			cly
         0C:DFAF  10 01      			bpl	!+	; signed
         0C:DFB1  88         			dey
         0C:DFB2             	!:
 2523                        		__sub.wt
         0C:DFB2  BA         			tsx
         0C:DFB3  38         			sec
         0C:DFB4  49 FF      			eor	#$FF
         0C:DFB6  7D 01 21   			adc.l	__tos, x
         0C:DFB9  42         			say
         0C:DFBA  49 FF      			eor	#$FF
         0C:DFBC  7D 02 21   			adc.h	__tos, x
         0C:DFBF  42         			say
         0C:DFC0  E8         			inx
         0C:DFC1  E8         			inx
         0C:DFC2  9A         			txs
 2524                        		__st.wmq	__check_BG_end - 4  /* player_COLL_Y */
         0C:DFC3  8D 1C 23   			sta.l	__check_BG_end - 4
         0C:DFC6  8C 1D 23   			sty.h	__check_BG_end - 4
 2525                        	
 2526                        		.dbg	line,	"include\routines_LEVELS.c", 22; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
 2527                        		__ld.wm		__check_BG_end - 2  /* player_COLL_X */
         0C:DFC9  AD 1E 23   			lda.l	__check_BG_end - 2
         0C:DFCC  AC 1F 23   			ldy.h	__check_BG_end - 2
 2528                        		__add.wm	_sgx_map_pxl_x
         0C:DFCF  18         			clc
         0C:DFD0  6D 64 23   			adc.l	_sgx_map_pxl_x
         0C:DFD3  42         			say
         0C:DFD4  6D 65 23   			adc.h	_sgx_map_pxl_x
         0C:DFD7  42         			say
 2529                        		__st.wmq	map_pxl_x
         0C:DFD8  85 FC      			sta.l	map_pxl_x
         0C:DFDA  84 FD      			sty.h	map_pxl_x
 2530                        		__ld.wm		__check_BG_end - 4  /* player_COLL_Y */
         0C:DFDC  AD 1C 23   			lda.l	__check_BG_end - 4
         0C:DFDF  AC 1D 23   			ldy.h	__check_BG_end - 4
 2531                        		__add.wm	_sgx_map_pxl_y
         0C:DFE2  18         			clc
         0C:DFE3  6D 66 23   			adc.l	_sgx_map_pxl_y
         0C:DFE6  42         			say
         0C:DFE7  6D 67 23   			adc.h	_sgx_map_pxl_y
         0C:DFEA  42         			say
 2532                        		__st.wmq	map_pxl_y
         0C:DFEB  85 FE      			sta.l	map_pxl_y
         0C:DFED  84 FF      			sty.h	map_pxl_y
 2533                        		__call		_get_map_block.2
         0C:DFEF  20 9F FF   			call	_get_map_block.2
 2534                        	
 2535                        		.dbg	line,	"include\routines_LEVELS.c", 23; }
 2536    0C:DFF2             	.LL2:
 2537                        		__modsp		4
         0C:DFF2  AA         			tax
         0C:DFF3  A5 8D      			lda	<__sp
         0C:DFF5  18         			clc
         0C:DFF6  69 04      			adc	#4
         0C:DFF8  85 8D      			sta	<__sp
         0C:DFFA  8A         			txa
 2538                        		__return	1
         0C:DFFB  AA         			tax
         0C:DFFC  4C EF FF   			jmp	leave_proc
 2539                        		.dbg	clear
 2540                        		.endp
 2541                        		.pceas
 2542                        	
 2543                        		.dbg	line,	"include\routines_LEVELS.c", 26; int check_WALL_TR()
 2544                        		.dbg	line,	"include\routines_LEVELS.c", 27; {
 2545                        	;***********************
 2546                        	;***********************
 2547                        	
 2548                        		.hucc
 2549    02:C473             		.proc		_check_WALL_TR
 2550                        		__enter		_check_WALL_TR
 2551                        	
 2552                        		.dbg	line,	"include\routines_LEVELS.c", 28; int player_COLL_X;
 2553                        	
 2554                        		.dbg	line,	"include\routines_LEVELS.c", 29; int player_COLL_Y;
 2555                        	
 2556                        		.dbg	line,	"include\routines_LEVELS.c", 32; player_COLL_X = player_pos_x + 24;
 2557                        		__ld.wm		_player_pos_x
         02:C473  AD 16 23   			lda.l	_player_pos_x
         02:C476  AC 17 23   			ldy.h	_player_pos_x
 2558                        		__add.wi	24
         02:C479  18         			clc
         02:C47A  69 18      			adc.l	#24
         02:C47C  90 01      			bcc	!+
         02:C47E  C8         			iny
         02:C47F             	!:
 2559                        		__st.wmq	__check_WALL_TR_end - 2  /* player_COLL_X */
         02:C47F  8D 1E 23   			sta.l	__check_WALL_TR_end - 2
         02:C482  8C 1F 23   			sty.h	__check_WALL_TR_end - 2
 2560                        	
 2561                        		.dbg	line,	"include\routines_LEVELS.c", 33; player_COLL_Y = player_pos_y + 15;
 2562                        		__ld.wm		_player_pos_y
         02:C485  AD 18 23   			lda.l	_player_pos_y
         02:C488  AC 19 23   			ldy.h	_player_pos_y
 2563                        		__add.wi	15
         02:C48B  18         			clc
         02:C48C  69 0F      			adc.l	#15
         02:C48E  90 01      			bcc	!+
         02:C490  C8         			iny
         02:C491             	!:
 2564                        		__st.wmq	__check_WALL_TR_end - 4  /* player_COLL_Y */
         02:C491  8D 1C 23   			sta.l	__check_WALL_TR_end - 4
         02:C494  8C 1D 23   			sty.h	__check_WALL_TR_end - 4
 2565                        	
 2566                        		.dbg	line,	"include\routines_LEVELS.c", 36; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
 2567                        		__ld.wm		__check_WALL_TR_end - 2  /* player_COLL_X */
         02:C497  AD 1E 23   			lda.l	__check_WALL_TR_end - 2
         02:C49A  AC 1F 23   			ldy.h	__check_WALL_TR_end - 2
 2568                        		__add.wm	_sgx_map_pxl_x
         02:C49D  18         			clc
         02:C49E  6D 64 23   			adc.l	_sgx_map_pxl_x
         02:C4A1  42         			say
         02:C4A2  6D 65 23   			adc.h	_sgx_map_pxl_x
         02:C4A5  42         			say
 2569                        		__st.wmq	map_pxl_x
         02:C4A6  85 FC      			sta.l	map_pxl_x
         02:C4A8  84 FD      			sty.h	map_pxl_x
 2570                        		__ld.wm		__check_WALL_TR_end - 4  /* player_COLL_Y */
         02:C4AA  AD 1C 23   			lda.l	__check_WALL_TR_end - 4
         02:C4AD  AC 1D 23   			ldy.h	__check_WALL_TR_end - 4
 2571                        		__add.wm	_sgx_map_pxl_y
         02:C4B0  18         			clc
         02:C4B1  6D 66 23   			adc.l	_sgx_map_pxl_y
         02:C4B4  42         			say
         02:C4B5  6D 67 23   			adc.h	_sgx_map_pxl_y
         02:C4B8  42         			say
 2572                        		__st.wmq	map_pxl_y
         02:C4B9  85 FE      			sta.l	map_pxl_y
         02:C4BB  84 FF      			sty.h	map_pxl_y
 2573                        		__call		_get_map_block.2
         02:C4BD  20 9F FF   			call	_get_map_block.2
 2574                        	
 2575                        		.dbg	line,	"include\routines_LEVELS.c", 37; }
 2576    02:C4C0             	.LL3:
 2577                        		__return	1
         02:C4C0  AA         			tax
         02:C4C1  4C EF FF   			jmp	leave_proc
 2578                        		.dbg	clear
 2579                        		.endp
 2580                        		.pceas
 2581                        	
 2582                        		.dbg	line,	"include\routines_LEVELS.c", 40; int check_WALL_TL()
 2583                        		.dbg	line,	"include\routines_LEVELS.c", 41; {
 2584                        	;***********************
 2585                        	;***********************
 2586                        	
 2587                        		.hucc
 2588    02:C4C4             		.proc		_check_WALL_TL
 2589                        		__enter		_check_WALL_TL
 2590                        	
 2591                        		.dbg	line,	"include\routines_LEVELS.c", 42; int player_COLL_X;
 2592                        	
 2593                        		.dbg	line,	"include\routines_LEVELS.c", 43; int player_COLL_Y;
 2594                        	
 2595                        		.dbg	line,	"include\routines_LEVELS.c", 46; player_COLL_X = player_pos_x + 8;
 2596                        		__ld.wm		_player_pos_x
         02:C4C4  AD 16 23   			lda.l	_player_pos_x
         02:C4C7  AC 17 23   			ldy.h	_player_pos_x
 2597                        		__add.wi	8
         02:C4CA  18         			clc
         02:C4CB  69 08      			adc.l	#8
         02:C4CD  90 01      			bcc	!+
         02:C4CF  C8         			iny
         02:C4D0             	!:
 2598                        		__st.wmq	__check_WALL_TL_end - 2  /* player_COLL_X */
         02:C4D0  8D 1E 23   			sta.l	__check_WALL_TL_end - 2
         02:C4D3  8C 1F 23   			sty.h	__check_WALL_TL_end - 2
 2599                        	
 2600                        		.dbg	line,	"include\routines_LEVELS.c", 47; player_COLL_Y = player_pos_y + 15;
 2601                        		__ld.wm		_player_pos_y
         02:C4D6  AD 18 23   			lda.l	_player_pos_y
         02:C4D9  AC 19 23   			ldy.h	_player_pos_y
 2602                        		__add.wi	15
         02:C4DC  18         			clc
         02:C4DD  69 0F      			adc.l	#15
         02:C4DF  90 01      			bcc	!+
         02:C4E1  C8         			iny
         02:C4E2             	!:
 2603                        		__st.wmq	__check_WALL_TL_end - 4  /* player_COLL_Y */
         02:C4E2  8D 1C 23   			sta.l	__check_WALL_TL_end - 4
         02:C4E5  8C 1D 23   			sty.h	__check_WALL_TL_end - 4
 2604                        	
 2605                        		.dbg	line,	"include\routines_LEVELS.c", 50; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
 2606                        		__ld.wm		__check_WALL_TL_end - 2  /* player_COLL_X */
         02:C4E8  AD 1E 23   			lda.l	__check_WALL_TL_end - 2
         02:C4EB  AC 1F 23   			ldy.h	__check_WALL_TL_end - 2
 2607                        		__add.wm	_sgx_map_pxl_x
         02:C4EE  18         			clc
         02:C4EF  6D 64 23   			adc.l	_sgx_map_pxl_x
         02:C4F2  42         			say
         02:C4F3  6D 65 23   			adc.h	_sgx_map_pxl_x
         02:C4F6  42         			say
 2608                        		__st.wmq	map_pxl_x
         02:C4F7  85 FC      			sta.l	map_pxl_x
         02:C4F9  84 FD      			sty.h	map_pxl_x
 2609                        		__ld.wm		__check_WALL_TL_end - 4  /* player_COLL_Y */
         02:C4FB  AD 1C 23   			lda.l	__check_WALL_TL_end - 4
         02:C4FE  AC 1D 23   			ldy.h	__check_WALL_TL_end - 4
 2610                        		__add.wm	_sgx_map_pxl_y
         02:C501  18         			clc
         02:C502  6D 66 23   			adc.l	_sgx_map_pxl_y
         02:C505  42         			say
         02:C506  6D 67 23   			adc.h	_sgx_map_pxl_y
         02:C509  42         			say
 2611                        		__st.wmq	map_pxl_y
         02:C50A  85 FE      			sta.l	map_pxl_y
         02:C50C  84 FF      			sty.h	map_pxl_y
 2612                        		__call		_get_map_block.2
         02:C50E  20 9F FF   			call	_get_map_block.2
 2613                        	
 2614                        		.dbg	line,	"include\routines_LEVELS.c", 51; }
 2615    02:C511             	.LL4:
 2616                        		__return	1
         02:C511  AA         			tax
         02:C512  4C EF FF   			jmp	leave_proc
 2617                        		.dbg	clear
 2618                        		.endp
 2619                        		.pceas
 2620                        	
 2621                        		.dbg	line,	"include\routines_LEVELS.c", 54; int check_WALL_BR()
 2622                        		.dbg	line,	"include\routines_LEVELS.c", 55; {
 2623                        	;***********************
 2624                        	;***********************
 2625                        	
 2626                        		.hucc
 2627    02:C515             		.proc		_check_WALL_BR
 2628                        		__enter		_check_WALL_BR
 2629                        	
 2630                        		.dbg	line,	"include\routines_LEVELS.c", 56; int player_COLL_X;
 2631                        	
 2632                        		.dbg	line,	"include\routines_LEVELS.c", 57; int player_COLL_Y;
 2633                        	
 2634                        		.dbg	line,	"include\routines_LEVELS.c", 60; player_COLL_X = player_pos_x + 24;
 2635                        		__ld.wm		_player_pos_x
         02:C515  AD 16 23   			lda.l	_player_pos_x
         02:C518  AC 17 23   			ldy.h	_player_pos_x
 2636                        		__add.wi	24
         02:C51B  18         			clc
         02:C51C  69 18      			adc.l	#24
         02:C51E  90 01      			bcc	!+
         02:C520  C8         			iny
         02:C521             	!:
 2637                        		__st.wmq	__check_WALL_BR_end - 2  /* player_COLL_X */
         02:C521  8D 1E 23   			sta.l	__check_WALL_BR_end - 2
         02:C524  8C 1F 23   			sty.h	__check_WALL_BR_end - 2
 2638                        	
 2639                        		.dbg	line,	"include\routines_LEVELS.c", 61; player_COLL_Y = player_pos_y + 31;
 2640                        		__ld.wm		_player_pos_y
         02:C527  AD 18 23   			lda.l	_player_pos_y
         02:C52A  AC 19 23   			ldy.h	_player_pos_y
 2641                        		__add.wi	31
         02:C52D  18         			clc
         02:C52E  69 1F      			adc.l	#31
         02:C530  90 01      			bcc	!+
         02:C532  C8         			iny
         02:C533             	!:
 2642                        		__st.wmq	__check_WALL_BR_end - 4  /* player_COLL_Y */
         02:C533  8D 1C 23   			sta.l	__check_WALL_BR_end - 4
         02:C536  8C 1D 23   			sty.h	__check_WALL_BR_end - 4
 2643                        	
 2644                        		.dbg	line,	"include\routines_LEVELS.c", 64; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
 2645                        		__ld.wm		__check_WALL_BR_end - 2  /* player_COLL_X */
         02:C539  AD 1E 23   			lda.l	__check_WALL_BR_end - 2
         02:C53C  AC 1F 23   			ldy.h	__check_WALL_BR_end - 2
 2646                        		__add.wm	_sgx_map_pxl_x
         02:C53F  18         			clc
         02:C540  6D 64 23   			adc.l	_sgx_map_pxl_x
         02:C543  42         			say
         02:C544  6D 65 23   			adc.h	_sgx_map_pxl_x
         02:C547  42         			say
 2647                        		__st.wmq	map_pxl_x
         02:C548  85 FC      			sta.l	map_pxl_x
         02:C54A  84 FD      			sty.h	map_pxl_x
 2648                        		__ld.wm		__check_WALL_BR_end - 4  /* player_COLL_Y */
         02:C54C  AD 1C 23   			lda.l	__check_WALL_BR_end - 4
         02:C54F  AC 1D 23   			ldy.h	__check_WALL_BR_end - 4
 2649                        		__add.wm	_sgx_map_pxl_y
         02:C552  18         			clc
         02:C553  6D 66 23   			adc.l	_sgx_map_pxl_y
         02:C556  42         			say
         02:C557  6D 67 23   			adc.h	_sgx_map_pxl_y
         02:C55A  42         			say
 2650                        		__st.wmq	map_pxl_y
         02:C55B  85 FE      			sta.l	map_pxl_y
         02:C55D  84 FF      			sty.h	map_pxl_y
 2651                        		__call		_get_map_block.2
         02:C55F  20 9F FF   			call	_get_map_block.2
 2652                        	
 2653                        		.dbg	line,	"include\routines_LEVELS.c", 65; }
 2654    02:C562             	.LL5:
 2655                        		__return	1
         02:C562  AA         			tax
         02:C563  4C EF FF   			jmp	leave_proc
 2656                        		.dbg	clear
 2657                        		.endp
 2658                        		.pceas
 2659                        	
 2660                        		.dbg	line,	"include\routines_LEVELS.c", 68; int check_WALL_BL()
 2661                        		.dbg	line,	"include\routines_LEVELS.c", 69; {
 2662                        	;***********************
 2663                        	;***********************
 2664                        	
 2665                        		.hucc
 2666    02:C566             		.proc		_check_WALL_BL
 2667                        		__enter		_check_WALL_BL
 2668                        	
 2669                        		.dbg	line,	"include\routines_LEVELS.c", 70; int player_COLL_X;
 2670                        	
 2671                        		.dbg	line,	"include\routines_LEVELS.c", 71; int player_COLL_Y;
 2672                        	
 2673                        		.dbg	line,	"include\routines_LEVELS.c", 74; player_COLL_X = player_pos_x + 8;
 2674                        		__ld.wm		_player_pos_x
         02:C566  AD 16 23   			lda.l	_player_pos_x
         02:C569  AC 17 23   			ldy.h	_player_pos_x
 2675                        		__add.wi	8
         02:C56C  18         			clc
         02:C56D  69 08      			adc.l	#8
         02:C56F  90 01      			bcc	!+
         02:C571  C8         			iny
         02:C572             	!:
 2676                        		__st.wmq	__check_WALL_BL_end - 2  /* player_COLL_X */
         02:C572  8D 1E 23   			sta.l	__check_WALL_BL_end - 2
         02:C575  8C 1F 23   			sty.h	__check_WALL_BL_end - 2
 2677                        	
 2678                        		.dbg	line,	"include\routines_LEVELS.c", 75; player_COLL_Y = player_pos_y + 31;
 2679                        		__ld.wm		_player_pos_y
         02:C578  AD 18 23   			lda.l	_player_pos_y
         02:C57B  AC 19 23   			ldy.h	_player_pos_y
 2680                        		__add.wi	31
         02:C57E  18         			clc
         02:C57F  69 1F      			adc.l	#31
         02:C581  90 01      			bcc	!+
         02:C583  C8         			iny
         02:C584             	!:
 2681                        		__st.wmq	__check_WALL_BL_end - 4  /* player_COLL_Y */
         02:C584  8D 1C 23   			sta.l	__check_WALL_BL_end - 4
         02:C587  8C 1D 23   			sty.h	__check_WALL_BL_end - 4
 2682                        	
 2683                        		.dbg	line,	"include\routines_LEVELS.c", 78; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
 2684                        		__ld.wm		__check_WALL_BL_end - 2  /* player_COLL_X */
         02:C58A  AD 1E 23   			lda.l	__check_WALL_BL_end - 2
         02:C58D  AC 1F 23   			ldy.h	__check_WALL_BL_end - 2
 2685                        		__add.wm	_sgx_map_pxl_x
         02:C590  18         			clc
         02:C591  6D 64 23   			adc.l	_sgx_map_pxl_x
         02:C594  42         			say
         02:C595  6D 65 23   			adc.h	_sgx_map_pxl_x
         02:C598  42         			say
 2686                        		__st.wmq	map_pxl_x
         02:C599  85 FC      			sta.l	map_pxl_x
         02:C59B  84 FD      			sty.h	map_pxl_x
 2687                        		__ld.wm		__check_WALL_BL_end - 4  /* player_COLL_Y */
         02:C59D  AD 1C 23   			lda.l	__check_WALL_BL_end - 4
         02:C5A0  AC 1D 23   			ldy.h	__check_WALL_BL_end - 4
 2688                        		__add.wm	_sgx_map_pxl_y
         02:C5A3  18         			clc
         02:C5A4  6D 66 23   			adc.l	_sgx_map_pxl_y
         02:C5A7  42         			say
         02:C5A8  6D 67 23   			adc.h	_sgx_map_pxl_y
         02:C5AB  42         			say
 2689                        		__st.wmq	map_pxl_y
         02:C5AC  85 FE      			sta.l	map_pxl_y
         02:C5AE  84 FF      			sty.h	map_pxl_y
 2690                        		__call		_get_map_block.2
         02:C5B0  20 9F FF   			call	_get_map_block.2
 2691                        	
 2692                        		.dbg	line,	"include\routines_LEVELS.c", 79; }
 2693    02:C5B3             	.LL6:
 2694                        		__return	1
         02:C5B3  AA         			tax
         02:C5B4  4C EF FF   			jmp	leave_proc
 2695                        		.dbg	clear
 2696                        		.endp
 2697                        		.pceas
 2698                        	
 2699                        		.dbg	line,	"include\routines_LEVELS.c", 82; int check_FLOOR_R()
 2700                        		.dbg	line,	"include\routines_LEVELS.c", 83; {
 2701                        	;***********************
 2702                        	;***********************
 2703                        	
 2704                        		.hucc
 2705    02:C5B7             		.proc		_check_FLOOR_R
 2706                        		__enter		_check_FLOOR_R
 2707                        	
 2708                        		.dbg	line,	"include\routines_LEVELS.c", 84; int player_COLL_X;
 2709                        	
 2710                        		.dbg	line,	"include\routines_LEVELS.c", 85; int player_COLL_Y;
 2711                        	
 2712                        		.dbg	line,	"include\routines_LEVELS.c", 88; player_COLL_X = player_pos_x + 11;
 2713                        		__ld.wm		_player_pos_x
         02:C5B7  AD 16 23   			lda.l	_player_pos_x
         02:C5BA  AC 17 23   			ldy.h	_player_pos_x
 2714                        		__add.wi	11
         02:C5BD  18         			clc
         02:C5BE  69 0B      			adc.l	#11
         02:C5C0  90 01      			bcc	!+
         02:C5C2  C8         			iny
         02:C5C3             	!:
 2715                        		__st.wmq	__check_FLOOR_R_end - 2  /* player_COLL_X */
         02:C5C3  8D 1E 23   			sta.l	__check_FLOOR_R_end - 2
         02:C5C6  8C 1F 23   			sty.h	__check_FLOOR_R_end - 2
 2716                        	
 2717                        		.dbg	line,	"include\routines_LEVELS.c", 89; player_COLL_Y = player_pos_y + 32;//32
 2718                        		__ld.wm		_player_pos_y
         02:C5C9  AD 18 23   			lda.l	_player_pos_y
         02:C5CC  AC 19 23   			ldy.h	_player_pos_y
 2719                        		__add.wi	32
         02:C5CF  18         			clc
         02:C5D0  69 20      			adc.l	#32
         02:C5D2  90 01      			bcc	!+
         02:C5D4  C8         			iny
         02:C5D5             	!:
 2720                        		__st.wmq	__check_FLOOR_R_end - 4  /* player_COLL_Y */
         02:C5D5  8D 1C 23   			sta.l	__check_FLOOR_R_end - 4
         02:C5D8  8C 1D 23   			sty.h	__check_FLOOR_R_end - 4
 2721                        	
 2722                        		.dbg	line,	"include\routines_LEVELS.c", 92; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
 2723                        		__ld.wm		__check_FLOOR_R_end - 2  /* player_COLL_X */
         02:C5DB  AD 1E 23   			lda.l	__check_FLOOR_R_end - 2
         02:C5DE  AC 1F 23   			ldy.h	__check_FLOOR_R_end - 2
 2724                        		__add.wm	_sgx_map_pxl_x
         02:C5E1  18         			clc
         02:C5E2  6D 64 23   			adc.l	_sgx_map_pxl_x
         02:C5E5  42         			say
         02:C5E6  6D 65 23   			adc.h	_sgx_map_pxl_x
         02:C5E9  42         			say
 2725                        		__st.wmq	map_pxl_x
         02:C5EA  85 FC      			sta.l	map_pxl_x
         02:C5EC  84 FD      			sty.h	map_pxl_x
 2726                        		__ld.wm		__check_FLOOR_R_end - 4  /* player_COLL_Y */
         02:C5EE  AD 1C 23   			lda.l	__check_FLOOR_R_end - 4
         02:C5F1  AC 1D 23   			ldy.h	__check_FLOOR_R_end - 4
 2727                        		__add.wm	_sgx_map_pxl_y
         02:C5F4  18         			clc
         02:C5F5  6D 66 23   			adc.l	_sgx_map_pxl_y
         02:C5F8  42         			say
         02:C5F9  6D 67 23   			adc.h	_sgx_map_pxl_y
         02:C5FC  42         			say
 2728                        		__st.wmq	map_pxl_y
         02:C5FD  85 FE      			sta.l	map_pxl_y
         02:C5FF  84 FF      			sty.h	map_pxl_y
 2729                        		__call		_get_map_block.2
         02:C601  20 9F FF   			call	_get_map_block.2
 2730                        	
 2731                        		.dbg	line,	"include\routines_LEVELS.c", 93; }
 2732    02:C604             	.LL7:
 2733                        		__return	1
         02:C604  AA         			tax
         02:C605  4C EF FF   			jmp	leave_proc
 2734                        		.dbg	clear
 2735                        		.endp
 2736                        		.pceas
 2737                        	
 2738                        		.dbg	line,	"include\routines_LEVELS.c", 96; int check_FLOOR_L()
 2739                        		.dbg	line,	"include\routines_LEVELS.c", 97; {
 2740                        	;***********************
 2741                        	;***********************
 2742                        	
 2743                        		.hucc
 2744    02:C608             		.proc		_check_FLOOR_L
 2745                        		__enter		_check_FLOOR_L
 2746                        	
 2747                        		.dbg	line,	"include\routines_LEVELS.c", 98; int player_COLL_X;
 2748                        	
 2749                        		.dbg	line,	"include\routines_LEVELS.c", 99; int player_COLL_Y;
 2750                        	
 2751                        		.dbg	line,	"include\routines_LEVELS.c", 102; player_COLL_X = player_pos_x + 10;
 2752                        		__ld.wm		_player_pos_x
         02:C608  AD 16 23   			lda.l	_player_pos_x
         02:C60B  AC 17 23   			ldy.h	_player_pos_x
 2753                        		__add.wi	10
         02:C60E  18         			clc
         02:C60F  69 0A      			adc.l	#10
         02:C611  90 01      			bcc	!+
         02:C613  C8         			iny
         02:C614             	!:
 2754                        		__st.wmq	__check_FLOOR_L_end - 2  /* player_COLL_X */
         02:C614  8D 1E 23   			sta.l	__check_FLOOR_L_end - 2
         02:C617  8C 1F 23   			sty.h	__check_FLOOR_L_end - 2
 2755                        	
 2756                        		.dbg	line,	"include\routines_LEVELS.c", 103; player_COLL_Y = player_pos_y + 32;//32
 2757                        		__ld.wm		_player_pos_y
         02:C61A  AD 18 23   			lda.l	_player_pos_y
         02:C61D  AC 19 23   			ldy.h	_player_pos_y
 2758                        		__add.wi	32
         02:C620  18         			clc
         02:C621  69 20      			adc.l	#32
         02:C623  90 01      			bcc	!+
         02:C625  C8         			iny
         02:C626             	!:
 2759                        		__st.wmq	__check_FLOOR_L_end - 4  /* player_COLL_Y */
         02:C626  8D 1C 23   			sta.l	__check_FLOOR_L_end - 4
         02:C629  8C 1D 23   			sty.h	__check_FLOOR_L_end - 4
 2760                        	
 2761                        		.dbg	line,	"include\routines_LEVELS.c", 106; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
 2762                        		__ld.wm		__check_FLOOR_L_end - 2  /* player_COLL_X */
         02:C62C  AD 1E 23   			lda.l	__check_FLOOR_L_end - 2
         02:C62F  AC 1F 23   			ldy.h	__check_FLOOR_L_end - 2
 2763                        		__add.wm	_sgx_map_pxl_x
         02:C632  18         			clc
         02:C633  6D 64 23   			adc.l	_sgx_map_pxl_x
         02:C636  42         			say
         02:C637  6D 65 23   			adc.h	_sgx_map_pxl_x
         02:C63A  42         			say
 2764                        		__st.wmq	map_pxl_x
         02:C63B  85 FC      			sta.l	map_pxl_x
         02:C63D  84 FD      			sty.h	map_pxl_x
 2765                        		__ld.wm		__check_FLOOR_L_end - 4  /* player_COLL_Y */
         02:C63F  AD 1C 23   			lda.l	__check_FLOOR_L_end - 4
         02:C642  AC 1D 23   			ldy.h	__check_FLOOR_L_end - 4
 2766                        		__add.wm	_sgx_map_pxl_y
         02:C645  18         			clc
         02:C646  6D 66 23   			adc.l	_sgx_map_pxl_y
         02:C649  42         			say
         02:C64A  6D 67 23   			adc.h	_sgx_map_pxl_y
         02:C64D  42         			say
 2767                        		__st.wmq	map_pxl_y
         02:C64E  85 FE      			sta.l	map_pxl_y
         02:C650  84 FF      			sty.h	map_pxl_y
 2768                        		__call		_get_map_block.2
         02:C652  20 9F FF   			call	_get_map_block.2
 2769                        	
 2770                        		.dbg	line,	"include\routines_LEVELS.c", 107; }
 2771    02:C655             	.LL8:
 2772                        		__return	1
         02:C655  AA         			tax
         02:C656  4C EF FF   			jmp	leave_proc
 2773                        		.dbg	clear
 2774                        		.endp
 2775                        		.pceas
 2776                        	
 2777                        		.dbg	line,	"include\routines_LEVELS.c", 110; int check_LADDER(unsigned char x_offset , unsigned char y_offset)
 2778                        		.dbg	line,	"include\routines_LEVELS.c", 111; {
 2779                        	;***********************
 2780                        	;***********************
 2781                        	
 2782                        		.hucc
 2783    02:C415             		.proc		_check_LADDER
 2784                        		__enter		_check_LADDER
 2785                        	
 2786                        		.dbg	line,	"include\routines_LEVELS.c", 112; int player_COLL_X;
 2787                        	
 2788                        		.dbg	line,	"include\routines_LEVELS.c", 113; int player_COLL_Y;
 2789                        	
 2790                        		.dbg	line,	"include\routines_LEVELS.c", 116; player_COLL_X = player_pos_x + x_offset;
 2791                        		__ld.wm		_player_pos_x
         02:C415  AD 16 23   			lda.l	_player_pos_x
         02:C418  AC 17 23   			ldy.h	_player_pos_x
 2792                        		__add.us	2  /* x_offset */
         02:C41B  A6 8D      			ldx	<__sp
         02:C41D  18         			clc
         02:C41E  75 0A      			adc	<__stack + 2, x
         02:C420  90 01      			bcc	!+
         02:C422  C8         			iny
         02:C423             	!:
 2793                        		__st.wmq	__check_LADDER_end - 2  /* player_COLL_X */
         02:C423  8D 1E 23   			sta.l	__check_LADDER_end - 2
         02:C426  8C 1F 23   			sty.h	__check_LADDER_end - 2
 2794                        	
 2795                        		.dbg	line,	"include\routines_LEVELS.c", 117; player_COLL_Y = player_pos_y + y_offset;
 2796                        		__ld.wm		_player_pos_y
         02:C429  AD 18 23   			lda.l	_player_pos_y
         02:C42C  AC 19 23   			ldy.h	_player_pos_y
 2797                        		__add.us	0  /* y_offset */
         02:C42F  A6 8D      			ldx	<__sp
         02:C431  18         			clc
         02:C432  75 08      			adc	<__stack + 0, x
         02:C434  90 01      			bcc	!+
         02:C436  C8         			iny
         02:C437             	!:
 2798                        		__st.wmq	__check_LADDER_end - 4  /* player_COLL_Y */
         02:C437  8D 1C 23   			sta.l	__check_LADDER_end - 4
         02:C43A  8C 1D 23   			sty.h	__check_LADDER_end - 4
 2799                        	
 2800                        		.dbg	line,	"include\routines_LEVELS.c", 120; get_map_block(player_COLL_X + sgx_map_pxl_x, player_COLL_Y + sgx_map_pxl_y);
 2801                        		__ld.wm		__check_LADDER_end - 2  /* player_COLL_X */
         02:C43D  AD 1E 23   			lda.l	__check_LADDER_end - 2
         02:C440  AC 1F 23   			ldy.h	__check_LADDER_end - 2
 2802                        		__add.wm	_sgx_map_pxl_x
         02:C443  18         			clc
         02:C444  6D 64 23   			adc.l	_sgx_map_pxl_x
         02:C447  42         			say
         02:C448  6D 65 23   			adc.h	_sgx_map_pxl_x
         02:C44B  42         			say
 2803                        		__st.wmq	map_pxl_x
         02:C44C  85 FC      			sta.l	map_pxl_x
         02:C44E  84 FD      			sty.h	map_pxl_x
 2804                        		__ld.wm		__check_LADDER_end - 4  /* player_COLL_Y */
         02:C450  AD 1C 23   			lda.l	__check_LADDER_end - 4
         02:C453  AC 1D 23   			ldy.h	__check_LADDER_end - 4
 2805                        		__add.wm	_sgx_map_pxl_y
         02:C456  18         			clc
         02:C457  6D 66 23   			adc.l	_sgx_map_pxl_y
         02:C45A  42         			say
         02:C45B  6D 67 23   			adc.h	_sgx_map_pxl_y
         02:C45E  42         			say
 2806                        		__st.wmq	map_pxl_y
         02:C45F  85 FE      			sta.l	map_pxl_y
         02:C461  84 FF      			sty.h	map_pxl_y
 2807                        		__call		_get_map_block.2
         02:C463  20 9F FF   			call	_get_map_block.2
 2808                        	
 2809                        		.dbg	line,	"include\routines_LEVELS.c", 121; }
 2810    02:C466             	.LL9:
 2811                        		__modsp		4
         02:C466  AA         			tax
         02:C467  A5 8D      			lda	<__sp
         02:C469  18         			clc
         02:C46A  69 04      			adc	#4
         02:C46C  85 8D      			sta	<__sp
         02:C46E  8A         			txa
 2812                        		__return	1
         02:C46F  AA         			tax
         02:C470  4C EF FF   			jmp	leave_proc
 2813                        		.dbg	clear
 2814                        		.endp
 2815                        		.pceas
 2816                        	
 2817                        		.dbg	line,	"include\routines_LEVELS.c", 130; void scroll_BG()
 2818                        		.dbg	line,	"include\routines_LEVELS.c", 131; {
 2819                        	;***********************
 2820                        	;***********************
 2821                        	
 2822                        		.hucc
 2823    02:C7EA             		.proc		_scroll_BG
 2824                        		__enter		_scroll_BG
 2825                        	
 2826                        		.dbg	line,	"include\routines_LEVELS.c", 132; // UPDATE VDC2 BG //
 2827                        	
 2828                        		.dbg	line,	"include\routines_LEVELS.c", 133; sgx_scroll_map();
 2829                        		__call		_sgx_scroll_map
         02:C7EA  20 95 FF   			call	_sgx_scroll_map
 2830                        	
 2831                        		.dbg	line,	"include\routines_LEVELS.c", 135; //--------------------------------------------------------------------------------------//
 2832                        	
 2833                        		.dbg	line,	"include\routines_LEVELS.c", 136; //                                        VDC 2                                         //
 2834                        	
 2835                        		.dbg	line,	"include\routines_LEVELS.c", 137; //--------------------------------------------------------------------------------------//
 2836                        	
 2837                        		.dbg	line,	"include\routines_LEVELS.c", 139; sgx_scroll_split(0,   0, sgx_map_pxl_x & (BAT_SIZE_W - 1), sgx_map_pxl_y & (BAT_SIZE_H - 1), BKG_ON | SPR_ON);
 2838                        		__st.umiq	0, _al
         02:C7ED  64 F8      			stz	_al
 2839                        		__st.umiq	0, _ah
         02:C7EF  64 F9      			stz	_ah
 2840                        		__ld.wm		_sgx_map_pxl_x
         02:C7F1  AD 64 23   			lda.l	_sgx_map_pxl_x
         02:C7F4  AC 65 23   			ldy.h	_sgx_map_pxl_x
 2841                        		__and.wi	2047
         02:C7F7  29 FF      			and.l	#2047
         02:C7F9  42         			say
         02:C7FA  29 07      			and.h	#2047
         02:C7FC  42         			say
 2842                        		__st.wmq	_bx
         02:C7FD  85 FA      			sta.l	_bx
         02:C7FF  84 FB      			sty.h	_bx
 2843                        		__ld.wm		_sgx_map_pxl_y
         02:C801  AD 66 23   			lda.l	_sgx_map_pxl_y
         02:C804  AC 67 23   			ldy.h	_sgx_map_pxl_y
 2844                        		__and.wi	255
         02:C807  29 FF      			and	#255
         02:C809  C2         			cly
 2845                        		__st.wmq	_cx
         02:C80A  85 FC      			sta.l	_cx
         02:C80C  84 FD      			sty.h	_cx
 2846                        		__st.umiq	192, _dl
         02:C80E  A9 C0      			lda.l	#192
         02:C810  85 FE      			sta	_dl
 2847                        		__call		_sgx_scroll_split.5
         02:C812  20 8B FF   			call	_sgx_scroll_split.5
 2848                        	
 2849                        		.dbg	line,	"include\routines_LEVELS.c", 140; }
 2850    02:C815             	.LL10:
 2851                        		__return	0
         02:C815  4C EF FF   			jmp	leave_proc
 2852                        		.dbg	clear
 2853                        		.endp
 2854                        		.pceas
 2855                        	
 2856                        		.dbg	line,	"include\routines_LEVELS.c", 143; void recenter_CAMERA()
 2857                        		.dbg	line,	"include\routines_LEVELS.c", 144; {
 2858                        	;***********************
 2859                        	;***********************
 2860                        	
 2861                        		.hucc
 2862    01:DDEA             		.proc		_recenter_CAMERA
 2863                        		__enter		_recenter_CAMERA
 2864                        	
 2865                        		.dbg	line,	"include\routines_LEVELS.c", 145; signed char camera_y_move;
 2866                        	
 2867                        		.dbg	line,	"include\routines_LEVELS.c", 147; spr_set(player_id);
 2868                        		__ld.umq	_player_id
         01:DDEA  AD 0D 23   			lda	_player_id
 2869                        		__call		_spr_set.1
         01:DDED  20 DD E7   			call	_spr_set.1
 2870                        	
 2871                        		.dbg	line,	"include\routines_LEVELS.c", 150; if(player_pos_y < 128)
 2872                        		__ld.wm		_player_pos_y
         01:DDF0  AD 18 23   			lda.l	_player_pos_y
         01:DDF3  AC 19 23   			ldy.h	_player_pos_y
 2873                        		__slt_w.wi	128
         01:DDF6  C9 80      			cmp.l	#128		; Subtract integer from Y:A.
         01:DDF8  98         			tya
         01:DDF9  E9 00      			sbc.h	#128
         01:DDFB  50 02      			bvc	!+
         01:DDFD  49 80      			eor	#$80		; -ve if Y:A < integer (signed).
         01:DDFF  0A         	!:		asl	a
 2874                        		__bfalse	.LL12
         01:DE00  90 65      			bcc	.LL12
 2875                        	
 2876                        		.dbg	line,	"include\routines_LEVELS.c", 151; {
 2877                        	
 2878                        		.dbg	line,	"include\routines_LEVELS.c", 152; player_pos_y += CAMERA_RECENTER_VELOCITY;
 2879                        		__add_st.wmiq	4, _player_pos_y
         01:DE02  18         			clc
         01:DE03  AD 18 23   			lda.l	_player_pos_y
         01:DE06  69 04      			adc.l	#4
         01:DE08  8D 18 23   			sta.l	_player_pos_y
         01:DE0B  90 03      			bcc	!+
         01:DE0D  EE 19 23   			inc.h	_player_pos_y
         01:DE10             	!:
 2880                        	
 2881                        		.dbg	line,	"include\routines_LEVELS.c", 154; if(player_pos_y > 128)
 2882                        		__ld.wm		_player_pos_y
         01:DE10  AD 18 23   			lda.l	_player_pos_y
         01:DE13  AC 19 23   			ldy.h	_player_pos_y
 2883                        		__sgt_w.wi	128
         01:DE16  18         			clc			; Subtract integer+1 from Y:A.
         01:DE17  E9 80      			sbc.l	#128
         01:DE19  98         			tya
         01:DE1A  E9 00      			sbc.h	#128
         01:DE1C  50 02      			bvc	!+
         01:DE1E  49 80      			eor	#$80		; +ve if Y:A > integer (signed).
         01:DE20  49 80      	!:		eor	#$80
         01:DE22  0A         			asl	a
 2884                        		__bfalse	.LL13
         01:DE23  90 19      			bcc	.LL13
 2885                        	
 2886                        		.dbg	line,	"include\routines_LEVELS.c", 155; {
 2887                        	
 2888                        		.dbg	line,	"include\routines_LEVELS.c", 156; //camera_y_move = (128 - player_pos_y);
 2889                        	
 2890                        		.dbg	line,	"include\routines_LEVELS.c", 157; camera_y_move = (player_pos_y - 128);
 2891                        		__ld.wm		_player_pos_y
         01:DE25  AD 18 23   			lda.l	_player_pos_y
         01:DE28  AC 19 23   			ldy.h	_player_pos_y
 2892                        		__sub.wi	128
         01:DE2B  38         			sec
         01:DE2C  E9 80      			sbc.l	#128
         01:DE2E  B0 01      			bcs	!+
         01:DE30  88         			dey
         01:DE31             	!:
 2893                        		__st.umq	__recenter_CAMERA_end - 1  /* camera_y_move */
         01:DE31  8D 1F 23   			sta	__recenter_CAMERA_end - 1
 2894                        	
 2895                        		.dbg	line,	"include\routines_LEVELS.c", 159; player_pos_y = 128;
 2896                        		__st.wmiq	128, _player_pos_y
         01:DE34  A9 80      			lda.l	#128
         01:DE36  8D 18 23   			sta.l	_player_pos_y
         01:DE39  9C 19 23   			stz.h	_player_pos_y
 2897                        	
 2898                        		.dbg	line,	"include\routines_LEVELS.c", 160; }
 2899                        	
 2900                        		.dbg	line,	"include\routines_LEVELS.c", 162; else
 2901                        		__bra		.LL14
         01:DE3C  80 05      			bra	.LL14
 2902    01:DE3E             	.LL13:
 2903                        	
 2904                        		.dbg	line,	"include\routines_LEVELS.c", 163; {
 2905                        	
 2906                        		.dbg	line,	"include\routines_LEVELS.c", 164; camera_y_move = CAMERA_RECENTER_VELOCITY;
 2907                        		__st.umiq	4, __recenter_CAMERA_end - 1  /* camera_y_move */
         01:DE3E  A9 04      			lda.l	#4
         01:DE40  8D 1F 23   			sta	__recenter_CAMERA_end - 1
 2908                        	
 2909                        		.dbg	line,	"include\routines_LEVELS.c", 165; }
 2910    01:DE43             	.LL14:
 2911                        	
 2912                        		.dbg	line,	"include\routines_LEVELS.c", 167; spr_y(player_pos_y);
 2913                        		__ld.wm		_player_pos_y
         01:DE43  AD 18 23   			lda.l	_player_pos_y
         01:DE46  AC 19 23   			ldy.h	_player_pos_y
 2914                        		__call		_spr_y.1
         01:DE49  20 19 E8   			call	_spr_y.1
 2915                        	
 2916                        		.dbg	line,	"include\routines_LEVELS.c", 169; sgx_map_pxl_y -= camera_y_move;
 2917                        		__ld.bm		__recenter_CAMERA_end - 1  /* camera_y_move */
         01:DE4C  AD 1F 23   			lda	__recenter_CAMERA_end - 1
         01:DE4F  C2         			cly
         01:DE50  10 01      			bpl	!+
         01:DE52  88         			dey
         01:DE53             	!:
 2918                        		__isub_st.wmq	_sgx_map_pxl_y
         01:DE53  38         			sec
         01:DE54  49 FF      			eor	#$FF
         01:DE56  6D 66 23   			adc.l	_sgx_map_pxl_y
         01:DE59  8D 66 23   			sta.l	_sgx_map_pxl_y
         01:DE5C  98         			tya
         01:DE5D  49 FF      			eor	#$FF
         01:DE5F  6D 67 23   			adc.h	_sgx_map_pxl_y
         01:DE62  8D 67 23   			sta.h	_sgx_map_pxl_y
 2919                        	
 2920                        		.dbg	line,	"include\routines_LEVELS.c", 170; }
 2921                        	
 2922                        		.dbg	line,	"include\routines_LEVELS.c", 173; else if(player_pos_y > 128)
 2923                        		__bra		.LL15
         01:DE65  80 71      			bra	.LL15
 2924    01:DE67             	.LL12:
 2925                        		__ld.wm		_player_pos_y
         01:DE67  AD 18 23   			lda.l	_player_pos_y
         01:DE6A  AC 19 23   			ldy.h	_player_pos_y
 2926                        		__sgt_w.wi	128
         01:DE6D  18         			clc			; Subtract integer+1 from Y:A.
         01:DE6E  E9 80      			sbc.l	#128
         01:DE70  98         			tya
         01:DE71  E9 00      			sbc.h	#128
         01:DE73  50 02      			bvc	!+
         01:DE75  49 80      			eor	#$80		; +ve if Y:A > integer (signed).
         01:DE77  49 80      	!:		eor	#$80
         01:DE79  0A         			asl	a
 2927                        		__bfalse	.LL16
         01:DE7A  90 5C      			bcc	.LL16
 2928                        	
 2929                        		.dbg	line,	"include\routines_LEVELS.c", 174; {
 2930                        	
 2931                        		.dbg	line,	"include\routines_LEVELS.c", 175; player_pos_y -= CAMERA_RECENTER_VELOCITY;
 2932                        		__sub_st.wmiq	4, _player_pos_y
         01:DE7C  38         			sec
         01:DE7D  AD 18 23   			lda.l	_player_pos_y
         01:DE80  E9 04      			sbc.l	#4
         01:DE82  8D 18 23   			sta.l	_player_pos_y
         01:DE85  B0 03      			bcs	!+
         01:DE87  CE 19 23   			dec.h	_player_pos_y
         01:DE8A             	!:
 2933                        	
 2934                        		.dbg	line,	"include\routines_LEVELS.c", 177; if(player_pos_y < 128)
 2935                        		__ld.wm		_player_pos_y
         01:DE8A  AD 18 23   			lda.l	_player_pos_y
         01:DE8D  AC 19 23   			ldy.h	_player_pos_y
 2936                        		__slt_w.wi	128
         01:DE90  C9 80      			cmp.l	#128		; Subtract integer from Y:A.
         01:DE92  98         			tya
         01:DE93  E9 00      			sbc.h	#128
         01:DE95  50 02      			bvc	!+
         01:DE97  49 80      			eor	#$80		; -ve if Y:A < integer (signed).
         01:DE99  0A         	!:		asl	a
 2937                        		__bfalse	.LL17
         01:DE9A  90 19      			bcc	.LL17
 2938                        	
 2939                        		.dbg	line,	"include\routines_LEVELS.c", 178; {
 2940                        	
 2941                        		.dbg	line,	"include\routines_LEVELS.c", 179; //camera_y_move = (player_pos_y - 128);
 2942                        	
 2943                        		.dbg	line,	"include\routines_LEVELS.c", 180; camera_y_move = (128 - player_pos_y);
 2944                        		__ld.wi		128
         01:DE9C  A9 80      			lda.l	#128
         01:DE9E  C2         			cly
 2945                        		__sub.wm	_player_pos_y
         01:DE9F  38         			sec
         01:DEA0  ED 18 23   			sbc.l	_player_pos_y
         01:DEA3  42         			say
         01:DEA4  ED 19 23   			sbc.h	_player_pos_y
         01:DEA7  42         			say
 2946                        		__st.umq	__recenter_CAMERA_end - 1  /* camera_y_move */
         01:DEA8  8D 1F 23   			sta	__recenter_CAMERA_end - 1
 2947                        	
 2948                        		.dbg	line,	"include\routines_LEVELS.c", 182; player_pos_y = 128;
 2949                        		__st.wmiq	128, _player_pos_y
         01:DEAB  A9 80      			lda.l	#128
         01:DEAD  8D 18 23   			sta.l	_player_pos_y
         01:DEB0  9C 19 23   			stz.h	_player_pos_y
 2950                        	
 2951                        		.dbg	line,	"include\routines_LEVELS.c", 183; }
 2952                        	
 2953                        		.dbg	line,	"include\routines_LEVELS.c", 185; else
 2954                        		__bra		.LL18
         01:DEB3  80 05      			bra	.LL18
 2955    01:DEB5             	.LL17:
 2956                        	
 2957                        		.dbg	line,	"include\routines_LEVELS.c", 186; {
 2958                        	
 2959                        		.dbg	line,	"include\routines_LEVELS.c", 187; camera_y_move = CAMERA_RECENTER_VELOCITY;
 2960                        		__st.umiq	4, __recenter_CAMERA_end - 1  /* camera_y_move */
         01:DEB5  A9 04      			lda.l	#4
         01:DEB7  8D 1F 23   			sta	__recenter_CAMERA_end - 1
 2961                        	
 2962                        		.dbg	line,	"include\routines_LEVELS.c", 188; }
 2963    01:DEBA             	.LL18:
 2964                        	
 2965                        		.dbg	line,	"include\routines_LEVELS.c", 190; spr_y(player_pos_y);
 2966                        		__ld.wm		_player_pos_y
         01:DEBA  AD 18 23   			lda.l	_player_pos_y
         01:DEBD  AC 19 23   			ldy.h	_player_pos_y
 2967                        		__call		_spr_y.1
         01:DEC0  20 19 E8   			call	_spr_y.1
 2968                        	
 2969                        		.dbg	line,	"include\routines_LEVELS.c", 192; sgx_map_pxl_y += camera_y_move;
 2970                        		__ld.bm		__recenter_CAMERA_end - 1  /* camera_y_move */
         01:DEC3  AD 1F 23   			lda	__recenter_CAMERA_end - 1
         01:DEC6  C2         			cly
         01:DEC7  10 01      			bpl	!+
         01:DEC9  88         			dey
         01:DECA             	!:
 2971                        		__add_st.wmq	_sgx_map_pxl_y
         01:DECA  18         			clc
         01:DECB  6D 66 23   			adc.l	_sgx_map_pxl_y
         01:DECE  8D 66 23   			sta.l	_sgx_map_pxl_y
         01:DED1  98         			tya
         01:DED2  6D 67 23   			adc.h	_sgx_map_pxl_y
         01:DED5  8D 67 23   			sta.h	_sgx_map_pxl_y
 2972                        	
 2973                        		.dbg	line,	"include\routines_LEVELS.c", 193; }
 2974                        	
 2975                        		.dbg	line,	"include\routines_LEVELS.c", 194; }
 2976    01:DED8             	.LL16:
 2977    01:DED8             	.LL15:
 2978    01:DED8             	.LL11:
 2979                        		__return	0
         01:DED8  4C EF FF   			jmp	leave_proc
 2980                        		.dbg	clear
 2981                        		.endp
 2982                        		.pceas
 2983                        	
 2984                        		.dbg	line,	"include\routines_LEVELS.c", 203; void joypad_BUTTONS()
 2985                        		.dbg	line,	"include\routines_LEVELS.c", 204; {
 2986                        	;***********************
 2987                        	;***********************
 2988                        	
 2989                        		.hucc
 2990    02:C000             		.proc		_joypad_BUTTONS
 2991                        		__enter		_joypad_BUTTONS
 2992                        	
 2993                        		.dbg	line,	"include\routines_LEVELS.c", 205; if(joytrg(JOYPAD_1) == JOY_I)
 2994                        		__ld.uiq	0
         02:C000  62         			cla
 2995                        		 _joytrg.1
         02:C001  AA         			tax
         02:C002  BD 2D 22   			lda	joytrg, x
         02:C005  BC DD 22   			ldy	joy6trg, x
 2996                        		__equ_w.wi	1
         02:C008  C9 01      			cmp.l	#1
         02:C00A  D0 04      			bne	!false+
         02:C00C  C0 00      			cpy.h	#1
         02:C00E  F0 01      			beq	!+
         02:C010  18         	!false:		clc
         02:C011             	!:
 2997                        		__bfalse	.LL20
         02:C011  B0 03 4C D1			bcc	.LL20
         02:C015  C0          
 2998                        	
 2999                        		.dbg	line,	"include\routines_LEVELS.c", 206; {
 3000                        	
 3001                        		.dbg	line,	"include\routines_LEVELS.c", 207; if(player_state == STATE_IDLE)
 3002                        		__not.um	_player_state
         02:C016  AD 0E 23   			lda	_player_state
         02:C019  18         			clc
         02:C01A  D0 01      			bne	!+
         02:C01C  38         			sec
         02:C01D             	!:
 3003                        		__bfalse	.LL21
         02:C01D  90 0B      			bcc	.LL21
 3004                        	
 3005                        		.dbg	line,	"include\routines_LEVELS.c", 208; {
 3006                        	
 3007                        		.dbg	line,	"include\routines_LEVELS.c", 209; player_counter_anim = 0;
 3008                        		__st.umiq	0, _player_counter_anim
         02:C01F  9C 11 23   			stz	_player_counter_anim
 3009                        	
 3010                        		.dbg	line,	"include\routines_LEVELS.c", 211; player_state = STATE_JUMP;
 3011                        		__st.umiq	4, _player_state
         02:C022  A9 04      			lda.l	#4
         02:C024  8D 0E 23   			sta	_player_state
 3012                        	
 3013                        		.dbg	line,	"include\routines_LEVELS.c", 212; }
 3014                        	
 3015                        		.dbg	line,	"include\routines_LEVELS.c", 215; else if(player_state == STATE_WALK)
 3016                        		__bra		.LL22
         02:C027  4C D1 C0   			bra	.LL22
 3017    02:C02A             	.LL21:
 3018                        		__ld.umq	_player_state
         02:C02A  AD 0E 23   			lda	_player_state
 3019                        		__equ_b.uiq	1
         02:C02D  C9 01      			cmp	#1
         02:C02F  F0 01      			beq	!+
         02:C031  18         			clc
         02:C032             	!:
 3020                        		__bfalse	.LL23
         02:C032  90 13      			bcc	.LL23
 3021                        	
 3022                        		.dbg	line,	"include\routines_LEVELS.c", 216; {
 3023                        	
 3024                        		.dbg	line,	"include\routines_LEVELS.c", 217; player_counter_anim = 0;
 3025                        		__st.umiq	0, _player_counter_anim
         02:C034  9C 11 23   			stz	_player_counter_anim
 3026                        	
 3027                        		.dbg	line,	"include\routines_LEVELS.c", 219; player_state = STATE_JUMP_RIGHT + player_axis;
 3028                        		__ld.wi		5
         02:C037  A9 05      			lda.l	#5
         02:C039  C2         			cly
 3029                        		__add.um	_player_axis
         02:C03A  18         			clc
         02:C03B  6D 0F 23   			adc	_player_axis
         02:C03E  90 01      			bcc	!+
         02:C040  C8         			iny
         02:C041             	!:
 3030                        		__st.umq	_player_state
         02:C041  8D 0E 23   			sta	_player_state
 3031                        	
 3032                        		.dbg	line,	"include\routines_LEVELS.c", 220; }
 3033                        	
 3034                        		.dbg	line,	"include\routines_LEVELS.c", 223; else if(player_state == STATE_HANG || player_state == STATE_CLIMB_UP || player_state == STATE_CLIMB_DOWN)
 3035                        		__bra		.LL24
         02:C044  4C D1 C0   			bra	.LL24
 3036    02:C047             	.LL23:
 3037                        		__ld.umq	_player_state
         02:C047  AD 0E 23   			lda	_player_state
 3038                        		__equ_b.uiq	10
         02:C04A  C9 0A      			cmp	#10
         02:C04C  F0 01      			beq	!+
         02:C04E  18         			clc
         02:C04F             	!:
 3039                        		__btrue		.LL26
         02:C04F  B0 08      			bcs	.LL26
 3040                        		__ld.umq	_player_state
         02:C051  AD 0E 23   			lda	_player_state
 3041                        		__equ_b.uiq	11
         02:C054  C9 0B      			cmp	#11
         02:C056  F0 01      			beq	!+
         02:C058  18         			clc
         02:C059             	!:
 3042    02:C059             	.LL26:
 3043                        		__btrue		.LL27
         02:C059  B0 08      			bcs	.LL27
 3044                        		__ld.umq	_player_state
         02:C05B  AD 0E 23   			lda	_player_state
 3045                        		__equ_b.uiq	12
         02:C05E  C9 0C      			cmp	#12
         02:C060  F0 01      			beq	!+
         02:C062  18         			clc
         02:C063             	!:
 3046    02:C063             	.LL27:
 3047                        		__bfalse	.LL25
         02:C063  90 6C      			bcc	.LL25
 3048                        	
 3049                        		.dbg	line,	"include\routines_LEVELS.c", 224; {
 3050                        	
 3051                        		.dbg	line,	"include\routines_LEVELS.c", 225; if(joy(JOYPAD_1) & JOY_RIGHT)
 3052                        		__ld.uiq	0
         02:C065  62         			cla
 3053                        		 _joy.1
         02:C066  AA         			tax
         02:C067  BD 28 22   			lda	joynow, x
         02:C06A  BC D3 22   			ldy	joy6now, x
 3054                        		__tand.wi	32
         02:C06D  29 20      			and	#32
         02:C06F  C9 01      	!:		cmp	#1
 3055                        		__bfalse	.LL28
         02:C071  90 0A      			bcc	.LL28
 3056                        	
 3057                        		.dbg	line,	"include\routines_LEVELS.c", 226; {
 3058                        	
 3059                        		.dbg	line,	"include\routines_LEVELS.c", 227; player_counter_anim = 0;
 3060                        		__st.umiq	0, _player_counter_anim
         02:C073  9C 11 23   			stz	_player_counter_anim
 3061                        	
 3062                        		.dbg	line,	"include\routines_LEVELS.c", 229; player_state = STATE_JUMP_RIGHT;
 3063                        		__st.umiq	5, _player_state
         02:C076  A9 05      			lda.l	#5
         02:C078  8D 0E 23   			sta	_player_state
 3064                        	
 3065                        		.dbg	line,	"include\routines_LEVELS.c", 230; }
 3066                        	
 3067                        		.dbg	line,	"include\routines_LEVELS.c", 232; else if(joy(JOYPAD_1) & JOY_LEFT)
 3068                        		__bra		.LL29
         02:C07B  80 54      			bra	.LL29
 3069    02:C07D             	.LL28:
 3070                        		__ld.uiq	0
         02:C07D  62         			cla
 3071                        		 _joy.1
         02:C07E  AA         			tax
         02:C07F  BD 28 22   			lda	joynow, x
         02:C082  BC D3 22   			ldy	joy6now, x
 3072                        		__tand.wi	128
         02:C085  29 80      			and	#128
         02:C087  C9 01      	!:		cmp	#1
 3073                        		__bfalse	.LL30
         02:C089  90 0A      			bcc	.LL30
 3074                        	
 3075                        		.dbg	line,	"include\routines_LEVELS.c", 233; {
 3076                        	
 3077                        		.dbg	line,	"include\routines_LEVELS.c", 234; player_counter_anim = 0;
 3078                        		__st.umiq	0, _player_counter_anim
         02:C08B  9C 11 23   			stz	_player_counter_anim
 3079                        	
 3080                        		.dbg	line,	"include\routines_LEVELS.c", 236; player_state = STATE_JUMP_LEFT;
 3081                        		__st.umiq	6, _player_state
         02:C08E  A9 06      			lda.l	#6
         02:C090  8D 0E 23   			sta	_player_state
 3082                        	
 3083                        		.dbg	line,	"include\routines_LEVELS.c", 237; }
 3084                        	
 3085                        		.dbg	line,	"include\routines_LEVELS.c", 239; else if(joy(JOYPAD_1) & JOY_UP)
 3086                        		__bra		.LL31
         02:C093  80 3C      			bra	.LL31
 3087    02:C095             	.LL30:
 3088                        		__ld.uiq	0
         02:C095  62         			cla
 3089                        		 _joy.1
         02:C096  AA         			tax
         02:C097  BD 28 22   			lda	joynow, x
         02:C09A  BC D3 22   			ldy	joy6now, x
 3090                        		__tand.wi	16
         02:C09D  29 10      			and	#16
         02:C09F  C9 01      	!:		cmp	#1
 3091                        		__bfalse	.LL32
         02:C0A1  90 2E      			bcc	.LL32
 3092                        	
 3093                        		.dbg	line,	"include\routines_LEVELS.c", 240; {
 3094                        	
 3095                        		.dbg	line,	"include\routines_LEVELS.c", 241; player_counter_anim = 0;
 3096                        		__st.umiq	0, _player_counter_anim
         02:C0A3  9C 11 23   			stz	_player_counter_anim
 3097                        	
 3098                        		.dbg	line,	"include\routines_LEVELS.c", 243; check_LADDER( 15 , 8 );
 3099                        		__ld.wi		15
         02:C0A6  A9 0F      			lda.l	#15
         02:C0A8  C2         			cly
 3100                        		__pusharg.wr
         02:C0A9  A6 8D      			ldx	<__sp
         02:C0AB  CA         			dex
         02:C0AC  CA         			dex
         02:C0AD  95 08      			sta.l	<__stack, x
         02:C0AF  94 09      			sty.h	<__stack, x
         02:C0B1  86 8D      			stx	<__sp
 3101                        		__ld.wi		8
         02:C0B3  A9 08      			lda.l	#8
         02:C0B5  C2         			cly
 3102                        		__pusharg.wr
         02:C0B6  A6 8D      			ldx	<__sp
         02:C0B8  CA         			dex
         02:C0B9  CA         			dex
         02:C0BA  95 08      			sta.l	<__stack, x
         02:C0BC  94 09      			sty.h	<__stack, x
         02:C0BE  86 8D      			stx	<__sp
 3103                        		__call		_check_LADDER
         02:C0C0  20 81 FF   			call	_check_LADDER
 3104                        	
 3105                        		.dbg	line,	"include\routines_LEVELS.c", 245; if(map_blk_flag == TILE_EMPTY)
 3106                        		__not.um	_map_blk_flag
         02:C0C3  AD 85 28   			lda	_map_blk_flag
         02:C0C6  18         			clc
         02:C0C7  D0 01      			bne	!+
         02:C0C9  38         			sec
         02:C0CA             	!:
 3107                        		__bfalse	.LL33
         02:C0CA  90 05      			bcc	.LL33
 3108                        	
 3109                        		.dbg	line,	"include\routines_LEVELS.c", 246; {
 3110                        	
 3111                        		.dbg	line,	"include\routines_LEVELS.c", 247; player_state = STATE_JUMP_LADDER;
 3112                        		__st.umiq	13, _player_state
         02:C0CC  A9 0D      			lda.l	#13
         02:C0CE  8D 0E 23   			sta	_player_state
 3113                        	
 3114                        		.dbg	line,	"include\routines_LEVELS.c", 248; }
 3115                        	
 3116                        		.dbg	line,	"include\routines_LEVELS.c", 249; }
 3117    02:C0D1             	.LL33:
 3118                        	
 3119                        		.dbg	line,	"include\routines_LEVELS.c", 250; }
 3120    02:C0D1             	.LL32:
 3121    02:C0D1             	.LL31:
 3122    02:C0D1             	.LL29:
 3123                        	
 3124                        		.dbg	line,	"include\routines_LEVELS.c", 251; }
 3125    02:C0D1             	.LL25:
 3126    02:C0D1             	.LL24:
 3127    02:C0D1             	.LL22:
 3128                        	
 3129                        		.dbg	line,	"include\routines_LEVELS.c", 252; }
 3130    02:C0D1             	.LL20:
 3131    02:C0D1             	.LL19:
 3132                        		__return	0
         02:C0D1  4C EF FF   			jmp	leave_proc
 3133                        		.dbg	clear
 3134                        		.endp
 3135                        		.pceas
 3136                        	
 3137                        		.dbg	line,	"include\routines_LEVELS.c", 255; void joypad_DIR()
 3138                        		.dbg	line,	"include\routines_LEVELS.c", 256; {
 3139                        	;***********************
 3140                        	;***********************
 3141                        	
 3142                        		.hucc
 3143    01:D9D6             		.proc		_joypad_DIR
 3144                        		__enter		_joypad_DIR
 3145                        	
 3146                        		.dbg	line,	"include\routines_LEVELS.c", 257; //--------------------------------------------------------------------------------------//
 3147                        	
 3148                        		.dbg	line,	"include\routines_LEVELS.c", 258; //                                        NO DIR                                        //
 3149                        	
 3150                        		.dbg	line,	"include\routines_LEVELS.c", 259; //--------------------------------------------------------------------------------------//
 3151                        	
 3152                        		.dbg	line,	"include\routines_LEVELS.c", 261; if(! (joy(JOYPAD_1) & JOY_DIR_PRESSED) )
 3153                        		__ld.uiq	0
         01:D9D6  62         			cla
 3154                        		 _joy.1
         01:D9D7  AA         			tax
         01:D9D8  BD 28 22   			lda	joynow, x
         01:D9DB  BC D3 22   			ldy	joy6now, x
 3155                        		__nand.wi	240
         01:D9DE  18         			clc
         01:D9DF  29 F0      			and	#240
         01:D9E1  D0 01      			bne	!+
         01:D9E3  38         			sec
         01:D9E4             	!:
 3156                        		__bfalse	.LL35
         01:D9E4  90 3C      			bcc	.LL35
 3157                        	
 3158                        		.dbg	line,	"include\routines_LEVELS.c", 262; {
 3159                        	
 3160                        		.dbg	line,	"include\routines_LEVELS.c", 263; if(player_state == STATE_WALK || player_state == STATE_CROUCH)
 3161                        		__ld.umq	_player_state
         01:D9E6  AD 0E 23   			lda	_player_state
 3162                        		__equ_b.uiq	1
         01:D9E9  C9 01      			cmp	#1
         01:D9EB  F0 01      			beq	!+
         01:D9ED  18         			clc
         01:D9EE             	!:
 3163                        		__btrue		.LL37
         01:D9EE  B0 08      			bcs	.LL37
 3164                        		__ld.umq	_player_state
         01:D9F0  AD 0E 23   			lda	_player_state
 3165                        		__equ_b.uiq	7
         01:D9F3  C9 07      			cmp	#7
         01:D9F5  F0 01      			beq	!+
         01:D9F7  18         			clc
         01:D9F8             	!:
 3166    01:D9F8             	.LL37:
 3167                        		__bfalse	.LL36
         01:D9F8  90 0A      			bcc	.LL36
 3168                        	
 3169                        		.dbg	line,	"include\routines_LEVELS.c", 264; {
 3170                        	
 3171                        		.dbg	line,	"include\routines_LEVELS.c", 265; player_counter_anim = 1;
 3172                        		__st.umiq	1, _player_counter_anim
         01:D9FA  A9 01      			lda.l	#1
         01:D9FC  8D 11 23   			sta	_player_counter_anim
 3173                        	
 3174                        		.dbg	line,	"include\routines_LEVELS.c", 266; player_state = STATE_IDLE;
 3175                        		__st.umiq	0, _player_state
         01:D9FF  9C 0E 23   			stz	_player_state
 3176                        	
 3177                        		.dbg	line,	"include\routines_LEVELS.c", 267; }
 3178                        	
 3179                        		.dbg	line,	"include\routines_LEVELS.c", 270; else if(player_state == STATE_CLIMB_UP || player_state == STATE_CLIMB_DOWN)
 3180                        		__bra		.LL38
         01:DA02  80 1E      			bra	.LL38
 3181    01:DA04             	.LL36:
 3182                        		__ld.umq	_player_state
         01:DA04  AD 0E 23   			lda	_player_state
 3183                        		__equ_b.uiq	11
         01:DA07  C9 0B      			cmp	#11
         01:DA09  F0 01      			beq	!+
         01:DA0B  18         			clc
         01:DA0C             	!:
 3184                        		__btrue		.LL40
         01:DA0C  B0 08      			bcs	.LL40
 3185                        		__ld.umq	_player_state
         01:DA0E  AD 0E 23   			lda	_player_state
 3186                        		__equ_b.uiq	12
         01:DA11  C9 0C      			cmp	#12
         01:DA13  F0 01      			beq	!+
         01:DA15  18         			clc
         01:DA16             	!:
 3187    01:DA16             	.LL40:
 3188                        		__bfalse	.LL39
         01:DA16  90 0A      			bcc	.LL39
 3189                        	
 3190                        		.dbg	line,	"include\routines_LEVELS.c", 271; {
 3191                        	
 3192                        		.dbg	line,	"include\routines_LEVELS.c", 272; player_counter_anim = 1;
 3193                        		__st.umiq	1, _player_counter_anim
         01:DA18  A9 01      			lda.l	#1
         01:DA1A  8D 11 23   			sta	_player_counter_anim
 3194                        	
 3195                        		.dbg	line,	"include\routines_LEVELS.c", 273; player_state = STATE_HANG;
 3196                        		__st.umiq	10, _player_state
         01:DA1D  A9 0A      			lda.l	#10
         01:DA1F  8D 0E 23   			sta	_player_state
 3197                        	
 3198                        		.dbg	line,	"include\routines_LEVELS.c", 274; }
 3199                        	
 3200                        		.dbg	line,	"include\routines_LEVELS.c", 275; }
 3201    01:DA22             	.LL39:
 3202    01:DA22             	.LL38:
 3203                        	
 3204                        		.dbg	line,	"include\routines_LEVELS.c", 278; //--------------------------------------------------------------------------------------//
 3205                        	
 3206                        		.dbg	line,	"include\routines_LEVELS.c", 279; //                                     RIGHT BUTTON                                     //
 3207                        	
 3208                        		.dbg	line,	"include\routines_LEVELS.c", 280; //--------------------------------------------------------------------------------------//
 3209                        	
 3210                        		.dbg	line,	"include\routines_LEVELS.c", 282; if(joy(JOYPAD_1) & JOY_RIGHT)
 3211    01:DA22             	.LL35:
 3212                        		__ld.uiq	0
         01:DA22  62         			cla
 3213                        		 _joy.1
         01:DA23  AA         			tax
         01:DA24  BD 28 22   			lda	joynow, x
         01:DA27  BC D3 22   			ldy	joy6now, x
 3214                        		__tand.wi	32
         01:DA2A  29 20      			and	#32
         01:DA2C  C9 01      	!:		cmp	#1
 3215                        		__bfalse	.LL41
         01:DA2E  B0 03 4C 0B			bcc	.LL41
         01:DA32  DB          
 3216                        	
 3217                        		.dbg	line,	"include\routines_LEVELS.c", 283; {
 3218                        	
 3219                        		.dbg	line,	"include\routines_LEVELS.c", 284; if(player_state == STATE_IDLE || player_state == STATE_WALK)
 3220                        		__not.um	_player_state
         01:DA33  AD 0E 23   			lda	_player_state
         01:DA36  18         			clc
         01:DA37  D0 01      			bne	!+
         01:DA39  38         			sec
         01:DA3A             	!:
 3221                        		__btrue		.LL43
         01:DA3A  B0 08      			bcs	.LL43
 3222                        		__ld.umq	_player_state
         01:DA3C  AD 0E 23   			lda	_player_state
 3223                        		__equ_b.uiq	1
         01:DA3F  C9 01      			cmp	#1
         01:DA41  F0 01      			beq	!+
         01:DA43  18         			clc
         01:DA44             	!:
 3224    01:DA44             	.LL43:
 3225                        		__bfalse	.LL42
         01:DA44  90 47      			bcc	.LL42
 3226                        	
 3227                        		.dbg	line,	"include\routines_LEVELS.c", 285; {
 3228                        	
 3229                        		.dbg	line,	"include\routines_LEVELS.c", 286; player_axis = AXIS_RIGHT;
 3230                        		__st.umiq	0, _player_axis
         01:DA46  9C 0F 23   			stz	_player_axis
 3231                        	
 3232                        		.dbg	line,	"include\routines_LEVELS.c", 288; if(player_previous_axis != player_axis)
 3233                        		__ld.umq	_player_previous_axis
         01:DA49  AD 10 23   			lda	_player_previous_axis
 3234                        		__neq_b.umq	_player_axis
         01:DA4C  38         			sec
         01:DA4D  4D 0F 23   			eor	_player_axis
         01:DA50  D0 01      			bne	!+
         01:DA52  18         			clc
         01:DA53             	!:
 3235                        		__bfalse	.LL44
         01:DA53  90 15      			bcc	.LL44
 3236                        	
 3237                        		.dbg	line,	"include\routines_LEVELS.c", 289; {
 3238                        	
 3239                        		.dbg	line,	"include\routines_LEVELS.c", 290; player_previous_axis = player_axis;
 3240                        		__ld.um		_player_axis
         01:DA55  AD 0F 23   			lda	_player_axis
         01:DA58  C2         			cly
 3241                        		__st.umq	_player_previous_axis
         01:DA59  8D 10 23   			sta	_player_previous_axis
 3242                        	
 3243                        		.dbg	line,	"include\routines_LEVELS.c", 292; spr_set(player_id);
 3244                        		__ld.umq	_player_id
         01:DA5C  AD 0D 23   			lda	_player_id
 3245                        		__call		_spr_set.1
         01:DA5F  20 DD E7   			call	_spr_set.1
 3246                        	
 3247                        		.dbg	line,	"include\routines_LEVELS.c", 293; spr_ctrl(FLIP_MAS, NO_FLIP_X);
 3248                        		__st.umiq	136, _al
         01:DA62  A9 88      			lda.l	#136
         01:DA64  85 F8      			sta	_al
 3249                        		__ld.uiq	0
         01:DA66  62         			cla
 3250                        		__call		_spr_ctrl.2
         01:DA67  20 3C E8   			call	_spr_ctrl.2
 3251                        	
 3252                        		.dbg	line,	"include\routines_LEVELS.c", 294; }
 3253                        	
 3254                        		.dbg	line,	"include\routines_LEVELS.c", 296; if(joy(JOYPAD_1) & JOY_DOWN)
 3255    01:DA6A             	.LL44:
 3256                        		__ld.uiq	0
         01:DA6A  62         			cla
 3257                        		 _joy.1
         01:DA6B  AA         			tax
         01:DA6C  BD 28 22   			lda	joynow, x
         01:DA6F  BC D3 22   			ldy	joy6now, x
 3258                        		__tand.wi	64
         01:DA72  29 40      			and	#64
         01:DA74  C9 01      	!:		cmp	#1
 3259                        		__bfalse	.LL45
         01:DA76  90 0D      			bcc	.LL45
 3260                        	
 3261                        		.dbg	line,	"include\routines_LEVELS.c", 297; {
 3262                        	
 3263                        		.dbg	line,	"include\routines_LEVELS.c", 298; player_counter_anim = 1;
 3264                        		__st.umiq	1, _player_counter_anim
         01:DA78  A9 01      			lda.l	#1
         01:DA7A  8D 11 23   			sta	_player_counter_anim
 3265                        	
 3266                        		.dbg	line,	"include\routines_LEVELS.c", 299; player_state = STATE_CROUCH;
 3267                        		__st.umiq	7, _player_state
         01:DA7D  A9 07      			lda.l	#7
         01:DA7F  8D 0E 23   			sta	_player_state
 3268                        	
 3269                        		.dbg	line,	"include\routines_LEVELS.c", 300; return;
 3270                        		__bra		.LL34
         01:DA82  4C E7 DD   			bra	.LL34
 3271                        	
 3272                        		.dbg	line,	"include\routines_LEVELS.c", 301; }
 3273                        	
 3274                        		.dbg	line,	"include\routines_LEVELS.c", 303; player_state = STATE_WALK;
 3275    01:DA85             	.LL45:
 3276                        		__st.umiq	1, _player_state
         01:DA85  A9 01      			lda.l	#1
         01:DA87  8D 0E 23   			sta	_player_state
 3277                        	
 3278                        		.dbg	line,	"include\routines_LEVELS.c", 304; }
 3279                        	
 3280                        		.dbg	line,	"include\routines_LEVELS.c", 307; else if(player_state == STATE_JUMP || player_state == STATE_JUMP_LEFT || player_state == STATE_CROUCH || player_state == STATE_FALL || player_state == STATE_HANG)
 3281                        		__bra		.LL46
         01:DA8A  4C E7 DD   			bra	.LL46
 3282    01:DA8D             	.LL42:
 3283                        		__ld.umq	_player_state
         01:DA8D  AD 0E 23   			lda	_player_state
 3284                        		__equ_b.uiq	4
         01:DA90  C9 04      			cmp	#4
         01:DA92  F0 01      			beq	!+
         01:DA94  18         			clc
         01:DA95             	!:
 3285                        		__btrue		.LL48
         01:DA95  B0 08      			bcs	.LL48
 3286                        		__ld.umq	_player_state
         01:DA97  AD 0E 23   			lda	_player_state
 3287                        		__equ_b.uiq	6
         01:DA9A  C9 06      			cmp	#6
         01:DA9C  F0 01      			beq	!+
         01:DA9E  18         			clc
         01:DA9F             	!:
 3288    01:DA9F             	.LL48:
 3289                        		__btrue		.LL49
         01:DA9F  B0 08      			bcs	.LL49
 3290                        		__ld.umq	_player_state
         01:DAA1  AD 0E 23   			lda	_player_state
 3291                        		__equ_b.uiq	7
         01:DAA4  C9 07      			cmp	#7
         01:DAA6  F0 01      			beq	!+
         01:DAA8  18         			clc
         01:DAA9             	!:
 3292    01:DAA9             	.LL49:
 3293                        		__btrue		.LL50
         01:DAA9  B0 08      			bcs	.LL50
 3294                        		__ld.umq	_player_state
         01:DAAB  AD 0E 23   			lda	_player_state
 3295                        		__equ_b.uiq	9
         01:DAAE  C9 09      			cmp	#9
         01:DAB0  F0 01      			beq	!+
         01:DAB2  18         			clc
         01:DAB3             	!:
 3296    01:DAB3             	.LL50:
 3297                        		__btrue		.LL51
         01:DAB3  B0 08      			bcs	.LL51
 3298                        		__ld.umq	_player_state
         01:DAB5  AD 0E 23   			lda	_player_state
 3299                        		__equ_b.uiq	10
         01:DAB8  C9 0A      			cmp	#10
         01:DABA  F0 01      			beq	!+
         01:DABC  18         			clc
         01:DABD             	!:
 3300    01:DABD             	.LL51:
 3301                        		__bfalse	.LL47
         01:DABD  90 28      			bcc	.LL47
 3302                        	
 3303                        		.dbg	line,	"include\routines_LEVELS.c", 308; {
 3304                        	
 3305                        		.dbg	line,	"include\routines_LEVELS.c", 309; if(player_axis == AXIS_LEFT)
 3306                        		__ld.umq	_player_axis
         01:DABF  AD 0F 23   			lda	_player_axis
 3307                        		__equ_b.uiq	1
         01:DAC2  C9 01      			cmp	#1
         01:DAC4  F0 01      			beq	!+
         01:DAC6  18         			clc
         01:DAC7             	!:
 3308                        		__bfalse	.LL52
         01:DAC7  B0 03 4C E7			bcc	.LL52
         01:DACB  DD          
 3309                        	
 3310                        		.dbg	line,	"include\routines_LEVELS.c", 310; {
 3311                        	
 3312                        		.dbg	line,	"include\routines_LEVELS.c", 311; player_axis = AXIS_RIGHT;
 3313                        		__st.umiq	0, _player_axis
         01:DACC  9C 0F 23   			stz	_player_axis
 3314                        	
 3315                        		.dbg	line,	"include\routines_LEVELS.c", 312; player_previous_axis = player_axis;
 3316                        		__ld.um		_player_axis
         01:DACF  AD 0F 23   			lda	_player_axis
         01:DAD2  C2         			cly
 3317                        		__st.umq	_player_previous_axis
         01:DAD3  8D 10 23   			sta	_player_previous_axis
 3318                        	
 3319                        		.dbg	line,	"include\routines_LEVELS.c", 314; spr_set(player_id);
 3320                        		__ld.umq	_player_id
         01:DAD6  AD 0D 23   			lda	_player_id
 3321                        		__call		_spr_set.1
         01:DAD9  20 DD E7   			call	_spr_set.1
 3322                        	
 3323                        		.dbg	line,	"include\routines_LEVELS.c", 315; spr_ctrl(FLIP_MAS, NO_FLIP_X);
 3324                        		__st.umiq	136, _al
         01:DADC  A9 88      			lda.l	#136
         01:DADE  85 F8      			sta	_al
 3325                        		__ld.uiq	0
         01:DAE0  62         			cla
 3326                        		__call		_spr_ctrl.2
         01:DAE1  20 3C E8   			call	_spr_ctrl.2
 3327                        	
 3328                        		.dbg	line,	"include\routines_LEVELS.c", 316; }
 3329                        	
 3330                        		.dbg	line,	"include\routines_LEVELS.c", 317; }
 3331    01:DAE4             	.LL52	.alias		.LL53
 3332                        	
 3333                        		.dbg	line,	"include\routines_LEVELS.c", 320; else if(player_state == STATE_CLIMB_UP || player_state == STATE_CLIMB_DOWN)
 3334                        		__bra		.LL53
         01:DAE4  4C E7 DD   			bra	.LL53
 3335    01:DAE7             	.LL47:
 3336                        		__ld.umq	_player_state
         01:DAE7  AD 0E 23   			lda	_player_state
 3337                        		__equ_b.uiq	11
         01:DAEA  C9 0B      			cmp	#11
         01:DAEC  F0 01      			beq	!+
         01:DAEE  18         			clc
         01:DAEF             	!:
 3338                        		__btrue		.LL55
         01:DAEF  B0 08      			bcs	.LL55
 3339                        		__ld.umq	_player_state
         01:DAF1  AD 0E 23   			lda	_player_state
 3340                        		__equ_b.uiq	12
         01:DAF4  C9 0C      			cmp	#12
         01:DAF6  F0 01      			beq	!+
         01:DAF8  18         			clc
         01:DAF9             	!:
 3341    01:DAF9             	.LL55:
 3342                        		__bfalse	.LL54
         01:DAF9  B0 03 4C E7			bcc	.LL54
         01:DAFD  DD          
 3343                        	
 3344                        		.dbg	line,	"include\routines_LEVELS.c", 321; {
 3345                        	
 3346                        		.dbg	line,	"include\routines_LEVELS.c", 322; player_counter_anim = 1;
 3347                        		__st.umiq	1, _player_counter_anim
         01:DAFE  A9 01      			lda.l	#1
         01:DB00  8D 11 23   			sta	_player_counter_anim
 3348                        	
 3349                        		.dbg	line,	"include\routines_LEVELS.c", 323; player_state = STATE_HANG;
 3350                        		__st.umiq	10, _player_state
         01:DB03  A9 0A      			lda.l	#10
         01:DB05  8D 0E 23   			sta	_player_state
 3351                        	
 3352                        		.dbg	line,	"include\routines_LEVELS.c", 324; }
 3353                        	
 3354                        		.dbg	line,	"include\routines_LEVELS.c", 325; }
 3355    01:DB08             	.LL54	.alias		.LL56
 3356    01:DB08             	.LL53	.alias		.LL56
 3357    01:DB08             	.LL46	.alias		.LL56
 3358                        	
 3359                        		.dbg	line,	"include\routines_LEVELS.c", 328; //--------------------------------------------------------------------------------------//
 3360                        	
 3361                        		.dbg	line,	"include\routines_LEVELS.c", 329; //                                     LEFT BUTTON                                      //
 3362                        	
 3363                        		.dbg	line,	"include\routines_LEVELS.c", 330; //--------------------------------------------------------------------------------------//
 3364                        	
 3365                        		.dbg	line,	"include\routines_LEVELS.c", 332; else if(joy(JOYPAD_1) & JOY_LEFT)
 3366                        		__bra		.LL56
         01:DB08  4C E7 DD   			bra	.LL56
 3367    01:DB0B             	.LL41:
 3368                        		__ld.uiq	0
         01:DB0B  62         			cla
 3369                        		 _joy.1
         01:DB0C  AA         			tax
         01:DB0D  BD 28 22   			lda	joynow, x
         01:DB10  BC D3 22   			ldy	joy6now, x
 3370                        		__tand.wi	128
         01:DB13  29 80      			and	#128
         01:DB15  C9 01      	!:		cmp	#1
 3371                        		__bfalse	.LL57
         01:DB17  B0 03 4C F9			bcc	.LL57
         01:DB1B  DB          
 3372                        	
 3373                        		.dbg	line,	"include\routines_LEVELS.c", 333; {
 3374                        	
 3375                        		.dbg	line,	"include\routines_LEVELS.c", 334; if(player_state == STATE_IDLE || player_state == STATE_WALK)
 3376                        		__not.um	_player_state
         01:DB1C  AD 0E 23   			lda	_player_state
         01:DB1F  18         			clc
         01:DB20  D0 01      			bne	!+
         01:DB22  38         			sec
         01:DB23             	!:
 3377                        		__btrue		.LL59
         01:DB23  B0 08      			bcs	.LL59
 3378                        		__ld.umq	_player_state
         01:DB25  AD 0E 23   			lda	_player_state
 3379                        		__equ_b.uiq	1
         01:DB28  C9 01      			cmp	#1
         01:DB2A  F0 01      			beq	!+
         01:DB2C  18         			clc
         01:DB2D             	!:
 3380    01:DB2D             	.LL59:
 3381                        		__bfalse	.LL58
         01:DB2D  90 4A      			bcc	.LL58
 3382                        	
 3383                        		.dbg	line,	"include\routines_LEVELS.c", 335; {
 3384                        	
 3385                        		.dbg	line,	"include\routines_LEVELS.c", 336; player_axis = AXIS_LEFT;
 3386                        		__st.umiq	1, _player_axis
         01:DB2F  A9 01      			lda.l	#1
         01:DB31  8D 0F 23   			sta	_player_axis
 3387                        	
 3388                        		.dbg	line,	"include\routines_LEVELS.c", 338; if(player_previous_axis != player_axis)
 3389                        		__ld.umq	_player_previous_axis
         01:DB34  AD 10 23   			lda	_player_previous_axis
 3390                        		__neq_b.umq	_player_axis
         01:DB37  38         			sec
         01:DB38  4D 0F 23   			eor	_player_axis
         01:DB3B  D0 01      			bne	!+
         01:DB3D  18         			clc
         01:DB3E             	!:
 3391                        		__bfalse	.LL60
         01:DB3E  90 16      			bcc	.LL60
 3392                        	
 3393                        		.dbg	line,	"include\routines_LEVELS.c", 339; {
 3394                        	
 3395                        		.dbg	line,	"include\routines_LEVELS.c", 340; player_previous_axis = player_axis;
 3396                        		__ld.um		_player_axis
         01:DB40  AD 0F 23   			lda	_player_axis
         01:DB43  C2         			cly
 3397                        		__st.umq	_player_previous_axis
         01:DB44  8D 10 23   			sta	_player_previous_axis
 3398                        	
 3399                        		.dbg	line,	"include\routines_LEVELS.c", 342; spr_set(player_id);
 3400                        		__ld.umq	_player_id
         01:DB47  AD 0D 23   			lda	_player_id
 3401                        		__call		_spr_set.1
         01:DB4A  20 DD E7   			call	_spr_set.1
 3402                        	
 3403                        		.dbg	line,	"include\routines_LEVELS.c", 343; spr_ctrl(FLIP_MAS, FLIP_X);
 3404                        		__st.umiq	136, _al
         01:DB4D  A9 88      			lda.l	#136
         01:DB4F  85 F8      			sta	_al
 3405                        		__ld.uiq	8
         01:DB51  A9 08      			lda	#8
 3406                        		__call		_spr_ctrl.2
         01:DB53  20 3C E8   			call	_spr_ctrl.2
 3407                        	
 3408                        		.dbg	line,	"include\routines_LEVELS.c", 344; }
 3409                        	
 3410                        		.dbg	line,	"include\routines_LEVELS.c", 346; if(joy(JOYPAD_1) & JOY_DOWN)
 3411    01:DB56             	.LL60:
 3412                        		__ld.uiq	0
         01:DB56  62         			cla
 3413                        		 _joy.1
         01:DB57  AA         			tax
         01:DB58  BD 28 22   			lda	joynow, x
         01:DB5B  BC D3 22   			ldy	joy6now, x
 3414                        		__tand.wi	64
         01:DB5E  29 40      			and	#64
         01:DB60  C9 01      	!:		cmp	#1
 3415                        		__bfalse	.LL61
         01:DB62  90 0D      			bcc	.LL61
 3416                        	
 3417                        		.dbg	line,	"include\routines_LEVELS.c", 347; {
 3418                        	
 3419                        		.dbg	line,	"include\routines_LEVELS.c", 348; player_counter_anim = 1;
 3420                        		__st.umiq	1, _player_counter_anim
         01:DB64  A9 01      			lda.l	#1
         01:DB66  8D 11 23   			sta	_player_counter_anim
 3421                        	
 3422                        		.dbg	line,	"include\routines_LEVELS.c", 349; player_state = STATE_CROUCH;
 3423                        		__st.umiq	7, _player_state
         01:DB69  A9 07      			lda.l	#7
         01:DB6B  8D 0E 23   			sta	_player_state
 3424                        	
 3425                        		.dbg	line,	"include\routines_LEVELS.c", 350; return;
 3426                        		__bra		.LL34
         01:DB6E  4C E7 DD   			bra	.LL34
 3427                        	
 3428                        		.dbg	line,	"include\routines_LEVELS.c", 351; }
 3429                        	
 3430                        		.dbg	line,	"include\routines_LEVELS.c", 353; player_state = STATE_WALK;
 3431    01:DB71             	.LL61:
 3432                        		__st.umiq	1, _player_state
         01:DB71  A9 01      			lda.l	#1
         01:DB73  8D 0E 23   			sta	_player_state
 3433                        	
 3434                        		.dbg	line,	"include\routines_LEVELS.c", 354; }
 3435                        	
 3436                        		.dbg	line,	"include\routines_LEVELS.c", 357; else if(player_state == STATE_JUMP || player_state == STATE_JUMP_RIGHT || player_state == STATE_CROUCH || player_state == STATE_FALL || player_state == STATE_HANG)
 3437                        		__bra		.LL62
         01:DB76  4C E7 DD   			bra	.LL62
 3438    01:DB79             	.LL58:
 3439                        		__ld.umq	_player_state
         01:DB79  AD 0E 23   			lda	_player_state
 3440                        		__equ_b.uiq	4
         01:DB7C  C9 04      			cmp	#4
         01:DB7E  F0 01      			beq	!+
         01:DB80  18         			clc
         01:DB81             	!:
 3441                        		__btrue		.LL64
         01:DB81  B0 08      			bcs	.LL64
 3442                        		__ld.umq	_player_state
         01:DB83  AD 0E 23   			lda	_player_state
 3443                        		__equ_b.uiq	5
         01:DB86  C9 05      			cmp	#5
         01:DB88  F0 01      			beq	!+
         01:DB8A  18         			clc
         01:DB8B             	!:
 3444    01:DB8B             	.LL64:
 3445                        		__btrue		.LL65
         01:DB8B  B0 08      			bcs	.LL65
 3446                        		__ld.umq	_player_state
         01:DB8D  AD 0E 23   			lda	_player_state
 3447                        		__equ_b.uiq	7
         01:DB90  C9 07      			cmp	#7
         01:DB92  F0 01      			beq	!+
         01:DB94  18         			clc
         01:DB95             	!:
 3448    01:DB95             	.LL65:
 3449                        		__btrue		.LL66
         01:DB95  B0 08      			bcs	.LL66
 3450                        		__ld.umq	_player_state
         01:DB97  AD 0E 23   			lda	_player_state
 3451                        		__equ_b.uiq	9
         01:DB9A  C9 09      			cmp	#9
         01:DB9C  F0 01      			beq	!+
         01:DB9E  18         			clc
         01:DB9F             	!:
 3452    01:DB9F             	.LL66:
 3453                        		__btrue		.LL67
         01:DB9F  B0 08      			bcs	.LL67
 3454                        		__ld.umq	_player_state
         01:DBA1  AD 0E 23   			lda	_player_state
 3455                        		__equ_b.uiq	10
         01:DBA4  C9 0A      			cmp	#10
         01:DBA6  F0 01      			beq	!+
         01:DBA8  18         			clc
         01:DBA9             	!:
 3456    01:DBA9             	.LL67:
 3457                        		__bfalse	.LL63
         01:DBA9  90 2A      			bcc	.LL63
 3458                        	
 3459                        		.dbg	line,	"include\routines_LEVELS.c", 358; {
 3460                        	
 3461                        		.dbg	line,	"include\routines_LEVELS.c", 359; if(player_axis == AXIS_RIGHT)
 3462                        		__not.um	_player_axis
         01:DBAB  AD 0F 23   			lda	_player_axis
         01:DBAE  18         			clc
         01:DBAF  D0 01      			bne	!+
         01:DBB1  38         			sec
         01:DBB2             	!:
 3463                        		__bfalse	.LL68
         01:DBB2  B0 03 4C E7			bcc	.LL68
         01:DBB6  DD          
 3464                        	
 3465                        		.dbg	line,	"include\routines_LEVELS.c", 360; {
 3466                        	
 3467                        		.dbg	line,	"include\routines_LEVELS.c", 361; player_axis = AXIS_LEFT;
 3468                        		__st.umiq	1, _player_axis
         01:DBB7  A9 01      			lda.l	#1
         01:DBB9  8D 0F 23   			sta	_player_axis
 3469                        	
 3470                        		.dbg	line,	"include\routines_LEVELS.c", 362; player_previous_axis = player_axis;
 3471                        		__ld.um		_player_axis
         01:DBBC  AD 0F 23   			lda	_player_axis
         01:DBBF  C2         			cly
 3472                        		__st.umq	_player_previous_axis
         01:DBC0  8D 10 23   			sta	_player_previous_axis
 3473                        	
 3474                        		.dbg	line,	"include\routines_LEVELS.c", 364; spr_set(player_id);
 3475                        		__ld.umq	_player_id
         01:DBC3  AD 0D 23   			lda	_player_id
 3476                        		__call		_spr_set.1
         01:DBC6  20 DD E7   			call	_spr_set.1
 3477                        	
 3478                        		.dbg	line,	"include\routines_LEVELS.c", 365; spr_ctrl(FLIP_MAS, FLIP_X);
 3479                        		__st.umiq	136, _al
         01:DBC9  A9 88      			lda.l	#136
         01:DBCB  85 F8      			sta	_al
 3480                        		__ld.uiq	8
         01:DBCD  A9 08      			lda	#8
 3481                        		__call		_spr_ctrl.2
         01:DBCF  20 3C E8   			call	_spr_ctrl.2
 3482                        	
 3483                        		.dbg	line,	"include\routines_LEVELS.c", 366; }
 3484                        	
 3485                        		.dbg	line,	"include\routines_LEVELS.c", 367; }
 3486    01:DBD2             	.LL68	.alias		.LL69
 3487                        	
 3488                        		.dbg	line,	"include\routines_LEVELS.c", 370; else if(player_state == STATE_CLIMB_UP || player_state == STATE_CLIMB_DOWN)
 3489                        		__bra		.LL69
         01:DBD2  4C E7 DD   			bra	.LL69
 3490    01:DBD5             	.LL63:
 3491                        		__ld.umq	_player_state
         01:DBD5  AD 0E 23   			lda	_player_state
 3492                        		__equ_b.uiq	11
         01:DBD8  C9 0B      			cmp	#11
         01:DBDA  F0 01      			beq	!+
         01:DBDC  18         			clc
         01:DBDD             	!:
 3493                        		__btrue		.LL71
         01:DBDD  B0 08      			bcs	.LL71
 3494                        		__ld.umq	_player_state
         01:DBDF  AD 0E 23   			lda	_player_state
 3495                        		__equ_b.uiq	12
         01:DBE2  C9 0C      			cmp	#12
         01:DBE4  F0 01      			beq	!+
         01:DBE6  18         			clc
         01:DBE7             	!:
 3496    01:DBE7             	.LL71:
 3497                        		__bfalse	.LL70
         01:DBE7  B0 03 4C E7			bcc	.LL70
         01:DBEB  DD          
 3498                        	
 3499                        		.dbg	line,	"include\routines_LEVELS.c", 371; {
 3500                        	
 3501                        		.dbg	line,	"include\routines_LEVELS.c", 372; player_counter_anim = 1;
 3502                        		__st.umiq	1, _player_counter_anim
         01:DBEC  A9 01      			lda.l	#1
         01:DBEE  8D 11 23   			sta	_player_counter_anim
 3503                        	
 3504                        		.dbg	line,	"include\routines_LEVELS.c", 373; player_state = STATE_HANG;
 3505                        		__st.umiq	10, _player_state
         01:DBF1  A9 0A      			lda.l	#10
         01:DBF3  8D 0E 23   			sta	_player_state
 3506                        	
 3507                        		.dbg	line,	"include\routines_LEVELS.c", 374; }
 3508                        	
 3509                        		.dbg	line,	"include\routines_LEVELS.c", 375; }
 3510    01:DBF6             	.LL70	.alias		.LL72
 3511    01:DBF6             	.LL69	.alias		.LL72
 3512    01:DBF6             	.LL62	.alias		.LL72
 3513                        	
 3514                        		.dbg	line,	"include\routines_LEVELS.c", 378; //--------------------------------------------------------------------------------------//
 3515                        	
 3516                        		.dbg	line,	"include\routines_LEVELS.c", 379; //                                      UP BUTTON                                       //
 3517                        	
 3518                        		.dbg	line,	"include\routines_LEVELS.c", 380; //--------------------------------------------------------------------------------------//
 3519                        	
 3520                        		.dbg	line,	"include\routines_LEVELS.c", 382; else if(joy(JOYPAD_1) & JOY_UP)
 3521                        		__bra		.LL72
         01:DBF6  4C E7 DD   			bra	.LL72
 3522    01:DBF9             	.LL57:
 3523                        		__ld.uiq	0
         01:DBF9  62         			cla
 3524                        		 _joy.1
         01:DBFA  AA         			tax
         01:DBFB  BD 28 22   			lda	joynow, x
         01:DBFE  BC D3 22   			ldy	joy6now, x
 3525                        		__tand.wi	16
         01:DC01  29 10      			and	#16
         01:DC03  C9 01      	!:		cmp	#1
 3526                        		__bfalse	.LL73
         01:DC05  B0 03 4C CE			bcc	.LL73
         01:DC09  DC          
 3527                        	
 3528                        		.dbg	line,	"include\routines_LEVELS.c", 383; {
 3529                        	
 3530                        		.dbg	line,	"include\routines_LEVELS.c", 384; if(player_state == STATE_HANG || player_state == STATE_CLIMB_UP || player_state == STATE_CLIMB_DOWN)
 3531                        		__ld.umq	_player_state
         01:DC0A  AD 0E 23   			lda	_player_state
 3532                        		__equ_b.uiq	10
         01:DC0D  C9 0A      			cmp	#10
         01:DC0F  F0 01      			beq	!+
         01:DC11  18         			clc
         01:DC12             	!:
 3533                        		__btrue		.LL75
         01:DC12  B0 08      			bcs	.LL75
 3534                        		__ld.umq	_player_state
         01:DC14  AD 0E 23   			lda	_player_state
 3535                        		__equ_b.uiq	11
         01:DC17  C9 0B      			cmp	#11
         01:DC19  F0 01      			beq	!+
         01:DC1B  18         			clc
         01:DC1C             	!:
 3536    01:DC1C             	.LL75:
 3537                        		__btrue		.LL76
         01:DC1C  B0 08      			bcs	.LL76
 3538                        		__ld.umq	_player_state
         01:DC1E  AD 0E 23   			lda	_player_state
 3539                        		__equ_b.uiq	12
         01:DC21  C9 0C      			cmp	#12
         01:DC23  F0 01      			beq	!+
         01:DC25  18         			clc
         01:DC26             	!:
 3540    01:DC26             	.LL76:
 3541                        		__bfalse	.LL74
         01:DC26  B0 03 4C E7			bcc	.LL74
         01:DC2A  DD          
 3542                        	
 3543                        		.dbg	line,	"include\routines_LEVELS.c", 385; {
 3544                        	
 3545                        		.dbg	line,	"include\routines_LEVELS.c", 386; unsigned char i;
 3546                        	
 3547                        		.dbg	line,	"include\routines_LEVELS.c", 388; check_LADDER( 15 , 8 );
 3548                        		__ld.wi		15
         01:DC2B  A9 0F      			lda.l	#15
         01:DC2D  C2         			cly
 3549                        		__pusharg.wr
         01:DC2E  A6 8D      			ldx	<__sp
         01:DC30  CA         			dex
         01:DC31  CA         			dex
         01:DC32  95 08      			sta.l	<__stack, x
         01:DC34  94 09      			sty.h	<__stack, x
         01:DC36  86 8D      			stx	<__sp
 3550                        		__ld.wi		8
         01:DC38  A9 08      			lda.l	#8
         01:DC3A  C2         			cly
 3551                        		__pusharg.wr
         01:DC3B  A6 8D      			ldx	<__sp
         01:DC3D  CA         			dex
         01:DC3E  CA         			dex
         01:DC3F  95 08      			sta.l	<__stack, x
         01:DC41  94 09      			sty.h	<__stack, x
         01:DC43  86 8D      			stx	<__sp
 3552                        		__call		_check_LADDER
         01:DC45  20 81 FF   			call	_check_LADDER
 3553                        	
 3554                        		.dbg	line,	"include\routines_LEVELS.c", 390; if(map_blk_flag == TILE_EMPTY)
 3555                        		__not.um	_map_blk_flag
         01:DC48  AD 85 28   			lda	_map_blk_flag
         01:DC4B  18         			clc
         01:DC4C  D0 01      			bne	!+
         01:DC4E  38         			sec
         01:DC4F             	!:
 3556                        		__bfalse	.LL77
         01:DC4F  90 67      			bcc	.LL77
 3557                        	
 3558                        		.dbg	line,	"include\routines_LEVELS.c", 391; {
 3559                        	
 3560                        		.dbg	line,	"include\routines_LEVELS.c", 392; for(i=1 ; i<3 ; i++)
 3561                        		__st.umiq	1, __joypad_DIR_end - 1  /* i */
         01:DC51  A9 01      			lda.l	#1
         01:DC53  8D 01 23   			sta	__joypad_DIR_end - 1
 3562    01:DC56             	.LL78:
 3563                        		__ld.umq	__joypad_DIR_end - 1  /* i */
         01:DC56  AD 01 23   			lda	__joypad_DIR_end - 1
 3564                        		__ult_b.uiq	3
         01:DC59  C9 03      			cmp	#3		; Subtract integer from A.
         01:DC5B  6A         			ror	a		; CC if A < integer.
         01:DC5C  49 80      			eor	#$80
         01:DC5E  2A         			rol	a
 3565                        		__btrue		.LL80
         01:DC5F  B0 07      			bcs	.LL80
 3566                        		__bra		.LL81
         01:DC61  80 63      			bra	.LL81
 3567    01:DC63             	.LL79:
 3568                        		__inc.umq	__joypad_DIR_end - 1  /* i */
         01:DC63  EE 01 23   			inc	__joypad_DIR_end - 1
 3569                        		__bra		.LL78
         01:DC66  80 EE      			bra	.LL78
 3570    01:DC68             	.LL80:
 3571                        	
 3572                        		.dbg	line,	"include\routines_LEVELS.c", 393; {
 3573                        	
 3574                        		.dbg	line,	"include\routines_LEVELS.c", 394; check_LADDER( 15 , 8 + i );
 3575                        		__ld.wi		15
         01:DC68  A9 0F      			lda.l	#15
         01:DC6A  C2         			cly
 3576                        		__pusharg.wr
         01:DC6B  A6 8D      			ldx	<__sp
         01:DC6D  CA         			dex
         01:DC6E  CA         			dex
         01:DC6F  95 08      			sta.l	<__stack, x
         01:DC71  94 09      			sty.h	<__stack, x
         01:DC73  86 8D      			stx	<__sp
 3577                        		__ld.wi		8
         01:DC75  A9 08      			lda.l	#8
         01:DC77  C2         			cly
 3578                        		__add.um	__joypad_DIR_end - 1  /* i */
         01:DC78  18         			clc
         01:DC79  6D 01 23   			adc	__joypad_DIR_end - 1
         01:DC7C  90 01      			bcc	!+
         01:DC7E  C8         			iny
         01:DC7F             	!:
 3579                        		__pusharg.wr
         01:DC7F  A6 8D      			ldx	<__sp
         01:DC81  CA         			dex
         01:DC82  CA         			dex
         01:DC83  95 08      			sta.l	<__stack, x
         01:DC85  94 09      			sty.h	<__stack, x
         01:DC87  86 8D      			stx	<__sp
 3580                        		__call		_check_LADDER
         01:DC89  20 81 FF   			call	_check_LADDER
 3581                        	
 3582                        		.dbg	line,	"include\routines_LEVELS.c", 396; if(map_blk_flag == TILE_LADDER)
 3583                        		__ld.umq	_map_blk_flag
         01:DC8C  AD 85 28   			lda	_map_blk_flag
 3584                        		__equ_b.uiq	2
         01:DC8F  C9 02      			cmp	#2
         01:DC91  F0 01      			beq	!+
         01:DC93  18         			clc
         01:DC94             	!:
 3585                        		__bfalse	.LL82
         01:DC94  90 CD      			bcc	.LL82
 3586                        	
 3587                        		.dbg	line,	"include\routines_LEVELS.c", 397; {
 3588                        	
 3589                        		.dbg	line,	"include\routines_LEVELS.c", 398; sgx_map_pxl_y -= (2 - i);
 3590                        		__ld.wi		2
         01:DC96  A9 02      			lda.l	#2
         01:DC98  C2         			cly
 3591                        		__sub.um	__joypad_DIR_end - 1  /* i */
         01:DC99  38         			sec
         01:DC9A  ED 01 23   			sbc	__joypad_DIR_end - 1
         01:DC9D  B0 01      			bcs	!+
         01:DC9F  88         			dey
         01:DCA0             	!:
 3592                        		__isub_st.wmq	_sgx_map_pxl_y
         01:DCA0  38         			sec
         01:DCA1  49 FF      			eor	#$FF
         01:DCA3  6D 66 23   			adc.l	_sgx_map_pxl_y
         01:DCA6  8D 66 23   			sta.l	_sgx_map_pxl_y
         01:DCA9  98         			tya
         01:DCAA  49 FF      			eor	#$FF
         01:DCAC  6D 67 23   			adc.h	_sgx_map_pxl_y
         01:DCAF  8D 67 23   			sta.h	_sgx_map_pxl_y
 3593                        	
 3594                        		.dbg	line,	"include\routines_LEVELS.c", 399; break;
 3595                        		__bra		.LL81
         01:DCB2  80 12      			bra	.LL81
 3596                        	
 3597                        		.dbg	line,	"include\routines_LEVELS.c", 400; }
 3598                        	
 3599                        		.dbg	line,	"include\routines_LEVELS.c", 401; }
 3600    01:DCB4             	.LL82	.alias		.LL79
 3601                        		__bra		.LL79
         01:DCB4  80 AD      			bra	.LL79
 3602    01:DCB6             	.LL81	.alias		.LL83
 3603                        	
 3604                        		.dbg	line,	"include\routines_LEVELS.c", 402; }
 3605                        	
 3606                        		.dbg	line,	"include\routines_LEVELS.c", 404; else
 3607                        		__bra		.LL83
         01:DCB6  80 0E      			bra	.LL83
 3608    01:DCB8             	.LL77:
 3609                        	
 3610                        		.dbg	line,	"include\routines_LEVELS.c", 405; {
 3611                        	
 3612                        		.dbg	line,	"include\routines_LEVELS.c", 406; sgx_map_pxl_y -= 2;
 3613                        		__sub_st.wmiq	2, _sgx_map_pxl_y
         01:DCB8  38         			sec
         01:DCB9  AD 66 23   			lda.l	_sgx_map_pxl_y
         01:DCBC  E9 02      			sbc.l	#2
         01:DCBE  8D 66 23   			sta.l	_sgx_map_pxl_y
         01:DCC1  B0 03      			bcs	!+
         01:DCC3  CE 67 23   			dec.h	_sgx_map_pxl_y
         01:DCC6             	!:
 3614                        	
 3615                        		.dbg	line,	"include\routines_LEVELS.c", 407; }
 3616    01:DCC6             	.LL83:
 3617                        	
 3618                        		.dbg	line,	"include\routines_LEVELS.c", 409; player_state = STATE_CLIMB_UP;
 3619                        		__st.umiq	11, _player_state
         01:DCC6  A9 0B      			lda.l	#11
         01:DCC8  8D 0E 23   			sta	_player_state
 3620                        	
 3621                        		.dbg	line,	"include\routines_LEVELS.c", 410; }
 3622                        	
 3623                        		.dbg	line,	"include\routines_LEVELS.c", 411; }
 3624    01:DCCB             	.LL74	.alias		.LL84
 3625                        	
 3626                        		.dbg	line,	"include\routines_LEVELS.c", 414; //--------------------------------------------------------------------------------------//
 3627                        	
 3628                        		.dbg	line,	"include\routines_LEVELS.c", 415; //                                     DOWN BUTTON                                      //
 3629                        	
 3630                        		.dbg	line,	"include\routines_LEVELS.c", 416; //--------------------------------------------------------------------------------------//
 3631                        	
 3632                        		.dbg	line,	"include\routines_LEVELS.c", 418; else if(joy(JOYPAD_1) & JOY_DOWN)
 3633                        		__bra		.LL84
         01:DCCB  4C E7 DD   			bra	.LL84
 3634    01:DCCE             	.LL73:
 3635                        		__ld.uiq	0
         01:DCCE  62         			cla
 3636                        		 _joy.1
         01:DCCF  AA         			tax
         01:DCD0  BD 28 22   			lda	joynow, x
         01:DCD3  BC D3 22   			ldy	joy6now, x
 3637                        		__tand.wi	64
         01:DCD6  29 40      			and	#64
         01:DCD8  C9 01      	!:		cmp	#1
 3638                        		__bfalse	.LL85
         01:DCDA  B0 03 4C E7			bcc	.LL85
         01:DCDE  DD          
 3639                        	
 3640                        		.dbg	line,	"include\routines_LEVELS.c", 419; {
 3641                        	
 3642                        		.dbg	line,	"include\routines_LEVELS.c", 420; if(player_state == STATE_IDLE || player_state == STATE_WALK)
 3643                        		__not.um	_player_state
         01:DCDF  AD 0E 23   			lda	_player_state
         01:DCE2  18         			clc
         01:DCE3  D0 01      			bne	!+
         01:DCE5  38         			sec
         01:DCE6             	!:
 3644                        		__btrue		.LL87
         01:DCE6  B0 08      			bcs	.LL87
 3645                        		__ld.umq	_player_state
         01:DCE8  AD 0E 23   			lda	_player_state
 3646                        		__equ_b.uiq	1
         01:DCEB  C9 01      			cmp	#1
         01:DCED  F0 01      			beq	!+
         01:DCEF  18         			clc
         01:DCF0             	!:
 3647    01:DCF0             	.LL87:
 3648                        		__bfalse	.LL86
         01:DCF0  90 0D      			bcc	.LL86
 3649                        	
 3650                        		.dbg	line,	"include\routines_LEVELS.c", 421; {
 3651                        	
 3652                        		.dbg	line,	"include\routines_LEVELS.c", 422; player_counter_anim = 1;
 3653                        		__st.umiq	1, _player_counter_anim
         01:DCF2  A9 01      			lda.l	#1
         01:DCF4  8D 11 23   			sta	_player_counter_anim
 3654                        	
 3655                        		.dbg	line,	"include\routines_LEVELS.c", 423; player_state = STATE_CROUCH;
 3656                        		__st.umiq	7, _player_state
         01:DCF7  A9 07      			lda.l	#7
         01:DCF9  8D 0E 23   			sta	_player_state
 3657                        	
 3658                        		.dbg	line,	"include\routines_LEVELS.c", 424; }
 3659                        	
 3660                        		.dbg	line,	"include\routines_LEVELS.c", 427; else if(player_state == STATE_HANG || player_state == STATE_CLIMB_UP || player_state == STATE_CLIMB_DOWN)
 3661                        		__bra		.LL88
         01:DCFC  4C E7 DD   			bra	.LL88
 3662    01:DCFF             	.LL86:
 3663                        		__ld.umq	_player_state
         01:DCFF  AD 0E 23   			lda	_player_state
 3664                        		__equ_b.uiq	10
         01:DD02  C9 0A      			cmp	#10
         01:DD04  F0 01      			beq	!+
         01:DD06  18         			clc
         01:DD07             	!:
 3665                        		__btrue		.LL90
         01:DD07  B0 08      			bcs	.LL90
 3666                        		__ld.umq	_player_state
         01:DD09  AD 0E 23   			lda	_player_state
 3667                        		__equ_b.uiq	11
         01:DD0C  C9 0B      			cmp	#11
         01:DD0E  F0 01      			beq	!+
         01:DD10  18         			clc
         01:DD11             	!:
 3668    01:DD11             	.LL90:
 3669                        		__btrue		.LL91
         01:DD11  B0 08      			bcs	.LL91
 3670                        		__ld.umq	_player_state
         01:DD13  AD 0E 23   			lda	_player_state
 3671                        		__equ_b.uiq	12
         01:DD16  C9 0C      			cmp	#12
         01:DD18  F0 01      			beq	!+
         01:DD1A  18         			clc
         01:DD1B             	!:
 3672    01:DD1B             	.LL91:
 3673                        		__bfalse	.LL89
         01:DD1B  B0 03 4C E7			bcc	.LL89
         01:DD1F  DD          
 3674                        	
 3675                        		.dbg	line,	"include\routines_LEVELS.c", 428; {
 3676                        	
 3677                        		.dbg	line,	"include\routines_LEVELS.c", 429; unsigned char i;
 3678                        	
 3679                        		.dbg	line,	"include\routines_LEVELS.c", 431; check_LADDER( 15 , 10 );
 3680                        		__ld.wi		15
         01:DD20  A9 0F      			lda.l	#15
         01:DD22  C2         			cly
 3681                        		__pusharg.wr
         01:DD23  A6 8D      			ldx	<__sp
         01:DD25  CA         			dex
         01:DD26  CA         			dex
         01:DD27  95 08      			sta.l	<__stack, x
         01:DD29  94 09      			sty.h	<__stack, x
         01:DD2B  86 8D      			stx	<__sp
 3682                        		__ld.wi		10
         01:DD2D  A9 0A      			lda.l	#10
         01:DD2F  C2         			cly
 3683                        		__pusharg.wr
         01:DD30  A6 8D      			ldx	<__sp
         01:DD32  CA         			dex
         01:DD33  CA         			dex
         01:DD34  95 08      			sta.l	<__stack, x
         01:DD36  94 09      			sty.h	<__stack, x
         01:DD38  86 8D      			stx	<__sp
 3684                        		__call		_check_LADDER
         01:DD3A  20 81 FF   			call	_check_LADDER
 3685                        	
 3686                        		.dbg	line,	"include\routines_LEVELS.c", 433; if(map_blk_flag == TILE_EMPTY)
 3687                        		__not.um	_map_blk_flag
         01:DD3D  AD 85 28   			lda	_map_blk_flag
         01:DD40  18         			clc
         01:DD41  D0 01      			bne	!+
         01:DD43  38         			sec
         01:DD44             	!:
 3688                        		__bfalse	.LL92
         01:DD44  B0 03 4C D4			bcc	.LL92
         01:DD48  DD          
 3689                        	
 3690                        		.dbg	line,	"include\routines_LEVELS.c", 434; {
 3691                        	
 3692                        		.dbg	line,	"include\routines_LEVELS.c", 435; for(i=1 ; i<3 ; i++)
 3693                        		__st.umiq	1, __joypad_DIR_end - 2  /* i */
         01:DD49  A9 01      			lda.l	#1
         01:DD4B  8D 00 23   			sta	__joypad_DIR_end - 2
 3694    01:DD4E             	.LL93:
 3695                        		__ld.umq	__joypad_DIR_end - 2  /* i */
         01:DD4E  AD 00 23   			lda	__joypad_DIR_end - 2
 3696                        		__ult_b.uiq	3
         01:DD51  C9 03      			cmp	#3		; Subtract integer from A.
         01:DD53  6A         			ror	a		; CC if A < integer.
         01:DD54  49 80      			eor	#$80
         01:DD56  2A         			rol	a
 3697                        		__btrue		.LL95
         01:DD57  B0 08      			bcs	.LL95
 3698                        		__bra		.LL96
         01:DD59  4C E7 DD   			bra	.LL96
 3699    01:DD5C             	.LL94:
 3700                        		__inc.umq	__joypad_DIR_end - 2  /* i */
         01:DD5C  EE 00 23   			inc	__joypad_DIR_end - 2
 3701                        		__bra		.LL93
         01:DD5F  80 ED      			bra	.LL93
 3702    01:DD61             	.LL95:
 3703                        	
 3704                        		.dbg	line,	"include\routines_LEVELS.c", 436; {
 3705                        	
 3706                        		.dbg	line,	"include\routines_LEVELS.c", 437; check_LADDER( 15 , 22 + i );
 3707                        		__ld.wi		15
         01:DD61  A9 0F      			lda.l	#15
         01:DD63  C2         			cly
 3708                        		__pusharg.wr
         01:DD64  A6 8D      			ldx	<__sp
         01:DD66  CA         			dex
         01:DD67  CA         			dex
         01:DD68  95 08      			sta.l	<__stack, x
         01:DD6A  94 09      			sty.h	<__stack, x
         01:DD6C  86 8D      			stx	<__sp
 3709                        		__ld.wi		22
         01:DD6E  A9 16      			lda.l	#22
         01:DD70  C2         			cly
 3710                        		__add.um	__joypad_DIR_end - 2  /* i */
         01:DD71  18         			clc
         01:DD72  6D 00 23   			adc	__joypad_DIR_end - 2
         01:DD75  90 01      			bcc	!+
         01:DD77  C8         			iny
         01:DD78             	!:
 3711                        		__pusharg.wr
         01:DD78  A6 8D      			ldx	<__sp
         01:DD7A  CA         			dex
         01:DD7B  CA         			dex
         01:DD7C  95 08      			sta.l	<__stack, x
         01:DD7E  94 09      			sty.h	<__stack, x
         01:DD80  86 8D      			stx	<__sp
 3712                        		__call		_check_LADDER
         01:DD82  20 81 FF   			call	_check_LADDER
 3713                        	
 3714                        		.dbg	line,	"include\routines_LEVELS.c", 439; if(map_blk_flag == TILE_LADDER)
 3715                        		__ld.umq	_map_blk_flag
         01:DD85  AD 85 28   			lda	_map_blk_flag
 3716                        		__equ_b.uiq	2
         01:DD88  C9 02      			cmp	#2
         01:DD8A  F0 01      			beq	!+
         01:DD8C  18         			clc
         01:DD8D             	!:
 3717                        		__bfalse	.LL97
         01:DD8D  90 1A      			bcc	.LL97
 3718                        	
 3719                        		.dbg	line,	"include\routines_LEVELS.c", 440; {
 3720                        	
 3721                        		.dbg	line,	"include\routines_LEVELS.c", 441; sgx_map_pxl_y += (2 - i);
 3722                        		__ld.wi		2
         01:DD8F  A9 02      			lda.l	#2
         01:DD91  C2         			cly
 3723                        		__sub.um	__joypad_DIR_end - 2  /* i */
         01:DD92  38         			sec
         01:DD93  ED 00 23   			sbc	__joypad_DIR_end - 2
         01:DD96  B0 01      			bcs	!+
         01:DD98  88         			dey
         01:DD99             	!:
 3724                        		__add_st.wmq	_sgx_map_pxl_y
         01:DD99  18         			clc
         01:DD9A  6D 66 23   			adc.l	_sgx_map_pxl_y
         01:DD9D  8D 66 23   			sta.l	_sgx_map_pxl_y
         01:DDA0  98         			tya
         01:DDA1  6D 67 23   			adc.h	_sgx_map_pxl_y
         01:DDA4  8D 67 23   			sta.h	_sgx_map_pxl_y
 3725                        	
 3726                        		.dbg	line,	"include\routines_LEVELS.c", 442; break;
 3727                        		__bra		.LL96
         01:DDA7  80 3E      			bra	.LL96
 3728                        	
 3729                        		.dbg	line,	"include\routines_LEVELS.c", 443; }
 3730                        	
 3731                        		.dbg	line,	"include\routines_LEVELS.c", 445; else
 3732    01:DDA9             	.LL97:
 3733                        	
 3734                        		.dbg	line,	"include\routines_LEVELS.c", 446; {
 3735                        	
 3736                        		.dbg	line,	"include\routines_LEVELS.c", 447; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_224 , TILES_16);
 3737                        		__st.wmiq	18432, _di
         01:DDA9  64 F0      			stz.l	_di
         01:DDAB  A9 48      			lda.h	#18432
         01:DDAD  85 F1      			sta.h	_di
 3738                        		__farptr	_tiles_SPR_PLAYER + 7168 + 512, _bp_bank, _bp
         01:DDAF  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 7168 + 512))
         01:DDB1  85 EC      			sta.l	_bp
         01:DDB3  A9 78      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 7168 + 512))
         01:DDB5  85 ED      			sta.h	_bp
         01:DDB7  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 7168 + 512)
         01:DDB9  85 02      			sta	_bp_bank
 3739                        		__st.wmiq	256, _ax
         01:DDBB  64 F8      			stz.l	_ax
         01:DDBD  A9 01      			lda.h	#256
         01:DDBF  85 F9      			sta.h	_ax
 3740                        		 _load_vram.3
         01:DDC1  82         			clx				; Offset to PCE VDC.
         01:DDC2  20 77 FF   			call	load_vram_x
 3741                        	
 3742                        		.dbg	line,	"include\routines_LEVELS.c", 449; jump_ladder = FALSE;
 3743                        		__st.umiq	0, _jump_ladder
         01:DDC5  9C 14 23   			stz	_jump_ladder
 3744                        	
 3745                        		.dbg	line,	"include\routines_LEVELS.c", 450; player_index_jump = 0;
 3746                        		__st.umiq	0, _player_index_jump
         01:DDC8  9C 12 23   			stz	_player_index_jump
 3747                        	
 3748                        		.dbg	line,	"include\routines_LEVELS.c", 451; player_state = STATE_FALL;
 3749                        		__st.umiq	9, _player_state
         01:DDCB  A9 09      			lda.l	#9
         01:DDCD  8D 0E 23   			sta	_player_state
 3750                        	
 3751                        		.dbg	line,	"include\routines_LEVELS.c", 452; }
 3752    01:DDD0             	.LL98	.alias		.LL94
 3753                        	
 3754                        		.dbg	line,	"include\routines_LEVELS.c", 453; }
 3755                        		__bra		.LL94
         01:DDD0  80 8A      			bra	.LL94
 3756    01:DDD2             	.LL96	.alias		.LL99
 3757                        	
 3758                        		.dbg	line,	"include\routines_LEVELS.c", 454; }
 3759                        	
 3760                        		.dbg	line,	"include\routines_LEVELS.c", 456; else
 3761                        		__bra		.LL99
         01:DDD2  80 13      			bra	.LL99
 3762    01:DDD4             	.LL92:
 3763                        	
 3764                        		.dbg	line,	"include\routines_LEVELS.c", 457; {
 3765                        	
 3766                        		.dbg	line,	"include\routines_LEVELS.c", 458; sgx_map_pxl_y += 2;
 3767                        		__add_st.wmiq	2, _sgx_map_pxl_y
         01:DDD4  18         			clc
         01:DDD5  AD 66 23   			lda.l	_sgx_map_pxl_y
         01:DDD8  69 02      			adc.l	#2
         01:DDDA  8D 66 23   			sta.l	_sgx_map_pxl_y
         01:DDDD  90 03      			bcc	!+
         01:DDDF  EE 67 23   			inc.h	_sgx_map_pxl_y
         01:DDE2             	!:
 3768                        	
 3769                        		.dbg	line,	"include\routines_LEVELS.c", 459; player_state = STATE_CLIMB_DOWN;
 3770                        		__st.umiq	12, _player_state
         01:DDE2  A9 0C      			lda.l	#12
         01:DDE4  8D 0E 23   			sta	_player_state
 3771                        	
 3772                        		.dbg	line,	"include\routines_LEVELS.c", 460; }
 3773    01:DDE7             	.LL99:
 3774                        	
 3775                        		.dbg	line,	"include\routines_LEVELS.c", 461; }
 3776                        	
 3777                        		.dbg	line,	"include\routines_LEVELS.c", 462; }
 3778    01:DDE7             	.LL89:
 3779    01:DDE7             	.LL88:
 3780                        	
 3781                        		.dbg	line,	"include\routines_LEVELS.c", 463; }
 3782    01:DDE7             	.LL85:
 3783    01:DDE7             	.LL84:
 3784    01:DDE7             	.LL72:
 3785    01:DDE7             	.LL56:
 3786    01:DDE7             	.LL34:
 3787                        		__return	0
         01:DDE7  4C EF FF   			jmp	leave_proc
 3788                        		.dbg	clear
 3789                        		.endp
 3790               7CA0     		.data
 3791               2300     		.bss
 3792    F8:2300             	__joypad_DIR_loc:
 3793    F8:2300             			ds	2
 3794    F8:2302             	__joypad_DIR_end:
 3795               E309     		.code
 3796                        		.pceas
 3797                        	
 3798                        		.dbg	line,	"include\routines_LEVELS.c", 472; void update_PLAYER()
 3799                        		.dbg	line,	"include\routines_LEVELS.c", 473; {
 3800                        	;***********************
 3801                        	;***********************
 3802                        	
 3803                        		.hucc
 3804    01:C073             		.proc		_update_PLAYER
 3805                        		__enter		_update_PLAYER
 3806                        	
 3807                        		.dbg	line,	"include\routines_LEVELS.c", 474; if(player_state == STATE_IDLE)
 3808                        		__not.um	_player_state
         01:C073  AD 0E 23   			lda	_player_state
         01:C076  18         			clc
         01:C077  D0 01      			bne	!+
         01:C079  38         			sec
         01:C07A             	!:
 3809                        		__bfalse	.LL101
         01:C07A  90 2F      			bcc	.LL101
 3810                        	
 3811                        		.dbg	line,	"include\routines_LEVELS.c", 475; {
 3812                        	
 3813                        		.dbg	line,	"include\routines_LEVELS.c", 476; if(player_counter_anim == 1)
 3814                        		__ld.umq	_player_counter_anim
         01:C07C  AD 11 23   			lda	_player_counter_anim
 3815                        		__equ_b.uiq	1
         01:C07F  C9 01      			cmp	#1
         01:C081  F0 01      			beq	!+
         01:C083  18         			clc
         01:C084             	!:
 3816                        		__bfalse	.LL102
         01:C084  90 1F      			bcc	.LL102
 3817                        	
 3818                        		.dbg	line,	"include\routines_LEVELS.c", 477; {
 3819                        	
 3820                        		.dbg	line,	"include\routines_LEVELS.c", 478; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
 3821                        		__st.wmiq	18432, _di
         01:C086  64 F0      			stz.l	_di
         01:C088  A9 48      			lda.h	#18432
         01:C08A  85 F1      			sta.h	_di
 3822                        		__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
         01:C08C  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C08E  85 EC      			sta.l	_bp
         01:C090  A9 7A      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C092  85 ED      			sta.h	_bp
         01:C094  A9 0B      			lda	#bank(_tiles_SPR_PLAYER)
         01:C096  85 02      			sta	_bp_bank
 3823                        		__st.wmiq	256, _ax
         01:C098  64 F8      			stz.l	_ax
         01:C09A  A9 01      			lda.h	#256
         01:C09C  85 F9      			sta.h	_ax
 3824                        		 _load_vram.3
         01:C09E  82         			clx				; Offset to PCE VDC.
         01:C09F  20 77 FF   			call	load_vram_x
 3825                        	
 3826                        		.dbg	line,	"include\routines_LEVELS.c", 480; player_counter_anim = 0;
 3827                        		__st.umiq	0, _player_counter_anim
         01:C0A2  9C 11 23   			stz	_player_counter_anim
 3828                        	
 3829                        		.dbg	line,	"include\routines_LEVELS.c", 481; }
 3830                        	
 3831                        		.dbg	line,	"include\routines_LEVELS.c", 483; recenter_CAMERA();
 3832    01:C0A5             	.LL102:
 3833                        		__call		_recenter_CAMERA
         01:C0A5  20 6D FF   			call	_recenter_CAMERA
 3834                        	
 3835                        		.dbg	line,	"include\routines_LEVELS.c", 484; }
 3836                        	
 3837                        		.dbg	line,	"include\routines_LEVELS.c", 487; else if(player_state == STATE_WALK)
 3838                        		__bra		.LL103
         01:C0A8  4C 69 D1   			bra	.LL103
 3839    01:C0AB             	.LL101:
 3840                        		__ld.umq	_player_state
         01:C0AB  AD 0E 23   			lda	_player_state
 3841                        		__equ_b.uiq	1
         01:C0AE  C9 01      			cmp	#1
         01:C0B0  F0 01      			beq	!+
         01:C0B2  18         			clc
         01:C0B3             	!:
 3842                        		__bfalse	.LL104
         01:C0B3  B0 03 4C DD			bcc	.LL104
         01:C0B7  C2          
 3843                        	
 3844                        		.dbg	line,	"include\routines_LEVELS.c", 488; {
 3845                        	
 3846                        		.dbg	line,	"include\routines_LEVELS.c", 489; recenter_CAMERA();
 3847                        		__call		_recenter_CAMERA
         01:C0B8  20 6D FF   			call	_recenter_CAMERA
 3848                        	
 3849                        		.dbg	line,	"include\routines_LEVELS.c", 492; if(player_axis == AXIS_RIGHT)
 3850                        		__not.um	_player_axis
         01:C0BB  AD 0F 23   			lda	_player_axis
         01:C0BE  18         			clc
         01:C0BF  D0 01      			bne	!+
         01:C0C1  38         			sec
         01:C0C2             	!:
 3851                        		__bfalse	.LL105
         01:C0C2  90 62      			bcc	.LL105
 3852                        	
 3853                        		.dbg	line,	"include\routines_LEVELS.c", 493; {
 3854                        	
 3855                        		.dbg	line,	"include\routines_LEVELS.c", 494; // CHECK COLLISION WITH FLOOR //
 3856                        	
 3857                        		.dbg	line,	"include\routines_LEVELS.c", 495; check_FLOOR_L();
 3858                        		__call		_check_FLOOR_L
         01:C0C4  20 63 FF   			call	_check_FLOOR_L
 3859                        	
 3860                        		.dbg	line,	"include\routines_LEVELS.c", 497; if(map_blk_flag == TILE_EMPTY)
 3861                        		__not.um	_map_blk_flag
         01:C0C7  AD 85 28   			lda	_map_blk_flag
         01:C0CA  18         			clc
         01:C0CB  D0 01      			bne	!+
         01:C0CD  38         			sec
         01:C0CE             	!:
 3862                        		__bfalse	.LL106
         01:C0CE  90 27      			bcc	.LL106
 3863                        	
 3864                        		.dbg	line,	"include\routines_LEVELS.c", 498; {
 3865                        	
 3866                        		.dbg	line,	"include\routines_LEVELS.c", 499; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
 3867                        		__st.wmiq	18432, _di
         01:C0D0  64 F0      			stz.l	_di
         01:C0D2  A9 48      			lda.h	#18432
         01:C0D4  85 F1      			sta.h	_di
 3868                        		__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
         01:C0D6  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C0D8  85 EC      			sta.l	_bp
         01:C0DA  A9 7A      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C0DC  85 ED      			sta.h	_bp
         01:C0DE  A9 0B      			lda	#bank(_tiles_SPR_PLAYER)
         01:C0E0  85 02      			sta	_bp_bank
 3869                        		__st.wmiq	256, _ax
         01:C0E2  64 F8      			stz.l	_ax
         01:C0E4  A9 01      			lda.h	#256
         01:C0E6  85 F9      			sta.h	_ax
 3870                        		 _load_vram.3
         01:C0E8  82         			clx				; Offset to PCE VDC.
         01:C0E9  20 77 FF   			call	load_vram_x
 3871                        	
 3872                        		.dbg	line,	"include\routines_LEVELS.c", 501; jump_ladder = FALSE;
 3873                        		__st.umiq	0, _jump_ladder
         01:C0EC  9C 14 23   			stz	_jump_ladder
 3874                        	
 3875                        		.dbg	line,	"include\routines_LEVELS.c", 502; player_index_jump = 0;
 3876                        		__st.umiq	0, _player_index_jump
         01:C0EF  9C 12 23   			stz	_player_index_jump
 3877                        	
 3878                        		.dbg	line,	"include\routines_LEVELS.c", 503; player_state = STATE_FALL;
 3879                        		__st.umiq	9, _player_state
         01:C0F2  A9 09      			lda.l	#9
         01:C0F4  8D 0E 23   			sta	_player_state
 3880                        	
 3881                        		.dbg	line,	"include\routines_LEVELS.c", 504; }
 3882                        	
 3883                        		.dbg	line,	"include\routines_LEVELS.c", 508; // CHECK COLLISION WITH WALLS //
 3884                        	
 3885                        		.dbg	line,	"include\routines_LEVELS.c", 509; check_WALL_BR();
 3886    01:C0F7             	.LL106:
 3887                        		__call		_check_WALL_BR
         01:C0F7  20 59 FF   			call	_check_WALL_BR
 3888                        	
 3889                        		.dbg	line,	"include\routines_LEVELS.c", 510; put_number(map_blk_flag,3,0,0);
 3890                        		__ld.um		_map_blk_flag
         01:C0FA  AD 85 28   			lda	_map_blk_flag
         01:C0FD  C2         			cly
 3891                        		__st.wmq	_bx
         01:C0FE  85 FA      			sta.l	_bx
         01:C100  84 FB      			sty.h	_bx
 3892                        		__st.umiq	3, _cl
         01:C102  A9 03      			lda.l	#3
         01:C104  85 FC      			sta	_cl
 3893                        		__st.umiq	0, _dil
         01:C106  64 F0      			stz	_dil
 3894                        		__st.umiq	0, _dih
         01:C108  64 F1      			stz	_dih
 3895                        		__call		_put_number.4
         01:C10A  20 4F FF   			call	_put_number.4
 3896                        	
 3897                        		.dbg	line,	"include\routines_LEVELS.c", 511; if(map_blk_flag == TILE_EMPTY)
 3898                        		__not.um	_map_blk_flag
         01:C10D  AD 85 28   			lda	_map_blk_flag
         01:C110  18         			clc
         01:C111  D0 01      			bne	!+
         01:C113  38         			sec
         01:C114             	!:
 3899                        		__bfalse	.LL107
         01:C114  90 67      			bcc	.LL107
 3900                        	
 3901                        		.dbg	line,	"include\routines_LEVELS.c", 512; {
 3902                        	
 3903                        		.dbg	line,	"include\routines_LEVELS.c", 513; sgx_map_pxl_x += 2;
 3904                        		__add_st.wmiq	2, _sgx_map_pxl_x
         01:C116  18         			clc
         01:C117  AD 64 23   			lda.l	_sgx_map_pxl_x
         01:C11A  69 02      			adc.l	#2
         01:C11C  8D 64 23   			sta.l	_sgx_map_pxl_x
         01:C11F  90 03      			bcc	!+
         01:C121  EE 65 23   			inc.h	_sgx_map_pxl_x
         01:C124             	!:
 3905                        	
 3906                        		.dbg	line,	"include\routines_LEVELS.c", 514; }
 3907                        	
 3908                        		.dbg	line,	"include\routines_LEVELS.c", 515; }
 3909    01:C124             	.LL107	.alias		.LL108
 3910                        	
 3911                        		.dbg	line,	"include\routines_LEVELS.c", 518; else if(player_axis == AXIS_LEFT)
 3912                        		__bra		.LL108
         01:C124  80 57      			bra	.LL108
 3913    01:C126             	.LL105:
 3914                        		__ld.umq	_player_axis
         01:C126  AD 0F 23   			lda	_player_axis
 3915                        		__equ_b.uiq	1
         01:C129  C9 01      			cmp	#1
         01:C12B  F0 01      			beq	!+
         01:C12D  18         			clc
         01:C12E             	!:
 3916                        		__bfalse	.LL109
         01:C12E  90 4D      			bcc	.LL109
 3917                        	
 3918                        		.dbg	line,	"include\routines_LEVELS.c", 519; {
 3919                        	
 3920                        		.dbg	line,	"include\routines_LEVELS.c", 520; // CHECK COLLISION WITH FLOOR //
 3921                        	
 3922                        		.dbg	line,	"include\routines_LEVELS.c", 521; check_FLOOR_R();
 3923                        		__call		_check_FLOOR_R
         01:C130  20 45 FF   			call	_check_FLOOR_R
 3924                        	
 3925                        		.dbg	line,	"include\routines_LEVELS.c", 523; if(map_blk_flag == TILE_EMPTY)
 3926                        		__not.um	_map_blk_flag
         01:C133  AD 85 28   			lda	_map_blk_flag
         01:C136  18         			clc
         01:C137  D0 01      			bne	!+
         01:C139  38         			sec
         01:C13A             	!:
 3927                        		__bfalse	.LL110
         01:C13A  90 27      			bcc	.LL110
 3928                        	
 3929                        		.dbg	line,	"include\routines_LEVELS.c", 524; {
 3930                        	
 3931                        		.dbg	line,	"include\routines_LEVELS.c", 525; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
 3932                        		__st.wmiq	18432, _di
         01:C13C  64 F0      			stz.l	_di
         01:C13E  A9 48      			lda.h	#18432
         01:C140  85 F1      			sta.h	_di
 3933                        		__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
         01:C142  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C144  85 EC      			sta.l	_bp
         01:C146  A9 7A      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C148  85 ED      			sta.h	_bp
         01:C14A  A9 0B      			lda	#bank(_tiles_SPR_PLAYER)
         01:C14C  85 02      			sta	_bp_bank
 3934                        		__st.wmiq	256, _ax
         01:C14E  64 F8      			stz.l	_ax
         01:C150  A9 01      			lda.h	#256
         01:C152  85 F9      			sta.h	_ax
 3935                        		 _load_vram.3
         01:C154  82         			clx				; Offset to PCE VDC.
         01:C155  20 77 FF   			call	load_vram_x
 3936                        	
 3937                        		.dbg	line,	"include\routines_LEVELS.c", 527; jump_ladder = FALSE;
 3938                        		__st.umiq	0, _jump_ladder
         01:C158  9C 14 23   			stz	_jump_ladder
 3939                        	
 3940                        		.dbg	line,	"include\routines_LEVELS.c", 528; player_index_jump = 0;
 3941                        		__st.umiq	0, _player_index_jump
         01:C15B  9C 12 23   			stz	_player_index_jump
 3942                        	
 3943                        		.dbg	line,	"include\routines_LEVELS.c", 529; player_state = STATE_FALL;
 3944                        		__st.umiq	9, _player_state
         01:C15E  A9 09      			lda.l	#9
         01:C160  8D 0E 23   			sta	_player_state
 3945                        	
 3946                        		.dbg	line,	"include\routines_LEVELS.c", 530; }
 3947                        	
 3948                        		.dbg	line,	"include\routines_LEVELS.c", 533; // CHECK COLLISION WITH BG //
 3949                        	
 3950                        		.dbg	line,	"include\routines_LEVELS.c", 534; check_WALL_BL();
 3951    01:C163             	.LL110:
 3952                        		__call		_check_WALL_BL
         01:C163  20 3B FF   			call	_check_WALL_BL
 3953                        	
 3954                        		.dbg	line,	"include\routines_LEVELS.c", 536; if(map_blk_flag == TILE_EMPTY)
 3955                        		__not.um	_map_blk_flag
         01:C166  AD 85 28   			lda	_map_blk_flag
         01:C169  18         			clc
         01:C16A  D0 01      			bne	!+
         01:C16C  38         			sec
         01:C16D             	!:
 3956                        		__bfalse	.LL111
         01:C16D  90 0E      			bcc	.LL111
 3957                        	
 3958                        		.dbg	line,	"include\routines_LEVELS.c", 537; {
 3959                        	
 3960                        		.dbg	line,	"include\routines_LEVELS.c", 538; sgx_map_pxl_x -= 2;
 3961                        		__sub_st.wmiq	2, _sgx_map_pxl_x
         01:C16F  38         			sec
         01:C170  AD 64 23   			lda.l	_sgx_map_pxl_x
         01:C173  E9 02      			sbc.l	#2
         01:C175  8D 64 23   			sta.l	_sgx_map_pxl_x
         01:C178  B0 03      			bcs	!+
         01:C17A  CE 65 23   			dec.h	_sgx_map_pxl_x
         01:C17D             	!:
 3962                        	
 3963                        		.dbg	line,	"include\routines_LEVELS.c", 539; }
 3964                        	
 3965                        		.dbg	line,	"include\routines_LEVELS.c", 540; }
 3966    01:C17D             	.LL111:
 3967                        	
 3968                        		.dbg	line,	"include\routines_LEVELS.c", 545; spr_set(player_id);
 3969    01:C17D             	.LL109:
 3970    01:C17D             	.LL108:
 3971                        		__ld.umq	_player_id
         01:C17D  AD 0D 23   			lda	_player_id
 3972                        		__call		_spr_set.1
         01:C180  20 DD E7   			call	_spr_set.1
 3973                        	
 3974                        		.dbg	line,	"include\routines_LEVELS.c", 548; // UPDATE PLAYER TILES //
 3975                        	
 3976                        		.dbg	line,	"include\routines_LEVELS.c", 549; if(player_counter_anim == 0)
 3977                        		__not.um	_player_counter_anim
         01:C183  AD 11 23   			lda	_player_counter_anim
         01:C186  18         			clc
         01:C187  D0 01      			bne	!+
         01:C189  38         			sec
         01:C18A             	!:
 3978                        		__bfalse	.LL112
         01:C18A  90 1F      			bcc	.LL112
 3979                        	
 3980                        		.dbg	line,	"include\routines_LEVELS.c", 550; {
 3981                        	
 3982                        		.dbg	line,	"include\routines_LEVELS.c", 551; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
 3983                        		__st.wmiq	18432, _di
         01:C18C  64 F0      			stz.l	_di
         01:C18E  A9 48      			lda.h	#18432
         01:C190  85 F1      			sta.h	_di
 3984                        		__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
         01:C192  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C194  85 EC      			sta.l	_bp
         01:C196  A9 7A      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C198  85 ED      			sta.h	_bp
         01:C19A  A9 0B      			lda	#bank(_tiles_SPR_PLAYER)
         01:C19C  85 02      			sta	_bp_bank
 3985                        		__st.wmiq	256, _ax
         01:C19E  64 F8      			stz.l	_ax
         01:C1A0  A9 01      			lda.h	#256
         01:C1A2  85 F9      			sta.h	_ax
 3986                        		 _load_vram.3
         01:C1A4  82         			clx				; Offset to PCE VDC.
         01:C1A5  20 77 FF   			call	load_vram_x
 3987                        	
 3988                        		.dbg	line,	"include\routines_LEVELS.c", 552; }
 3989                        	
 3990                        		.dbg	line,	"include\routines_LEVELS.c", 555; else if(player_counter_anim == 2)
 3991                        		__bra		.LL113
         01:C1A8  4C D7 C2   			bra	.LL113
 3992    01:C1AB             	.LL112:
 3993                        		__ld.umq	_player_counter_anim
         01:C1AB  AD 11 23   			lda	_player_counter_anim
 3994                        		__equ_b.uiq	2
         01:C1AE  C9 02      			cmp	#2
         01:C1B0  F0 01      			beq	!+
         01:C1B2  18         			clc
         01:C1B3             	!:
 3995                        		__bfalse	.LL114
         01:C1B3  90 1F      			bcc	.LL114
 3996                        	
 3997                        		.dbg	line,	"include\routines_LEVELS.c", 556; {
 3998                        	
 3999                        		.dbg	line,	"include\routines_LEVELS.c", 557; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + OFFSET_PLAYER_WALK_1 , TILES_16);
 4000                        		__st.wmiq	18432, _di
         01:C1B5  64 F0      			stz.l	_di
         01:C1B7  A9 48      			lda.h	#18432
         01:C1B9  85 F1      			sta.h	_di
 4001                        		__farptr	_tiles_SPR_PLAYER + 512, _bp_bank, _bp
         01:C1BB  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 512))
         01:C1BD  85 EC      			sta.l	_bp
         01:C1BF  A9 7C      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 512))
         01:C1C1  85 ED      			sta.h	_bp
         01:C1C3  A9 0B      			lda	#bank(_tiles_SPR_PLAYER + 512)
         01:C1C5  85 02      			sta	_bp_bank
 4002                        		__st.wmiq	256, _ax
         01:C1C7  64 F8      			stz.l	_ax
         01:C1C9  A9 01      			lda.h	#256
         01:C1CB  85 F9      			sta.h	_ax
 4003                        		 _load_vram.3
         01:C1CD  82         			clx				; Offset to PCE VDC.
         01:C1CE  20 77 FF   			call	load_vram_x
 4004                        	
 4005                        		.dbg	line,	"include\routines_LEVELS.c", 558; }
 4006                        	
 4007                        		.dbg	line,	"include\routines_LEVELS.c", 561; else if(player_counter_anim == 5)
 4008                        		__bra		.LL115
         01:C1D1  4C D7 C2   			bra	.LL115
 4009    01:C1D4             	.LL114:
 4010                        		__ld.umq	_player_counter_anim
         01:C1D4  AD 11 23   			lda	_player_counter_anim
 4011                        		__equ_b.uiq	5
         01:C1D7  C9 05      			cmp	#5
         01:C1D9  F0 01      			beq	!+
         01:C1DB  18         			clc
         01:C1DC             	!:
 4012                        		__bfalse	.LL116
         01:C1DC  90 1F      			bcc	.LL116
 4013                        	
 4014                        		.dbg	line,	"include\routines_LEVELS.c", 562; {
 4015                        	
 4016                        		.dbg	line,	"include\routines_LEVELS.c", 563; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + OFFSET_PLAYER_WALK_2 , TILES_16);
 4017                        		__st.wmiq	18432, _di
         01:C1DE  64 F0      			stz.l	_di
         01:C1E0  A9 48      			lda.h	#18432
         01:C1E2  85 F1      			sta.h	_di
 4018                        		__farptr	_tiles_SPR_PLAYER + 1024, _bp_bank, _bp
         01:C1E4  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 1024))
         01:C1E6  85 EC      			sta.l	_bp
         01:C1E8  A9 7E      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 1024))
         01:C1EA  85 ED      			sta.h	_bp
         01:C1EC  A9 0B      			lda	#bank(_tiles_SPR_PLAYER + 1024)
         01:C1EE  85 02      			sta	_bp_bank
 4019                        		__st.wmiq	256, _ax
         01:C1F0  64 F8      			stz.l	_ax
         01:C1F2  A9 01      			lda.h	#256
         01:C1F4  85 F9      			sta.h	_ax
 4020                        		 _load_vram.3
         01:C1F6  82         			clx				; Offset to PCE VDC.
         01:C1F7  20 77 FF   			call	load_vram_x
 4021                        	
 4022                        		.dbg	line,	"include\routines_LEVELS.c", 564; }
 4023                        	
 4024                        		.dbg	line,	"include\routines_LEVELS.c", 567; else if(player_counter_anim == 8)
 4025                        		__bra		.LL117
         01:C1FA  4C D7 C2   			bra	.LL117
 4026    01:C1FD             	.LL116:
 4027                        		__ld.umq	_player_counter_anim
         01:C1FD  AD 11 23   			lda	_player_counter_anim
 4028                        		__equ_b.uiq	8
         01:C200  C9 08      			cmp	#8
         01:C202  F0 01      			beq	!+
         01:C204  18         			clc
         01:C205             	!:
 4029                        		__bfalse	.LL118
         01:C205  90 1F      			bcc	.LL118
 4030                        	
 4031                        		.dbg	line,	"include\routines_LEVELS.c", 568; {
 4032                        	
 4033                        		.dbg	line,	"include\routines_LEVELS.c", 569; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + OFFSET_PLAYER_WALK_3 , TILES_16);
 4034                        		__st.wmiq	18432, _di
         01:C207  64 F0      			stz.l	_di
         01:C209  A9 48      			lda.h	#18432
         01:C20B  85 F1      			sta.h	_di
 4035                        		__farptr	_tiles_SPR_PLAYER + 1536, _bp_bank, _bp
         01:C20D  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 1536))
         01:C20F  85 EC      			sta.l	_bp
         01:C211  A9 60      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 1536))
         01:C213  85 ED      			sta.h	_bp
         01:C215  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 1536)
         01:C217  85 02      			sta	_bp_bank
 4036                        		__st.wmiq	256, _ax
         01:C219  64 F8      			stz.l	_ax
         01:C21B  A9 01      			lda.h	#256
         01:C21D  85 F9      			sta.h	_ax
 4037                        		 _load_vram.3
         01:C21F  82         			clx				; Offset to PCE VDC.
         01:C220  20 77 FF   			call	load_vram_x
 4038                        	
 4039                        		.dbg	line,	"include\routines_LEVELS.c", 570; }
 4040                        	
 4041                        		.dbg	line,	"include\routines_LEVELS.c", 573; else if(player_counter_anim == 11)
 4042                        		__bra		.LL119
         01:C223  4C D7 C2   			bra	.LL119
 4043    01:C226             	.LL118:
 4044                        		__ld.umq	_player_counter_anim
         01:C226  AD 11 23   			lda	_player_counter_anim
 4045                        		__equ_b.uiq	11
         01:C229  C9 0B      			cmp	#11
         01:C22B  F0 01      			beq	!+
         01:C22D  18         			clc
         01:C22E             	!:
 4046                        		__bfalse	.LL120
         01:C22E  90 1F      			bcc	.LL120
 4047                        	
 4048                        		.dbg	line,	"include\routines_LEVELS.c", 574; {
 4049                        	
 4050                        		.dbg	line,	"include\routines_LEVELS.c", 575; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
 4051                        		__st.wmiq	18432, _di
         01:C230  64 F0      			stz.l	_di
         01:C232  A9 48      			lda.h	#18432
         01:C234  85 F1      			sta.h	_di
 4052                        		__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
         01:C236  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C238  85 EC      			sta.l	_bp
         01:C23A  A9 7A      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C23C  85 ED      			sta.h	_bp
         01:C23E  A9 0B      			lda	#bank(_tiles_SPR_PLAYER)
         01:C240  85 02      			sta	_bp_bank
 4053                        		__st.wmiq	256, _ax
         01:C242  64 F8      			stz.l	_ax
         01:C244  A9 01      			lda.h	#256
         01:C246  85 F9      			sta.h	_ax
 4054                        		 _load_vram.3
         01:C248  82         			clx				; Offset to PCE VDC.
         01:C249  20 77 FF   			call	load_vram_x
 4055                        	
 4056                        		.dbg	line,	"include\routines_LEVELS.c", 576; }
 4057                        	
 4058                        		.dbg	line,	"include\routines_LEVELS.c", 579; else if(player_counter_anim == 14)
 4059                        		__bra		.LL121
         01:C24C  4C D7 C2   			bra	.LL121
 4060    01:C24F             	.LL120:
 4061                        		__ld.umq	_player_counter_anim
         01:C24F  AD 11 23   			lda	_player_counter_anim
 4062                        		__equ_b.uiq	14
         01:C252  C9 0E      			cmp	#14
         01:C254  F0 01      			beq	!+
         01:C256  18         			clc
         01:C257             	!:
 4063                        		__bfalse	.LL122
         01:C257  90 1E      			bcc	.LL122
 4064                        	
 4065                        		.dbg	line,	"include\routines_LEVELS.c", 580; {
 4066                        	
 4067                        		.dbg	line,	"include\routines_LEVELS.c", 581; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + OFFSET_PLAYER_WALK_4 , TILES_16);
 4068                        		__st.wmiq	18432, _di
         01:C259  64 F0      			stz.l	_di
         01:C25B  A9 48      			lda.h	#18432
         01:C25D  85 F1      			sta.h	_di
 4069                        		__farptr	_tiles_SPR_PLAYER + 2048, _bp_bank, _bp
         01:C25F  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 2048))
         01:C261  85 EC      			sta.l	_bp
         01:C263  A9 62      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 2048))
         01:C265  85 ED      			sta.h	_bp
         01:C267  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 2048)
         01:C269  85 02      			sta	_bp_bank
 4070                        		__st.wmiq	256, _ax
         01:C26B  64 F8      			stz.l	_ax
         01:C26D  A9 01      			lda.h	#256
         01:C26F  85 F9      			sta.h	_ax
 4071                        		 _load_vram.3
         01:C271  82         			clx				; Offset to PCE VDC.
         01:C272  20 77 FF   			call	load_vram_x
 4072                        	
 4073                        		.dbg	line,	"include\routines_LEVELS.c", 582; }
 4074                        	
 4075                        		.dbg	line,	"include\routines_LEVELS.c", 585; else if(player_counter_anim == 17)
 4076                        		__bra		.LL123
         01:C275  80 60      			bra	.LL123
 4077    01:C277             	.LL122:
 4078                        		__ld.umq	_player_counter_anim
         01:C277  AD 11 23   			lda	_player_counter_anim
 4079                        		__equ_b.uiq	17
         01:C27A  C9 11      			cmp	#17
         01:C27C  F0 01      			beq	!+
         01:C27E  18         			clc
         01:C27F             	!:
 4080                        		__bfalse	.LL124
         01:C27F  90 1E      			bcc	.LL124
 4081                        	
 4082                        		.dbg	line,	"include\routines_LEVELS.c", 586; {
 4083                        	
 4084                        		.dbg	line,	"include\routines_LEVELS.c", 587; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + OFFSET_PLAYER_WALK_5 , TILES_16);
 4085                        		__st.wmiq	18432, _di
         01:C281  64 F0      			stz.l	_di
         01:C283  A9 48      			lda.h	#18432
         01:C285  85 F1      			sta.h	_di
 4086                        		__farptr	_tiles_SPR_PLAYER + 2560, _bp_bank, _bp
         01:C287  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 2560))
         01:C289  85 EC      			sta.l	_bp
         01:C28B  A9 64      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 2560))
         01:C28D  85 ED      			sta.h	_bp
         01:C28F  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 2560)
         01:C291  85 02      			sta	_bp_bank
 4087                        		__st.wmiq	256, _ax
         01:C293  64 F8      			stz.l	_ax
         01:C295  A9 01      			lda.h	#256
         01:C297  85 F9      			sta.h	_ax
 4088                        		 _load_vram.3
         01:C299  82         			clx				; Offset to PCE VDC.
         01:C29A  20 77 FF   			call	load_vram_x
 4089                        	
 4090                        		.dbg	line,	"include\routines_LEVELS.c", 588; }
 4091                        	
 4092                        		.dbg	line,	"include\routines_LEVELS.c", 591; else if(player_counter_anim == 20)
 4093                        		__bra		.LL125
         01:C29D  80 38      			bra	.LL125
 4094    01:C29F             	.LL124:
 4095                        		__ld.umq	_player_counter_anim
         01:C29F  AD 11 23   			lda	_player_counter_anim
 4096                        		__equ_b.uiq	20
         01:C2A2  C9 14      			cmp	#20
         01:C2A4  F0 01      			beq	!+
         01:C2A6  18         			clc
         01:C2A7             	!:
 4097                        		__bfalse	.LL126
         01:C2A7  90 1E      			bcc	.LL126
 4098                        	
 4099                        		.dbg	line,	"include\routines_LEVELS.c", 592; {
 4100                        	
 4101                        		.dbg	line,	"include\routines_LEVELS.c", 593; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + OFFSET_PLAYER_WALK_6 , TILES_16);
 4102                        		__st.wmiq	18432, _di
         01:C2A9  64 F0      			stz.l	_di
         01:C2AB  A9 48      			lda.h	#18432
         01:C2AD  85 F1      			sta.h	_di
 4103                        		__farptr	_tiles_SPR_PLAYER + 3072, _bp_bank, _bp
         01:C2AF  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3072))
         01:C2B1  85 EC      			sta.l	_bp
         01:C2B3  A9 66      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3072))
         01:C2B5  85 ED      			sta.h	_bp
         01:C2B7  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 3072)
         01:C2B9  85 02      			sta	_bp_bank
 4104                        		__st.wmiq	256, _ax
         01:C2BB  64 F8      			stz.l	_ax
         01:C2BD  A9 01      			lda.h	#256
         01:C2BF  85 F9      			sta.h	_ax
 4105                        		 _load_vram.3
         01:C2C1  82         			clx				; Offset to PCE VDC.
         01:C2C2  20 77 FF   			call	load_vram_x
 4106                        	
 4107                        		.dbg	line,	"include\routines_LEVELS.c", 594; }
 4108                        	
 4109                        		.dbg	line,	"include\routines_LEVELS.c", 597; else if(player_counter_anim == 22)
 4110                        		__bra		.LL127
         01:C2C5  80 10      			bra	.LL127
 4111    01:C2C7             	.LL126:
 4112                        		__ld.umq	_player_counter_anim
         01:C2C7  AD 11 23   			lda	_player_counter_anim
 4113                        		__equ_b.uiq	22
         01:C2CA  C9 16      			cmp	#22
         01:C2CC  F0 01      			beq	!+
         01:C2CE  18         			clc
         01:C2CF             	!:
 4114                        		__bfalse	.LL128
         01:C2CF  90 06      			bcc	.LL128
 4115                        	
 4116                        		.dbg	line,	"include\routines_LEVELS.c", 598; {
 4117                        	
 4118                        		.dbg	line,	"include\routines_LEVELS.c", 599; player_counter_anim = 0;
 4119                        		__st.umiq	0, _player_counter_anim
         01:C2D1  9C 11 23   			stz	_player_counter_anim
 4120                        	
 4121                        		.dbg	line,	"include\routines_LEVELS.c", 601; return;
 4122                        		__bra		.LL100
         01:C2D4  4C 69 D1   			bra	.LL100
 4123                        	
 4124                        		.dbg	line,	"include\routines_LEVELS.c", 602; }
 4125                        	
 4126                        		.dbg	line,	"include\routines_LEVELS.c", 605; player_counter_anim += 1;
 4127    01:C2D7             	.LL128:
 4128    01:C2D7             	.LL127:
 4129    01:C2D7             	.LL125:
 4130    01:C2D7             	.LL123:
 4131    01:C2D7             	.LL121:
 4132    01:C2D7             	.LL119:
 4133    01:C2D7             	.LL117:
 4134    01:C2D7             	.LL115:
 4135    01:C2D7             	.LL113:
 4136                        		__add_st.umiq	1, _player_counter_anim
         01:C2D7  EE 11 23   			inc	_player_counter_anim
 4137                        	
 4138                        		.dbg	line,	"include\routines_LEVELS.c", 607; }
 4139                        	
 4140                        		.dbg	line,	"include\routines_LEVELS.c", 610; else if(player_state == STATE_JUMP)
 4141                        		__bra		.LL129
         01:C2DA  4C 69 D1   			bra	.LL129
 4142    01:C2DD             	.LL104:
 4143                        		__ld.umq	_player_state
         01:C2DD  AD 0E 23   			lda	_player_state
 4144                        		__equ_b.uiq	4
         01:C2E0  C9 04      			cmp	#4
         01:C2E2  F0 01      			beq	!+
         01:C2E4  18         			clc
         01:C2E5             	!:
 4145                        		__bfalse	.LL130
         01:C2E5  B0 03 4C B5			bcc	.LL130
         01:C2E9  C4          
 4146                        	
 4147                        		.dbg	line,	"include\routines_LEVELS.c", 611; {
 4148                        	
 4149                        		.dbg	line,	"include\routines_LEVELS.c", 612; unsigned char i;
 4150                        	
 4151                        		.dbg	line,	"include\routines_LEVELS.c", 613; i = 1;
 4152                        		__st.umiq	1, __update_PLAYER_end - 1  /* i */
         01:C2EA  A9 01      			lda.l	#1
         01:C2EC  8D 09 23   			sta	__update_PLAYER_end - 1
 4153                        	
 4154                        		.dbg	line,	"include\routines_LEVELS.c", 616; if(player_counter_anim == 0)
 4155                        		__not.um	_player_counter_anim
         01:C2EF  AD 11 23   			lda	_player_counter_anim
         01:C2F2  18         			clc
         01:C2F3  D0 01      			bne	!+
         01:C2F5  38         			sec
         01:C2F6             	!:
 4156                        		__bfalse	.LL131
         01:C2F6  90 21      			bcc	.LL131
 4157                        	
 4158                        		.dbg	line,	"include\routines_LEVELS.c", 617; {
 4159                        	
 4160                        		.dbg	line,	"include\routines_LEVELS.c", 618; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_112 , TILES_16);
 4161                        		__st.wmiq	18432, _di
         01:C2F8  64 F0      			stz.l	_di
         01:C2FA  A9 48      			lda.h	#18432
         01:C2FC  85 F1      			sta.h	_di
 4162                        		__farptr	_tiles_SPR_PLAYER + 3584, _bp_bank, _bp
         01:C2FE  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3584))
         01:C300  85 EC      			sta.l	_bp
         01:C302  A9 68      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3584))
         01:C304  85 ED      			sta.h	_bp
         01:C306  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 3584)
         01:C308  85 02      			sta	_bp_bank
 4163                        		__st.wmiq	256, _ax
         01:C30A  64 F8      			stz.l	_ax
         01:C30C  A9 01      			lda.h	#256
         01:C30E  85 F9      			sta.h	_ax
 4164                        		 _load_vram.3
         01:C310  82         			clx				; Offset to PCE VDC.
         01:C311  20 77 FF   			call	load_vram_x
 4165                        	
 4166                        		.dbg	line,	"include\routines_LEVELS.c", 620; player_counter_anim = 1;
 4167                        		__st.umiq	1, _player_counter_anim
         01:C314  A9 01      			lda.l	#1
         01:C316  8D 11 23   			sta	_player_counter_anim
 4168                        	
 4169                        		.dbg	line,	"include\routines_LEVELS.c", 621; }
 4170                        	
 4171                        		.dbg	line,	"include\routines_LEVELS.c", 624; player_pos_y += TABLE_PLAYER_JUMP_V[player_index_jump];
 4172    01:C319             	.LL131:
 4173                        		__ldx.umq	_player_index_jump
         01:C319  AE 12 23   			ldx	_player_index_jump
 4174                        		__ld.bax	_TABLE_PLAYER_JUMP_V
         01:C31C  BD 1D 60   			lda	_TABLE_PLAYER_JUMP_V, x
         01:C31F  C2         			cly
         01:C320  10 01      			bpl	!+
         01:C322  88         			dey
         01:C323             	!:
 4175                        		__add_st.wmq	_player_pos_y
         01:C323  18         			clc
         01:C324  6D 18 23   			adc.l	_player_pos_y
         01:C327  8D 18 23   			sta.l	_player_pos_y
         01:C32A  98         			tya
         01:C32B  6D 19 23   			adc.h	_player_pos_y
         01:C32E  8D 19 23   			sta.h	_player_pos_y
 4176                        	
 4177                        		.dbg	line,	"include\routines_LEVELS.c", 626; spr_set(player_id);
 4178                        		__ld.umq	_player_id
         01:C331  AD 0D 23   			lda	_player_id
 4179                        		__call		_spr_set.1
         01:C334  20 DD E7   			call	_spr_set.1
 4180                        	
 4181                        		.dbg	line,	"include\routines_LEVELS.c", 627; spr_y(player_pos_y);
 4182                        		__ld.wm		_player_pos_y
         01:C337  AD 18 23   			lda.l	_player_pos_y
         01:C33A  AC 19 23   			ldy.h	_player_pos_y
 4183                        		__call		_spr_y.1
         01:C33D  20 19 E8   			call	_spr_y.1
 4184                        	
 4185                        		.dbg	line,	"include\routines_LEVELS.c", 631; if(player_index_jump < 34)
 4186                        		__ld.umq	_player_index_jump
         01:C340  AD 12 23   			lda	_player_index_jump
 4187                        		__ult_b.uiq	34
         01:C343  C9 22      			cmp	#34		; Subtract integer from A.
         01:C345  6A         			ror	a		; CC if A < integer.
         01:C346  49 80      			eor	#$80
         01:C348  2A         			rol	a
 4188                        		__bfalse	.LL132
         01:C349  90 03      			bcc	.LL132
 4189                        	
 4190                        		.dbg	line,	"include\routines_LEVELS.c", 632; {
 4191                        	
 4192                        		.dbg	line,	"include\routines_LEVELS.c", 633; player_index_jump += 1;
 4193                        		__add_st.umiq	1, _player_index_jump
         01:C34B  EE 12 23   			inc	_player_index_jump
 4194                        	
 4195                        		.dbg	line,	"include\routines_LEVELS.c", 634; }
 4196                        	
 4197                        		.dbg	line,	"include\routines_LEVELS.c", 637; // CHECK COLLISION WITH FLOOR //
 4198                        	
 4199                        		.dbg	line,	"include\routines_LEVELS.c", 638; if(player_axis == AXIS_RIGHT)
 4200    01:C34E             	.LL132:
 4201                        		__not.um	_player_axis
         01:C34E  AD 0F 23   			lda	_player_axis
         01:C351  18         			clc
         01:C352  D0 01      			bne	!+
         01:C354  38         			sec
         01:C355             	!:
 4202                        		__bfalse	.LL133
         01:C355  90 05      			bcc	.LL133
 4203                        	
 4204                        		.dbg	line,	"include\routines_LEVELS.c", 639; {
 4205                        	
 4206                        		.dbg	line,	"include\routines_LEVELS.c", 640; check_FLOOR_R();
 4207                        		__call		_check_FLOOR_R
         01:C357  20 45 FF   			call	_check_FLOOR_R
 4208                        	
 4209                        		.dbg	line,	"include\routines_LEVELS.c", 641; }
 4210                        	
 4211                        		.dbg	line,	"include\routines_LEVELS.c", 643; else
 4212                        		__bra		.LL134
         01:C35A  80 03      			bra	.LL134
 4213    01:C35C             	.LL133:
 4214                        	
 4215                        		.dbg	line,	"include\routines_LEVELS.c", 644; {
 4216                        	
 4217                        		.dbg	line,	"include\routines_LEVELS.c", 645; check_FLOOR_L();
 4218                        		__call		_check_FLOOR_L
         01:C35C  20 63 FF   			call	_check_FLOOR_L
 4219                        	
 4220                        		.dbg	line,	"include\routines_LEVELS.c", 646; }
 4221    01:C35F             	.LL134:
 4222                        	
 4223                        		.dbg	line,	"include\routines_LEVELS.c", 649; if(map_blk_flag == TILE_BG)
 4224                        		__ld.umq	_map_blk_flag
         01:C35F  AD 85 28   			lda	_map_blk_flag
 4225                        		__equ_b.uiq	1
         01:C362  C9 01      			cmp	#1
         01:C364  F0 01      			beq	!+
         01:C366  18         			clc
         01:C367             	!:
 4226                        		__bfalse	.LL135
         01:C367  B0 03 4C 28			bcc	.LL135
         01:C36B  C4          
 4227                        	
 4228                        		.dbg	line,	"include\routines_LEVELS.c", 650; {
 4229                        	
 4230                        		.dbg	line,	"include\routines_LEVELS.c", 651; // CALCULATE HOW MANY PIXELS THE PLAYER MOVED INTO THE GROUND //
 4231                        	
 4232                        		.dbg	line,	"include\routines_LEVELS.c", 652; for(i=1; i<11 ; i++ )
 4233                        		__st.umiq	1, __update_PLAYER_end - 1  /* i */
         01:C36C  A9 01      			lda.l	#1
         01:C36E  8D 09 23   			sta	__update_PLAYER_end - 1
 4234    01:C371             	.LL136:
 4235                        		__ld.umq	__update_PLAYER_end - 1  /* i */
         01:C371  AD 09 23   			lda	__update_PLAYER_end - 1
 4236                        		__ult_b.uiq	11
         01:C374  C9 0B      			cmp	#11		; Subtract integer from A.
         01:C376  6A         			ror	a		; CC if A < integer.
         01:C377  49 80      			eor	#$80
         01:C379  2A         			rol	a
 4237                        		__btrue		.LL138
         01:C37A  B0 08      			bcs	.LL138
 4238                        		__bra		.LL139
         01:C37C  4C 1A C4   			bra	.LL139
 4239    01:C37F             	.LL137:
 4240                        		__inc.umq	__update_PLAYER_end - 1  /* i */
         01:C37F  EE 09 23   			inc	__update_PLAYER_end - 1
 4241                        		__bra		.LL136
         01:C382  80 ED      			bra	.LL136
 4242    01:C384             	.LL138:
 4243                        	
 4244                        		.dbg	line,	"include\routines_LEVELS.c", 653; {
 4245                        	
 4246                        		.dbg	line,	"include\routines_LEVELS.c", 654; if(player_axis == AXIS_RIGHT)
 4247                        		__not.um	_player_axis
         01:C384  AD 0F 23   			lda	_player_axis
         01:C387  18         			clc
         01:C388  D0 01      			bne	!+
         01:C38A  38         			sec
         01:C38B             	!:
 4248                        		__bfalse	.LL140
         01:C38B  90 20      			bcc	.LL140
 4249                        	
 4250                        		.dbg	line,	"include\routines_LEVELS.c", 655; {
 4251                        	
 4252                        		.dbg	line,	"include\routines_LEVELS.c", 656; check_BG( 11 , i);
 4253                        		__ld.wi		11
         01:C38D  A9 0B      			lda.l	#11
         01:C38F  C2         			cly
 4254                        		__pusharg.wr
         01:C390  A6 8D      			ldx	<__sp
         01:C392  CA         			dex
         01:C393  CA         			dex
         01:C394  95 08      			sta.l	<__stack, x
         01:C396  94 09      			sty.h	<__stack, x
         01:C398  86 8D      			stx	<__sp
 4255                        		__ld.um		__update_PLAYER_end - 1  /* i */
         01:C39A  AD 09 23   			lda	__update_PLAYER_end - 1
         01:C39D  C2         			cly
 4256                        		__pusharg.wr
         01:C39E  A6 8D      			ldx	<__sp
         01:C3A0  CA         			dex
         01:C3A1  CA         			dex
         01:C3A2  95 08      			sta.l	<__stack, x
         01:C3A4  94 09      			sty.h	<__stack, x
         01:C3A6  86 8D      			stx	<__sp
 4257                        		__call		_check_BG
         01:C3A8  20 31 FF   			call	_check_BG
 4258                        	
 4259                        		.dbg	line,	"include\routines_LEVELS.c", 657; }
 4260                        	
 4261                        		.dbg	line,	"include\routines_LEVELS.c", 659; else
 4262                        		__bra		.LL141
         01:C3AB  80 1E      			bra	.LL141
 4263    01:C3AD             	.LL140:
 4264                        	
 4265                        		.dbg	line,	"include\routines_LEVELS.c", 660; {
 4266                        	
 4267                        		.dbg	line,	"include\routines_LEVELS.c", 661; check_BG( 10 , i);
 4268                        		__ld.wi		10
         01:C3AD  A9 0A      			lda.l	#10
         01:C3AF  C2         			cly
 4269                        		__pusharg.wr
         01:C3B0  A6 8D      			ldx	<__sp
         01:C3B2  CA         			dex
         01:C3B3  CA         			dex
         01:C3B4  95 08      			sta.l	<__stack, x
         01:C3B6  94 09      			sty.h	<__stack, x
         01:C3B8  86 8D      			stx	<__sp
 4270                        		__ld.um		__update_PLAYER_end - 1  /* i */
         01:C3BA  AD 09 23   			lda	__update_PLAYER_end - 1
         01:C3BD  C2         			cly
 4271                        		__pusharg.wr
         01:C3BE  A6 8D      			ldx	<__sp
         01:C3C0  CA         			dex
         01:C3C1  CA         			dex
         01:C3C2  95 08      			sta.l	<__stack, x
         01:C3C4  94 09      			sty.h	<__stack, x
         01:C3C6  86 8D      			stx	<__sp
 4272                        		__call		_check_BG
         01:C3C8  20 31 FF   			call	_check_BG
 4273                        	
 4274                        		.dbg	line,	"include\routines_LEVELS.c", 662; }
 4275    01:C3CB             	.LL141:
 4276                        	
 4277                        		.dbg	line,	"include\routines_LEVELS.c", 665; if(map_blk_flag == TILE_EMPTY)
 4278                        		__not.um	_map_blk_flag
         01:C3CB  AD 85 28   			lda	_map_blk_flag
         01:C3CE  18         			clc
         01:C3CF  D0 01      			bne	!+
         01:C3D1  38         			sec
         01:C3D2             	!:
 4279                        		__bfalse	.LL142
         01:C3D2  90 AB      			bcc	.LL142
 4280                        	
 4281                        		.dbg	line,	"include\routines_LEVELS.c", 666; {
 4282                        	
 4283                        		.dbg	line,	"include\routines_LEVELS.c", 667; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
 4284                        		__st.wmiq	18432, _di
         01:C3D4  64 F0      			stz.l	_di
         01:C3D6  A9 48      			lda.h	#18432
         01:C3D8  85 F1      			sta.h	_di
 4285                        		__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
         01:C3DA  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C3DC  85 EC      			sta.l	_bp
         01:C3DE  A9 7A      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:C3E0  85 ED      			sta.h	_bp
         01:C3E2  A9 0B      			lda	#bank(_tiles_SPR_PLAYER)
         01:C3E4  85 02      			sta	_bp_bank
 4286                        		__st.wmiq	256, _ax
         01:C3E6  64 F8      			stz.l	_ax
         01:C3E8  A9 01      			lda.h	#256
         01:C3EA  85 F9      			sta.h	_ax
 4287                        		 _load_vram.3
         01:C3EC  82         			clx				; Offset to PCE VDC.
         01:C3ED  20 77 FF   			call	load_vram_x
 4288                        	
 4289                        		.dbg	line,	"include\routines_LEVELS.c", 669; player_pos_y -= (i - 1);
 4290                        		__ld.um		__update_PLAYER_end - 1  /* i */
         01:C3F0  AD 09 23   			lda	__update_PLAYER_end - 1
         01:C3F3  C2         			cly
 4291                        		__sub.wi	1
         01:C3F4  38         			sec
         01:C3F5  E9 01      			sbc.l	#1
         01:C3F7  B0 01      			bcs	!+
         01:C3F9  88         			dey
         01:C3FA             	!:
 4292                        		__isub_st.wmq	_player_pos_y
         01:C3FA  38         			sec
         01:C3FB  49 FF      			eor	#$FF
         01:C3FD  6D 18 23   			adc.l	_player_pos_y
         01:C400  8D 18 23   			sta.l	_player_pos_y
         01:C403  98         			tya
         01:C404  49 FF      			eor	#$FF
         01:C406  6D 19 23   			adc.h	_player_pos_y
         01:C409  8D 19 23   			sta.h	_player_pos_y
 4293                        	
 4294                        		.dbg	line,	"include\routines_LEVELS.c", 670; spr_y(player_pos_y);
 4295                        		__ld.wm		_player_pos_y
         01:C40C  AD 18 23   			lda.l	_player_pos_y
         01:C40F  AC 19 23   			ldy.h	_player_pos_y
 4296                        		__call		_spr_y.1
         01:C412  20 19 E8   			call	_spr_y.1
 4297                        	
 4298                        		.dbg	line,	"include\routines_LEVELS.c", 671; break;
 4299                        		__bra		.LL139
         01:C415  80 03      			bra	.LL139
 4300                        	
 4301                        		.dbg	line,	"include\routines_LEVELS.c", 672; }
 4302                        	
 4303                        		.dbg	line,	"include\routines_LEVELS.c", 674; }
 4304    01:C417             	.LL142	.alias		.LL137
 4305                        		__bra		.LL137
         01:C417  4C 7F C3   			bra	.LL137
 4306    01:C41A             	.LL139:
 4307                        	
 4308                        		.dbg	line,	"include\routines_LEVELS.c", 676; player_counter_anim = 1;
 4309                        		__st.umiq	1, _player_counter_anim
         01:C41A  A9 01      			lda.l	#1
         01:C41C  8D 11 23   			sta	_player_counter_anim
 4310                        	
 4311                        		.dbg	line,	"include\routines_LEVELS.c", 677; player_index_jump = 0;
 4312                        		__st.umiq	0, _player_index_jump
         01:C41F  9C 12 23   			stz	_player_index_jump
 4313                        	
 4314                        		.dbg	line,	"include\routines_LEVELS.c", 678; player_state = STATE_IDLE;
 4315                        		__st.umiq	0, _player_state
         01:C422  9C 0E 23   			stz	_player_state
 4316                        	
 4317                        		.dbg	line,	"include\routines_LEVELS.c", 679; return;
 4318                        		__bra		.LL100
         01:C425  4C 69 D1   			bra	.LL100
 4319                        	
 4320                        		.dbg	line,	"include\routines_LEVELS.c", 680; }
 4321                        	
 4322                        		.dbg	line,	"include\routines_LEVELS.c", 683; // CHECK COLLISION WITH LADDERS //
 4323                        	
 4324                        		.dbg	line,	"include\routines_LEVELS.c", 684; check_LADDER( 16 , 16 );
 4325    01:C428             	.LL135:
 4326                        		__ld.wi		16
         01:C428  A9 10      			lda.l	#16
         01:C42A  C2         			cly
 4327                        		__pusharg.wr
         01:C42B  A6 8D      			ldx	<__sp
         01:C42D  CA         			dex
         01:C42E  CA         			dex
         01:C42F  95 08      			sta.l	<__stack, x
         01:C431  94 09      			sty.h	<__stack, x
         01:C433  86 8D      			stx	<__sp
 4328                        		__ld.wi		16
         01:C435  A9 10      			lda.l	#16
         01:C437  C2         			cly
 4329                        		__pusharg.wr
         01:C438  A6 8D      			ldx	<__sp
         01:C43A  CA         			dex
         01:C43B  CA         			dex
         01:C43C  95 08      			sta.l	<__stack, x
         01:C43E  94 09      			sty.h	<__stack, x
         01:C440  86 8D      			stx	<__sp
 4330                        		__call		_check_LADDER
         01:C442  20 81 FF   			call	_check_LADDER
 4331                        	
 4332                        		.dbg	line,	"include\routines_LEVELS.c", 686; // IF PLAYER HITS THE LADDER //
 4333                        	
 4334                        		.dbg	line,	"include\routines_LEVELS.c", 687; if(map_blk_flag == TILE_LADDER)
 4335                        		__ld.umq	_map_blk_flag
         01:C445  AD 85 28   			lda	_map_blk_flag
 4336                        		__equ_b.uiq	2
         01:C448  C9 02      			cmp	#2
         01:C44A  F0 01      			beq	!+
         01:C44C  18         			clc
         01:C44D             	!:
 4337                        		__bfalse	.LL143
         01:C44D  B0 03 4C 69			bcc	.LL143
         01:C451  D1          
 4338                        	
 4339                        		.dbg	line,	"include\routines_LEVELS.c", 688; {
 4340                        	
 4341                        		.dbg	line,	"include\routines_LEVELS.c", 689; // CAMERA GOES 8 PX BACKWARD //
 4342                        	
 4343                        		.dbg	line,	"include\routines_LEVELS.c", 690; sgx_map_pxl_x = ( (sgx_map_pxl_x >> 3) << 3 );
 4344                        		__ld.wm		_sgx_map_pxl_x
         01:C452  AD 64 23   			lda.l	_sgx_map_pxl_x
         01:C455  AC 65 23   			ldy.h	_sgx_map_pxl_x
 4345                        		__lsr.wi	3
         01:C458  84 00      			sty	__temp
         01:C45A  20 3A E2   			jsr	lsrw3
 4346                        		__asl.wi	3
         01:C45D  84 00      			sty	__temp
         01:C45F  20 D7 E1   			jsr	aslw3
 4347                        		__st.wmq	_sgx_map_pxl_x
         01:C462  8D 64 23   			sta.l	_sgx_map_pxl_x
         01:C465  8C 65 23   			sty.h	_sgx_map_pxl_x
 4348                        	
 4349                        		.dbg	line,	"include\routines_LEVELS.c", 692; // SO WE UPDATE THE MAP //
 4350                        	
 4351                        		.dbg	line,	"include\routines_LEVELS.c", 693; sgx_scroll_map();
 4352                        		__call		_sgx_scroll_map
         01:C468  20 95 FF   			call	_sgx_scroll_map
 4353                        	
 4354                        		.dbg	line,	"include\routines_LEVELS.c", 695; // CHECK IF THE PLAYER STANDS RIGHT TO THE LADDER //
 4355                        	
 4356                        		.dbg	line,	"include\routines_LEVELS.c", 696; check_LADDER( 31 , 16 );
 4357                        		__ld.wi		31
         01:C46B  A9 1F      			lda.l	#31
         01:C46D  C2         			cly
 4358                        		__pusharg.wr
         01:C46E  A6 8D      			ldx	<__sp
         01:C470  CA         			dex
         01:C471  CA         			dex
         01:C472  95 08      			sta.l	<__stack, x
         01:C474  94 09      			sty.h	<__stack, x
         01:C476  86 8D      			stx	<__sp
 4359                        		__ld.wi		16
         01:C478  A9 10      			lda.l	#16
         01:C47A  C2         			cly
 4360                        		__pusharg.wr
         01:C47B  A6 8D      			ldx	<__sp
         01:C47D  CA         			dex
         01:C47E  CA         			dex
         01:C47F  95 08      			sta.l	<__stack, x
         01:C481  94 09      			sty.h	<__stack, x
         01:C483  86 8D      			stx	<__sp
 4361                        		__call		_check_LADDER
         01:C485  20 81 FF   			call	_check_LADDER
 4362                        	
 4363                        		.dbg	line,	"include\routines_LEVELS.c", 698; if(map_blk_flag == TILE_LADDER)
 4364                        		__ld.umq	_map_blk_flag
         01:C488  AD 85 28   			lda	_map_blk_flag
 4365                        		__equ_b.uiq	2
         01:C48B  C9 02      			cmp	#2
         01:C48D  F0 01      			beq	!+
         01:C48F  18         			clc
         01:C490             	!:
 4366                        		__bfalse	.LL144
         01:C490  90 0E      			bcc	.LL144
 4367                        	
 4368                        		.dbg	line,	"include\routines_LEVELS.c", 699; {
 4369                        	
 4370                        		.dbg	line,	"include\routines_LEVELS.c", 700; sgx_map_pxl_x += 8;
 4371                        		__add_st.wmiq	8, _sgx_map_pxl_x
         01:C492  18         			clc
         01:C493  AD 64 23   			lda.l	_sgx_map_pxl_x
         01:C496  69 08      			adc.l	#8
         01:C498  8D 64 23   			sta.l	_sgx_map_pxl_x
         01:C49B  90 03      			bcc	!+
         01:C49D  EE 65 23   			inc.h	_sgx_map_pxl_x
         01:C4A0             	!:
 4372                        	
 4373                        		.dbg	line,	"include\routines_LEVELS.c", 701; }
 4374                        	
 4375                        		.dbg	line,	"include\routines_LEVELS.c", 703; player_counter_anim = 1;
 4376    01:C4A0             	.LL144:
 4377                        		__st.umiq	1, _player_counter_anim
         01:C4A0  A9 01      			lda.l	#1
         01:C4A2  8D 11 23   			sta	_player_counter_anim
 4378                        	
 4379                        		.dbg	line,	"include\routines_LEVELS.c", 704; player_index_jump = 0;
 4380                        		__st.umiq	0, _player_index_jump
         01:C4A5  9C 12 23   			stz	_player_index_jump
 4381                        	
 4382                        		.dbg	line,	"include\routines_LEVELS.c", 705; jump_ladder = TRUE;
 4383                        		__st.umiq	1, _jump_ladder
         01:C4A8  A9 01      			lda.l	#1
         01:C4AA  8D 14 23   			sta	_jump_ladder
 4384                        	
 4385                        		.dbg	line,	"include\routines_LEVELS.c", 706; player_state = STATE_HANG;
 4386                        		__st.umiq	10, _player_state
         01:C4AD  A9 0A      			lda.l	#10
         01:C4AF  8D 0E 23   			sta	_player_state
 4387                        	
 4388                        		.dbg	line,	"include\routines_LEVELS.c", 707; }
 4389                        	
 4390                        		.dbg	line,	"include\routines_LEVELS.c", 708; }
 4391    01:C4B2             	.LL143	.alias		.LL145
 4392                        	
 4393                        		.dbg	line,	"include\routines_LEVELS.c", 711; else if(player_state == STATE_JUMP_RIGHT)
 4394                        		__bra		.LL145
         01:C4B2  4C 69 D1   			bra	.LL145
 4395    01:C4B5             	.LL130:
 4396                        		__ld.umq	_player_state
         01:C4B5  AD 0E 23   			lda	_player_state
 4397                        		__equ_b.uiq	5
         01:C4B8  C9 05      			cmp	#5
         01:C4BA  F0 01      			beq	!+
         01:C4BC  18         			clc
         01:C4BD             	!:
 4398                        		__bfalse	.LL146
         01:C4BD  B0 03 4C C6			bcc	.LL146
         01:C4C1  C7          
 4399                        	
 4400                        		.dbg	line,	"include\routines_LEVELS.c", 712; {
 4401                        	
 4402                        		.dbg	line,	"include\routines_LEVELS.c", 713; unsigned char i, camera_y_move;
 4403                        	
 4404                        		.dbg	line,	"include\routines_LEVELS.c", 714; i = 1;
 4405                        		__st.umiq	1, __update_PLAYER_end - 2  /* i */
         01:C4C2  A9 01      			lda.l	#1
         01:C4C4  8D 08 23   			sta	__update_PLAYER_end - 2
 4406                        	
 4407                        		.dbg	line,	"include\routines_LEVELS.c", 717; // UPDATE PLAYER TILES //
 4408                        	
 4409                        		.dbg	line,	"include\routines_LEVELS.c", 718; if(player_counter_anim == 0)
 4410                        		__not.um	_player_counter_anim
         01:C4C7  AD 11 23   			lda	_player_counter_anim
         01:C4CA  18         			clc
         01:C4CB  D0 01      			bne	!+
         01:C4CD  38         			sec
         01:C4CE             	!:
 4411                        		__bfalse	.LL147
         01:C4CE  90 21      			bcc	.LL147
 4412                        	
 4413                        		.dbg	line,	"include\routines_LEVELS.c", 719; {
 4414                        	
 4415                        		.dbg	line,	"include\routines_LEVELS.c", 720; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_112 , TILES_16);
 4416                        		__st.wmiq	18432, _di
         01:C4D0  64 F0      			stz.l	_di
         01:C4D2  A9 48      			lda.h	#18432
         01:C4D4  85 F1      			sta.h	_di
 4417                        		__farptr	_tiles_SPR_PLAYER + 3584, _bp_bank, _bp
         01:C4D6  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3584))
         01:C4D8  85 EC      			sta.l	_bp
         01:C4DA  A9 68      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3584))
         01:C4DC  85 ED      			sta.h	_bp
         01:C4DE  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 3584)
         01:C4E0  85 02      			sta	_bp_bank
 4418                        		__st.wmiq	256, _ax
         01:C4E2  64 F8      			stz.l	_ax
         01:C4E4  A9 01      			lda.h	#256
         01:C4E6  85 F9      			sta.h	_ax
 4419                        		 _load_vram.3
         01:C4E8  82         			clx				; Offset to PCE VDC.
         01:C4E9  20 77 FF   			call	load_vram_x
 4420                        	
 4421                        		.dbg	line,	"include\routines_LEVELS.c", 722; player_counter_anim = 1;
 4422                        		__st.umiq	1, _player_counter_anim
         01:C4EC  A9 01      			lda.l	#1
         01:C4EE  8D 11 23   			sta	_player_counter_anim
 4423                        	
 4424                        		.dbg	line,	"include\routines_LEVELS.c", 723; }
 4425                        	
 4426                        		.dbg	line,	"include\routines_LEVELS.c", 726; // SELECT PLAYER SPRITE //
 4427                        	
 4428                        		.dbg	line,	"include\routines_LEVELS.c", 727; spr_set(player_id);
 4429    01:C4F1             	.LL147:
 4430                        		__ld.umq	_player_id
         01:C4F1  AD 0D 23   			lda	_player_id
 4431                        		__call		_spr_set.1
         01:C4F4  20 DD E7   			call	_spr_set.1
 4432                        	
 4433                        		.dbg	line,	"include\routines_LEVELS.c", 730; //--------------------------------------------------------------------------------------//
 4434                        	
 4435                        		.dbg	line,	"include\routines_LEVELS.c", 731; //                                        H MOVE                                        //
 4436                        	
 4437                        		.dbg	line,	"include\routines_LEVELS.c", 732; //--------------------------------------------------------------------------------------//
 4438                        	
 4439                        		.dbg	line,	"include\routines_LEVELS.c", 734; check_WALL_BR();
 4440                        		__call		_check_WALL_BR
         01:C4F7  20 59 FF   			call	_check_WALL_BR
 4441                        	
 4442                        		.dbg	line,	"include\routines_LEVELS.c", 736; if(map_blk_flag != TILE_BG)
 4443                        		__ld.umq	_map_blk_flag
         01:C4FA  AD 85 28   			lda	_map_blk_flag
 4444                        		__neq_b.uiq	1
         01:C4FD  38         			sec
         01:C4FE  49 01      			eor	#1
         01:C500  D0 01      			bne	!+
         01:C502  18         			clc
         01:C503             	!:
 4445                        		__bfalse	.LL148
         01:C503  90 54      			bcc	.LL148
 4446                        	
 4447                        		.dbg	line,	"include\routines_LEVELS.c", 737; {
 4448                        	
 4449                        		.dbg	line,	"include\routines_LEVELS.c", 738; check_WALL_TR();
 4450                        		__call		_check_WALL_TR
         01:C505  20 27 FF   			call	_check_WALL_TR
 4451                        	
 4452                        		.dbg	line,	"include\routines_LEVELS.c", 740; if(map_blk_flag == TILE_BG)
 4453                        		__ld.umq	_map_blk_flag
         01:C508  AD 85 28   			lda	_map_blk_flag
 4454                        		__equ_b.uiq	1
         01:C50B  C9 01      			cmp	#1
         01:C50D  F0 01      			beq	!+
         01:C50F  18         			clc
         01:C510             	!:
 4455                        		__bfalse	.LL149
         01:C510  90 37      			bcc	.LL149
 4456                        	
 4457                        		.dbg	line,	"include\routines_LEVELS.c", 741; {
 4458                        	
 4459                        		.dbg	line,	"include\routines_LEVELS.c", 742; check_BG( 15 , -16 );
 4460                        		__ld.wi		15
         01:C512  A9 0F      			lda.l	#15
         01:C514  C2         			cly
 4461                        		__pusharg.wr
         01:C515  A6 8D      			ldx	<__sp
         01:C517  CA         			dex
         01:C518  CA         			dex
         01:C519  95 08      			sta.l	<__stack, x
         01:C51B  94 09      			sty.h	<__stack, x
         01:C51D  86 8D      			stx	<__sp
 4462                        		__ld.wi		-16
         01:C51F  A9 F0      			lda.l	#-16
         01:C521  A0 FF      			ldy.h	#-16
 4463                        		__pusharg.wr
         01:C523  A6 8D      			ldx	<__sp
         01:C525  CA         			dex
         01:C526  CA         			dex
         01:C527  95 08      			sta.l	<__stack, x
         01:C529  94 09      			sty.h	<__stack, x
         01:C52B  86 8D      			stx	<__sp
 4464                        		__call		_check_BG
         01:C52D  20 31 FF   			call	_check_BG
 4465                        	
 4466                        		.dbg	line,	"include\routines_LEVELS.c", 744; if(map_blk_flag == TILE_EMPTY)
 4467                        		__not.um	_map_blk_flag
         01:C530  AD 85 28   			lda	_map_blk_flag
         01:C533  18         			clc
         01:C534  D0 01      			bne	!+
         01:C536  38         			sec
         01:C537             	!:
 4468                        		__bfalse	.LL150
         01:C537  90 55      			bcc	.LL150
 4469                        	
 4470                        		.dbg	line,	"include\routines_LEVELS.c", 745; {
 4471                        	
 4472                        		.dbg	line,	"include\routines_LEVELS.c", 746; jump_ladder = FALSE;
 4473                        		__st.umiq	0, _jump_ladder
         01:C539  9C 14 23   			stz	_jump_ladder
 4474                        	
 4475                        		.dbg	line,	"include\routines_LEVELS.c", 747; player_index_fall = 0;
 4476                        		__st.umiq	0, _player_index_fall
         01:C53C  9C 13 23   			stz	_player_index_fall
 4477                        	
 4478                        		.dbg	line,	"include\routines_LEVELS.c", 748; player_state = STATE_FALL;
 4479                        		__st.umiq	9, _player_state
         01:C53F  A9 09      			lda.l	#9
         01:C541  8D 0E 23   			sta	_player_state
 4480                        	
 4481                        		.dbg	line,	"include\routines_LEVELS.c", 749; //put_number(8,1,0,0);
 4482                        	
 4483                        		.dbg	line,	"include\routines_LEVELS.c", 750; return;
 4484                        		__bra		.LL100
         01:C544  4C 69 D1   			bra	.LL100
 4485                        	
 4486                        		.dbg	line,	"include\routines_LEVELS.c", 751; }
 4487                        	
 4488                        		.dbg	line,	"include\routines_LEVELS.c", 752; }
 4489    01:C547             	.LL150	.alias		.LL151
 4490                        	
 4491                        		.dbg	line,	"include\routines_LEVELS.c", 754; else
 4492                        		__bra		.LL151
         01:C547  80 45      			bra	.LL151
 4493    01:C549             	.LL149:
 4494                        	
 4495                        		.dbg	line,	"include\routines_LEVELS.c", 755; {
 4496                        	
 4497                        		.dbg	line,	"include\routines_LEVELS.c", 756; sgx_map_pxl_x += 2;
 4498                        		__add_st.wmiq	2, _sgx_map_pxl_x
         01:C549  18         			clc
         01:C54A  AD 64 23   			lda.l	_sgx_map_pxl_x
         01:C54D  69 02      			adc.l	#2
         01:C54F  8D 64 23   			sta.l	_sgx_map_pxl_x
         01:C552  90 03      			bcc	!+
         01:C554  EE 65 23   			inc.h	_sgx_map_pxl_x
         01:C557             	!:
 4499                        	
 4500                        		.dbg	line,	"include\routines_LEVELS.c", 757; }
 4501    01:C557             	.LL151	.alias		.LL152
 4502                        	
 4503                        		.dbg	line,	"include\routines_LEVELS.c", 758; }
 4504                        	
 4505                        		.dbg	line,	"include\routines_LEVELS.c", 760; else
 4506                        		__bra		.LL152
         01:C557  80 35      			bra	.LL152
 4507    01:C559             	.LL148:
 4508                        	
 4509                        		.dbg	line,	"include\routines_LEVELS.c", 761; {
 4510                        	
 4511                        		.dbg	line,	"include\routines_LEVELS.c", 762; check_BG( 15 , -16 );
 4512                        		__ld.wi		15
         01:C559  A9 0F      			lda.l	#15
         01:C55B  C2         			cly
 4513                        		__pusharg.wr
         01:C55C  A6 8D      			ldx	<__sp
         01:C55E  CA         			dex
         01:C55F  CA         			dex
         01:C560  95 08      			sta.l	<__stack, x
         01:C562  94 09      			sty.h	<__stack, x
         01:C564  86 8D      			stx	<__sp
 4514                        		__ld.wi		-16
         01:C566  A9 F0      			lda.l	#-16
         01:C568  A0 FF      			ldy.h	#-16
 4515                        		__pusharg.wr
         01:C56A  A6 8D      			ldx	<__sp
         01:C56C  CA         			dex
         01:C56D  CA         			dex
         01:C56E  95 08      			sta.l	<__stack, x
         01:C570  94 09      			sty.h	<__stack, x
         01:C572  86 8D      			stx	<__sp
 4516                        		__call		_check_BG
         01:C574  20 31 FF   			call	_check_BG
 4517                        	
 4518                        		.dbg	line,	"include\routines_LEVELS.c", 764; if(map_blk_flag == TILE_EMPTY)
 4519                        		__not.um	_map_blk_flag
         01:C577  AD 85 28   			lda	_map_blk_flag
         01:C57A  18         			clc
         01:C57B  D0 01      			bne	!+
         01:C57D  38         			sec
         01:C57E             	!:
 4520                        		__bfalse	.LL153
         01:C57E  90 0E      			bcc	.LL153
 4521                        	
 4522                        		.dbg	line,	"include\routines_LEVELS.c", 765; {
 4523                        	
 4524                        		.dbg	line,	"include\routines_LEVELS.c", 766; jump_ladder = FALSE;
 4525                        		__st.umiq	0, _jump_ladder
         01:C580  9C 14 23   			stz	_jump_ladder
 4526                        	
 4527                        		.dbg	line,	"include\routines_LEVELS.c", 767; player_index_fall = 0;
 4528                        		__st.umiq	0, _player_index_fall
         01:C583  9C 13 23   			stz	_player_index_fall
 4529                        	
 4530                        		.dbg	line,	"include\routines_LEVELS.c", 768; player_state = STATE_FALL;
 4531                        		__st.umiq	9, _player_state
         01:C586  A9 09      			lda.l	#9
         01:C588  8D 0E 23   			sta	_player_state
 4532                        	
 4533                        		.dbg	line,	"include\routines_LEVELS.c", 769; //put_number(map_blk_flag,1,0,1);
 4534                        	
 4535                        		.dbg	line,	"include\routines_LEVELS.c", 770; return;
 4536                        		__bra		.LL100
         01:C58B  4C 69 D1   			bra	.LL100
 4537                        	
 4538                        		.dbg	line,	"include\routines_LEVELS.c", 771; }
 4539                        	
 4540                        		.dbg	line,	"include\routines_LEVELS.c", 772; }
 4541    01:C58E             	.LL153:
 4542    01:C58E             	.LL152:
 4543                        	
 4544                        		.dbg	line,	"include\routines_LEVELS.c", 775; //--------------------------------------------------------------------------------------//
 4545                        	
 4546                        		.dbg	line,	"include\routines_LEVELS.c", 776; //                                        V MOVE                                        //
 4547                        	
 4548                        		.dbg	line,	"include\routines_LEVELS.c", 777; //--------------------------------------------------------------------------------------//
 4549                        	
 4550                        		.dbg	line,	"include\routines_LEVELS.c", 779; // UPDATE PLAYER Y POSITION //
 4551                        	
 4552                        		.dbg	line,	"include\routines_LEVELS.c", 780; if(jump_ladder == FALSE)
 4553                        		__not.um	_jump_ladder
         01:C58E  AD 14 23   			lda	_jump_ladder
         01:C591  18         			clc
         01:C592  D0 01      			bne	!+
         01:C594  38         			sec
         01:C595             	!:
 4554                        		__bfalse	.LL154
         01:C595  90 1A      			bcc	.LL154
 4555                        	
 4556                        		.dbg	line,	"include\routines_LEVELS.c", 781; {
 4557                        	
 4558                        		.dbg	line,	"include\routines_LEVELS.c", 782; player_pos_y += TABLE_PLAYER_JUMP_V[player_index_jump];
 4559                        		__ldx.umq	_player_index_jump
         01:C597  AE 12 23   			ldx	_player_index_jump
 4560                        		__ld.bax	_TABLE_PLAYER_JUMP_V
         01:C59A  BD 1D 60   			lda	_TABLE_PLAYER_JUMP_V, x
         01:C59D  C2         			cly
         01:C59E  10 01      			bpl	!+
         01:C5A0  88         			dey
         01:C5A1             	!:
 4561                        		__add_st.wmq	_player_pos_y
         01:C5A1  18         			clc
         01:C5A2  6D 18 23   			adc.l	_player_pos_y
         01:C5A5  8D 18 23   			sta.l	_player_pos_y
         01:C5A8  98         			tya
         01:C5A9  6D 19 23   			adc.h	_player_pos_y
         01:C5AC  8D 19 23   			sta.h	_player_pos_y
 4562                        	
 4563                        		.dbg	line,	"include\routines_LEVELS.c", 783; }
 4564                        	
 4565                        		.dbg	line,	"include\routines_LEVELS.c", 785; else
 4566                        		__bra		.LL155
         01:C5AF  80 18      			bra	.LL155
 4567    01:C5B1             	.LL154:
 4568                        	
 4569                        		.dbg	line,	"include\routines_LEVELS.c", 786; {
 4570                        	
 4571                        		.dbg	line,	"include\routines_LEVELS.c", 787; player_pos_y += TABLE_PLAYER_JUMP_LADDER[player_index_jump];
 4572                        		__ldx.umq	_player_index_jump
         01:C5B1  AE 12 23   			ldx	_player_index_jump
 4573                        		__ld.bax	_TABLE_PLAYER_JUMP_LADDER
         01:C5B4  BD 55 60   			lda	_TABLE_PLAYER_JUMP_LADDER, x
         01:C5B7  C2         			cly
         01:C5B8  10 01      			bpl	!+
         01:C5BA  88         			dey
         01:C5BB             	!:
 4574                        		__add_st.wmq	_player_pos_y
         01:C5BB  18         			clc
         01:C5BC  6D 18 23   			adc.l	_player_pos_y
         01:C5BF  8D 18 23   			sta.l	_player_pos_y
         01:C5C2  98         			tya
         01:C5C3  6D 19 23   			adc.h	_player_pos_y
         01:C5C6  8D 19 23   			sta.h	_player_pos_y
 4575                        	
 4576                        		.dbg	line,	"include\routines_LEVELS.c", 788; }
 4577    01:C5C9             	.LL155:
 4578                        	
 4579                        		.dbg	line,	"include\routines_LEVELS.c", 792; // IF PLAYER GOES BELOW ITS BASE Y POSITION //
 4580                        	
 4581                        		.dbg	line,	"include\routines_LEVELS.c", 793; if(player_pos_y >= PLAYER_BASE_Y_POS)
 4582                        		__ld.wm		_player_pos_y
         01:C5C9  AD 18 23   			lda.l	_player_pos_y
         01:C5CC  AC 19 23   			ldy.h	_player_pos_y
 4583                        		__sge_w.wi	128
         01:C5CF  C9 80      			cmp.l	#128		; Subtract integer from Y:A.
         01:C5D1  98         			tya
         01:C5D2  E9 00      			sbc.h	#128
         01:C5D4  50 02      			bvc	!+
         01:C5D6  49 80      			eor	#$80		; +ve if Y:A >= integer (signed).
         01:C5D8  49 80      	!:		eor	#$80
         01:C5DA  0A         			asl	a
 4584                        		__bfalse	.LL156
         01:C5DB  90 4E      			bcc	.LL156
 4585                        	
 4586                        		.dbg	line,	"include\routines_LEVELS.c", 794; {
 4587                        	
 4588                        		.dbg	line,	"include\routines_LEVELS.c", 795; // THE CAMERA MOVES //
 4589                        	
 4590                        		.dbg	line,	"include\routines_LEVELS.c", 796; // CALCULATE HOW MANY PIXELS THE CAMERA HAS TO MOVE DOWN //
 4591                        	
 4592                        		.dbg	line,	"include\routines_LEVELS.c", 797; camera_y_move = player_pos_y - PLAYER_BASE_Y_POS;
 4593                        		__ld.wm		_player_pos_y
         01:C5DD  AD 18 23   			lda.l	_player_pos_y
         01:C5E0  AC 19 23   			ldy.h	_player_pos_y
 4594                        		__sub.wi	128
         01:C5E3  38         			sec
         01:C5E4  E9 80      			sbc.l	#128
         01:C5E6  B0 01      			bcs	!+
         01:C5E8  88         			dey
         01:C5E9             	!:
 4595                        		__st.umq	__update_PLAYER_end - 3  /* camera_y_move */
         01:C5E9  8D 07 23   			sta	__update_PLAYER_end - 3
 4596                        	
 4597                        		.dbg	line,	"include\routines_LEVELS.c", 798; sgx_map_pxl_y += camera_y_move;
 4598                        		__ld.um		__update_PLAYER_end - 3  /* camera_y_move */
         01:C5EC  AD 07 23   			lda	__update_PLAYER_end - 3
         01:C5EF  C2         			cly
 4599                        		__add_st.wmq	_sgx_map_pxl_y
         01:C5F0  18         			clc
         01:C5F1  6D 66 23   			adc.l	_sgx_map_pxl_y
         01:C5F4  8D 66 23   			sta.l	_sgx_map_pxl_y
         01:C5F7  98         			tya
         01:C5F8  6D 67 23   			adc.h	_sgx_map_pxl_y
         01:C5FB  8D 67 23   			sta.h	_sgx_map_pxl_y
 4600                        	
 4601                        		.dbg	line,	"include\routines_LEVELS.c", 800; // IF THE CAMERA HAS REACHED ITS MAX (LOWEST) POSITION //
 4602                        	
 4603                        		.dbg	line,	"include\routines_LEVELS.c", 801; if(sgx_map_pxl_y > camera_max_y_position)
 4604                        		__ld.wm		_sgx_map_pxl_y
         01:C5FE  AD 66 23   			lda.l	_sgx_map_pxl_y
         01:C601  AC 67 23   			ldy.h	_sgx_map_pxl_y
 4605                        		__ugt_w.wm	_camera_max_y_position
         01:C604  18         			clc			; Subtract memory+1 from Y:A.
         01:C605  ED 1A 23   			sbc.l	_camera_max_y_position
         01:C608  98         			tya
         01:C609  ED 1B 23   			sbc.h	_camera_max_y_position		; CS if Y:A > memory.
 4606                        		__bfalse	.LL157
         01:C60C  90 0C      			bcc	.LL157
 4607                        	
 4608                        		.dbg	line,	"include\routines_LEVELS.c", 802; {
 4609                        	
 4610                        		.dbg	line,	"include\routines_LEVELS.c", 803; // THE CAMERA CAN NOT MOVE LOWER //
 4611                        	
 4612                        		.dbg	line,	"include\routines_LEVELS.c", 804; sgx_map_pxl_y = camera_max_y_position;
 4613                        		__ld.wm		_camera_max_y_position
         01:C60E  AD 1A 23   			lda.l	_camera_max_y_position
         01:C611  AC 1B 23   			ldy.h	_camera_max_y_position
 4614                        		__st.wmq	_sgx_map_pxl_y
         01:C614  8D 66 23   			sta.l	_sgx_map_pxl_y
         01:C617  8C 67 23   			sty.h	_sgx_map_pxl_y
 4615                        	
 4616                        		.dbg	line,	"include\routines_LEVELS.c", 805; }
 4617                        	
 4618                        		.dbg	line,	"include\routines_LEVELS.c", 807; // THE PLAYER STAYS AT ITS BASE Y POSITION //
 4619                        	
 4620                        		.dbg	line,	"include\routines_LEVELS.c", 808; player_pos_y = PLAYER_BASE_Y_POS;
 4621    01:C61A             	.LL157:
 4622                        		__st.wmiq	128, _player_pos_y
         01:C61A  A9 80      			lda.l	#128
         01:C61C  8D 18 23   			sta.l	_player_pos_y
         01:C61F  9C 19 23   			stz.h	_player_pos_y
 4623                        	
 4624                        		.dbg	line,	"include\routines_LEVELS.c", 810; spr_y(player_pos_y);
 4625                        		__ld.wm		_player_pos_y
         01:C622  AD 18 23   			lda.l	_player_pos_y
         01:C625  AC 19 23   			ldy.h	_player_pos_y
 4626                        		__call		_spr_y.1
         01:C628  20 19 E8   			call	_spr_y.1
 4627                        	
 4628                        		.dbg	line,	"include\routines_LEVELS.c", 811; }
 4629                        	
 4630                        		.dbg	line,	"include\routines_LEVELS.c", 814; // UPDATE JUMP INDEX IN THE ARRAY //
 4631                        	
 4632                        		.dbg	line,	"include\routines_LEVELS.c", 815; if(player_index_jump < jump_max_index)
 4633    01:C62B             	.LL156:
 4634                        		__ld.umq	_player_index_jump
         01:C62B  AD 12 23   			lda	_player_index_jump
 4635                        		__ult_b.umq	_jump_max_index
         01:C62E  CD 15 23   			cmp	_jump_max_index		; Subtract memory from A.
         01:C631  6A         			ror	a		; CC if A < memory.
         01:C632  49 80      			eor	#$80
         01:C634  2A         			rol	a
 4636                        		__bfalse	.LL158
         01:C635  90 03      			bcc	.LL158
 4637                        	
 4638                        		.dbg	line,	"include\routines_LEVELS.c", 816; {
 4639                        	
 4640                        		.dbg	line,	"include\routines_LEVELS.c", 817; player_index_jump += 1;
 4641                        		__add_st.umiq	1, _player_index_jump
         01:C637  EE 12 23   			inc	_player_index_jump
 4642                        	
 4643                        		.dbg	line,	"include\routines_LEVELS.c", 818; }
 4644                        	
 4645                        		.dbg	line,	"include\routines_LEVELS.c", 821; // CHECK COLLISION WITH THE FLOOR //
 4646                        	
 4647                        		.dbg	line,	"include\routines_LEVELS.c", 822; check_FLOOR_L();
 4648    01:C63A             	.LL158:
 4649                        		__call		_check_FLOOR_L
         01:C63A  20 63 FF   			call	_check_FLOOR_L
 4650                        	
 4651                        		.dbg	line,	"include\routines_LEVELS.c", 825; if(map_blk_flag == TILE_BG)
 4652                        		__ld.umq	_map_blk_flag
         01:C63D  AD 85 28   			lda	_map_blk_flag
 4653                        		__equ_b.uiq	1
         01:C640  C9 01      			cmp	#1
         01:C642  F0 01      			beq	!+
         01:C644  18         			clc
         01:C645             	!:
 4654                        		__bfalse	.LL159
         01:C645  B0 03 4C 23			bcc	.LL159
         01:C649  C7          
 4655                        	
 4656                        		.dbg	line,	"include\routines_LEVELS.c", 826; {
 4657                        	
 4658                        		.dbg	line,	"include\routines_LEVELS.c", 827; // CALCULATE HOW MANY PIXELS THE PLAYER MOVED INTO THE GROUND //
 4659                        	
 4660                        		.dbg	line,	"include\routines_LEVELS.c", 828; for(i=1; i<11 ; i++)
 4661                        		__st.umiq	1, __update_PLAYER_end - 2  /* i */
         01:C64A  A9 01      			lda.l	#1
         01:C64C  8D 08 23   			sta	__update_PLAYER_end - 2
 4662    01:C64F             	.LL160:
 4663                        		__ld.umq	__update_PLAYER_end - 2  /* i */
         01:C64F  AD 08 23   			lda	__update_PLAYER_end - 2
 4664                        		__ult_b.uiq	11
         01:C652  C9 0B      			cmp	#11		; Subtract integer from A.
         01:C654  6A         			ror	a		; CC if A < integer.
         01:C655  49 80      			eor	#$80
         01:C657  2A         			rol	a
 4665                        		__btrue		.LL162
         01:C658  B0 08      			bcs	.LL162
 4666                        		__bra		.LL163
         01:C65A  4C 04 C7   			bra	.LL163
 4667    01:C65D             	.LL161:
 4668                        		__inc.umq	__update_PLAYER_end - 2  /* i */
         01:C65D  EE 08 23   			inc	__update_PLAYER_end - 2
 4669                        		__bra		.LL160
         01:C660  80 ED      			bra	.LL160
 4670    01:C662             	.LL162:
 4671                        	
 4672                        		.dbg	line,	"include\routines_LEVELS.c", 829; {
 4673                        	
 4674                        		.dbg	line,	"include\routines_LEVELS.c", 830; if(player_axis == AXIS_RIGHT)
 4675                        		__not.um	_player_axis
         01:C662  AD 0F 23   			lda	_player_axis
         01:C665  18         			clc
         01:C666  D0 01      			bne	!+
         01:C668  38         			sec
         01:C669             	!:
 4676                        		__bfalse	.LL164
         01:C669  90 20      			bcc	.LL164
 4677                        	
 4678                        		.dbg	line,	"include\routines_LEVELS.c", 831; {
 4679                        	
 4680                        		.dbg	line,	"include\routines_LEVELS.c", 832; check_BG( 11 , i);
 4681                        		__ld.wi		11
         01:C66B  A9 0B      			lda.l	#11
         01:C66D  C2         			cly
 4682                        		__pusharg.wr
         01:C66E  A6 8D      			ldx	<__sp
         01:C670  CA         			dex
         01:C671  CA         			dex
         01:C672  95 08      			sta.l	<__stack, x
         01:C674  94 09      			sty.h	<__stack, x
         01:C676  86 8D      			stx	<__sp
 4683                        		__ld.um		__update_PLAYER_end - 2  /* i */
         01:C678  AD 08 23   			lda	__update_PLAYER_end - 2
         01:C67B  C2         			cly
 4684                        		__pusharg.wr
         01:C67C  A6 8D      			ldx	<__sp
         01:C67E  CA         			dex
         01:C67F  CA         			dex
         01:C680  95 08      			sta.l	<__stack, x
         01:C682  94 09      			sty.h	<__stack, x
         01:C684  86 8D      			stx	<__sp
 4685                        		__call		_check_BG
         01:C686  20 31 FF   			call	_check_BG
 4686                        	
 4687                        		.dbg	line,	"include\routines_LEVELS.c", 833; }
 4688                        	
 4689                        		.dbg	line,	"include\routines_LEVELS.c", 835; else
 4690                        		__bra		.LL165
         01:C689  80 1E      			bra	.LL165
 4691    01:C68B             	.LL164:
 4692                        	
 4693                        		.dbg	line,	"include\routines_LEVELS.c", 836; {
 4694                        	
 4695                        		.dbg	line,	"include\routines_LEVELS.c", 837; check_BG( 10 , i);
 4696                        		__ld.wi		10
         01:C68B  A9 0A      			lda.l	#10
         01:C68D  C2         			cly
 4697                        		__pusharg.wr
         01:C68E  A6 8D      			ldx	<__sp
         01:C690  CA         			dex
         01:C691  CA         			dex
         01:C692  95 08      			sta.l	<__stack, x
         01:C694  94 09      			sty.h	<__stack, x
         01:C696  86 8D      			stx	<__sp
 4698                        		__ld.um		__update_PLAYER_end - 2  /* i */
         01:C698  AD 08 23   			lda	__update_PLAYER_end - 2
         01:C69B  C2         			cly
 4699                        		__pusharg.wr
         01:C69C  A6 8D      			ldx	<__sp
         01:C69E  CA         			dex
         01:C69F  CA         			dex
         01:C6A0  95 08      			sta.l	<__stack, x
         01:C6A2  94 09      			sty.h	<__stack, x
         01:C6A4  86 8D      			stx	<__sp
 4700                        		__call		_check_BG
         01:C6A6  20 31 FF   			call	_check_BG
 4701                        	
 4702                        		.dbg	line,	"include\routines_LEVELS.c", 838; }
 4703    01:C6A9             	.LL165:
 4704                        	
 4705                        		.dbg	line,	"include\routines_LEVELS.c", 841; if(map_blk_flag == TILE_EMPTY)
 4706                        		__not.um	_map_blk_flag
         01:C6A9  AD 85 28   			lda	_map_blk_flag
         01:C6AC  18         			clc
         01:C6AD  D0 01      			bne	!+
         01:C6AF  38         			sec
         01:C6B0             	!:
 4707                        		__bfalse	.LL166
         01:C6B0  90 AB      			bcc	.LL166
 4708                        	
 4709                        		.dbg	line,	"include\routines_LEVELS.c", 842; {
 4710                        	
 4711                        		.dbg	line,	"include\routines_LEVELS.c", 843; if(player_pos_y != PLAYER_BASE_Y_POS)
 4712                        		__ld.wm		_player_pos_y
         01:C6B2  AD 18 23   			lda.l	_player_pos_y
         01:C6B5  AC 19 23   			ldy.h	_player_pos_y
 4713                        		__neq_w.wi	128
         01:C6B8  38         			sec
         01:C6B9  49 80      			eor.l	#128
         01:C6BB  D0 06      			bne	!+
         01:C6BD  98         			tya
         01:C6BE  49 00      			eor.h	#128
         01:C6C0  D0 01      			bne	!+
         01:C6C2  18         			clc
         01:C6C3             	!:
 4714                        		__bfalse	.LL167
         01:C6C3  90 1E      			bcc	.LL167
 4715                        	
 4716                        		.dbg	line,	"include\routines_LEVELS.c", 844; {
 4717                        	
 4718                        		.dbg	line,	"include\routines_LEVELS.c", 845; player_pos_y -= (i - 1);
 4719                        		__ld.um		__update_PLAYER_end - 2  /* i */
         01:C6C5  AD 08 23   			lda	__update_PLAYER_end - 2
         01:C6C8  C2         			cly
 4720                        		__sub.wi	1
         01:C6C9  38         			sec
         01:C6CA  E9 01      			sbc.l	#1
         01:C6CC  B0 01      			bcs	!+
         01:C6CE  88         			dey
         01:C6CF             	!:
 4721                        		__isub_st.wmq	_player_pos_y
         01:C6CF  38         			sec
         01:C6D0  49 FF      			eor	#$FF
         01:C6D2  6D 18 23   			adc.l	_player_pos_y
         01:C6D5  8D 18 23   			sta.l	_player_pos_y
         01:C6D8  98         			tya
         01:C6D9  49 FF      			eor	#$FF
         01:C6DB  6D 19 23   			adc.h	_player_pos_y
         01:C6DE  8D 19 23   			sta.h	_player_pos_y
 4722                        	
 4723                        		.dbg	line,	"include\routines_LEVELS.c", 846; }
 4724                        	
 4725                        		.dbg	line,	"include\routines_LEVELS.c", 848; else
 4726                        		__bra		.LL168
         01:C6E1  80 21      			bra	.LL168
 4727    01:C6E3             	.LL167:
 4728                        	
 4729                        		.dbg	line,	"include\routines_LEVELS.c", 849; {
 4730                        	
 4731                        		.dbg	line,	"include\routines_LEVELS.c", 850; sgx_map_pxl_y -= (i - 1);
 4732                        		__ld.um		__update_PLAYER_end - 2  /* i */
         01:C6E3  AD 08 23   			lda	__update_PLAYER_end - 2
         01:C6E6  C2         			cly
 4733                        		__sub.wi	1
         01:C6E7  38         			sec
         01:C6E8  E9 01      			sbc.l	#1
         01:C6EA  B0 01      			bcs	!+
         01:C6EC  88         			dey
         01:C6ED             	!:
 4734                        		__isub_st.wmq	_sgx_map_pxl_y
         01:C6ED  38         			sec
         01:C6EE  49 FF      			eor	#$FF
         01:C6F0  6D 66 23   			adc.l	_sgx_map_pxl_y
         01:C6F3  8D 66 23   			sta.l	_sgx_map_pxl_y
         01:C6F6  98         			tya
         01:C6F7  49 FF      			eor	#$FF
         01:C6F9  6D 67 23   			adc.h	_sgx_map_pxl_y
         01:C6FC  8D 67 23   			sta.h	_sgx_map_pxl_y
 4735                        	
 4736                        		.dbg	line,	"include\routines_LEVELS.c", 851; }
 4737    01:C6FF             	.LL168	.alias		.LL163
 4738                        	
 4739                        		.dbg	line,	"include\routines_LEVELS.c", 853; break;
 4740                        		__bra		.LL163
         01:C6FF  80 03      			bra	.LL163
 4741                        	
 4742                        		.dbg	line,	"include\routines_LEVELS.c", 854; }
 4743                        	
 4744                        		.dbg	line,	"include\routines_LEVELS.c", 855; }
 4745    01:C701             	.LL166	.alias		.LL161
 4746                        		__bra		.LL161
         01:C701  4C 5D C6   			bra	.LL161
 4747    01:C704             	.LL163:
 4748                        	
 4749                        		.dbg	line,	"include\routines_LEVELS.c", 857; // SET PLAYER SPRITE NEW POSITION //
 4750                        	
 4751                        		.dbg	line,	"include\routines_LEVELS.c", 858; spr_y(player_pos_y);
 4752                        		__ld.wm		_player_pos_y
         01:C704  AD 18 23   			lda.l	_player_pos_y
         01:C707  AC 19 23   			ldy.h	_player_pos_y
 4753                        		__call		_spr_y.1
         01:C70A  20 19 E8   			call	_spr_y.1
 4754                        	
 4755                        		.dbg	line,	"include\routines_LEVELS.c", 860; player_counter_anim = 1;
 4756                        		__st.umiq	1, _player_counter_anim
         01:C70D  A9 01      			lda.l	#1
         01:C70F  8D 11 23   			sta	_player_counter_anim
 4757                        	
 4758                        		.dbg	line,	"include\routines_LEVELS.c", 861; player_index_jump = 0;
 4759                        		__st.umiq	0, _player_index_jump
         01:C712  9C 12 23   			stz	_player_index_jump
 4760                        	
 4761                        		.dbg	line,	"include\routines_LEVELS.c", 862; jump_ladder = FALSE;
 4762                        		__st.umiq	0, _jump_ladder
         01:C715  9C 14 23   			stz	_jump_ladder
 4763                        	
 4764                        		.dbg	line,	"include\routines_LEVELS.c", 863; jump_max_index = 34;
 4765                        		__st.umiq	34, _jump_max_index
         01:C718  A9 22      			lda.l	#34
         01:C71A  8D 15 23   			sta	_jump_max_index
 4766                        	
 4767                        		.dbg	line,	"include\routines_LEVELS.c", 864; player_state = STATE_IDLE;
 4768                        		__st.umiq	0, _player_state
         01:C71D  9C 0E 23   			stz	_player_state
 4769                        	
 4770                        		.dbg	line,	"include\routines_LEVELS.c", 865; return;
 4771                        		__bra		.LL100
         01:C720  4C 69 D1   			bra	.LL100
 4772                        	
 4773                        		.dbg	line,	"include\routines_LEVELS.c", 866; }
 4774                        	
 4775                        		.dbg	line,	"include\routines_LEVELS.c", 869; // CHECK COLLISION WITH LADDERS //
 4776                        	
 4777                        		.dbg	line,	"include\routines_LEVELS.c", 870; if(player_index_jump > 4)
 4778    01:C723             	.LL159:
 4779                        		__ld.umq	_player_index_jump
         01:C723  AD 12 23   			lda	_player_index_jump
 4780                        		__ugt_b.uiq	4
         01:C726  18         			clc			; Subtract integer+1 from A.
         01:C727  E9 04      			sbc	#4		; CS if A > integer.
 4781                        		__bfalse	.LL169
         01:C729  B0 03 4C BA			bcc	.LL169
         01:C72D  C7          
 4782                        	
 4783                        		.dbg	line,	"include\routines_LEVELS.c", 871; {
 4784                        	
 4785                        		.dbg	line,	"include\routines_LEVELS.c", 872; check_LADDER( 16 , 16 );
 4786                        		__ld.wi		16
         01:C72E  A9 10      			lda.l	#16
         01:C730  C2         			cly
 4787                        		__pusharg.wr
         01:C731  A6 8D      			ldx	<__sp
         01:C733  CA         			dex
         01:C734  CA         			dex
         01:C735  95 08      			sta.l	<__stack, x
         01:C737  94 09      			sty.h	<__stack, x
         01:C739  86 8D      			stx	<__sp
 4788                        		__ld.wi		16
         01:C73B  A9 10      			lda.l	#16
         01:C73D  C2         			cly
 4789                        		__pusharg.wr
         01:C73E  A6 8D      			ldx	<__sp
         01:C740  CA         			dex
         01:C741  CA         			dex
         01:C742  95 08      			sta.l	<__stack, x
         01:C744  94 09      			sty.h	<__stack, x
         01:C746  86 8D      			stx	<__sp
 4790                        		__call		_check_LADDER
         01:C748  20 81 FF   			call	_check_LADDER
 4791                        	
 4792                        		.dbg	line,	"include\routines_LEVELS.c", 874; // IF PLAYER HITS THE LADDER //
 4793                        	
 4794                        		.dbg	line,	"include\routines_LEVELS.c", 875; if(map_blk_flag == TILE_LADDER)
 4795                        		__ld.umq	_map_blk_flag
         01:C74B  AD 85 28   			lda	_map_blk_flag
 4796                        		__equ_b.uiq	2
         01:C74E  C9 02      			cmp	#2
         01:C750  F0 01      			beq	!+
         01:C752  18         			clc
         01:C753             	!:
 4797                        		__bfalse	.LL170
         01:C753  90 65      			bcc	.LL170
 4798                        	
 4799                        		.dbg	line,	"include\routines_LEVELS.c", 876; {
 4800                        	
 4801                        		.dbg	line,	"include\routines_LEVELS.c", 877; // CAMERA GOES 8 PX BACKWARD //
 4802                        	
 4803                        		.dbg	line,	"include\routines_LEVELS.c", 878; sgx_map_pxl_x = ( (sgx_map_pxl_x >> 3) << 3 );
 4804                        		__ld.wm		_sgx_map_pxl_x
         01:C755  AD 64 23   			lda.l	_sgx_map_pxl_x
         01:C758  AC 65 23   			ldy.h	_sgx_map_pxl_x
 4805                        		__lsr.wi	3
         01:C75B  84 00      			sty	__temp
         01:C75D  20 3A E2   			jsr	lsrw3
 4806                        		__asl.wi	3
         01:C760  84 00      			sty	__temp
         01:C762  20 D7 E1   			jsr	aslw3
 4807                        		__st.wmq	_sgx_map_pxl_x
         01:C765  8D 64 23   			sta.l	_sgx_map_pxl_x
         01:C768  8C 65 23   			sty.h	_sgx_map_pxl_x
 4808                        	
 4809                        		.dbg	line,	"include\routines_LEVELS.c", 880; // SO WE UPDATE THE MAP //
 4810                        	
 4811                        		.dbg	line,	"include\routines_LEVELS.c", 881; sgx_scroll_map();
 4812                        		__call		_sgx_scroll_map
         01:C76B  20 95 FF   			call	_sgx_scroll_map
 4813                        	
 4814                        		.dbg	line,	"include\routines_LEVELS.c", 883; // CHECK IF THE PLAYER STANDS RIGHT TO THE LADDER //
 4815                        	
 4816                        		.dbg	line,	"include\routines_LEVELS.c", 884; check_LADDER( 31 , 16 );
 4817                        		__ld.wi		31
         01:C76E  A9 1F      			lda.l	#31
         01:C770  C2         			cly
 4818                        		__pusharg.wr
         01:C771  A6 8D      			ldx	<__sp
         01:C773  CA         			dex
         01:C774  CA         			dex
         01:C775  95 08      			sta.l	<__stack, x
         01:C777  94 09      			sty.h	<__stack, x
         01:C779  86 8D      			stx	<__sp
 4819                        		__ld.wi		16
         01:C77B  A9 10      			lda.l	#16
         01:C77D  C2         			cly
 4820                        		__pusharg.wr
         01:C77E  A6 8D      			ldx	<__sp
         01:C780  CA         			dex
         01:C781  CA         			dex
         01:C782  95 08      			sta.l	<__stack, x
         01:C784  94 09      			sty.h	<__stack, x
         01:C786  86 8D      			stx	<__sp
 4821                        		__call		_check_LADDER
         01:C788  20 81 FF   			call	_check_LADDER
 4822                        	
 4823                        		.dbg	line,	"include\routines_LEVELS.c", 886; if(map_blk_flag == TILE_LADDER)
 4824                        		__ld.umq	_map_blk_flag
         01:C78B  AD 85 28   			lda	_map_blk_flag
 4825                        		__equ_b.uiq	2
         01:C78E  C9 02      			cmp	#2
         01:C790  F0 01      			beq	!+
         01:C792  18         			clc
         01:C793             	!:
 4826                        		__bfalse	.LL171
         01:C793  90 0E      			bcc	.LL171
 4827                        	
 4828                        		.dbg	line,	"include\routines_LEVELS.c", 887; {
 4829                        	
 4830                        		.dbg	line,	"include\routines_LEVELS.c", 888; sgx_map_pxl_x += 8;
 4831                        		__add_st.wmiq	8, _sgx_map_pxl_x
         01:C795  18         			clc
         01:C796  AD 64 23   			lda.l	_sgx_map_pxl_x
         01:C799  69 08      			adc.l	#8
         01:C79B  8D 64 23   			sta.l	_sgx_map_pxl_x
         01:C79E  90 03      			bcc	!+
         01:C7A0  EE 65 23   			inc.h	_sgx_map_pxl_x
         01:C7A3             	!:
 4832                        	
 4833                        		.dbg	line,	"include\routines_LEVELS.c", 889; }
 4834                        	
 4835                        		.dbg	line,	"include\routines_LEVELS.c", 891; player_counter_anim = 1;
 4836    01:C7A3             	.LL171:
 4837                        		__st.umiq	1, _player_counter_anim
         01:C7A3  A9 01      			lda.l	#1
         01:C7A5  8D 11 23   			sta	_player_counter_anim
 4838                        	
 4839                        		.dbg	line,	"include\routines_LEVELS.c", 892; player_index_jump = 0;
 4840                        		__st.umiq	0, _player_index_jump
         01:C7A8  9C 12 23   			stz	_player_index_jump
 4841                        	
 4842                        		.dbg	line,	"include\routines_LEVELS.c", 893; jump_ladder = TRUE;
 4843                        		__st.umiq	1, _jump_ladder
         01:C7AB  A9 01      			lda.l	#1
         01:C7AD  8D 14 23   			sta	_jump_ladder
 4844                        	
 4845                        		.dbg	line,	"include\routines_LEVELS.c", 894; jump_max_index = 29;
 4846                        		__st.umiq	29, _jump_max_index
         01:C7B0  A9 1D      			lda.l	#29
         01:C7B2  8D 15 23   			sta	_jump_max_index
 4847                        	
 4848                        		.dbg	line,	"include\routines_LEVELS.c", 895; player_state = STATE_HANG;
 4849                        		__st.umiq	10, _player_state
         01:C7B5  A9 0A      			lda.l	#10
         01:C7B7  8D 0E 23   			sta	_player_state
 4850                        	
 4851                        		.dbg	line,	"include\routines_LEVELS.c", 896; }
 4852                        	
 4853                        		.dbg	line,	"include\routines_LEVELS.c", 897; }
 4854    01:C7BA             	.LL170:
 4855                        	
 4856                        		.dbg	line,	"include\routines_LEVELS.c", 900; // SET PLAYER SPRITE NEW POSITION //
 4857                        	
 4858                        		.dbg	line,	"include\routines_LEVELS.c", 901; spr_y(player_pos_y);
 4859    01:C7BA             	.LL169:
 4860                        		__ld.wm		_player_pos_y
         01:C7BA  AD 18 23   			lda.l	_player_pos_y
         01:C7BD  AC 19 23   			ldy.h	_player_pos_y
 4861                        		__call		_spr_y.1
         01:C7C0  20 19 E8   			call	_spr_y.1
 4862                        	
 4863                        		.dbg	line,	"include\routines_LEVELS.c", 902; }
 4864                        	
 4865                        		.dbg	line,	"include\routines_LEVELS.c", 905; else if(player_state == STATE_JUMP_LEFT)
 4866                        		__bra		.LL172
         01:C7C3  4C 69 D1   			bra	.LL172
 4867    01:C7C6             	.LL146:
 4868                        		__ld.umq	_player_state
         01:C7C6  AD 0E 23   			lda	_player_state
 4869                        		__equ_b.uiq	6
         01:C7C9  C9 06      			cmp	#6
         01:C7CB  F0 01      			beq	!+
         01:C7CD  18         			clc
         01:C7CE             	!:
 4870                        		__bfalse	.LL173
         01:C7CE  B0 03 4C D7			bcc	.LL173
         01:C7D2  CA          
 4871                        	
 4872                        		.dbg	line,	"include\routines_LEVELS.c", 906; {
 4873                        	
 4874                        		.dbg	line,	"include\routines_LEVELS.c", 907; unsigned char i, camera_y_move;
 4875                        	
 4876                        		.dbg	line,	"include\routines_LEVELS.c", 908; i = 1;
 4877                        		__st.umiq	1, __update_PLAYER_end - 4  /* i */
         01:C7D3  A9 01      			lda.l	#1
         01:C7D5  8D 06 23   			sta	__update_PLAYER_end - 4
 4878                        	
 4879                        		.dbg	line,	"include\routines_LEVELS.c", 911; // UPDATE PLAYER TILES //
 4880                        	
 4881                        		.dbg	line,	"include\routines_LEVELS.c", 912; if(player_counter_anim == 0)
 4882                        		__not.um	_player_counter_anim
         01:C7D8  AD 11 23   			lda	_player_counter_anim
         01:C7DB  18         			clc
         01:C7DC  D0 01      			bne	!+
         01:C7DE  38         			sec
         01:C7DF             	!:
 4883                        		__bfalse	.LL174
         01:C7DF  90 21      			bcc	.LL174
 4884                        	
 4885                        		.dbg	line,	"include\routines_LEVELS.c", 913; {
 4886                        	
 4887                        		.dbg	line,	"include\routines_LEVELS.c", 914; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_112 , TILES_16);
 4888                        		__st.wmiq	18432, _di
         01:C7E1  64 F0      			stz.l	_di
         01:C7E3  A9 48      			lda.h	#18432
         01:C7E5  85 F1      			sta.h	_di
 4889                        		__farptr	_tiles_SPR_PLAYER + 3584, _bp_bank, _bp
         01:C7E7  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3584))
         01:C7E9  85 EC      			sta.l	_bp
         01:C7EB  A9 68      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3584))
         01:C7ED  85 ED      			sta.h	_bp
         01:C7EF  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 3584)
         01:C7F1  85 02      			sta	_bp_bank
 4890                        		__st.wmiq	256, _ax
         01:C7F3  64 F8      			stz.l	_ax
         01:C7F5  A9 01      			lda.h	#256
         01:C7F7  85 F9      			sta.h	_ax
 4891                        		 _load_vram.3
         01:C7F9  82         			clx				; Offset to PCE VDC.
         01:C7FA  20 77 FF   			call	load_vram_x
 4892                        	
 4893                        		.dbg	line,	"include\routines_LEVELS.c", 916; player_counter_anim = 1;
 4894                        		__st.umiq	1, _player_counter_anim
         01:C7FD  A9 01      			lda.l	#1
         01:C7FF  8D 11 23   			sta	_player_counter_anim
 4895                        	
 4896                        		.dbg	line,	"include\routines_LEVELS.c", 917; }
 4897                        	
 4898                        		.dbg	line,	"include\routines_LEVELS.c", 920; // SELECT PLAYER SPRITE //
 4899                        	
 4900                        		.dbg	line,	"include\routines_LEVELS.c", 921; spr_set(player_id);
 4901    01:C802             	.LL174:
 4902                        		__ld.umq	_player_id
         01:C802  AD 0D 23   			lda	_player_id
 4903                        		__call		_spr_set.1
         01:C805  20 DD E7   			call	_spr_set.1
 4904                        	
 4905                        		.dbg	line,	"include\routines_LEVELS.c", 924; //--------------------------------------------------------------------------------------//
 4906                        	
 4907                        		.dbg	line,	"include\routines_LEVELS.c", 925; //                                        H MOVE                                        //
 4908                        	
 4909                        		.dbg	line,	"include\routines_LEVELS.c", 926; //--------------------------------------------------------------------------------------//
 4910                        	
 4911                        		.dbg	line,	"include\routines_LEVELS.c", 928; check_WALL_BL();
 4912                        		__call		_check_WALL_BL
         01:C808  20 3B FF   			call	_check_WALL_BL
 4913                        	
 4914                        		.dbg	line,	"include\routines_LEVELS.c", 930; if(map_blk_flag != TILE_BG)
 4915                        		__ld.umq	_map_blk_flag
         01:C80B  AD 85 28   			lda	_map_blk_flag
 4916                        		__neq_b.uiq	1
         01:C80E  38         			sec
         01:C80F  49 01      			eor	#1
         01:C811  D0 01      			bne	!+
         01:C813  18         			clc
         01:C814             	!:
 4917                        		__bfalse	.LL175
         01:C814  90 54      			bcc	.LL175
 4918                        	
 4919                        		.dbg	line,	"include\routines_LEVELS.c", 931; {
 4920                        	
 4921                        		.dbg	line,	"include\routines_LEVELS.c", 932; check_WALL_TL();
 4922                        		__call		_check_WALL_TL
         01:C816  20 1D FF   			call	_check_WALL_TL
 4923                        	
 4924                        		.dbg	line,	"include\routines_LEVELS.c", 934; if(map_blk_flag == TILE_BG)
 4925                        		__ld.umq	_map_blk_flag
         01:C819  AD 85 28   			lda	_map_blk_flag
 4926                        		__equ_b.uiq	1
         01:C81C  C9 01      			cmp	#1
         01:C81E  F0 01      			beq	!+
         01:C820  18         			clc
         01:C821             	!:
 4927                        		__bfalse	.LL176
         01:C821  90 37      			bcc	.LL176
 4928                        	
 4929                        		.dbg	line,	"include\routines_LEVELS.c", 935; {
 4930                        	
 4931                        		.dbg	line,	"include\routines_LEVELS.c", 936; check_BG( 15 , -16 );
 4932                        		__ld.wi		15
         01:C823  A9 0F      			lda.l	#15
         01:C825  C2         			cly
 4933                        		__pusharg.wr
         01:C826  A6 8D      			ldx	<__sp
         01:C828  CA         			dex
         01:C829  CA         			dex
         01:C82A  95 08      			sta.l	<__stack, x
         01:C82C  94 09      			sty.h	<__stack, x
         01:C82E  86 8D      			stx	<__sp
 4934                        		__ld.wi		-16
         01:C830  A9 F0      			lda.l	#-16
         01:C832  A0 FF      			ldy.h	#-16
 4935                        		__pusharg.wr
         01:C834  A6 8D      			ldx	<__sp
         01:C836  CA         			dex
         01:C837  CA         			dex
         01:C838  95 08      			sta.l	<__stack, x
         01:C83A  94 09      			sty.h	<__stack, x
         01:C83C  86 8D      			stx	<__sp
 4936                        		__call		_check_BG
         01:C83E  20 31 FF   			call	_check_BG
 4937                        	
 4938                        		.dbg	line,	"include\routines_LEVELS.c", 938; if(map_blk_flag == TILE_EMPTY)
 4939                        		__not.um	_map_blk_flag
         01:C841  AD 85 28   			lda	_map_blk_flag
         01:C844  18         			clc
         01:C845  D0 01      			bne	!+
         01:C847  38         			sec
         01:C848             	!:
 4940                        		__bfalse	.LL177
         01:C848  90 55      			bcc	.LL177
 4941                        	
 4942                        		.dbg	line,	"include\routines_LEVELS.c", 939; {
 4943                        	
 4944                        		.dbg	line,	"include\routines_LEVELS.c", 940; jump_ladder = FALSE;
 4945                        		__st.umiq	0, _jump_ladder
         01:C84A  9C 14 23   			stz	_jump_ladder
 4946                        	
 4947                        		.dbg	line,	"include\routines_LEVELS.c", 941; player_index_fall = 0;
 4948                        		__st.umiq	0, _player_index_fall
         01:C84D  9C 13 23   			stz	_player_index_fall
 4949                        	
 4950                        		.dbg	line,	"include\routines_LEVELS.c", 942; player_state = STATE_FALL;
 4951                        		__st.umiq	9, _player_state
         01:C850  A9 09      			lda.l	#9
         01:C852  8D 0E 23   			sta	_player_state
 4952                        	
 4953                        		.dbg	line,	"include\routines_LEVELS.c", 943; return;
 4954                        		__bra		.LL100
         01:C855  4C 69 D1   			bra	.LL100
 4955                        	
 4956                        		.dbg	line,	"include\routines_LEVELS.c", 944; }
 4957                        	
 4958                        		.dbg	line,	"include\routines_LEVELS.c", 945; }
 4959    01:C858             	.LL177	.alias		.LL178
 4960                        	
 4961                        		.dbg	line,	"include\routines_LEVELS.c", 947; else
 4962                        		__bra		.LL178
         01:C858  80 45      			bra	.LL178
 4963    01:C85A             	.LL176:
 4964                        	
 4965                        		.dbg	line,	"include\routines_LEVELS.c", 948; {
 4966                        	
 4967                        		.dbg	line,	"include\routines_LEVELS.c", 949; sgx_map_pxl_x -= 2;
 4968                        		__sub_st.wmiq	2, _sgx_map_pxl_x
         01:C85A  38         			sec
         01:C85B  AD 64 23   			lda.l	_sgx_map_pxl_x
         01:C85E  E9 02      			sbc.l	#2
         01:C860  8D 64 23   			sta.l	_sgx_map_pxl_x
         01:C863  B0 03      			bcs	!+
         01:C865  CE 65 23   			dec.h	_sgx_map_pxl_x
         01:C868             	!:
 4969                        	
 4970                        		.dbg	line,	"include\routines_LEVELS.c", 950; }
 4971    01:C868             	.LL178	.alias		.LL179
 4972                        	
 4973                        		.dbg	line,	"include\routines_LEVELS.c", 951; }
 4974                        	
 4975                        		.dbg	line,	"include\routines_LEVELS.c", 953; else
 4976                        		__bra		.LL179
         01:C868  80 35      			bra	.LL179
 4977    01:C86A             	.LL175:
 4978                        	
 4979                        		.dbg	line,	"include\routines_LEVELS.c", 954; {
 4980                        	
 4981                        		.dbg	line,	"include\routines_LEVELS.c", 955; check_BG( 15 , -16 );
 4982                        		__ld.wi		15
         01:C86A  A9 0F      			lda.l	#15
         01:C86C  C2         			cly
 4983                        		__pusharg.wr
         01:C86D  A6 8D      			ldx	<__sp
         01:C86F  CA         			dex
         01:C870  CA         			dex
         01:C871  95 08      			sta.l	<__stack, x
         01:C873  94 09      			sty.h	<__stack, x
         01:C875  86 8D      			stx	<__sp
 4984                        		__ld.wi		-16
         01:C877  A9 F0      			lda.l	#-16
         01:C879  A0 FF      			ldy.h	#-16
 4985                        		__pusharg.wr
         01:C87B  A6 8D      			ldx	<__sp
         01:C87D  CA         			dex
         01:C87E  CA         			dex
         01:C87F  95 08      			sta.l	<__stack, x
         01:C881  94 09      			sty.h	<__stack, x
         01:C883  86 8D      			stx	<__sp
 4986                        		__call		_check_BG
         01:C885  20 31 FF   			call	_check_BG
 4987                        	
 4988                        		.dbg	line,	"include\routines_LEVELS.c", 957; if(map_blk_flag == TILE_EMPTY)
 4989                        		__not.um	_map_blk_flag
         01:C888  AD 85 28   			lda	_map_blk_flag
         01:C88B  18         			clc
         01:C88C  D0 01      			bne	!+
         01:C88E  38         			sec
         01:C88F             	!:
 4990                        		__bfalse	.LL180
         01:C88F  90 0E      			bcc	.LL180
 4991                        	
 4992                        		.dbg	line,	"include\routines_LEVELS.c", 958; {
 4993                        	
 4994                        		.dbg	line,	"include\routines_LEVELS.c", 959; jump_ladder = FALSE;
 4995                        		__st.umiq	0, _jump_ladder
         01:C891  9C 14 23   			stz	_jump_ladder
 4996                        	
 4997                        		.dbg	line,	"include\routines_LEVELS.c", 960; player_index_fall = 0;
 4998                        		__st.umiq	0, _player_index_fall
         01:C894  9C 13 23   			stz	_player_index_fall
 4999                        	
 5000                        		.dbg	line,	"include\routines_LEVELS.c", 961; player_state = STATE_FALL;
 5001                        		__st.umiq	9, _player_state
         01:C897  A9 09      			lda.l	#9
         01:C899  8D 0E 23   			sta	_player_state
 5002                        	
 5003                        		.dbg	line,	"include\routines_LEVELS.c", 962; return;
 5004                        		__bra		.LL100
         01:C89C  4C 69 D1   			bra	.LL100
 5005                        	
 5006                        		.dbg	line,	"include\routines_LEVELS.c", 963; }
 5007                        	
 5008                        		.dbg	line,	"include\routines_LEVELS.c", 964; }
 5009    01:C89F             	.LL180:
 5010    01:C89F             	.LL179:
 5011                        	
 5012                        		.dbg	line,	"include\routines_LEVELS.c", 967; //--------------------------------------------------------------------------------------//
 5013                        	
 5014                        		.dbg	line,	"include\routines_LEVELS.c", 968; //                                        V MOVE                                        //
 5015                        	
 5016                        		.dbg	line,	"include\routines_LEVELS.c", 969; //--------------------------------------------------------------------------------------//
 5017                        	
 5018                        		.dbg	line,	"include\routines_LEVELS.c", 971; // UPDATE PLAYER Y POSITION //
 5019                        	
 5020                        		.dbg	line,	"include\routines_LEVELS.c", 972; if(jump_ladder == FALSE)
 5021                        		__not.um	_jump_ladder
         01:C89F  AD 14 23   			lda	_jump_ladder
         01:C8A2  18         			clc
         01:C8A3  D0 01      			bne	!+
         01:C8A5  38         			sec
         01:C8A6             	!:
 5022                        		__bfalse	.LL181
         01:C8A6  90 1A      			bcc	.LL181
 5023                        	
 5024                        		.dbg	line,	"include\routines_LEVELS.c", 973; {
 5025                        	
 5026                        		.dbg	line,	"include\routines_LEVELS.c", 974; player_pos_y += TABLE_PLAYER_JUMP_V[player_index_jump];
 5027                        		__ldx.umq	_player_index_jump
         01:C8A8  AE 12 23   			ldx	_player_index_jump
 5028                        		__ld.bax	_TABLE_PLAYER_JUMP_V
         01:C8AB  BD 1D 60   			lda	_TABLE_PLAYER_JUMP_V, x
         01:C8AE  C2         			cly
         01:C8AF  10 01      			bpl	!+
         01:C8B1  88         			dey
         01:C8B2             	!:
 5029                        		__add_st.wmq	_player_pos_y
         01:C8B2  18         			clc
         01:C8B3  6D 18 23   			adc.l	_player_pos_y
         01:C8B6  8D 18 23   			sta.l	_player_pos_y
         01:C8B9  98         			tya
         01:C8BA  6D 19 23   			adc.h	_player_pos_y
         01:C8BD  8D 19 23   			sta.h	_player_pos_y
 5030                        	
 5031                        		.dbg	line,	"include\routines_LEVELS.c", 975; }
 5032                        	
 5033                        		.dbg	line,	"include\routines_LEVELS.c", 977; else
 5034                        		__bra		.LL182
         01:C8C0  80 18      			bra	.LL182
 5035    01:C8C2             	.LL181:
 5036                        	
 5037                        		.dbg	line,	"include\routines_LEVELS.c", 978; {
 5038                        	
 5039                        		.dbg	line,	"include\routines_LEVELS.c", 979; player_pos_y += TABLE_PLAYER_JUMP_LADDER[player_index_jump];
 5040                        		__ldx.umq	_player_index_jump
         01:C8C2  AE 12 23   			ldx	_player_index_jump
 5041                        		__ld.bax	_TABLE_PLAYER_JUMP_LADDER
         01:C8C5  BD 55 60   			lda	_TABLE_PLAYER_JUMP_LADDER, x
         01:C8C8  C2         			cly
         01:C8C9  10 01      			bpl	!+
         01:C8CB  88         			dey
         01:C8CC             	!:
 5042                        		__add_st.wmq	_player_pos_y
         01:C8CC  18         			clc
         01:C8CD  6D 18 23   			adc.l	_player_pos_y
         01:C8D0  8D 18 23   			sta.l	_player_pos_y
         01:C8D3  98         			tya
         01:C8D4  6D 19 23   			adc.h	_player_pos_y
         01:C8D7  8D 19 23   			sta.h	_player_pos_y
 5043                        	
 5044                        		.dbg	line,	"include\routines_LEVELS.c", 980; }
 5045    01:C8DA             	.LL182:
 5046                        	
 5047                        		.dbg	line,	"include\routines_LEVELS.c", 983; // IF PLAYER GOES BELOW ITS BASE Y POSITION //
 5048                        	
 5049                        		.dbg	line,	"include\routines_LEVELS.c", 984; if(player_pos_y >= PLAYER_BASE_Y_POS)
 5050                        		__ld.wm		_player_pos_y
         01:C8DA  AD 18 23   			lda.l	_player_pos_y
         01:C8DD  AC 19 23   			ldy.h	_player_pos_y
 5051                        		__sge_w.wi	128
         01:C8E0  C9 80      			cmp.l	#128		; Subtract integer from Y:A.
         01:C8E2  98         			tya
         01:C8E3  E9 00      			sbc.h	#128
         01:C8E5  50 02      			bvc	!+
         01:C8E7  49 80      			eor	#$80		; +ve if Y:A >= integer (signed).
         01:C8E9  49 80      	!:		eor	#$80
         01:C8EB  0A         			asl	a
 5052                        		__bfalse	.LL183
         01:C8EC  90 4E      			bcc	.LL183
 5053                        	
 5054                        		.dbg	line,	"include\routines_LEVELS.c", 985; {
 5055                        	
 5056                        		.dbg	line,	"include\routines_LEVELS.c", 986; // THE CAMERA MOVES //
 5057                        	
 5058                        		.dbg	line,	"include\routines_LEVELS.c", 987; // CALCULATE HOW MANY PIXELS THE CAMERA HAS TO MOVE DOWN //
 5059                        	
 5060                        		.dbg	line,	"include\routines_LEVELS.c", 988; camera_y_move = player_pos_y - PLAYER_BASE_Y_POS;
 5061                        		__ld.wm		_player_pos_y
         01:C8EE  AD 18 23   			lda.l	_player_pos_y
         01:C8F1  AC 19 23   			ldy.h	_player_pos_y
 5062                        		__sub.wi	128
         01:C8F4  38         			sec
         01:C8F5  E9 80      			sbc.l	#128
         01:C8F7  B0 01      			bcs	!+
         01:C8F9  88         			dey
         01:C8FA             	!:
 5063                        		__st.umq	__update_PLAYER_end - 5  /* camera_y_move */
         01:C8FA  8D 05 23   			sta	__update_PLAYER_end - 5
 5064                        	
 5065                        		.dbg	line,	"include\routines_LEVELS.c", 989; sgx_map_pxl_y += camera_y_move;
 5066                        		__ld.um		__update_PLAYER_end - 5  /* camera_y_move */
         01:C8FD  AD 05 23   			lda	__update_PLAYER_end - 5
         01:C900  C2         			cly
 5067                        		__add_st.wmq	_sgx_map_pxl_y
         01:C901  18         			clc
         01:C902  6D 66 23   			adc.l	_sgx_map_pxl_y
         01:C905  8D 66 23   			sta.l	_sgx_map_pxl_y
         01:C908  98         			tya
         01:C909  6D 67 23   			adc.h	_sgx_map_pxl_y
         01:C90C  8D 67 23   			sta.h	_sgx_map_pxl_y
 5068                        	
 5069                        		.dbg	line,	"include\routines_LEVELS.c", 991; // IF THE CAMERA HAS REACHED ITS MAX (LOWEST) POSITION //
 5070                        	
 5071                        		.dbg	line,	"include\routines_LEVELS.c", 992; if(sgx_map_pxl_y > camera_max_y_position)
 5072                        		__ld.wm		_sgx_map_pxl_y
         01:C90F  AD 66 23   			lda.l	_sgx_map_pxl_y
         01:C912  AC 67 23   			ldy.h	_sgx_map_pxl_y
 5073                        		__ugt_w.wm	_camera_max_y_position
         01:C915  18         			clc			; Subtract memory+1 from Y:A.
         01:C916  ED 1A 23   			sbc.l	_camera_max_y_position
         01:C919  98         			tya
         01:C91A  ED 1B 23   			sbc.h	_camera_max_y_position		; CS if Y:A > memory.
 5074                        		__bfalse	.LL184
         01:C91D  90 0C      			bcc	.LL184
 5075                        	
 5076                        		.dbg	line,	"include\routines_LEVELS.c", 993; {
 5077                        	
 5078                        		.dbg	line,	"include\routines_LEVELS.c", 994; // THE CAMERA CAN NOT MOVE LOWER //
 5079                        	
 5080                        		.dbg	line,	"include\routines_LEVELS.c", 995; sgx_map_pxl_y = camera_max_y_position;
 5081                        		__ld.wm		_camera_max_y_position
         01:C91F  AD 1A 23   			lda.l	_camera_max_y_position
         01:C922  AC 1B 23   			ldy.h	_camera_max_y_position
 5082                        		__st.wmq	_sgx_map_pxl_y
         01:C925  8D 66 23   			sta.l	_sgx_map_pxl_y
         01:C928  8C 67 23   			sty.h	_sgx_map_pxl_y
 5083                        	
 5084                        		.dbg	line,	"include\routines_LEVELS.c", 996; }
 5085                        	
 5086                        		.dbg	line,	"include\routines_LEVELS.c", 998; // THE PLAYER STAYS AT ITS BASE Y POSITION //
 5087                        	
 5088                        		.dbg	line,	"include\routines_LEVELS.c", 999; player_pos_y = PLAYER_BASE_Y_POS;
 5089    01:C92B             	.LL184:
 5090                        		__st.wmiq	128, _player_pos_y
         01:C92B  A9 80      			lda.l	#128
         01:C92D  8D 18 23   			sta.l	_player_pos_y
         01:C930  9C 19 23   			stz.h	_player_pos_y
 5091                        	
 5092                        		.dbg	line,	"include\routines_LEVELS.c", 1001; spr_y(player_pos_y);
 5093                        		__ld.wm		_player_pos_y
         01:C933  AD 18 23   			lda.l	_player_pos_y
         01:C936  AC 19 23   			ldy.h	_player_pos_y
 5094                        		__call		_spr_y.1
         01:C939  20 19 E8   			call	_spr_y.1
 5095                        	
 5096                        		.dbg	line,	"include\routines_LEVELS.c", 1002; }
 5097                        	
 5098                        		.dbg	line,	"include\routines_LEVELS.c", 1005; // UPDATE JUMP INDEX IN THE ARRAY //
 5099                        	
 5100                        		.dbg	line,	"include\routines_LEVELS.c", 1006; if(player_index_jump < jump_max_index)
 5101    01:C93C             	.LL183:
 5102                        		__ld.umq	_player_index_jump
         01:C93C  AD 12 23   			lda	_player_index_jump
 5103                        		__ult_b.umq	_jump_max_index
         01:C93F  CD 15 23   			cmp	_jump_max_index		; Subtract memory from A.
         01:C942  6A         			ror	a		; CC if A < memory.
         01:C943  49 80      			eor	#$80
         01:C945  2A         			rol	a
 5104                        		__bfalse	.LL185
         01:C946  90 03      			bcc	.LL185
 5105                        	
 5106                        		.dbg	line,	"include\routines_LEVELS.c", 1007; {
 5107                        	
 5108                        		.dbg	line,	"include\routines_LEVELS.c", 1008; player_index_jump += 1;
 5109                        		__add_st.umiq	1, _player_index_jump
         01:C948  EE 12 23   			inc	_player_index_jump
 5110                        	
 5111                        		.dbg	line,	"include\routines_LEVELS.c", 1009; }
 5112                        	
 5113                        		.dbg	line,	"include\routines_LEVELS.c", 1012; // CHECK COLLISION WITH THE FLOOR //
 5114                        	
 5115                        		.dbg	line,	"include\routines_LEVELS.c", 1013; check_FLOOR_R();
 5116    01:C94B             	.LL185:
 5117                        		__call		_check_FLOOR_R
         01:C94B  20 45 FF   			call	_check_FLOOR_R
 5118                        	
 5119                        		.dbg	line,	"include\routines_LEVELS.c", 1016; if(map_blk_flag == TILE_BG)
 5120                        		__ld.umq	_map_blk_flag
         01:C94E  AD 85 28   			lda	_map_blk_flag
 5121                        		__equ_b.uiq	1
         01:C951  C9 01      			cmp	#1
         01:C953  F0 01      			beq	!+
         01:C955  18         			clc
         01:C956             	!:
 5122                        		__bfalse	.LL186
         01:C956  B0 03 4C 34			bcc	.LL186
         01:C95A  CA          
 5123                        	
 5124                        		.dbg	line,	"include\routines_LEVELS.c", 1017; {
 5125                        	
 5126                        		.dbg	line,	"include\routines_LEVELS.c", 1018; // CALCULATE HOW MANY PIXELS THE PLAYER MOVED INTO THE GROUND //
 5127                        	
 5128                        		.dbg	line,	"include\routines_LEVELS.c", 1019; for(i=1; i<11 ; i++ )
 5129                        		__st.umiq	1, __update_PLAYER_end - 4  /* i */
         01:C95B  A9 01      			lda.l	#1
         01:C95D  8D 06 23   			sta	__update_PLAYER_end - 4
 5130    01:C960             	.LL187:
 5131                        		__ld.umq	__update_PLAYER_end - 4  /* i */
         01:C960  AD 06 23   			lda	__update_PLAYER_end - 4
 5132                        		__ult_b.uiq	11
         01:C963  C9 0B      			cmp	#11		; Subtract integer from A.
         01:C965  6A         			ror	a		; CC if A < integer.
         01:C966  49 80      			eor	#$80
         01:C968  2A         			rol	a
 5133                        		__btrue		.LL189
         01:C969  B0 08      			bcs	.LL189
 5134                        		__bra		.LL190
         01:C96B  4C 15 CA   			bra	.LL190
 5135    01:C96E             	.LL188:
 5136                        		__inc.umq	__update_PLAYER_end - 4  /* i */
         01:C96E  EE 06 23   			inc	__update_PLAYER_end - 4
 5137                        		__bra		.LL187
         01:C971  80 ED      			bra	.LL187
 5138    01:C973             	.LL189:
 5139                        	
 5140                        		.dbg	line,	"include\routines_LEVELS.c", 1020; {
 5141                        	
 5142                        		.dbg	line,	"include\routines_LEVELS.c", 1021; if(player_axis == AXIS_RIGHT)
 5143                        		__not.um	_player_axis
         01:C973  AD 0F 23   			lda	_player_axis
         01:C976  18         			clc
         01:C977  D0 01      			bne	!+
         01:C979  38         			sec
         01:C97A             	!:
 5144                        		__bfalse	.LL191
         01:C97A  90 20      			bcc	.LL191
 5145                        	
 5146                        		.dbg	line,	"include\routines_LEVELS.c", 1022; {
 5147                        	
 5148                        		.dbg	line,	"include\routines_LEVELS.c", 1023; check_BG( 11 , i);
 5149                        		__ld.wi		11
         01:C97C  A9 0B      			lda.l	#11
         01:C97E  C2         			cly
 5150                        		__pusharg.wr
         01:C97F  A6 8D      			ldx	<__sp
         01:C981  CA         			dex
         01:C982  CA         			dex
         01:C983  95 08      			sta.l	<__stack, x
         01:C985  94 09      			sty.h	<__stack, x
         01:C987  86 8D      			stx	<__sp
 5151                        		__ld.um		__update_PLAYER_end - 4  /* i */
         01:C989  AD 06 23   			lda	__update_PLAYER_end - 4
         01:C98C  C2         			cly
 5152                        		__pusharg.wr
         01:C98D  A6 8D      			ldx	<__sp
         01:C98F  CA         			dex
         01:C990  CA         			dex
         01:C991  95 08      			sta.l	<__stack, x
         01:C993  94 09      			sty.h	<__stack, x
         01:C995  86 8D      			stx	<__sp
 5153                        		__call		_check_BG
         01:C997  20 31 FF   			call	_check_BG
 5154                        	
 5155                        		.dbg	line,	"include\routines_LEVELS.c", 1024; }
 5156                        	
 5157                        		.dbg	line,	"include\routines_LEVELS.c", 1026; else
 5158                        		__bra		.LL192
         01:C99A  80 1E      			bra	.LL192
 5159    01:C99C             	.LL191:
 5160                        	
 5161                        		.dbg	line,	"include\routines_LEVELS.c", 1027; {
 5162                        	
 5163                        		.dbg	line,	"include\routines_LEVELS.c", 1028; check_BG( 10 , i);
 5164                        		__ld.wi		10
         01:C99C  A9 0A      			lda.l	#10
         01:C99E  C2         			cly
 5165                        		__pusharg.wr
         01:C99F  A6 8D      			ldx	<__sp
         01:C9A1  CA         			dex
         01:C9A2  CA         			dex
         01:C9A3  95 08      			sta.l	<__stack, x
         01:C9A5  94 09      			sty.h	<__stack, x
         01:C9A7  86 8D      			stx	<__sp
 5166                        		__ld.um		__update_PLAYER_end - 4  /* i */
         01:C9A9  AD 06 23   			lda	__update_PLAYER_end - 4
         01:C9AC  C2         			cly
 5167                        		__pusharg.wr
         01:C9AD  A6 8D      			ldx	<__sp
         01:C9AF  CA         			dex
         01:C9B0  CA         			dex
         01:C9B1  95 08      			sta.l	<__stack, x
         01:C9B3  94 09      			sty.h	<__stack, x
         01:C9B5  86 8D      			stx	<__sp
 5168                        		__call		_check_BG
         01:C9B7  20 31 FF   			call	_check_BG
 5169                        	
 5170                        		.dbg	line,	"include\routines_LEVELS.c", 1029; }
 5171    01:C9BA             	.LL192:
 5172                        	
 5173                        		.dbg	line,	"include\routines_LEVELS.c", 1032; if(map_blk_flag == TILE_EMPTY)
 5174                        		__not.um	_map_blk_flag
         01:C9BA  AD 85 28   			lda	_map_blk_flag
         01:C9BD  18         			clc
         01:C9BE  D0 01      			bne	!+
         01:C9C0  38         			sec
         01:C9C1             	!:
 5175                        		__bfalse	.LL193
         01:C9C1  90 AB      			bcc	.LL193
 5176                        	
 5177                        		.dbg	line,	"include\routines_LEVELS.c", 1033; {
 5178                        	
 5179                        		.dbg	line,	"include\routines_LEVELS.c", 1034; if(player_pos_y != PLAYER_BASE_Y_POS)
 5180                        		__ld.wm		_player_pos_y
         01:C9C3  AD 18 23   			lda.l	_player_pos_y
         01:C9C6  AC 19 23   			ldy.h	_player_pos_y
 5181                        		__neq_w.wi	128
         01:C9C9  38         			sec
         01:C9CA  49 80      			eor.l	#128
         01:C9CC  D0 06      			bne	!+
         01:C9CE  98         			tya
         01:C9CF  49 00      			eor.h	#128
         01:C9D1  D0 01      			bne	!+
         01:C9D3  18         			clc
         01:C9D4             	!:
 5182                        		__bfalse	.LL194
         01:C9D4  90 1E      			bcc	.LL194
 5183                        	
 5184                        		.dbg	line,	"include\routines_LEVELS.c", 1035; {
 5185                        	
 5186                        		.dbg	line,	"include\routines_LEVELS.c", 1036; player_pos_y -= (i - 1);
 5187                        		__ld.um		__update_PLAYER_end - 4  /* i */
         01:C9D6  AD 06 23   			lda	__update_PLAYER_end - 4
         01:C9D9  C2         			cly
 5188                        		__sub.wi	1
         01:C9DA  38         			sec
         01:C9DB  E9 01      			sbc.l	#1
         01:C9DD  B0 01      			bcs	!+
         01:C9DF  88         			dey
         01:C9E0             	!:
 5189                        		__isub_st.wmq	_player_pos_y
         01:C9E0  38         			sec
         01:C9E1  49 FF      			eor	#$FF
         01:C9E3  6D 18 23   			adc.l	_player_pos_y
         01:C9E6  8D 18 23   			sta.l	_player_pos_y
         01:C9E9  98         			tya
         01:C9EA  49 FF      			eor	#$FF
         01:C9EC  6D 19 23   			adc.h	_player_pos_y
         01:C9EF  8D 19 23   			sta.h	_player_pos_y
 5190                        	
 5191                        		.dbg	line,	"include\routines_LEVELS.c", 1037; }
 5192                        	
 5193                        		.dbg	line,	"include\routines_LEVELS.c", 1039; else
 5194                        		__bra		.LL195
         01:C9F2  80 21      			bra	.LL195
 5195    01:C9F4             	.LL194:
 5196                        	
 5197                        		.dbg	line,	"include\routines_LEVELS.c", 1040; {
 5198                        	
 5199                        		.dbg	line,	"include\routines_LEVELS.c", 1041; sgx_map_pxl_y -= (i - 1);
 5200                        		__ld.um		__update_PLAYER_end - 4  /* i */
         01:C9F4  AD 06 23   			lda	__update_PLAYER_end - 4
         01:C9F7  C2         			cly
 5201                        		__sub.wi	1
         01:C9F8  38         			sec
         01:C9F9  E9 01      			sbc.l	#1
         01:C9FB  B0 01      			bcs	!+
         01:C9FD  88         			dey
         01:C9FE             	!:
 5202                        		__isub_st.wmq	_sgx_map_pxl_y
         01:C9FE  38         			sec
         01:C9FF  49 FF      			eor	#$FF
         01:CA01  6D 66 23   			adc.l	_sgx_map_pxl_y
         01:CA04  8D 66 23   			sta.l	_sgx_map_pxl_y
         01:CA07  98         			tya
         01:CA08  49 FF      			eor	#$FF
         01:CA0A  6D 67 23   			adc.h	_sgx_map_pxl_y
         01:CA0D  8D 67 23   			sta.h	_sgx_map_pxl_y
 5203                        	
 5204                        		.dbg	line,	"include\routines_LEVELS.c", 1042; }
 5205    01:CA10             	.LL195	.alias		.LL190
 5206                        	
 5207                        		.dbg	line,	"include\routines_LEVELS.c", 1044; break;
 5208                        		__bra		.LL190
         01:CA10  80 03      			bra	.LL190
 5209                        	
 5210                        		.dbg	line,	"include\routines_LEVELS.c", 1045; }
 5211                        	
 5212                        		.dbg	line,	"include\routines_LEVELS.c", 1046; }
 5213    01:CA12             	.LL193	.alias		.LL188
 5214                        		__bra		.LL188
         01:CA12  4C 6E C9   			bra	.LL188
 5215    01:CA15             	.LL190:
 5216                        	
 5217                        		.dbg	line,	"include\routines_LEVELS.c", 1048; // SET PLAYER SPRITE NEW POSITION //
 5218                        	
 5219                        		.dbg	line,	"include\routines_LEVELS.c", 1049; spr_y(player_pos_y);
 5220                        		__ld.wm		_player_pos_y
         01:CA15  AD 18 23   			lda.l	_player_pos_y
         01:CA18  AC 19 23   			ldy.h	_player_pos_y
 5221                        		__call		_spr_y.1
         01:CA1B  20 19 E8   			call	_spr_y.1
 5222                        	
 5223                        		.dbg	line,	"include\routines_LEVELS.c", 1051; player_counter_anim = 1;
 5224                        		__st.umiq	1, _player_counter_anim
         01:CA1E  A9 01      			lda.l	#1
         01:CA20  8D 11 23   			sta	_player_counter_anim
 5225                        	
 5226                        		.dbg	line,	"include\routines_LEVELS.c", 1052; player_index_jump = 0;
 5227                        		__st.umiq	0, _player_index_jump
         01:CA23  9C 12 23   			stz	_player_index_jump
 5228                        	
 5229                        		.dbg	line,	"include\routines_LEVELS.c", 1053; jump_ladder = FALSE;
 5230                        		__st.umiq	0, _jump_ladder
         01:CA26  9C 14 23   			stz	_jump_ladder
 5231                        	
 5232                        		.dbg	line,	"include\routines_LEVELS.c", 1054; jump_max_index = 34;
 5233                        		__st.umiq	34, _jump_max_index
         01:CA29  A9 22      			lda.l	#34
         01:CA2B  8D 15 23   			sta	_jump_max_index
 5234                        	
 5235                        		.dbg	line,	"include\routines_LEVELS.c", 1055; player_state = STATE_IDLE;
 5236                        		__st.umiq	0, _player_state
         01:CA2E  9C 0E 23   			stz	_player_state
 5237                        	
 5238                        		.dbg	line,	"include\routines_LEVELS.c", 1056; return;
 5239                        		__bra		.LL100
         01:CA31  4C 69 D1   			bra	.LL100
 5240                        	
 5241                        		.dbg	line,	"include\routines_LEVELS.c", 1057; }
 5242                        	
 5243                        		.dbg	line,	"include\routines_LEVELS.c", 1060; // CHECK COLLISION WITH LADDERS //
 5244                        	
 5245                        		.dbg	line,	"include\routines_LEVELS.c", 1061; if(player_index_jump > 4)
 5246    01:CA34             	.LL186:
 5247                        		__ld.umq	_player_index_jump
         01:CA34  AD 12 23   			lda	_player_index_jump
 5248                        		__ugt_b.uiq	4
         01:CA37  18         			clc			; Subtract integer+1 from A.
         01:CA38  E9 04      			sbc	#4		; CS if A > integer.
 5249                        		__bfalse	.LL196
         01:CA3A  B0 03 4C CB			bcc	.LL196
         01:CA3E  CA          
 5250                        	
 5251                        		.dbg	line,	"include\routines_LEVELS.c", 1062; {
 5252                        	
 5253                        		.dbg	line,	"include\routines_LEVELS.c", 1063; check_LADDER( 16 , 16 );
 5254                        		__ld.wi		16
         01:CA3F  A9 10      			lda.l	#16
         01:CA41  C2         			cly
 5255                        		__pusharg.wr
         01:CA42  A6 8D      			ldx	<__sp
         01:CA44  CA         			dex
         01:CA45  CA         			dex
         01:CA46  95 08      			sta.l	<__stack, x
         01:CA48  94 09      			sty.h	<__stack, x
         01:CA4A  86 8D      			stx	<__sp
 5256                        		__ld.wi		16
         01:CA4C  A9 10      			lda.l	#16
         01:CA4E  C2         			cly
 5257                        		__pusharg.wr
         01:CA4F  A6 8D      			ldx	<__sp
         01:CA51  CA         			dex
         01:CA52  CA         			dex
         01:CA53  95 08      			sta.l	<__stack, x
         01:CA55  94 09      			sty.h	<__stack, x
         01:CA57  86 8D      			stx	<__sp
 5258                        		__call		_check_LADDER
         01:CA59  20 81 FF   			call	_check_LADDER
 5259                        	
 5260                        		.dbg	line,	"include\routines_LEVELS.c", 1065; if(map_blk_flag == TILE_LADDER)
 5261                        		__ld.umq	_map_blk_flag
         01:CA5C  AD 85 28   			lda	_map_blk_flag
 5262                        		__equ_b.uiq	2
         01:CA5F  C9 02      			cmp	#2
         01:CA61  F0 01      			beq	!+
         01:CA63  18         			clc
         01:CA64             	!:
 5263                        		__bfalse	.LL197
         01:CA64  90 65      			bcc	.LL197
 5264                        	
 5265                        		.dbg	line,	"include\routines_LEVELS.c", 1066; {
 5266                        	
 5267                        		.dbg	line,	"include\routines_LEVELS.c", 1067; // CAMERA GOES 8 PX BACKWARD //
 5268                        	
 5269                        		.dbg	line,	"include\routines_LEVELS.c", 1068; sgx_map_pxl_x = ( (sgx_map_pxl_x >> 3) << 3 );
 5270                        		__ld.wm		_sgx_map_pxl_x
         01:CA66  AD 64 23   			lda.l	_sgx_map_pxl_x
         01:CA69  AC 65 23   			ldy.h	_sgx_map_pxl_x
 5271                        		__lsr.wi	3
         01:CA6C  84 00      			sty	__temp
         01:CA6E  20 3A E2   			jsr	lsrw3
 5272                        		__asl.wi	3
         01:CA71  84 00      			sty	__temp
         01:CA73  20 D7 E1   			jsr	aslw3
 5273                        		__st.wmq	_sgx_map_pxl_x
         01:CA76  8D 64 23   			sta.l	_sgx_map_pxl_x
         01:CA79  8C 65 23   			sty.h	_sgx_map_pxl_x
 5274                        	
 5275                        		.dbg	line,	"include\routines_LEVELS.c", 1070; // SO WE UPDATE THE MAP //
 5276                        	
 5277                        		.dbg	line,	"include\routines_LEVELS.c", 1071; sgx_scroll_map();
 5278                        		__call		_sgx_scroll_map
         01:CA7C  20 95 FF   			call	_sgx_scroll_map
 5279                        	
 5280                        		.dbg	line,	"include\routines_LEVELS.c", 1073; // CHECK IF THE PLAYER STANDS RIGHT TO THE LADDER //
 5281                        	
 5282                        		.dbg	line,	"include\routines_LEVELS.c", 1074; check_LADDER( 31 , 16 );
 5283                        		__ld.wi		31
         01:CA7F  A9 1F      			lda.l	#31
         01:CA81  C2         			cly
 5284                        		__pusharg.wr
         01:CA82  A6 8D      			ldx	<__sp
         01:CA84  CA         			dex
         01:CA85  CA         			dex
         01:CA86  95 08      			sta.l	<__stack, x
         01:CA88  94 09      			sty.h	<__stack, x
         01:CA8A  86 8D      			stx	<__sp
 5285                        		__ld.wi		16
         01:CA8C  A9 10      			lda.l	#16
         01:CA8E  C2         			cly
 5286                        		__pusharg.wr
         01:CA8F  A6 8D      			ldx	<__sp
         01:CA91  CA         			dex
         01:CA92  CA         			dex
         01:CA93  95 08      			sta.l	<__stack, x
         01:CA95  94 09      			sty.h	<__stack, x
         01:CA97  86 8D      			stx	<__sp
 5287                        		__call		_check_LADDER
         01:CA99  20 81 FF   			call	_check_LADDER
 5288                        	
 5289                        		.dbg	line,	"include\routines_LEVELS.c", 1076; if(map_blk_flag == TILE_LADDER)
 5290                        		__ld.umq	_map_blk_flag
         01:CA9C  AD 85 28   			lda	_map_blk_flag
 5291                        		__equ_b.uiq	2
         01:CA9F  C9 02      			cmp	#2
         01:CAA1  F0 01      			beq	!+
         01:CAA3  18         			clc
         01:CAA4             	!:
 5292                        		__bfalse	.LL198
         01:CAA4  90 0E      			bcc	.LL198
 5293                        	
 5294                        		.dbg	line,	"include\routines_LEVELS.c", 1077; {
 5295                        	
 5296                        		.dbg	line,	"include\routines_LEVELS.c", 1078; sgx_map_pxl_x += 8;
 5297                        		__add_st.wmiq	8, _sgx_map_pxl_x
         01:CAA6  18         			clc
         01:CAA7  AD 64 23   			lda.l	_sgx_map_pxl_x
         01:CAAA  69 08      			adc.l	#8
         01:CAAC  8D 64 23   			sta.l	_sgx_map_pxl_x
         01:CAAF  90 03      			bcc	!+
         01:CAB1  EE 65 23   			inc.h	_sgx_map_pxl_x
         01:CAB4             	!:
 5298                        	
 5299                        		.dbg	line,	"include\routines_LEVELS.c", 1079; }
 5300                        	
 5301                        		.dbg	line,	"include\routines_LEVELS.c", 1081; player_counter_anim = 1;
 5302    01:CAB4             	.LL198:
 5303                        		__st.umiq	1, _player_counter_anim
         01:CAB4  A9 01      			lda.l	#1
         01:CAB6  8D 11 23   			sta	_player_counter_anim
 5304                        	
 5305                        		.dbg	line,	"include\routines_LEVELS.c", 1082; player_index_jump = 0;
 5306                        		__st.umiq	0, _player_index_jump
         01:CAB9  9C 12 23   			stz	_player_index_jump
 5307                        	
 5308                        		.dbg	line,	"include\routines_LEVELS.c", 1083; jump_ladder = TRUE;
 5309                        		__st.umiq	1, _jump_ladder
         01:CABC  A9 01      			lda.l	#1
         01:CABE  8D 14 23   			sta	_jump_ladder
 5310                        	
 5311                        		.dbg	line,	"include\routines_LEVELS.c", 1084; jump_max_index = 29;
 5312                        		__st.umiq	29, _jump_max_index
         01:CAC1  A9 1D      			lda.l	#29
         01:CAC3  8D 15 23   			sta	_jump_max_index
 5313                        	
 5314                        		.dbg	line,	"include\routines_LEVELS.c", 1085; player_state = STATE_HANG;
 5315                        		__st.umiq	10, _player_state
         01:CAC6  A9 0A      			lda.l	#10
         01:CAC8  8D 0E 23   			sta	_player_state
 5316                        	
 5317                        		.dbg	line,	"include\routines_LEVELS.c", 1086; }
 5318                        	
 5319                        		.dbg	line,	"include\routines_LEVELS.c", 1087; }
 5320    01:CACB             	.LL197:
 5321                        	
 5322                        		.dbg	line,	"include\routines_LEVELS.c", 1090; // SET PLAYER SPRITE NEW POSITION //
 5323                        	
 5324                        		.dbg	line,	"include\routines_LEVELS.c", 1091; spr_y(player_pos_y);
 5325    01:CACB             	.LL196:
 5326                        		__ld.wm		_player_pos_y
         01:CACB  AD 18 23   			lda.l	_player_pos_y
         01:CACE  AC 19 23   			ldy.h	_player_pos_y
 5327                        		__call		_spr_y.1
         01:CAD1  20 19 E8   			call	_spr_y.1
 5328                        	
 5329                        		.dbg	line,	"include\routines_LEVELS.c", 1092; }
 5330                        	
 5331                        		.dbg	line,	"include\routines_LEVELS.c", 1095; else if(player_state == STATE_CROUCH)
 5332                        		__bra		.LL199
         01:CAD4  4C 69 D1   			bra	.LL199
 5333    01:CAD7             	.LL173:
 5334                        		__ld.umq	_player_state
         01:CAD7  AD 0E 23   			lda	_player_state
 5335                        		__equ_b.uiq	7
         01:CADA  C9 07      			cmp	#7
         01:CADC  F0 01      			beq	!+
         01:CADE  18         			clc
         01:CADF             	!:
 5336                        		__bfalse	.LL200
         01:CADF  90 2F      			bcc	.LL200
 5337                        	
 5338                        		.dbg	line,	"include\routines_LEVELS.c", 1096; {
 5339                        	
 5340                        		.dbg	line,	"include\routines_LEVELS.c", 1097; if(player_counter_anim == 1)
 5341                        		__ld.umq	_player_counter_anim
         01:CAE1  AD 11 23   			lda	_player_counter_anim
 5342                        		__equ_b.uiq	1
         01:CAE4  C9 01      			cmp	#1
         01:CAE6  F0 01      			beq	!+
         01:CAE8  18         			clc
         01:CAE9             	!:
 5343                        		__bfalse	.LL201
         01:CAE9  90 1F      			bcc	.LL201
 5344                        	
 5345                        		.dbg	line,	"include\routines_LEVELS.c", 1098; {
 5346                        	
 5347                        		.dbg	line,	"include\routines_LEVELS.c", 1099; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_128 , TILES_16);
 5348                        		__st.wmiq	18432, _di
         01:CAEB  64 F0      			stz.l	_di
         01:CAED  A9 48      			lda.h	#18432
         01:CAEF  85 F1      			sta.h	_di
 5349                        		__farptr	_tiles_SPR_PLAYER + 4096, _bp_bank, _bp
         01:CAF1  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 4096))
         01:CAF3  85 EC      			sta.l	_bp
         01:CAF5  A9 6A      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 4096))
         01:CAF7  85 ED      			sta.h	_bp
         01:CAF9  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 4096)
         01:CAFB  85 02      			sta	_bp_bank
 5350                        		__st.wmiq	256, _ax
         01:CAFD  64 F8      			stz.l	_ax
         01:CAFF  A9 01      			lda.h	#256
         01:CB01  85 F9      			sta.h	_ax
 5351                        		 _load_vram.3
         01:CB03  82         			clx				; Offset to PCE VDC.
         01:CB04  20 77 FF   			call	load_vram_x
 5352                        	
 5353                        		.dbg	line,	"include\routines_LEVELS.c", 1101; player_counter_anim = 0;
 5354                        		__st.umiq	0, _player_counter_anim
         01:CB07  9C 11 23   			stz	_player_counter_anim
 5355                        	
 5356                        		.dbg	line,	"include\routines_LEVELS.c", 1102; }
 5357                        	
 5358                        		.dbg	line,	"include\routines_LEVELS.c", 1104; recenter_CAMERA();
 5359    01:CB0A             	.LL201:
 5360                        		__call		_recenter_CAMERA
         01:CB0A  20 6D FF   			call	_recenter_CAMERA
 5361                        	
 5362                        		.dbg	line,	"include\routines_LEVELS.c", 1105; }
 5363                        	
 5364                        		.dbg	line,	"include\routines_LEVELS.c", 1108; else if(player_state == STATE_FALL)
 5365                        		__bra		.LL202
         01:CB0D  4C 69 D1   			bra	.LL202
 5366    01:CB10             	.LL200:
 5367                        		__ld.umq	_player_state
         01:CB10  AD 0E 23   			lda	_player_state
 5368                        		__equ_b.uiq	9
         01:CB13  C9 09      			cmp	#9
         01:CB15  F0 01      			beq	!+
         01:CB17  18         			clc
         01:CB18             	!:
 5369                        		__bfalse	.LL203
         01:CB18  B0 03 4C 1F			bcc	.LL203
         01:CB1C  CD          
 5370                        	
 5371                        		.dbg	line,	"include\routines_LEVELS.c", 1109; {
 5372                        	
 5373                        		.dbg	line,	"include\routines_LEVELS.c", 1110; unsigned char i, camera_y_move;
 5374                        	
 5375                        		.dbg	line,	"include\routines_LEVELS.c", 1111; i = 1;
 5376                        		__st.umiq	1, __update_PLAYER_end - 6  /* i */
         01:CB1D  A9 01      			lda.l	#1
         01:CB1F  8D 04 23   			sta	__update_PLAYER_end - 6
 5377                        	
 5378                        		.dbg	line,	"include\routines_LEVELS.c", 1114; spr_set(player_id);
 5379                        		__ld.umq	_player_id
         01:CB22  AD 0D 23   			lda	_player_id
 5380                        		__call		_spr_set.1
         01:CB25  20 DD E7   			call	_spr_set.1
 5381                        	
 5382                        		.dbg	line,	"include\routines_LEVELS.c", 1117; //--------------------------------------------------------------------------------------//
 5383                        	
 5384                        		.dbg	line,	"include\routines_LEVELS.c", 1118; //                                        V MOVE                                        //
 5385                        	
 5386                        		.dbg	line,	"include\routines_LEVELS.c", 1119; //--------------------------------------------------------------------------------------//
 5387                        	
 5388                        		.dbg	line,	"include\routines_LEVELS.c", 1121; // UPDATE PLAYER Y POSITION //
 5389                        	
 5390                        		.dbg	line,	"include\routines_LEVELS.c", 1122; player_pos_y += TABLE_PLAYER_FALL[player_index_fall];
 5391                        		__ldx.umq	_player_index_fall
         01:CB28  AE 13 23   			ldx	_player_index_fall
 5392                        		__ld.bax	_TABLE_PLAYER_FALL
         01:CB2B  BD 40 60   			lda	_TABLE_PLAYER_FALL, x
         01:CB2E  C2         			cly
         01:CB2F  10 01      			bpl	!+
         01:CB31  88         			dey
         01:CB32             	!:
 5393                        		__add_st.wmq	_player_pos_y
         01:CB32  18         			clc
         01:CB33  6D 18 23   			adc.l	_player_pos_y
         01:CB36  8D 18 23   			sta.l	_player_pos_y
         01:CB39  98         			tya
         01:CB3A  6D 19 23   			adc.h	_player_pos_y
         01:CB3D  8D 19 23   			sta.h	_player_pos_y
 5394                        	
 5395                        		.dbg	line,	"include\routines_LEVELS.c", 1125; // IF PLAYER GOES BELOW ITS BASE Y POSITION //
 5396                        	
 5397                        		.dbg	line,	"include\routines_LEVELS.c", 1126; if(player_pos_y >= PLAYER_BASE_Y_POS)
 5398                        		__ld.wm		_player_pos_y
         01:CB40  AD 18 23   			lda.l	_player_pos_y
         01:CB43  AC 19 23   			ldy.h	_player_pos_y
 5399                        		__sge_w.wi	128
         01:CB46  C9 80      			cmp.l	#128		; Subtract integer from Y:A.
         01:CB48  98         			tya
         01:CB49  E9 00      			sbc.h	#128
         01:CB4B  50 02      			bvc	!+
         01:CB4D  49 80      			eor	#$80		; +ve if Y:A >= integer (signed).
         01:CB4F  49 80      	!:		eor	#$80
         01:CB51  0A         			asl	a
 5400                        		__bfalse	.LL204
         01:CB52  90 45      			bcc	.LL204
 5401                        	
 5402                        		.dbg	line,	"include\routines_LEVELS.c", 1127; {
 5403                        	
 5404                        		.dbg	line,	"include\routines_LEVELS.c", 1128; // THE CAMERA MOVES //
 5405                        	
 5406                        		.dbg	line,	"include\routines_LEVELS.c", 1129; // CALCULATE HOW MANY PIXELS THE CAMERA HAS TO MOVE DOWN //
 5407                        	
 5408                        		.dbg	line,	"include\routines_LEVELS.c", 1130; camera_y_move = player_pos_y - PLAYER_BASE_Y_POS;
 5409                        		__ld.wm		_player_pos_y
         01:CB54  AD 18 23   			lda.l	_player_pos_y
         01:CB57  AC 19 23   			ldy.h	_player_pos_y
 5410                        		__sub.wi	128
         01:CB5A  38         			sec
         01:CB5B  E9 80      			sbc.l	#128
         01:CB5D  B0 01      			bcs	!+
         01:CB5F  88         			dey
         01:CB60             	!:
 5411                        		__st.umq	__update_PLAYER_end - 7  /* camera_y_move */
         01:CB60  8D 03 23   			sta	__update_PLAYER_end - 7
 5412                        	
 5413                        		.dbg	line,	"include\routines_LEVELS.c", 1131; sgx_map_pxl_y += camera_y_move;
 5414                        		__ld.um		__update_PLAYER_end - 7  /* camera_y_move */
         01:CB63  AD 03 23   			lda	__update_PLAYER_end - 7
         01:CB66  C2         			cly
 5415                        		__add_st.wmq	_sgx_map_pxl_y
         01:CB67  18         			clc
         01:CB68  6D 66 23   			adc.l	_sgx_map_pxl_y
         01:CB6B  8D 66 23   			sta.l	_sgx_map_pxl_y
         01:CB6E  98         			tya
         01:CB6F  6D 67 23   			adc.h	_sgx_map_pxl_y
         01:CB72  8D 67 23   			sta.h	_sgx_map_pxl_y
 5416                        	
 5417                        		.dbg	line,	"include\routines_LEVELS.c", 1133; // IF THE CAMERA HAS REACHED ITS MAX (LOWEST) POSITION //
 5418                        	
 5419                        		.dbg	line,	"include\routines_LEVELS.c", 1134; if(sgx_map_pxl_y > camera_max_y_position)
 5420                        		__ld.wm		_sgx_map_pxl_y
         01:CB75  AD 66 23   			lda.l	_sgx_map_pxl_y
         01:CB78  AC 67 23   			ldy.h	_sgx_map_pxl_y
 5421                        		__ugt_w.wm	_camera_max_y_position
         01:CB7B  18         			clc			; Subtract memory+1 from Y:A.
         01:CB7C  ED 1A 23   			sbc.l	_camera_max_y_position
         01:CB7F  98         			tya
         01:CB80  ED 1B 23   			sbc.h	_camera_max_y_position		; CS if Y:A > memory.
 5422                        		__bfalse	.LL205
         01:CB83  90 0C      			bcc	.LL205
 5423                        	
 5424                        		.dbg	line,	"include\routines_LEVELS.c", 1135; {
 5425                        	
 5426                        		.dbg	line,	"include\routines_LEVELS.c", 1136; // THE CAMERA CAN NOT MOVE LOWER //
 5427                        	
 5428                        		.dbg	line,	"include\routines_LEVELS.c", 1137; sgx_map_pxl_y = camera_max_y_position;
 5429                        		__ld.wm		_camera_max_y_position
         01:CB85  AD 1A 23   			lda.l	_camera_max_y_position
         01:CB88  AC 1B 23   			ldy.h	_camera_max_y_position
 5430                        		__st.wmq	_sgx_map_pxl_y
         01:CB8B  8D 66 23   			sta.l	_sgx_map_pxl_y
         01:CB8E  8C 67 23   			sty.h	_sgx_map_pxl_y
 5431                        	
 5432                        		.dbg	line,	"include\routines_LEVELS.c", 1138; }
 5433                        	
 5434                        		.dbg	line,	"include\routines_LEVELS.c", 1140; // THE PLAYER STAYS AT ITS BASE Y POSITION //
 5435                        	
 5436                        		.dbg	line,	"include\routines_LEVELS.c", 1141; player_pos_y = PLAYER_BASE_Y_POS;
 5437    01:CB91             	.LL205:
 5438                        		__st.wmiq	128, _player_pos_y
         01:CB91  A9 80      			lda.l	#128
         01:CB93  8D 18 23   			sta.l	_player_pos_y
         01:CB96  9C 19 23   			stz.h	_player_pos_y
 5439                        	
 5440                        		.dbg	line,	"include\routines_LEVELS.c", 1142; }
 5441                        	
 5442                        		.dbg	line,	"include\routines_LEVELS.c", 1145; // UPDATE JUMP INDEX IN THE ARRAY //
 5443                        	
 5444                        		.dbg	line,	"include\routines_LEVELS.c", 1146; // ARRAY MAX ENTRY : 20//
 5445                        	
 5446                        		.dbg	line,	"include\routines_LEVELS.c", 1147; if(player_index_fall < 20)
 5447    01:CB99             	.LL204:
 5448                        		__ld.umq	_player_index_fall
         01:CB99  AD 13 23   			lda	_player_index_fall
 5449                        		__ult_b.uiq	20
         01:CB9C  C9 14      			cmp	#20		; Subtract integer from A.
         01:CB9E  6A         			ror	a		; CC if A < integer.
         01:CB9F  49 80      			eor	#$80
         01:CBA1  2A         			rol	a
 5450                        		__bfalse	.LL206
         01:CBA2  90 03      			bcc	.LL206
 5451                        	
 5452                        		.dbg	line,	"include\routines_LEVELS.c", 1148; {
 5453                        	
 5454                        		.dbg	line,	"include\routines_LEVELS.c", 1149; player_index_fall += 1;
 5455                        		__add_st.umiq	1, _player_index_fall
         01:CBA4  EE 13 23   			inc	_player_index_fall
 5456                        	
 5457                        		.dbg	line,	"include\routines_LEVELS.c", 1150; }
 5458                        	
 5459                        		.dbg	line,	"include\routines_LEVELS.c", 1153; //check_FLOOR_R();
 5460                        	
 5461                        		.dbg	line,	"include\routines_LEVELS.c", 1154; check_BG( 15 , 0);
 5462    01:CBA7             	.LL206:
 5463                        		__ld.wi		15
         01:CBA7  A9 0F      			lda.l	#15
         01:CBA9  C2         			cly
 5464                        		__pusharg.wr
         01:CBAA  A6 8D      			ldx	<__sp
         01:CBAC  CA         			dex
         01:CBAD  CA         			dex
         01:CBAE  95 08      			sta.l	<__stack, x
         01:CBB0  94 09      			sty.h	<__stack, x
         01:CBB2  86 8D      			stx	<__sp
 5465                        		__ld.wi		0
         01:CBB4  62         			cla
         01:CBB5  C2         			cly
 5466                        		__pusharg.wr
         01:CBB6  A6 8D      			ldx	<__sp
         01:CBB8  CA         			dex
         01:CBB9  CA         			dex
         01:CBBA  95 08      			sta.l	<__stack, x
         01:CBBC  94 09      			sty.h	<__stack, x
         01:CBBE  86 8D      			stx	<__sp
 5467                        		__call		_check_BG
         01:CBC0  20 31 FF   			call	_check_BG
 5468                        	
 5469                        		.dbg	line,	"include\routines_LEVELS.c", 1157; if(map_blk_flag == TILE_BG)
 5470                        		__ld.umq	_map_blk_flag
         01:CBC3  AD 85 28   			lda	_map_blk_flag
 5471                        		__equ_b.uiq	1
         01:CBC6  C9 01      			cmp	#1
         01:CBC8  F0 01      			beq	!+
         01:CBCA  18         			clc
         01:CBCB             	!:
 5472                        		__bfalse	.LL207
         01:CBCB  B0 03 4C 81			bcc	.LL207
         01:CBCF  CC          
 5473                        	
 5474                        		.dbg	line,	"include\routines_LEVELS.c", 1158; {
 5475                        	
 5476                        		.dbg	line,	"include\routines_LEVELS.c", 1159; // CALCULATE HOW MANY PIXELS THE PLAYER MOVED INTO THE GROUND //
 5477                        	
 5478                        		.dbg	line,	"include\routines_LEVELS.c", 1160; for(i=1; i<11 ; i++ )
 5479                        		__st.umiq	1, __update_PLAYER_end - 6  /* i */
         01:CBD0  A9 01      			lda.l	#1
         01:CBD2  8D 04 23   			sta	__update_PLAYER_end - 6
 5480    01:CBD5             	.LL208:
 5481                        		__ld.umq	__update_PLAYER_end - 6  /* i */
         01:CBD5  AD 04 23   			lda	__update_PLAYER_end - 6
 5482                        		__ult_b.uiq	11
         01:CBD8  C9 0B      			cmp	#11		; Subtract integer from A.
         01:CBDA  6A         			ror	a		; CC if A < integer.
         01:CBDB  49 80      			eor	#$80
         01:CBDD  2A         			rol	a
 5483                        		__btrue		.LL210
         01:CBDE  B0 07      			bcs	.LL210
 5484                        		__bra		.LL211
         01:CBE0  80 7D      			bra	.LL211
 5485    01:CBE2             	.LL209:
 5486                        		__inc.umq	__update_PLAYER_end - 6  /* i */
         01:CBE2  EE 04 23   			inc	__update_PLAYER_end - 6
 5487                        		__bra		.LL208
         01:CBE5  80 EE      			bra	.LL208
 5488    01:CBE7             	.LL210:
 5489                        	
 5490                        		.dbg	line,	"include\routines_LEVELS.c", 1161; {
 5491                        	
 5492                        		.dbg	line,	"include\routines_LEVELS.c", 1162; //if(player_axis == AXIS_RIGHT)
 5493                        	
 5494                        		.dbg	line,	"include\routines_LEVELS.c", 1163; //{
 5495                        	
 5496                        		.dbg	line,	"include\routines_LEVELS.c", 1164; check_BG( 15 , i);//20
 5497                        		__ld.wi		15
         01:CBE7  A9 0F      			lda.l	#15
         01:CBE9  C2         			cly
 5498                        		__pusharg.wr
         01:CBEA  A6 8D      			ldx	<__sp
         01:CBEC  CA         			dex
         01:CBED  CA         			dex
         01:CBEE  95 08      			sta.l	<__stack, x
         01:CBF0  94 09      			sty.h	<__stack, x
         01:CBF2  86 8D      			stx	<__sp
 5499                        		__ld.um		__update_PLAYER_end - 6  /* i */
         01:CBF4  AD 04 23   			lda	__update_PLAYER_end - 6
         01:CBF7  C2         			cly
 5500                        		__pusharg.wr
         01:CBF8  A6 8D      			ldx	<__sp
         01:CBFA  CA         			dex
         01:CBFB  CA         			dex
         01:CBFC  95 08      			sta.l	<__stack, x
         01:CBFE  94 09      			sty.h	<__stack, x
         01:CC00  86 8D      			stx	<__sp
 5501                        		__call		_check_BG
         01:CC02  20 31 FF   			call	_check_BG
 5502                        	
 5503                        		.dbg	line,	"include\routines_LEVELS.c", 1165; //}
 5504                        	
 5505                        		.dbg	line,	"include\routines_LEVELS.c", 1167; /*else
 5506                        	
 5507                        		.dbg	line,	"include\routines_LEVELS.c", 1168; {
 5508                        	
 5509                        		.dbg	line,	"include\routines_LEVELS.c", 1169; check_BG( 10 , i);
 5510                        	
 5511                        		.dbg	line,	"include\routines_LEVELS.c", 1170; }*/
 5512                        	
 5513                        		.dbg	line,	"include\routines_LEVELS.c", 1173; if(map_blk_flag == TILE_EMPTY)
 5514                        		__not.um	_map_blk_flag
         01:CC05  AD 85 28   			lda	_map_blk_flag
         01:CC08  18         			clc
         01:CC09  D0 01      			bne	!+
         01:CC0B  38         			sec
         01:CC0C             	!:
 5515                        		__bfalse	.LL212
         01:CC0C  90 D4      			bcc	.LL212
 5516                        	
 5517                        		.dbg	line,	"include\routines_LEVELS.c", 1174; {
 5518                        	
 5519                        		.dbg	line,	"include\routines_LEVELS.c", 1175; if(player_pos_y != PLAYER_BASE_Y_POS)
 5520                        		__ld.wm		_player_pos_y
         01:CC0E  AD 18 23   			lda.l	_player_pos_y
         01:CC11  AC 19 23   			ldy.h	_player_pos_y
 5521                        		__neq_w.wi	128
         01:CC14  38         			sec
         01:CC15  49 80      			eor.l	#128
         01:CC17  D0 06      			bne	!+
         01:CC19  98         			tya
         01:CC1A  49 00      			eor.h	#128
         01:CC1C  D0 01      			bne	!+
         01:CC1E  18         			clc
         01:CC1F             	!:
 5522                        		__bfalse	.LL213
         01:CC1F  90 1E      			bcc	.LL213
 5523                        	
 5524                        		.dbg	line,	"include\routines_LEVELS.c", 1176; {
 5525                        	
 5526                        		.dbg	line,	"include\routines_LEVELS.c", 1177; player_pos_y -= (i - 1);
 5527                        		__ld.um		__update_PLAYER_end - 6  /* i */
         01:CC21  AD 04 23   			lda	__update_PLAYER_end - 6
         01:CC24  C2         			cly
 5528                        		__sub.wi	1
         01:CC25  38         			sec
         01:CC26  E9 01      			sbc.l	#1
         01:CC28  B0 01      			bcs	!+
         01:CC2A  88         			dey
         01:CC2B             	!:
 5529                        		__isub_st.wmq	_player_pos_y
         01:CC2B  38         			sec
         01:CC2C  49 FF      			eor	#$FF
         01:CC2E  6D 18 23   			adc.l	_player_pos_y
         01:CC31  8D 18 23   			sta.l	_player_pos_y
         01:CC34  98         			tya
         01:CC35  49 FF      			eor	#$FF
         01:CC37  6D 19 23   			adc.h	_player_pos_y
         01:CC3A  8D 19 23   			sta.h	_player_pos_y
 5530                        	
 5531                        		.dbg	line,	"include\routines_LEVELS.c", 1178; }
 5532                        	
 5533                        		.dbg	line,	"include\routines_LEVELS.c", 1180; else
 5534                        		__bra		.LL214
         01:CC3D  80 20      			bra	.LL214
 5535    01:CC3F             	.LL213:
 5536                        	
 5537                        		.dbg	line,	"include\routines_LEVELS.c", 1181; {
 5538                        	
 5539                        		.dbg	line,	"include\routines_LEVELS.c", 1182; sgx_map_pxl_y -= (i - 1);
 5540                        		__ld.um		__update_PLAYER_end - 6  /* i */
         01:CC3F  AD 04 23   			lda	__update_PLAYER_end - 6
         01:CC42  C2         			cly
 5541                        		__sub.wi	1
         01:CC43  38         			sec
         01:CC44  E9 01      			sbc.l	#1
         01:CC46  B0 01      			bcs	!+
         01:CC48  88         			dey
         01:CC49             	!:
 5542                        		__isub_st.wmq	_sgx_map_pxl_y
         01:CC49  38         			sec
         01:CC4A  49 FF      			eor	#$FF
         01:CC4C  6D 66 23   			adc.l	_sgx_map_pxl_y
         01:CC4F  8D 66 23   			sta.l	_sgx_map_pxl_y
         01:CC52  98         			tya
         01:CC53  49 FF      			eor	#$FF
         01:CC55  6D 67 23   			adc.h	_sgx_map_pxl_y
         01:CC58  8D 67 23   			sta.h	_sgx_map_pxl_y
 5543                        	
 5544                        		.dbg	line,	"include\routines_LEVELS.c", 1183; }
 5545    01:CC5B             	.LL214	.alias		.LL211
 5546                        	
 5547                        		.dbg	line,	"include\routines_LEVELS.c", 1186; break;
 5548                        		__bra		.LL211
         01:CC5B  80 02      			bra	.LL211
 5549                        	
 5550                        		.dbg	line,	"include\routines_LEVELS.c", 1187; }
 5551                        	
 5552                        		.dbg	line,	"include\routines_LEVELS.c", 1189; }
 5553    01:CC5D             	.LL212	.alias		.LL209
 5554                        		__bra		.LL209
         01:CC5D  80 83      			bra	.LL209
 5555    01:CC5F             	.LL211:
 5556                        	
 5557                        		.dbg	line,	"include\routines_LEVELS.c", 1191; spr_y(player_pos_y);
 5558                        		__ld.wm		_player_pos_y
         01:CC5F  AD 18 23   			lda.l	_player_pos_y
         01:CC62  AC 19 23   			ldy.h	_player_pos_y
 5559                        		__call		_spr_y.1
         01:CC65  20 19 E8   			call	_spr_y.1
 5560                        	
 5561                        		.dbg	line,	"include\routines_LEVELS.c", 1193; player_counter_anim = 1;
 5562                        		__st.umiq	1, _player_counter_anim
         01:CC68  A9 01      			lda.l	#1
         01:CC6A  8D 11 23   			sta	_player_counter_anim
 5563                        	
 5564                        		.dbg	line,	"include\routines_LEVELS.c", 1194; player_index_jump = 0;
 5565                        		__st.umiq	0, _player_index_jump
         01:CC6D  9C 12 23   			stz	_player_index_jump
 5566                        	
 5567                        		.dbg	line,	"include\routines_LEVELS.c", 1195; player_index_fall = 0;
 5568                        		__st.umiq	0, _player_index_fall
         01:CC70  9C 13 23   			stz	_player_index_fall
 5569                        	
 5570                        		.dbg	line,	"include\routines_LEVELS.c", 1196; jump_ladder = FALSE;
 5571                        		__st.umiq	0, _jump_ladder
         01:CC73  9C 14 23   			stz	_jump_ladder
 5572                        	
 5573                        		.dbg	line,	"include\routines_LEVELS.c", 1197; jump_max_index = 34;
 5574                        		__st.umiq	34, _jump_max_index
         01:CC76  A9 22      			lda.l	#34
         01:CC78  8D 15 23   			sta	_jump_max_index
 5575                        	
 5576                        		.dbg	line,	"include\routines_LEVELS.c", 1198; player_state = STATE_IDLE;
 5577                        		__st.umiq	0, _player_state
         01:CC7B  9C 0E 23   			stz	_player_state
 5578                        	
 5579                        		.dbg	line,	"include\routines_LEVELS.c", 1199; return;
 5580                        		__bra		.LL100
         01:CC7E  4C 69 D1   			bra	.LL100
 5581                        	
 5582                        		.dbg	line,	"include\routines_LEVELS.c", 1200; }
 5583                        	
 5584                        		.dbg	line,	"include\routines_LEVELS.c", 1203; check_LADDER( 16 , 16 );
 5585    01:CC81             	.LL207:
 5586                        		__ld.wi		16
         01:CC81  A9 10      			lda.l	#16
         01:CC83  C2         			cly
 5587                        		__pusharg.wr
         01:CC84  A6 8D      			ldx	<__sp
         01:CC86  CA         			dex
         01:CC87  CA         			dex
         01:CC88  95 08      			sta.l	<__stack, x
         01:CC8A  94 09      			sty.h	<__stack, x
         01:CC8C  86 8D      			stx	<__sp
 5588                        		__ld.wi		16
         01:CC8E  A9 10      			lda.l	#16
         01:CC90  C2         			cly
 5589                        		__pusharg.wr
         01:CC91  A6 8D      			ldx	<__sp
         01:CC93  CA         			dex
         01:CC94  CA         			dex
         01:CC95  95 08      			sta.l	<__stack, x
         01:CC97  94 09      			sty.h	<__stack, x
         01:CC99  86 8D      			stx	<__sp
 5590                        		__call		_check_LADDER
         01:CC9B  20 81 FF   			call	_check_LADDER
 5591                        	
 5592                        		.dbg	line,	"include\routines_LEVELS.c", 1205; // IF PLAYER HITS THE LADDER //
 5593                        	
 5594                        		.dbg	line,	"include\routines_LEVELS.c", 1206; if(map_blk_flag == TILE_LADDER)
 5595                        		__ld.umq	_map_blk_flag
         01:CC9E  AD 85 28   			lda	_map_blk_flag
 5596                        		__equ_b.uiq	2
         01:CCA1  C9 02      			cmp	#2
         01:CCA3  F0 01      			beq	!+
         01:CCA5  18         			clc
         01:CCA6             	!:
 5597                        		__bfalse	.LL215
         01:CCA6  90 6B      			bcc	.LL215
 5598                        	
 5599                        		.dbg	line,	"include\routines_LEVELS.c", 1207; {
 5600                        	
 5601                        		.dbg	line,	"include\routines_LEVELS.c", 1208; // CAMERA GOES 8 PX BACKWARD //
 5602                        	
 5603                        		.dbg	line,	"include\routines_LEVELS.c", 1209; sgx_map_pxl_x = ( (sgx_map_pxl_x >> 3) << 3 );
 5604                        		__ld.wm		_sgx_map_pxl_x
         01:CCA8  AD 64 23   			lda.l	_sgx_map_pxl_x
         01:CCAB  AC 65 23   			ldy.h	_sgx_map_pxl_x
 5605                        		__lsr.wi	3
         01:CCAE  84 00      			sty	__temp
         01:CCB0  20 3A E2   			jsr	lsrw3
 5606                        		__asl.wi	3
         01:CCB3  84 00      			sty	__temp
         01:CCB5  20 D7 E1   			jsr	aslw3
 5607                        		__st.wmq	_sgx_map_pxl_x
         01:CCB8  8D 64 23   			sta.l	_sgx_map_pxl_x
         01:CCBB  8C 65 23   			sty.h	_sgx_map_pxl_x
 5608                        	
 5609                        		.dbg	line,	"include\routines_LEVELS.c", 1211; // SO WE UPDATE THE MAP //
 5610                        	
 5611                        		.dbg	line,	"include\routines_LEVELS.c", 1212; sgx_scroll_map();
 5612                        		__call		_sgx_scroll_map
         01:CCBE  20 95 FF   			call	_sgx_scroll_map
 5613                        	
 5614                        		.dbg	line,	"include\routines_LEVELS.c", 1214; // CHECK IF THE PLAYER STANDS RIGHT TO THE LADDER //
 5615                        	
 5616                        		.dbg	line,	"include\routines_LEVELS.c", 1215; check_LADDER( 31 , 16 );
 5617                        		__ld.wi		31
         01:CCC1  A9 1F      			lda.l	#31
         01:CCC3  C2         			cly
 5618                        		__pusharg.wr
         01:CCC4  A6 8D      			ldx	<__sp
         01:CCC6  CA         			dex
         01:CCC7  CA         			dex
         01:CCC8  95 08      			sta.l	<__stack, x
         01:CCCA  94 09      			sty.h	<__stack, x
         01:CCCC  86 8D      			stx	<__sp
 5619                        		__ld.wi		16
         01:CCCE  A9 10      			lda.l	#16
         01:CCD0  C2         			cly
 5620                        		__pusharg.wr
         01:CCD1  A6 8D      			ldx	<__sp
         01:CCD3  CA         			dex
         01:CCD4  CA         			dex
         01:CCD5  95 08      			sta.l	<__stack, x
         01:CCD7  94 09      			sty.h	<__stack, x
         01:CCD9  86 8D      			stx	<__sp
 5621                        		__call		_check_LADDER
         01:CCDB  20 81 FF   			call	_check_LADDER
 5622                        	
 5623                        		.dbg	line,	"include\routines_LEVELS.c", 1217; if(map_blk_flag == TILE_LADDER)
 5624                        		__ld.umq	_map_blk_flag
         01:CCDE  AD 85 28   			lda	_map_blk_flag
 5625                        		__equ_b.uiq	2
         01:CCE1  C9 02      			cmp	#2
         01:CCE3  F0 01      			beq	!+
         01:CCE5  18         			clc
         01:CCE6             	!:
 5626                        		__bfalse	.LL216
         01:CCE6  90 0E      			bcc	.LL216
 5627                        	
 5628                        		.dbg	line,	"include\routines_LEVELS.c", 1218; {
 5629                        	
 5630                        		.dbg	line,	"include\routines_LEVELS.c", 1219; sgx_map_pxl_x += 8;
 5631                        		__add_st.wmiq	8, _sgx_map_pxl_x
         01:CCE8  18         			clc
         01:CCE9  AD 64 23   			lda.l	_sgx_map_pxl_x
         01:CCEC  69 08      			adc.l	#8
         01:CCEE  8D 64 23   			sta.l	_sgx_map_pxl_x
         01:CCF1  90 03      			bcc	!+
         01:CCF3  EE 65 23   			inc.h	_sgx_map_pxl_x
         01:CCF6             	!:
 5632                        	
 5633                        		.dbg	line,	"include\routines_LEVELS.c", 1220; }
 5634                        	
 5635                        		.dbg	line,	"include\routines_LEVELS.c", 1222; player_counter_anim = 1;
 5636    01:CCF6             	.LL216:
 5637                        		__st.umiq	1, _player_counter_anim
         01:CCF6  A9 01      			lda.l	#1
         01:CCF8  8D 11 23   			sta	_player_counter_anim
 5638                        	
 5639                        		.dbg	line,	"include\routines_LEVELS.c", 1223; player_index_jump = 0;
 5640                        		__st.umiq	0, _player_index_jump
         01:CCFB  9C 12 23   			stz	_player_index_jump
 5641                        	
 5642                        		.dbg	line,	"include\routines_LEVELS.c", 1224; player_index_fall = 0;
 5643                        		__st.umiq	0, _player_index_fall
         01:CCFE  9C 13 23   			stz	_player_index_fall
 5644                        	
 5645                        		.dbg	line,	"include\routines_LEVELS.c", 1225; jump_ladder = TRUE;
 5646                        		__st.umiq	1, _jump_ladder
         01:CD01  A9 01      			lda.l	#1
         01:CD03  8D 14 23   			sta	_jump_ladder
 5647                        	
 5648                        		.dbg	line,	"include\routines_LEVELS.c", 1226; jump_max_index = 29;
 5649                        		__st.umiq	29, _jump_max_index
         01:CD06  A9 1D      			lda.l	#29
         01:CD08  8D 15 23   			sta	_jump_max_index
 5650                        	
 5651                        		.dbg	line,	"include\routines_LEVELS.c", 1227; player_state = STATE_HANG;
 5652                        		__st.umiq	10, _player_state
         01:CD0B  A9 0A      			lda.l	#10
         01:CD0D  8D 0E 23   			sta	_player_state
 5653                        	
 5654                        		.dbg	line,	"include\routines_LEVELS.c", 1228; return;
 5655                        		__bra		.LL100
         01:CD10  4C 69 D1   			bra	.LL100
 5656                        	
 5657                        		.dbg	line,	"include\routines_LEVELS.c", 1229; }
 5658                        	
 5659                        		.dbg	line,	"include\routines_LEVELS.c", 1232; spr_y(player_pos_y);
 5660    01:CD13             	.LL215:
 5661                        		__ld.wm		_player_pos_y
         01:CD13  AD 18 23   			lda.l	_player_pos_y
         01:CD16  AC 19 23   			ldy.h	_player_pos_y
 5662                        		__call		_spr_y.1
         01:CD19  20 19 E8   			call	_spr_y.1
 5663                        	
 5664                        		.dbg	line,	"include\routines_LEVELS.c", 1233; }
 5665                        	
 5666                        		.dbg	line,	"include\routines_LEVELS.c", 1236; else if(player_state == STATE_HANG)
 5667                        		__bra		.LL217
         01:CD1C  4C 69 D1   			bra	.LL217
 5668    01:CD1F             	.LL203:
 5669                        		__ld.umq	_player_state
         01:CD1F  AD 0E 23   			lda	_player_state
 5670                        		__equ_b.uiq	10
         01:CD22  C9 0A      			cmp	#10
         01:CD24  F0 01      			beq	!+
         01:CD26  18         			clc
         01:CD27             	!:
 5671                        		__bfalse	.LL218
         01:CD27  90 32      			bcc	.LL218
 5672                        	
 5673                        		.dbg	line,	"include\routines_LEVELS.c", 1237; {
 5674                        	
 5675                        		.dbg	line,	"include\routines_LEVELS.c", 1238; recenter_CAMERA();
 5676                        		__call		_recenter_CAMERA
         01:CD29  20 6D FF   			call	_recenter_CAMERA
 5677                        	
 5678                        		.dbg	line,	"include\routines_LEVELS.c", 1240; if(player_counter_anim == 1)
 5679                        		__ld.umq	_player_counter_anim
         01:CD2C  AD 11 23   			lda	_player_counter_anim
 5680                        		__equ_b.uiq	1
         01:CD2F  C9 01      			cmp	#1
         01:CD31  F0 01      			beq	!+
         01:CD33  18         			clc
         01:CD34             	!:
 5681                        		__bfalse	.LL219
         01:CD34  B0 03 4C 69			bcc	.LL219
         01:CD38  D1          
 5682                        	
 5683                        		.dbg	line,	"include\routines_LEVELS.c", 1241; {
 5684                        	
 5685                        		.dbg	line,	"include\routines_LEVELS.c", 1242; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_144 , TILES_16);
 5686                        		__st.wmiq	18432, _di
         01:CD39  64 F0      			stz.l	_di
         01:CD3B  A9 48      			lda.h	#18432
         01:CD3D  85 F1      			sta.h	_di
 5687                        		__farptr	_tiles_SPR_PLAYER + 4608, _bp_bank, _bp
         01:CD3F  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 4608))
         01:CD41  85 EC      			sta.l	_bp
         01:CD43  A9 6C      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 4608))
         01:CD45  85 ED      			sta.h	_bp
         01:CD47  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 4608)
         01:CD49  85 02      			sta	_bp_bank
 5688                        		__st.wmiq	256, _ax
         01:CD4B  64 F8      			stz.l	_ax
         01:CD4D  A9 01      			lda.h	#256
         01:CD4F  85 F9      			sta.h	_ax
 5689                        		 _load_vram.3
         01:CD51  82         			clx				; Offset to PCE VDC.
         01:CD52  20 77 FF   			call	load_vram_x
 5690                        	
 5691                        		.dbg	line,	"include\routines_LEVELS.c", 1244; player_counter_anim = 0;
 5692                        		__st.umiq	0, _player_counter_anim
         01:CD55  9C 11 23   			stz	_player_counter_anim
 5693                        	
 5694                        		.dbg	line,	"include\routines_LEVELS.c", 1245; }
 5695                        	
 5696                        		.dbg	line,	"include\routines_LEVELS.c", 1246; }
 5697    01:CD58             	.LL219	.alias		.LL220
 5698                        	
 5699                        		.dbg	line,	"include\routines_LEVELS.c", 1249; else if(player_state == STATE_CLIMB_UP)
 5700                        		__bra		.LL220
         01:CD58  4C 69 D1   			bra	.LL220
 5701    01:CD5B             	.LL218:
 5702                        		__ld.umq	_player_state
         01:CD5B  AD 0E 23   			lda	_player_state
 5703                        		__equ_b.uiq	11
         01:CD5E  C9 0B      			cmp	#11
         01:CD60  F0 01      			beq	!+
         01:CD62  18         			clc
         01:CD63             	!:
 5704                        		__bfalse	.LL221
         01:CD63  B0 03 4C 6D			bcc	.LL221
         01:CD67  CE          
 5705                        	
 5706                        		.dbg	line,	"include\routines_LEVELS.c", 1250; {
 5707                        	
 5708                        		.dbg	line,	"include\routines_LEVELS.c", 1251; if(player_counter_anim == 0)
 5709                        		__not.um	_player_counter_anim
         01:CD68  AD 11 23   			lda	_player_counter_anim
         01:CD6B  18         			clc
         01:CD6C  D0 01      			bne	!+
         01:CD6E  38         			sec
         01:CD6F             	!:
 5710                        		__bfalse	.LL222
         01:CD6F  90 1F      			bcc	.LL222
 5711                        	
 5712                        		.dbg	line,	"include\routines_LEVELS.c", 1252; {
 5713                        	
 5714                        		.dbg	line,	"include\routines_LEVELS.c", 1253; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_160 , TILES_16);
 5715                        		__st.wmiq	18432, _di
         01:CD71  64 F0      			stz.l	_di
         01:CD73  A9 48      			lda.h	#18432
         01:CD75  85 F1      			sta.h	_di
 5716                        		__farptr	_tiles_SPR_PLAYER + 5120, _bp_bank, _bp
         01:CD77  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5120))
         01:CD79  85 EC      			sta.l	_bp
         01:CD7B  A9 6E      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5120))
         01:CD7D  85 ED      			sta.h	_bp
         01:CD7F  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 5120)
         01:CD81  85 02      			sta	_bp_bank
 5717                        		__st.wmiq	256, _ax
         01:CD83  64 F8      			stz.l	_ax
         01:CD85  A9 01      			lda.h	#256
         01:CD87  85 F9      			sta.h	_ax
 5718                        		 _load_vram.3
         01:CD89  82         			clx				; Offset to PCE VDC.
         01:CD8A  20 77 FF   			call	load_vram_x
 5719                        	
 5720                        		.dbg	line,	"include\routines_LEVELS.c", 1254; }
 5721                        	
 5722                        		.dbg	line,	"include\routines_LEVELS.c", 1256; else if(player_counter_anim == 3)
 5723                        		__bra		.LL223
         01:CD8D  4C 57 CE   			bra	.LL223
 5724    01:CD90             	.LL222:
 5725                        		__ld.umq	_player_counter_anim
         01:CD90  AD 11 23   			lda	_player_counter_anim
 5726                        		__equ_b.uiq	3
         01:CD93  C9 03      			cmp	#3
         01:CD95  F0 01      			beq	!+
         01:CD97  18         			clc
         01:CD98             	!:
 5727                        		__bfalse	.LL224
         01:CD98  90 1F      			bcc	.LL224
 5728                        	
 5729                        		.dbg	line,	"include\routines_LEVELS.c", 1257; {
 5730                        	
 5731                        		.dbg	line,	"include\routines_LEVELS.c", 1258; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_176 , TILES_16);
 5732                        		__st.wmiq	18432, _di
         01:CD9A  64 F0      			stz.l	_di
         01:CD9C  A9 48      			lda.h	#18432
         01:CD9E  85 F1      			sta.h	_di
 5733                        		__farptr	_tiles_SPR_PLAYER + 5632, _bp_bank, _bp
         01:CDA0  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5632))
         01:CDA2  85 EC      			sta.l	_bp
         01:CDA4  A9 70      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5632))
         01:CDA6  85 ED      			sta.h	_bp
         01:CDA8  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 5632)
         01:CDAA  85 02      			sta	_bp_bank
 5734                        		__st.wmiq	256, _ax
         01:CDAC  64 F8      			stz.l	_ax
         01:CDAE  A9 01      			lda.h	#256
         01:CDB0  85 F9      			sta.h	_ax
 5735                        		 _load_vram.3
         01:CDB2  82         			clx				; Offset to PCE VDC.
         01:CDB3  20 77 FF   			call	load_vram_x
 5736                        	
 5737                        		.dbg	line,	"include\routines_LEVELS.c", 1259; }
 5738                        	
 5739                        		.dbg	line,	"include\routines_LEVELS.c", 1261; else if(player_counter_anim == 6)
 5740                        		__bra		.LL225
         01:CDB6  4C 57 CE   			bra	.LL225
 5741    01:CDB9             	.LL224:
 5742                        		__ld.umq	_player_counter_anim
         01:CDB9  AD 11 23   			lda	_player_counter_anim
 5743                        		__equ_b.uiq	6
         01:CDBC  C9 06      			cmp	#6
         01:CDBE  F0 01      			beq	!+
         01:CDC0  18         			clc
         01:CDC1             	!:
 5744                        		__bfalse	.LL226
         01:CDC1  90 1E      			bcc	.LL226
 5745                        	
 5746                        		.dbg	line,	"include\routines_LEVELS.c", 1262; {
 5747                        	
 5748                        		.dbg	line,	"include\routines_LEVELS.c", 1263; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_192 , TILES_16);
 5749                        		__st.wmiq	18432, _di
         01:CDC3  64 F0      			stz.l	_di
         01:CDC5  A9 48      			lda.h	#18432
         01:CDC7  85 F1      			sta.h	_di
 5750                        		__farptr	_tiles_SPR_PLAYER + 6144, _bp_bank, _bp
         01:CDC9  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6144))
         01:CDCB  85 EC      			sta.l	_bp
         01:CDCD  A9 72      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6144))
         01:CDCF  85 ED      			sta.h	_bp
         01:CDD1  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 6144)
         01:CDD3  85 02      			sta	_bp_bank
 5751                        		__st.wmiq	256, _ax
         01:CDD5  64 F8      			stz.l	_ax
         01:CDD7  A9 01      			lda.h	#256
         01:CDD9  85 F9      			sta.h	_ax
 5752                        		 _load_vram.3
         01:CDDB  82         			clx				; Offset to PCE VDC.
         01:CDDC  20 77 FF   			call	load_vram_x
 5753                        	
 5754                        		.dbg	line,	"include\routines_LEVELS.c", 1264; }
 5755                        	
 5756                        		.dbg	line,	"include\routines_LEVELS.c", 1266; else if(player_counter_anim == 9)
 5757                        		__bra		.LL227
         01:CDDF  80 76      			bra	.LL227
 5758    01:CDE1             	.LL226:
 5759                        		__ld.umq	_player_counter_anim
         01:CDE1  AD 11 23   			lda	_player_counter_anim
 5760                        		__equ_b.uiq	9
         01:CDE4  C9 09      			cmp	#9
         01:CDE6  F0 01      			beq	!+
         01:CDE8  18         			clc
         01:CDE9             	!:
 5761                        		__bfalse	.LL228
         01:CDE9  90 1E      			bcc	.LL228
 5762                        	
 5763                        		.dbg	line,	"include\routines_LEVELS.c", 1267; {
 5764                        	
 5765                        		.dbg	line,	"include\routines_LEVELS.c", 1268; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_208 , TILES_16);
 5766                        		__st.wmiq	18432, _di
         01:CDEB  64 F0      			stz.l	_di
         01:CDED  A9 48      			lda.h	#18432
         01:CDEF  85 F1      			sta.h	_di
 5767                        		__farptr	_tiles_SPR_PLAYER + 6656, _bp_bank, _bp
         01:CDF1  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6656))
         01:CDF3  85 EC      			sta.l	_bp
         01:CDF5  A9 74      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6656))
         01:CDF7  85 ED      			sta.h	_bp
         01:CDF9  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 6656)
         01:CDFB  85 02      			sta	_bp_bank
 5768                        		__st.wmiq	256, _ax
         01:CDFD  64 F8      			stz.l	_ax
         01:CDFF  A9 01      			lda.h	#256
         01:CE01  85 F9      			sta.h	_ax
 5769                        		 _load_vram.3
         01:CE03  82         			clx				; Offset to PCE VDC.
         01:CE04  20 77 FF   			call	load_vram_x
 5770                        	
 5771                        		.dbg	line,	"include\routines_LEVELS.c", 1269; }
 5772                        	
 5773                        		.dbg	line,	"include\routines_LEVELS.c", 1271; else if(player_counter_anim == 12)
 5774                        		__bra		.LL229
         01:CE07  80 4E      			bra	.LL229
 5775    01:CE09             	.LL228:
 5776                        		__ld.umq	_player_counter_anim
         01:CE09  AD 11 23   			lda	_player_counter_anim
 5777                        		__equ_b.uiq	12
         01:CE0C  C9 0C      			cmp	#12
         01:CE0E  F0 01      			beq	!+
         01:CE10  18         			clc
         01:CE11             	!:
 5778                        		__bfalse	.LL230
         01:CE11  90 1E      			bcc	.LL230
 5779                        	
 5780                        		.dbg	line,	"include\routines_LEVELS.c", 1272; {
 5781                        	
 5782                        		.dbg	line,	"include\routines_LEVELS.c", 1273; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_192 , TILES_16);
 5783                        		__st.wmiq	18432, _di
         01:CE13  64 F0      			stz.l	_di
         01:CE15  A9 48      			lda.h	#18432
         01:CE17  85 F1      			sta.h	_di
 5784                        		__farptr	_tiles_SPR_PLAYER + 6144, _bp_bank, _bp
         01:CE19  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6144))
         01:CE1B  85 EC      			sta.l	_bp
         01:CE1D  A9 72      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6144))
         01:CE1F  85 ED      			sta.h	_bp
         01:CE21  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 6144)
         01:CE23  85 02      			sta	_bp_bank
 5785                        		__st.wmiq	256, _ax
         01:CE25  64 F8      			stz.l	_ax
         01:CE27  A9 01      			lda.h	#256
         01:CE29  85 F9      			sta.h	_ax
 5786                        		 _load_vram.3
         01:CE2B  82         			clx				; Offset to PCE VDC.
         01:CE2C  20 77 FF   			call	load_vram_x
 5787                        	
 5788                        		.dbg	line,	"include\routines_LEVELS.c", 1274; }
 5789                        	
 5790                        		.dbg	line,	"include\routines_LEVELS.c", 1276; else if(player_counter_anim == 15)
 5791                        		__bra		.LL231
         01:CE2F  80 26      			bra	.LL231
 5792    01:CE31             	.LL230:
 5793                        		__ld.umq	_player_counter_anim
         01:CE31  AD 11 23   			lda	_player_counter_anim
 5794                        		__equ_b.uiq	15
         01:CE34  C9 0F      			cmp	#15
         01:CE36  F0 01      			beq	!+
         01:CE38  18         			clc
         01:CE39             	!:
 5795                        		__bfalse	.LL232
         01:CE39  90 1C      			bcc	.LL232
 5796                        	
 5797                        		.dbg	line,	"include\routines_LEVELS.c", 1277; {
 5798                        	
 5799                        		.dbg	line,	"include\routines_LEVELS.c", 1278; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_176 , TILES_16);
 5800                        		__st.wmiq	18432, _di
         01:CE3B  64 F0      			stz.l	_di
         01:CE3D  A9 48      			lda.h	#18432
         01:CE3F  85 F1      			sta.h	_di
 5801                        		__farptr	_tiles_SPR_PLAYER + 5632, _bp_bank, _bp
         01:CE41  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5632))
         01:CE43  85 EC      			sta.l	_bp
         01:CE45  A9 70      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5632))
         01:CE47  85 ED      			sta.h	_bp
         01:CE49  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 5632)
         01:CE4B  85 02      			sta	_bp_bank
 5802                        		__st.wmiq	256, _ax
         01:CE4D  64 F8      			stz.l	_ax
         01:CE4F  A9 01      			lda.h	#256
         01:CE51  85 F9      			sta.h	_ax
 5803                        		 _load_vram.3
         01:CE53  82         			clx				; Offset to PCE VDC.
         01:CE54  20 77 FF   			call	load_vram_x
 5804                        	
 5805                        		.dbg	line,	"include\routines_LEVELS.c", 1279; }
 5806                        	
 5807                        		.dbg	line,	"include\routines_LEVELS.c", 1282; player_counter_anim += 1;
 5808    01:CE57             	.LL232:
 5809    01:CE57             	.LL231:
 5810    01:CE57             	.LL229:
 5811    01:CE57             	.LL227:
 5812    01:CE57             	.LL225:
 5813    01:CE57             	.LL223:
 5814                        		__add_st.umiq	1, _player_counter_anim
         01:CE57  EE 11 23   			inc	_player_counter_anim
 5815                        	
 5816                        		.dbg	line,	"include\routines_LEVELS.c", 1284; if(player_counter_anim == 17)
 5817                        		__ld.umq	_player_counter_anim
         01:CE5A  AD 11 23   			lda	_player_counter_anim
 5818                        		__equ_b.uiq	17
         01:CE5D  C9 11      			cmp	#17
         01:CE5F  F0 01      			beq	!+
         01:CE61  18         			clc
         01:CE62             	!:
 5819                        		__bfalse	.LL233
         01:CE62  90 03      			bcc	.LL233
 5820                        	
 5821                        		.dbg	line,	"include\routines_LEVELS.c", 1285; {
 5822                        	
 5823                        		.dbg	line,	"include\routines_LEVELS.c", 1286; player_counter_anim = 0;
 5824                        		__st.umiq	0, _player_counter_anim
         01:CE64  9C 11 23   			stz	_player_counter_anim
 5825                        	
 5826                        		.dbg	line,	"include\routines_LEVELS.c", 1287; }
 5827                        	
 5828                        		.dbg	line,	"include\routines_LEVELS.c", 1289; recenter_CAMERA();
 5829    01:CE67             	.LL233:
 5830                        		__call		_recenter_CAMERA
         01:CE67  20 6D FF   			call	_recenter_CAMERA
 5831                        	
 5832                        		.dbg	line,	"include\routines_LEVELS.c", 1290; }
 5833                        	
 5834                        		.dbg	line,	"include\routines_LEVELS.c", 1293; else if(player_state == STATE_CLIMB_DOWN)
 5835                        		__bra		.LL234
         01:CE6A  4C 69 D1   			bra	.LL234
 5836    01:CE6D             	.LL221:
 5837                        		__ld.umq	_player_state
         01:CE6D  AD 0E 23   			lda	_player_state
 5838                        		__equ_b.uiq	12
         01:CE70  C9 0C      			cmp	#12
         01:CE72  F0 01      			beq	!+
         01:CE74  18         			clc
         01:CE75             	!:
 5839                        		__bfalse	.LL235
         01:CE75  B0 03 4C 7F			bcc	.LL235
         01:CE79  CF          
 5840                        	
 5841                        		.dbg	line,	"include\routines_LEVELS.c", 1294; {
 5842                        	
 5843                        		.dbg	line,	"include\routines_LEVELS.c", 1295; if(player_counter_anim == 0)
 5844                        		__not.um	_player_counter_anim
         01:CE7A  AD 11 23   			lda	_player_counter_anim
         01:CE7D  18         			clc
         01:CE7E  D0 01      			bne	!+
         01:CE80  38         			sec
         01:CE81             	!:
 5845                        		__bfalse	.LL236
         01:CE81  90 1F      			bcc	.LL236
 5846                        	
 5847                        		.dbg	line,	"include\routines_LEVELS.c", 1296; {
 5848                        	
 5849                        		.dbg	line,	"include\routines_LEVELS.c", 1297; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_176 , TILES_16);
 5850                        		__st.wmiq	18432, _di
         01:CE83  64 F0      			stz.l	_di
         01:CE85  A9 48      			lda.h	#18432
         01:CE87  85 F1      			sta.h	_di
 5851                        		__farptr	_tiles_SPR_PLAYER + 5632, _bp_bank, _bp
         01:CE89  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5632))
         01:CE8B  85 EC      			sta.l	_bp
         01:CE8D  A9 70      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5632))
         01:CE8F  85 ED      			sta.h	_bp
         01:CE91  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 5632)
         01:CE93  85 02      			sta	_bp_bank
 5852                        		__st.wmiq	256, _ax
         01:CE95  64 F8      			stz.l	_ax
         01:CE97  A9 01      			lda.h	#256
         01:CE99  85 F9      			sta.h	_ax
 5853                        		 _load_vram.3
         01:CE9B  82         			clx				; Offset to PCE VDC.
         01:CE9C  20 77 FF   			call	load_vram_x
 5854                        	
 5855                        		.dbg	line,	"include\routines_LEVELS.c", 1298; }
 5856                        	
 5857                        		.dbg	line,	"include\routines_LEVELS.c", 1300; else if(player_counter_anim == 3)
 5858                        		__bra		.LL237
         01:CE9F  4C 69 CF   			bra	.LL237
 5859    01:CEA2             	.LL236:
 5860                        		__ld.umq	_player_counter_anim
         01:CEA2  AD 11 23   			lda	_player_counter_anim
 5861                        		__equ_b.uiq	3
         01:CEA5  C9 03      			cmp	#3
         01:CEA7  F0 01      			beq	!+
         01:CEA9  18         			clc
         01:CEAA             	!:
 5862                        		__bfalse	.LL238
         01:CEAA  90 1F      			bcc	.LL238
 5863                        	
 5864                        		.dbg	line,	"include\routines_LEVELS.c", 1301; {
 5865                        	
 5866                        		.dbg	line,	"include\routines_LEVELS.c", 1302; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_192 , TILES_16);
 5867                        		__st.wmiq	18432, _di
         01:CEAC  64 F0      			stz.l	_di
         01:CEAE  A9 48      			lda.h	#18432
         01:CEB0  85 F1      			sta.h	_di
 5868                        		__farptr	_tiles_SPR_PLAYER + 6144, _bp_bank, _bp
         01:CEB2  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6144))
         01:CEB4  85 EC      			sta.l	_bp
         01:CEB6  A9 72      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6144))
         01:CEB8  85 ED      			sta.h	_bp
         01:CEBA  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 6144)
         01:CEBC  85 02      			sta	_bp_bank
 5869                        		__st.wmiq	256, _ax
         01:CEBE  64 F8      			stz.l	_ax
         01:CEC0  A9 01      			lda.h	#256
         01:CEC2  85 F9      			sta.h	_ax
 5870                        		 _load_vram.3
         01:CEC4  82         			clx				; Offset to PCE VDC.
         01:CEC5  20 77 FF   			call	load_vram_x
 5871                        	
 5872                        		.dbg	line,	"include\routines_LEVELS.c", 1303; }
 5873                        	
 5874                        		.dbg	line,	"include\routines_LEVELS.c", 1305; else if(player_counter_anim == 6)
 5875                        		__bra		.LL239
         01:CEC8  4C 69 CF   			bra	.LL239
 5876    01:CECB             	.LL238:
 5877                        		__ld.umq	_player_counter_anim
         01:CECB  AD 11 23   			lda	_player_counter_anim
 5878                        		__equ_b.uiq	6
         01:CECE  C9 06      			cmp	#6
         01:CED0  F0 01      			beq	!+
         01:CED2  18         			clc
         01:CED3             	!:
 5879                        		__bfalse	.LL240
         01:CED3  90 1E      			bcc	.LL240
 5880                        	
 5881                        		.dbg	line,	"include\routines_LEVELS.c", 1306; {
 5882                        	
 5883                        		.dbg	line,	"include\routines_LEVELS.c", 1307; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_208 , TILES_16);
 5884                        		__st.wmiq	18432, _di
         01:CED5  64 F0      			stz.l	_di
         01:CED7  A9 48      			lda.h	#18432
         01:CED9  85 F1      			sta.h	_di
 5885                        		__farptr	_tiles_SPR_PLAYER + 6656, _bp_bank, _bp
         01:CEDB  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6656))
         01:CEDD  85 EC      			sta.l	_bp
         01:CEDF  A9 74      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6656))
         01:CEE1  85 ED      			sta.h	_bp
         01:CEE3  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 6656)
         01:CEE5  85 02      			sta	_bp_bank
 5886                        		__st.wmiq	256, _ax
         01:CEE7  64 F8      			stz.l	_ax
         01:CEE9  A9 01      			lda.h	#256
         01:CEEB  85 F9      			sta.h	_ax
 5887                        		 _load_vram.3
         01:CEED  82         			clx				; Offset to PCE VDC.
         01:CEEE  20 77 FF   			call	load_vram_x
 5888                        	
 5889                        		.dbg	line,	"include\routines_LEVELS.c", 1308; }
 5890                        	
 5891                        		.dbg	line,	"include\routines_LEVELS.c", 1310; else if(player_counter_anim == 9)
 5892                        		__bra		.LL241
         01:CEF1  80 76      			bra	.LL241
 5893    01:CEF3             	.LL240:
 5894                        		__ld.umq	_player_counter_anim
         01:CEF3  AD 11 23   			lda	_player_counter_anim
 5895                        		__equ_b.uiq	9
         01:CEF6  C9 09      			cmp	#9
         01:CEF8  F0 01      			beq	!+
         01:CEFA  18         			clc
         01:CEFB             	!:
 5896                        		__bfalse	.LL242
         01:CEFB  90 1E      			bcc	.LL242
 5897                        	
 5898                        		.dbg	line,	"include\routines_LEVELS.c", 1311; {
 5899                        	
 5900                        		.dbg	line,	"include\routines_LEVELS.c", 1312; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_192 , TILES_16);
 5901                        		__st.wmiq	18432, _di
         01:CEFD  64 F0      			stz.l	_di
         01:CEFF  A9 48      			lda.h	#18432
         01:CF01  85 F1      			sta.h	_di
 5902                        		__farptr	_tiles_SPR_PLAYER + 6144, _bp_bank, _bp
         01:CF03  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6144))
         01:CF05  85 EC      			sta.l	_bp
         01:CF07  A9 72      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 6144))
         01:CF09  85 ED      			sta.h	_bp
         01:CF0B  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 6144)
         01:CF0D  85 02      			sta	_bp_bank
 5903                        		__st.wmiq	256, _ax
         01:CF0F  64 F8      			stz.l	_ax
         01:CF11  A9 01      			lda.h	#256
         01:CF13  85 F9      			sta.h	_ax
 5904                        		 _load_vram.3
         01:CF15  82         			clx				; Offset to PCE VDC.
         01:CF16  20 77 FF   			call	load_vram_x
 5905                        	
 5906                        		.dbg	line,	"include\routines_LEVELS.c", 1313; }
 5907                        	
 5908                        		.dbg	line,	"include\routines_LEVELS.c", 1315; else if(player_counter_anim == 12)
 5909                        		__bra		.LL243
         01:CF19  80 4E      			bra	.LL243
 5910    01:CF1B             	.LL242:
 5911                        		__ld.umq	_player_counter_anim
         01:CF1B  AD 11 23   			lda	_player_counter_anim
 5912                        		__equ_b.uiq	12
         01:CF1E  C9 0C      			cmp	#12
         01:CF20  F0 01      			beq	!+
         01:CF22  18         			clc
         01:CF23             	!:
 5913                        		__bfalse	.LL244
         01:CF23  90 1E      			bcc	.LL244
 5914                        	
 5915                        		.dbg	line,	"include\routines_LEVELS.c", 1316; {
 5916                        	
 5917                        		.dbg	line,	"include\routines_LEVELS.c", 1317; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_176 , TILES_16);
 5918                        		__st.wmiq	18432, _di
         01:CF25  64 F0      			stz.l	_di
         01:CF27  A9 48      			lda.h	#18432
         01:CF29  85 F1      			sta.h	_di
 5919                        		__farptr	_tiles_SPR_PLAYER + 5632, _bp_bank, _bp
         01:CF2B  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5632))
         01:CF2D  85 EC      			sta.l	_bp
         01:CF2F  A9 70      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5632))
         01:CF31  85 ED      			sta.h	_bp
         01:CF33  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 5632)
         01:CF35  85 02      			sta	_bp_bank
 5920                        		__st.wmiq	256, _ax
         01:CF37  64 F8      			stz.l	_ax
         01:CF39  A9 01      			lda.h	#256
         01:CF3B  85 F9      			sta.h	_ax
 5921                        		 _load_vram.3
         01:CF3D  82         			clx				; Offset to PCE VDC.
         01:CF3E  20 77 FF   			call	load_vram_x
 5922                        	
 5923                        		.dbg	line,	"include\routines_LEVELS.c", 1318; }
 5924                        	
 5925                        		.dbg	line,	"include\routines_LEVELS.c", 1320; else if(player_counter_anim == 15)
 5926                        		__bra		.LL245
         01:CF41  80 26      			bra	.LL245
 5927    01:CF43             	.LL244:
 5928                        		__ld.umq	_player_counter_anim
         01:CF43  AD 11 23   			lda	_player_counter_anim
 5929                        		__equ_b.uiq	15
         01:CF46  C9 0F      			cmp	#15
         01:CF48  F0 01      			beq	!+
         01:CF4A  18         			clc
         01:CF4B             	!:
 5930                        		__bfalse	.LL246
         01:CF4B  90 1C      			bcc	.LL246
 5931                        	
 5932                        		.dbg	line,	"include\routines_LEVELS.c", 1321; {
 5933                        	
 5934                        		.dbg	line,	"include\routines_LEVELS.c", 1322; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_160 , TILES_16);
 5935                        		__st.wmiq	18432, _di
         01:CF4D  64 F0      			stz.l	_di
         01:CF4F  A9 48      			lda.h	#18432
         01:CF51  85 F1      			sta.h	_di
 5936                        		__farptr	_tiles_SPR_PLAYER + 5120, _bp_bank, _bp
         01:CF53  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5120))
         01:CF55  85 EC      			sta.l	_bp
         01:CF57  A9 6E      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 5120))
         01:CF59  85 ED      			sta.h	_bp
         01:CF5B  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 5120)
         01:CF5D  85 02      			sta	_bp_bank
 5937                        		__st.wmiq	256, _ax
         01:CF5F  64 F8      			stz.l	_ax
         01:CF61  A9 01      			lda.h	#256
         01:CF63  85 F9      			sta.h	_ax
 5938                        		 _load_vram.3
         01:CF65  82         			clx				; Offset to PCE VDC.
         01:CF66  20 77 FF   			call	load_vram_x
 5939                        	
 5940                        		.dbg	line,	"include\routines_LEVELS.c", 1323; }
 5941                        	
 5942                        		.dbg	line,	"include\routines_LEVELS.c", 1326; player_counter_anim += 1;
 5943    01:CF69             	.LL246:
 5944    01:CF69             	.LL245:
 5945    01:CF69             	.LL243:
 5946    01:CF69             	.LL241:
 5947    01:CF69             	.LL239:
 5948    01:CF69             	.LL237:
 5949                        		__add_st.umiq	1, _player_counter_anim
         01:CF69  EE 11 23   			inc	_player_counter_anim
 5950                        	
 5951                        		.dbg	line,	"include\routines_LEVELS.c", 1328; if(player_counter_anim == 17)
 5952                        		__ld.umq	_player_counter_anim
         01:CF6C  AD 11 23   			lda	_player_counter_anim
 5953                        		__equ_b.uiq	17
         01:CF6F  C9 11      			cmp	#17
         01:CF71  F0 01      			beq	!+
         01:CF73  18         			clc
         01:CF74             	!:
 5954                        		__bfalse	.LL247
         01:CF74  90 03      			bcc	.LL247
 5955                        	
 5956                        		.dbg	line,	"include\routines_LEVELS.c", 1329; {
 5957                        	
 5958                        		.dbg	line,	"include\routines_LEVELS.c", 1330; player_counter_anim = 0;
 5959                        		__st.umiq	0, _player_counter_anim
         01:CF76  9C 11 23   			stz	_player_counter_anim
 5960                        	
 5961                        		.dbg	line,	"include\routines_LEVELS.c", 1331; }
 5962                        	
 5963                        		.dbg	line,	"include\routines_LEVELS.c", 1333; recenter_CAMERA();
 5964    01:CF79             	.LL247:
 5965                        		__call		_recenter_CAMERA
         01:CF79  20 6D FF   			call	_recenter_CAMERA
 5966                        	
 5967                        		.dbg	line,	"include\routines_LEVELS.c", 1334; }
 5968                        	
 5969                        		.dbg	line,	"include\routines_LEVELS.c", 1337; else if(player_state == STATE_JUMP_LADDER)
 5970                        		__bra		.LL248
         01:CF7C  4C 69 D1   			bra	.LL248
 5971    01:CF7F             	.LL235:
 5972                        		__ld.umq	_player_state
         01:CF7F  AD 0E 23   			lda	_player_state
 5973                        		__equ_b.uiq	13
         01:CF82  C9 0D      			cmp	#13
         01:CF84  F0 01      			beq	!+
         01:CF86  18         			clc
         01:CF87             	!:
 5974                        		__bfalse	.LL249
         01:CF87  B0 03 4C 69			bcc	.LL249
         01:CF8B  D1          
 5975                        	
 5976                        		.dbg	line,	"include\routines_LEVELS.c", 1338; {
 5977                        	
 5978                        		.dbg	line,	"include\routines_LEVELS.c", 1339; unsigned char i;
 5979                        	
 5980                        		.dbg	line,	"include\routines_LEVELS.c", 1340; i = 1;
 5981                        		__st.umiq	1, __update_PLAYER_end - 8  /* i */
         01:CF8C  A9 01      			lda.l	#1
         01:CF8E  8D 02 23   			sta	__update_PLAYER_end - 8
 5982                        	
 5983                        		.dbg	line,	"include\routines_LEVELS.c", 1343; if(player_counter_anim == 0)
 5984                        		__not.um	_player_counter_anim
         01:CF91  AD 11 23   			lda	_player_counter_anim
         01:CF94  18         			clc
         01:CF95  D0 01      			bne	!+
         01:CF97  38         			sec
         01:CF98             	!:
 5985                        		__bfalse	.LL250
         01:CF98  90 21      			bcc	.LL250
 5986                        	
 5987                        		.dbg	line,	"include\routines_LEVELS.c", 1344; {
 5988                        	
 5989                        		.dbg	line,	"include\routines_LEVELS.c", 1345; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER + TILES_112 , TILES_16);
 5990                        		__st.wmiq	18432, _di
         01:CF9A  64 F0      			stz.l	_di
         01:CF9C  A9 48      			lda.h	#18432
         01:CF9E  85 F1      			sta.h	_di
 5991                        		__farptr	_tiles_SPR_PLAYER + 3584, _bp_bank, _bp
         01:CFA0  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3584))
         01:CFA2  85 EC      			sta.l	_bp
         01:CFA4  A9 68      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER + 3584))
         01:CFA6  85 ED      			sta.h	_bp
         01:CFA8  A9 0C      			lda	#bank(_tiles_SPR_PLAYER + 3584)
         01:CFAA  85 02      			sta	_bp_bank
 5992                        		__st.wmiq	256, _ax
         01:CFAC  64 F8      			stz.l	_ax
         01:CFAE  A9 01      			lda.h	#256
         01:CFB0  85 F9      			sta.h	_ax
 5993                        		 _load_vram.3
         01:CFB2  82         			clx				; Offset to PCE VDC.
         01:CFB3  20 77 FF   			call	load_vram_x
 5994                        	
 5995                        		.dbg	line,	"include\routines_LEVELS.c", 1347; player_counter_anim = 1;
 5996                        		__st.umiq	1, _player_counter_anim
         01:CFB6  A9 01      			lda.l	#1
         01:CFB8  8D 11 23   			sta	_player_counter_anim
 5997                        	
 5998                        		.dbg	line,	"include\routines_LEVELS.c", 1348; }
 5999                        	
 6000                        		.dbg	line,	"include\routines_LEVELS.c", 1351; player_pos_y += TABLE_PLAYER_JUMP_V[player_index_jump];
 6001    01:CFBB             	.LL250:
 6002                        		__ldx.umq	_player_index_jump
         01:CFBB  AE 12 23   			ldx	_player_index_jump
 6003                        		__ld.bax	_TABLE_PLAYER_JUMP_V
         01:CFBE  BD 1D 60   			lda	_TABLE_PLAYER_JUMP_V, x
         01:CFC1  C2         			cly
         01:CFC2  10 01      			bpl	!+
         01:CFC4  88         			dey
         01:CFC5             	!:
 6004                        		__add_st.wmq	_player_pos_y
         01:CFC5  18         			clc
         01:CFC6  6D 18 23   			adc.l	_player_pos_y
         01:CFC9  8D 18 23   			sta.l	_player_pos_y
         01:CFCC  98         			tya
         01:CFCD  6D 19 23   			adc.h	_player_pos_y
         01:CFD0  8D 19 23   			sta.h	_player_pos_y
 6005                        	
 6006                        		.dbg	line,	"include\routines_LEVELS.c", 1353; spr_set(player_id);
 6007                        		__ld.umq	_player_id
         01:CFD3  AD 0D 23   			lda	_player_id
 6008                        		__call		_spr_set.1
         01:CFD6  20 DD E7   			call	_spr_set.1
 6009                        	
 6010                        		.dbg	line,	"include\routines_LEVELS.c", 1354; spr_y(player_pos_y);
 6011                        		__ld.wm		_player_pos_y
         01:CFD9  AD 18 23   			lda.l	_player_pos_y
         01:CFDC  AC 19 23   			ldy.h	_player_pos_y
 6012                        		__call		_spr_y.1
         01:CFDF  20 19 E8   			call	_spr_y.1
 6013                        	
 6014                        		.dbg	line,	"include\routines_LEVELS.c", 1358; if(player_index_jump < 34)
 6015                        		__ld.umq	_player_index_jump
         01:CFE2  AD 12 23   			lda	_player_index_jump
 6016                        		__ult_b.uiq	34
         01:CFE5  C9 22      			cmp	#34		; Subtract integer from A.
         01:CFE7  6A         			ror	a		; CC if A < integer.
         01:CFE8  49 80      			eor	#$80
         01:CFEA  2A         			rol	a
 6017                        		__bfalse	.LL251
         01:CFEB  90 03      			bcc	.LL251
 6018                        	
 6019                        		.dbg	line,	"include\routines_LEVELS.c", 1359; {
 6020                        	
 6021                        		.dbg	line,	"include\routines_LEVELS.c", 1360; player_index_jump += 1;
 6022                        		__add_st.umiq	1, _player_index_jump
         01:CFED  EE 12 23   			inc	_player_index_jump
 6023                        	
 6024                        		.dbg	line,	"include\routines_LEVELS.c", 1361; }
 6025                        	
 6026                        		.dbg	line,	"include\routines_LEVELS.c", 1364; // CHECK COLLISION WITH FLOOR //
 6027                        	
 6028                        		.dbg	line,	"include\routines_LEVELS.c", 1365; if(player_axis == AXIS_RIGHT)
 6029    01:CFF0             	.LL251:
 6030                        		__not.um	_player_axis
         01:CFF0  AD 0F 23   			lda	_player_axis
         01:CFF3  18         			clc
         01:CFF4  D0 01      			bne	!+
         01:CFF6  38         			sec
         01:CFF7             	!:
 6031                        		__bfalse	.LL252
         01:CFF7  90 05      			bcc	.LL252
 6032                        	
 6033                        		.dbg	line,	"include\routines_LEVELS.c", 1366; {
 6034                        	
 6035                        		.dbg	line,	"include\routines_LEVELS.c", 1367; check_FLOOR_R();
 6036                        		__call		_check_FLOOR_R
         01:CFF9  20 45 FF   			call	_check_FLOOR_R
 6037                        	
 6038                        		.dbg	line,	"include\routines_LEVELS.c", 1368; }
 6039                        	
 6040                        		.dbg	line,	"include\routines_LEVELS.c", 1370; else
 6041                        		__bra		.LL253
         01:CFFC  80 03      			bra	.LL253
 6042    01:CFFE             	.LL252:
 6043                        	
 6044                        		.dbg	line,	"include\routines_LEVELS.c", 1371; {
 6045                        	
 6046                        		.dbg	line,	"include\routines_LEVELS.c", 1372; check_FLOOR_L();
 6047                        		__call		_check_FLOOR_L
         01:CFFE  20 63 FF   			call	_check_FLOOR_L
 6048                        	
 6049                        		.dbg	line,	"include\routines_LEVELS.c", 1373; }
 6050    01:D001             	.LL253:
 6051                        	
 6052                        		.dbg	line,	"include\routines_LEVELS.c", 1376; if(map_blk_flag == TILE_BG)
 6053                        		__ld.umq	_map_blk_flag
         01:D001  AD 85 28   			lda	_map_blk_flag
 6054                        		__equ_b.uiq	1
         01:D004  C9 01      			cmp	#1
         01:D006  F0 01      			beq	!+
         01:D008  18         			clc
         01:D009             	!:
 6055                        		__bfalse	.LL254
         01:D009  B0 03 4C D2			bcc	.LL254
         01:D00D  D0          
 6056                        	
 6057                        		.dbg	line,	"include\routines_LEVELS.c", 1377; {
 6058                        	
 6059                        		.dbg	line,	"include\routines_LEVELS.c", 1378; // CALCULATE HOW MANY PIXELS THE PLAYER MOVED INTO THE GROUND //
 6060                        	
 6061                        		.dbg	line,	"include\routines_LEVELS.c", 1379; for(i=1; i<11 ; i++ )
 6062                        		__st.umiq	1, __update_PLAYER_end - 8  /* i */
         01:D00E  A9 01      			lda.l	#1
         01:D010  8D 02 23   			sta	__update_PLAYER_end - 8
 6063    01:D013             	.LL255:
 6064                        		__ld.umq	__update_PLAYER_end - 8  /* i */
         01:D013  AD 02 23   			lda	__update_PLAYER_end - 8
 6065                        		__ult_b.uiq	11
         01:D016  C9 0B      			cmp	#11		; Subtract integer from A.
         01:D018  6A         			ror	a		; CC if A < integer.
         01:D019  49 80      			eor	#$80
         01:D01B  2A         			rol	a
 6066                        		__btrue		.LL257
         01:D01C  B0 08      			bcs	.LL257
 6067                        		__bra		.LL258
         01:D01E  4C BC D0   			bra	.LL258
 6068    01:D021             	.LL256:
 6069                        		__inc.umq	__update_PLAYER_end - 8  /* i */
         01:D021  EE 02 23   			inc	__update_PLAYER_end - 8
 6070                        		__bra		.LL255
         01:D024  80 ED      			bra	.LL255
 6071    01:D026             	.LL257:
 6072                        	
 6073                        		.dbg	line,	"include\routines_LEVELS.c", 1380; {
 6074                        	
 6075                        		.dbg	line,	"include\routines_LEVELS.c", 1381; if(player_axis == AXIS_RIGHT)
 6076                        		__not.um	_player_axis
         01:D026  AD 0F 23   			lda	_player_axis
         01:D029  18         			clc
         01:D02A  D0 01      			bne	!+
         01:D02C  38         			sec
         01:D02D             	!:
 6077                        		__bfalse	.LL259
         01:D02D  90 20      			bcc	.LL259
 6078                        	
 6079                        		.dbg	line,	"include\routines_LEVELS.c", 1382; {
 6080                        	
 6081                        		.dbg	line,	"include\routines_LEVELS.c", 1383; check_BG( 11 , i);
 6082                        		__ld.wi		11
         01:D02F  A9 0B      			lda.l	#11
         01:D031  C2         			cly
 6083                        		__pusharg.wr
         01:D032  A6 8D      			ldx	<__sp
         01:D034  CA         			dex
         01:D035  CA         			dex
         01:D036  95 08      			sta.l	<__stack, x
         01:D038  94 09      			sty.h	<__stack, x
         01:D03A  86 8D      			stx	<__sp
 6084                        		__ld.um		__update_PLAYER_end - 8  /* i */
         01:D03C  AD 02 23   			lda	__update_PLAYER_end - 8
         01:D03F  C2         			cly
 6085                        		__pusharg.wr
         01:D040  A6 8D      			ldx	<__sp
         01:D042  CA         			dex
         01:D043  CA         			dex
         01:D044  95 08      			sta.l	<__stack, x
         01:D046  94 09      			sty.h	<__stack, x
         01:D048  86 8D      			stx	<__sp
 6086                        		__call		_check_BG
         01:D04A  20 31 FF   			call	_check_BG
 6087                        	
 6088                        		.dbg	line,	"include\routines_LEVELS.c", 1384; }
 6089                        	
 6090                        		.dbg	line,	"include\routines_LEVELS.c", 1386; else
 6091                        		__bra		.LL260
         01:D04D  80 1E      			bra	.LL260
 6092    01:D04F             	.LL259:
 6093                        	
 6094                        		.dbg	line,	"include\routines_LEVELS.c", 1387; {
 6095                        	
 6096                        		.dbg	line,	"include\routines_LEVELS.c", 1388; check_BG( 10 , i);
 6097                        		__ld.wi		10
         01:D04F  A9 0A      			lda.l	#10
         01:D051  C2         			cly
 6098                        		__pusharg.wr
         01:D052  A6 8D      			ldx	<__sp
         01:D054  CA         			dex
         01:D055  CA         			dex
         01:D056  95 08      			sta.l	<__stack, x
         01:D058  94 09      			sty.h	<__stack, x
         01:D05A  86 8D      			stx	<__sp
 6099                        		__ld.um		__update_PLAYER_end - 8  /* i */
         01:D05C  AD 02 23   			lda	__update_PLAYER_end - 8
         01:D05F  C2         			cly
 6100                        		__pusharg.wr
         01:D060  A6 8D      			ldx	<__sp
         01:D062  CA         			dex
         01:D063  CA         			dex
         01:D064  95 08      			sta.l	<__stack, x
         01:D066  94 09      			sty.h	<__stack, x
         01:D068  86 8D      			stx	<__sp
 6101                        		__call		_check_BG
         01:D06A  20 31 FF   			call	_check_BG
 6102                        	
 6103                        		.dbg	line,	"include\routines_LEVELS.c", 1389; }
 6104    01:D06D             	.LL260:
 6105                        	
 6106                        		.dbg	line,	"include\routines_LEVELS.c", 1392; if(map_blk_flag == TILE_EMPTY)
 6107                        		__not.um	_map_blk_flag
         01:D06D  AD 85 28   			lda	_map_blk_flag
         01:D070  18         			clc
         01:D071  D0 01      			bne	!+
         01:D073  38         			sec
         01:D074             	!:
 6108                        		__bfalse	.LL261
         01:D074  90 AB      			bcc	.LL261
 6109                        	
 6110                        		.dbg	line,	"include\routines_LEVELS.c", 1393; {
 6111                        	
 6112                        		.dbg	line,	"include\routines_LEVELS.c", 1394; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
 6113                        		__st.wmiq	18432, _di
         01:D076  64 F0      			stz.l	_di
         01:D078  A9 48      			lda.h	#18432
         01:D07A  85 F1      			sta.h	_di
 6114                        		__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
         01:D07C  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:D07E  85 EC      			sta.l	_bp
         01:D080  A9 7A      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         01:D082  85 ED      			sta.h	_bp
         01:D084  A9 0B      			lda	#bank(_tiles_SPR_PLAYER)
         01:D086  85 02      			sta	_bp_bank
 6115                        		__st.wmiq	256, _ax
         01:D088  64 F8      			stz.l	_ax
         01:D08A  A9 01      			lda.h	#256
         01:D08C  85 F9      			sta.h	_ax
 6116                        		 _load_vram.3
         01:D08E  82         			clx				; Offset to PCE VDC.
         01:D08F  20 77 FF   			call	load_vram_x
 6117                        	
 6118                        		.dbg	line,	"include\routines_LEVELS.c", 1396; player_pos_y -= (i - 1);
 6119                        		__ld.um		__update_PLAYER_end - 8  /* i */
         01:D092  AD 02 23   			lda	__update_PLAYER_end - 8
         01:D095  C2         			cly
 6120                        		__sub.wi	1
         01:D096  38         			sec
         01:D097  E9 01      			sbc.l	#1
         01:D099  B0 01      			bcs	!+
         01:D09B  88         			dey
         01:D09C             	!:
 6121                        		__isub_st.wmq	_player_pos_y
         01:D09C  38         			sec
         01:D09D  49 FF      			eor	#$FF
         01:D09F  6D 18 23   			adc.l	_player_pos_y
         01:D0A2  8D 18 23   			sta.l	_player_pos_y
         01:D0A5  98         			tya
         01:D0A6  49 FF      			eor	#$FF
         01:D0A8  6D 19 23   			adc.h	_player_pos_y
         01:D0AB  8D 19 23   			sta.h	_player_pos_y
 6122                        	
 6123                        		.dbg	line,	"include\routines_LEVELS.c", 1397; spr_y(player_pos_y);
 6124                        		__ld.wm		_player_pos_y
         01:D0AE  AD 18 23   			lda.l	_player_pos_y
         01:D0B1  AC 19 23   			ldy.h	_player_pos_y
 6125                        		__call		_spr_y.1
         01:D0B4  20 19 E8   			call	_spr_y.1
 6126                        	
 6127                        		.dbg	line,	"include\routines_LEVELS.c", 1398; break;
 6128                        		__bra		.LL258
         01:D0B7  80 03      			bra	.LL258
 6129                        	
 6130                        		.dbg	line,	"include\routines_LEVELS.c", 1399; }
 6131                        	
 6132                        		.dbg	line,	"include\routines_LEVELS.c", 1401; }
 6133    01:D0B9             	.LL261	.alias		.LL256
 6134                        		__bra		.LL256
         01:D0B9  4C 21 D0   			bra	.LL256
 6135    01:D0BC             	.LL258:
 6136                        	
 6137                        		.dbg	line,	"include\routines_LEVELS.c", 1403; player_counter_anim = 1;
 6138                        		__st.umiq	1, _player_counter_anim
         01:D0BC  A9 01      			lda.l	#1
         01:D0BE  8D 11 23   			sta	_player_counter_anim
 6139                        	
 6140                        		.dbg	line,	"include\routines_LEVELS.c", 1404; player_index_jump = 0;
 6141                        		__st.umiq	0, _player_index_jump
         01:D0C1  9C 12 23   			stz	_player_index_jump
 6142                        	
 6143                        		.dbg	line,	"include\routines_LEVELS.c", 1405; jump_ladder = FALSE;
 6144                        		__st.umiq	0, _jump_ladder
         01:D0C4  9C 14 23   			stz	_jump_ladder
 6145                        	
 6146                        		.dbg	line,	"include\routines_LEVELS.c", 1406; jump_max_index = 34;
 6147                        		__st.umiq	34, _jump_max_index
         01:D0C7  A9 22      			lda.l	#34
         01:D0C9  8D 15 23   			sta	_jump_max_index
 6148                        	
 6149                        		.dbg	line,	"include\routines_LEVELS.c", 1407; player_state = STATE_IDLE;
 6150                        		__st.umiq	0, _player_state
         01:D0CC  9C 0E 23   			stz	_player_state
 6151                        	
 6152                        		.dbg	line,	"include\routines_LEVELS.c", 1408; return;
 6153                        		__bra		.LL100
         01:D0CF  4C 69 D1   			bra	.LL100
 6154                        	
 6155                        		.dbg	line,	"include\routines_LEVELS.c", 1409; }
 6156                        	
 6157                        		.dbg	line,	"include\routines_LEVELS.c", 1412; if(player_index_jump > 18)
 6158    01:D0D2             	.LL254:
 6159                        		__ld.umq	_player_index_jump
         01:D0D2  AD 12 23   			lda	_player_index_jump
 6160                        		__ugt_b.uiq	18
         01:D0D5  18         			clc			; Subtract integer+1 from A.
         01:D0D6  E9 12      			sbc	#18		; CS if A > integer.
 6161                        		__bfalse	.LL262
         01:D0D8  B0 03 4C 69			bcc	.LL262
         01:D0DC  D1          
 6162                        	
 6163                        		.dbg	line,	"include\routines_LEVELS.c", 1413; {
 6164                        	
 6165                        		.dbg	line,	"include\routines_LEVELS.c", 1414; // CHECK COLLISION WITH LADDERS //
 6166                        	
 6167                        		.dbg	line,	"include\routines_LEVELS.c", 1415; check_LADDER( 16 , 8 );
 6168                        		__ld.wi		16
         01:D0DD  A9 10      			lda.l	#16
         01:D0DF  C2         			cly
 6169                        		__pusharg.wr
         01:D0E0  A6 8D      			ldx	<__sp
         01:D0E2  CA         			dex
         01:D0E3  CA         			dex
         01:D0E4  95 08      			sta.l	<__stack, x
         01:D0E6  94 09      			sty.h	<__stack, x
         01:D0E8  86 8D      			stx	<__sp
 6170                        		__ld.wi		8
         01:D0EA  A9 08      			lda.l	#8
         01:D0EC  C2         			cly
 6171                        		__pusharg.wr
         01:D0ED  A6 8D      			ldx	<__sp
         01:D0EF  CA         			dex
         01:D0F0  CA         			dex
         01:D0F1  95 08      			sta.l	<__stack, x
         01:D0F3  94 09      			sty.h	<__stack, x
         01:D0F5  86 8D      			stx	<__sp
 6172                        		__call		_check_LADDER
         01:D0F7  20 81 FF   			call	_check_LADDER
 6173                        	
 6174                        		.dbg	line,	"include\routines_LEVELS.c", 1417; // IF PLAYER HITS THE LADDER //
 6175                        	
 6176                        		.dbg	line,	"include\routines_LEVELS.c", 1418; if(map_blk_flag == TILE_LADDER)
 6177                        		__ld.umq	_map_blk_flag
         01:D0FA  AD 85 28   			lda	_map_blk_flag
 6178                        		__equ_b.uiq	2
         01:D0FD  C9 02      			cmp	#2
         01:D0FF  F0 01      			beq	!+
         01:D101  18         			clc
         01:D102             	!:
 6179                        		__bfalse	.LL263
         01:D102  90 65      			bcc	.LL263
 6180                        	
 6181                        		.dbg	line,	"include\routines_LEVELS.c", 1419; {
 6182                        	
 6183                        		.dbg	line,	"include\routines_LEVELS.c", 1420; // CAMERA GOES 8 PX BACKWARD //
 6184                        	
 6185                        		.dbg	line,	"include\routines_LEVELS.c", 1421; sgx_map_pxl_x = ( (sgx_map_pxl_x >> 3) << 3 );
 6186                        		__ld.wm		_sgx_map_pxl_x
         01:D104  AD 64 23   			lda.l	_sgx_map_pxl_x
         01:D107  AC 65 23   			ldy.h	_sgx_map_pxl_x
 6187                        		__lsr.wi	3
         01:D10A  84 00      			sty	__temp
         01:D10C  20 3A E2   			jsr	lsrw3
 6188                        		__asl.wi	3
         01:D10F  84 00      			sty	__temp
         01:D111  20 D7 E1   			jsr	aslw3
 6189                        		__st.wmq	_sgx_map_pxl_x
         01:D114  8D 64 23   			sta.l	_sgx_map_pxl_x
         01:D117  8C 65 23   			sty.h	_sgx_map_pxl_x
 6190                        	
 6191                        		.dbg	line,	"include\routines_LEVELS.c", 1423; // SO WE UPDATE THE MAP //
 6192                        	
 6193                        		.dbg	line,	"include\routines_LEVELS.c", 1424; sgx_scroll_map();
 6194                        		__call		_sgx_scroll_map
         01:D11A  20 95 FF   			call	_sgx_scroll_map
 6195                        	
 6196                        		.dbg	line,	"include\routines_LEVELS.c", 1426; // CHECK IF THE PLAYER STANDS RIGHT TO THE LADDER //
 6197                        	
 6198                        		.dbg	line,	"include\routines_LEVELS.c", 1427; check_LADDER( 31 , 8 );
 6199                        		__ld.wi		31
         01:D11D  A9 1F      			lda.l	#31
         01:D11F  C2         			cly
 6200                        		__pusharg.wr
         01:D120  A6 8D      			ldx	<__sp
         01:D122  CA         			dex
         01:D123  CA         			dex
         01:D124  95 08      			sta.l	<__stack, x
         01:D126  94 09      			sty.h	<__stack, x
         01:D128  86 8D      			stx	<__sp
 6201                        		__ld.wi		8
         01:D12A  A9 08      			lda.l	#8
         01:D12C  C2         			cly
 6202                        		__pusharg.wr
         01:D12D  A6 8D      			ldx	<__sp
         01:D12F  CA         			dex
         01:D130  CA         			dex
         01:D131  95 08      			sta.l	<__stack, x
         01:D133  94 09      			sty.h	<__stack, x
         01:D135  86 8D      			stx	<__sp
 6203                        		__call		_check_LADDER
         01:D137  20 81 FF   			call	_check_LADDER
 6204                        	
 6205                        		.dbg	line,	"include\routines_LEVELS.c", 1429; if(map_blk_flag == TILE_LADDER)
 6206                        		__ld.umq	_map_blk_flag
         01:D13A  AD 85 28   			lda	_map_blk_flag
 6207                        		__equ_b.uiq	2
         01:D13D  C9 02      			cmp	#2
         01:D13F  F0 01      			beq	!+
         01:D141  18         			clc
         01:D142             	!:
 6208                        		__bfalse	.LL264
         01:D142  90 0E      			bcc	.LL264
 6209                        	
 6210                        		.dbg	line,	"include\routines_LEVELS.c", 1430; {
 6211                        	
 6212                        		.dbg	line,	"include\routines_LEVELS.c", 1431; sgx_map_pxl_x += 8;
 6213                        		__add_st.wmiq	8, _sgx_map_pxl_x
         01:D144  18         			clc
         01:D145  AD 64 23   			lda.l	_sgx_map_pxl_x
         01:D148  69 08      			adc.l	#8
         01:D14A  8D 64 23   			sta.l	_sgx_map_pxl_x
         01:D14D  90 03      			bcc	!+
         01:D14F  EE 65 23   			inc.h	_sgx_map_pxl_x
         01:D152             	!:
 6214                        	
 6215                        		.dbg	line,	"include\routines_LEVELS.c", 1432; }
 6216                        	
 6217                        		.dbg	line,	"include\routines_LEVELS.c", 1434; player_counter_anim = 1;
 6218    01:D152             	.LL264:
 6219                        		__st.umiq	1, _player_counter_anim
         01:D152  A9 01      			lda.l	#1
         01:D154  8D 11 23   			sta	_player_counter_anim
 6220                        	
 6221                        		.dbg	line,	"include\routines_LEVELS.c", 1435; player_index_jump = 0;
 6222                        		__st.umiq	0, _player_index_jump
         01:D157  9C 12 23   			stz	_player_index_jump
 6223                        	
 6224                        		.dbg	line,	"include\routines_LEVELS.c", 1436; jump_ladder = TRUE;
 6225                        		__st.umiq	1, _jump_ladder
         01:D15A  A9 01      			lda.l	#1
         01:D15C  8D 14 23   			sta	_jump_ladder
 6226                        	
 6227                        		.dbg	line,	"include\routines_LEVELS.c", 1437; jump_max_index = 29;
 6228                        		__st.umiq	29, _jump_max_index
         01:D15F  A9 1D      			lda.l	#29
         01:D161  8D 15 23   			sta	_jump_max_index
 6229                        	
 6230                        		.dbg	line,	"include\routines_LEVELS.c", 1438; player_state = STATE_HANG;
 6231                        		__st.umiq	10, _player_state
         01:D164  A9 0A      			lda.l	#10
         01:D166  8D 0E 23   			sta	_player_state
 6232                        	
 6233                        		.dbg	line,	"include\routines_LEVELS.c", 1439; }
 6234                        	
 6235                        		.dbg	line,	"include\routines_LEVELS.c", 1440; }
 6236    01:D169             	.LL263:
 6237                        	
 6238                        		.dbg	line,	"include\routines_LEVELS.c", 1441; }
 6239    01:D169             	.LL262:
 6240                        	
 6241                        		.dbg	line,	"include\routines_LEVELS.c", 1443; }
 6242    01:D169             	.LL249:
 6243    01:D169             	.LL248:
 6244    01:D169             	.LL234:
 6245    01:D169             	.LL220:
 6246    01:D169             	.LL217:
 6247    01:D169             	.LL202:
 6248    01:D169             	.LL199:
 6249    01:D169             	.LL172:
 6250    01:D169             	.LL145:
 6251    01:D169             	.LL129:
 6252    01:D169             	.LL103:
 6253    01:D169             	.LL100:
 6254                        		__return	0
         01:D169  4C EF FF   			jmp	leave_proc
 6255                        		.dbg	clear
 6256                        		.endp
 6257               7CA0     		.data
 6258               2302     		.bss
 6259    F8:2302             	__update_PLAYER_loc:
 6260    F8:2302             			ds	8
 6261    F8:230A             	__update_PLAYER_end:
 6262               E309     		.code
 6263                        		.pceas
 6264                        	
 6265                        		.dbg	line,	"main.c", 22; #include "include/init.c"
 6266                        		.dbg	line,	"include\init.c", 1; #include "huc.h"
 6267                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 1; #ifndef _hucc_legacy_h
 6268                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 2; #define _hucc_legacy_h
 6269                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 4; /****************************************************************************
 6270                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 5; ; ***************************************************************************
 6271                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 6; ;
 6272                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 7; ; huc.h
 6273                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 8; ;
 6274                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 9; ; HuCC wrapper file to include a default set of HuC-compatible functions.
 6275                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 10; ;
 6276                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 11; ; Copyright John Brandwood 2024.
 6277                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 12; ;
 6278                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 6279                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 6280                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 6281                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 16; ;
 6282                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 17; ; ***************************************************************************
 6283                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 18; ; ***************************************************************************
 6284                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 19; ;
 6285                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 20; ; When the HuCC compiler is invoked with the "--legacy" option to compile old
 6286                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 21; ; projects, then this "huc.h" file is automatically included.
 6287                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 22; ;
 6288                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 23; ; This file includes a set of the individual HuCC headers which correspond to
 6289                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 24; ; HuC's built-in functions and MagicKit library.
 6290                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 25; ;
 6291                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 26; ; New HuCC projects should, preferably, include the specific headers that are
 6292                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 27; ; needed, which will then allow them to replace parts of the standard library
 6293                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 28; ; with newer functions, or they can just manually include this "huc.h" file.
 6294                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 29; ;
 6295                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 30; ; ***************************************************************************
 6296                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 31; ; **************************************************************************/
 6297                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 33; #include "hucc-systemcard.h"
 6298                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 34; #include "hucc-baselib.h"
 6299                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 35; #include "hucc-gfx.h"
 6300                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 36; #include "hucc-string.h"
 6301                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 37; #include "hucc-old-scroll.h"
 6302                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 38; #include "hucc-old-spr.h"
 6303                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 39; #include "hucc-old-map.h"
 6304                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 40; #include "hucc-old-line.h"
 6305                        		.dbg	line,	"..\..\..\include\hucc\huc.h", 42; #endif // _hucc_legacy_h
 6306                        		.dbg	line,	"include\init.c", 2; #include "hucc-scroll.h"
 6307                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 1; #ifndef _hucc_scroll_h
 6308                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 2; #define _hucc_scroll_h
 6309                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 4; /****************************************************************************
 6310                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 5; ; ***************************************************************************
 6311                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 6; ;
 6312                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 7; ; hucc-scroll.h
 6313                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 8; ;
 6314                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 9; ; Routines for a fast split-screen scrolling system.
 6315                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 10; ;
 6316                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 11; ; Copyright John Brandwood 2024.
 6317                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 12; ;
 6318                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 6319                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 6320                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 6321                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 16; ;
 6322                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 17; ; ***************************************************************************
 6323                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 18; ; ***************************************************************************
 6324                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 19; ;
 6325                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 20; ; The maximum number of splits for each screen layer is set in your project's
 6326                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 21; ; "hucc-config.inc" file, with the library having a limit of 128-per-layer.
 6327                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 22; ;
 6328                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 23; ; Your first active split must be defined to start at screen line 0, and then
 6329                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 24; ; the rest of the active splits must be in increasing line order to match the
 6330                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 25; ; way that the PC Engine displays the output image.
 6331                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 26; ;
 6332                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 27; ; You can have disabled splits interleaved with your active splits.
 6333                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 28; ;
 6334                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 29; ; Splits that are normally disabled can be used to create full screen effects
 6335                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 30; ; such as bouncing the screen up and down by adding blank areas at the top or
 6336                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 31; ; bottom of the screen, and then rapidly changing the height of those areas.
 6337                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 32; ;
 6338                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 33; ; ***************************************************************************
 6339                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 34; ; **************************************************************************/
 6340                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 36; // *************
 6341                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 37; // VDC bits for display_flags ...
 6342                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 38; // *************
 6343                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 40; #ifndef BKG_OFF
 6344                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 41; #define BKG_OFF 0x00
 6345                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 42; #endif
 6346                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 44; #ifndef SPR_OFF
 6347                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 45; #define SPR_OFF 0x00
 6348                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 46; #endif
 6349                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 48; #ifndef BKG_ON
 6350                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 49; #define BKG_ON 0x80
 6351                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 50; #endif
 6352                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 52; #ifndef SPR_ON
 6353                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 53; #define SPR_ON 0x40
 6354                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 54; #endif
 6355                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 56; // *************
 6356                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 57; // Functions in hucc-scroll.asm ...
 6357                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 58; // *************
 6358                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 60; #ifdef __HUCC__
 6359                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 62; #asmdef	HUCC_USES_NEW_SCROLL 1
 6360                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 64; extern void __fastcall scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
 6361                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 65; extern void __fastcall sgx_scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
 6362                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 67; extern void __fastcall disable_split( unsigned char index<acc> );
 6363                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 68; extern void __fastcall sgx_disable_split( unsigned char index<acc> );
 6364                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 70; extern void __fastcall __macro disable_all_splits( void );
 6365                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 71; extern void __fastcall __macro sgx_disable_all_splits( void );
 6366                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 73; #asm
 6367                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 74; .macro	_disable_all_splits
 6368                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 75; ldy	#HUCC_PCE_SPLITS - 1
 6369                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 76; !loop:		tya
 6370                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 77; call	_disable_split.1
 6371                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 78; dey
 6372                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 79; bpl	!loop-
 6373                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 80; .endm
 6374                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 82; .macro	_sgx_disable_all_splits
 6375                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 83; ldy	#HUCC_SGX_SPLITS - 1
 6376                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 84; !loop:		tya
 6377                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 85; call	_sgx_disable_split.1
 6378                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 86; dey
 6379                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 87; bpl	!loop-
 6380                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 88; .endm
 6381                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 89; #endasm
 6382                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 91; #endif // __HUCC__
 6383                        		.dbg	line,	"..\..\..\include\hucc\hucc-scroll.h", 93; #endif // _hucc_scroll_h
 6384                        		.dbg	line,	"include\init.c", 3; #include "hucc-chrmap.h"
 6385                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 1; #ifndef _hucc_chrmap_h
 6386                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 2; #define _hucc_chrmap_h
 6387                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 4; /****************************************************************************
 6388                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 5; ; ***************************************************************************
 6389                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 6; ;
 6390                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 7; ; hucc-chrmap.h
 6391                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 8; ;
 6392                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 9; ; A simple map system based on 8x8 characters (aka "tiles") in BAT format.
 6393                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 10; ;
 6394                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 11; ; Copyright John Brandwood 2025.
 6395                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 12; ;
 6396                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 6397                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 6398                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 6399                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 16; ;
 6400                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 17; ; ***************************************************************************
 6401                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 18; ; ***************************************************************************
 6402                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 19; ;
 6403                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 20; ; The maximum X and Y size for chrmaps is 256 characters (2048 pixels).
 6404                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 21; ;
 6405                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 22; ; The maximum total size for a chrmap is 16KBytes, which allows for maps up
 6406                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 23; ; to 256x32 tiles (2048x256 pixels).
 6407                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 24; ;
 6408                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 25; ; ***************************************************************************
 6409                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 26; ; **************************************************************************/
 6410                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 28; // *************
 6411                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 29; // This code extends the blkmap library ...
 6412                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 30; // *************
 6413                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 32; #include "hucc-blkmap.h"
 6414                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 34; // *************
 6415                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 35; // Functions in chrmap.asm ...
 6416                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 36; // *************
 6417                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 38; #ifdef __HUCC__
 6418                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 40; #asmdef	HUCC_USES_CHRMAP 1
 6419                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 42; extern void __fastcall __nop set_chrmap( unsigned char __far *chrmap<vdc_map_bank:vdc_map_addr>, unsigned char tiles_w<vdc_map_line_w> );
 6420                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 44; extern void __fastcall draw_bat( void );
 6421                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 45; extern void __fastcall scroll_bat( void );
 6422                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 47; extern void __fastcall blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 6423                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 49; #ifdef _SGX
 6424                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 51; extern void __fastcall __nop sgx_set_chrmap( unsigned char __far *chrmap<sgx_map_bank:sgx_map_addr>, unsigned char tiles_w<sgx_map_line_w> );
 6425                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 53; extern void __fastcall sgx_draw_bat( void );
 6426                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 54; extern void __fastcall sgx_scroll_bat( void );
 6427                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 56; extern void __fastcall sgx_blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 6428                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 58; #endif
 6429                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 60; #endif // __HUCC__
 6430                        		.dbg	line,	"..\..\..\include\hucc\hucc-chrmap.h", 62; #endif // _hucc_chrmap_h
 6431                        		.dbg	line,	"include\init.c", 4; #include "hucc-blkmap.h"
 6432                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 1; #ifndef _hucc_blkmap_h
 6433                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 2; #define _hucc_blkmap_h
 6434                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 4; /****************************************************************************
 6435                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 5; ; ***************************************************************************
 6436                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 6; ;
 6437                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 7; ; hucc-blkmap.h
 6438                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 8; ;
 6439                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 9; ; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
 6440                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 10; ;
 6441                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 11; ; Copyright John Brandwood 2025.
 6442                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 12; ;
 6443                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 13; ; Distributed under the Boost Software License, Version 1.0.
 6444                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 14; ; (See accompanying file LICENSE_1_0.txt or copy at
 6445                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 15; ;  http://www.boost.org/LICENSE_1_0.txt)
 6446                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 16; ;
 6447                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 17; ; ***************************************************************************
 6448                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 18; ; ***************************************************************************
 6449                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 19; ;
 6450                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 20; ; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
 6451                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 21; ;
 6452                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 22; ; The maximum total size for a blkmap is 16KBytes, which allows for maps up
 6453                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 23; ; to 128x128 blocks (2048x2048 pixels).
 6454                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 24; ;
 6455                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 25; ; Huge multi-screen blkmaps are also supported (optionally).
 6456                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 26; ;
 6457                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 27; ; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
 6458                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 28; ;
 6459                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 29; ; The maximum total size for a multi-screen map is 8KBytes, which allows for
 6460                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 30; ; a total of 1024 screens.
 6461                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 31; ;
 6462                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 32; ; ***************************************************************************
 6463                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 33; ; **************************************************************************/
 6464                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 35; // *************
 6465                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 36; // Functions in blkmap.asm ...
 6466                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 37; // *************
 6467                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 39; #ifdef __HUCC__
 6468                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 41; #asmdef	HUCC_USES_BLKMAP 1
 6469                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 43; // Current top-left of drawn map in pixels.
 6470                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 44; extern unsigned int   vdc_map_pxl_x;
 6471                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 45; extern unsigned int   vdc_map_pxl_y;
 6472                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 47; // Width and height to draw/scroll in characters (not tiles).
 6473                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 48; extern unsigned char  vdc_map_draw_w;
 6474                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 49; extern unsigned char  vdc_map_draw_h;
 6475                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 51; // Width of map (or multi-screen BAT) in tiles.
 6476                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 52; extern unsigned char  vdc_map_line_w;
 6477                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 54; // Width of map in screens (if multi-screen map).
 6478                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 55; extern unsigned char  vdc_map_scrn_w;
 6479                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 57; // Extra information returned by get_map_block() and sgx_get_map_block(),
 6480                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 58; // which are the collision flags and the mask/overlay sprite for the BLK.
 6481                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 59; extern unsigned char  map_blk_flag;
 6482                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 60; extern unsigned char  map_blk_mask;
 6483                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 62; extern unsigned char  vdc_scr_bank;
 6484                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 63; extern unsigned char *vdc_scr_addr;
 6485                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 65; extern unsigned char  vdc_map_bank;
 6486                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 66; extern unsigned char *vdc_map_addr;
 6487                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 68; extern unsigned char  vdc_blk_bank;
 6488                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 69; extern unsigned char *vdc_blk_addr;
 6489                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 71; extern unsigned char  vdc_tbl_bank;
 6490                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 72; extern unsigned char *vdc_tbl_addr;
 6491                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 74; extern void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blocks<_al> );
 6492                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 75; extern void __fastcall __macro set_blkmap( unsigned char __far *blk_map<vdc_map_bank:vdc_map_addr>, unsigned char blocks_w<vdc_map_line_w> );
 6493                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 76; extern void __fastcall __macro set_multimap( unsigned char __far *multi_map<vdc_scr_bank:vdc_scr_addr>, unsigned char screens_w<vdc_map_scrn_w> );
 6494                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 78; extern void __fastcall draw_map( void );
 6495                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 79; extern void __fastcall scroll_map( void );
 6496                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 81; extern void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 6497                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 83; extern unsigned char __fastcall get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 6498                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 85; #asm
 6499                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 86; .macro	_set_blkmap.2
 6500                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 87; stz	vdc_scr_bank
 6501                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 88; .endm
 6502                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 90; .macro	_set_multimap.2
 6503                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 91; lda	vdc_bat_width
 6504                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 92; lsr	a
 6505                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 93; sta	vdc_map_line_w
 6506                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 94; .endm
 6507                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 96; .macro	SCREEN
 6508                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 97; db	(((\1) & $1FFF) | $6000) >> 8, bank(\1)
 6509                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 98; db	(((\2) & $1FFF) | $4000) >> 8, bank(\2)
 6510                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 99; db	(((\3) & $1FFF) | $6000) >> 8, bank(\3)
 6511                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 100; dw	(\4)
 6512                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 101; .endm
 6513                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 102; #endasm
 6514                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 104; #ifdef _SGX
 6515                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 106; // Current top-left of drawn map in pixels.
 6516                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 107; extern unsigned int   sgx_map_pxl_x;
 6517                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 108; extern unsigned int   sgx_map_pxl_y;
 6518                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 110; // Width and height to draw/scroll in characters (not tiles).
 6519                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 111; extern unsigned char  sgx_map_draw_w;
 6520                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 112; extern unsigned char  sgx_map_draw_h;
 6521                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 114; // Width of map (or multi-screen BAT) in tiles.
 6522                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 115; extern unsigned char  sgx_map_line_w;
 6523                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 117; // Width of map in screens (if multi-screen map).
 6524                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 118; extern unsigned char  sgx_map_scrn_w;
 6525                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 120; extern unsigned char  sgx_scr_bank;
 6526                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 121; extern unsigned char *sgx_scr_addr;
 6527                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 123; extern unsigned char  sgx_map_bank;
 6528                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 124; extern unsigned char *sgx_map_addr;
 6529                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 126; extern unsigned char  sgx_blk_bank;
 6530                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 127; extern unsigned char *sgx_blk_addr;
 6531                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 129; extern unsigned char  sgx_tbl_bank;
 6532                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 130; extern unsigned char *sgx_tbl_addr;
 6533                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 132; extern void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blocks<_al> );
 6534                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 133; extern void __fastcall __macro sgx_set_blkmap( unsigned char __far *blk_map<sgx_map_bank:sgx_map_addr>, unsigned char blocks_w<sgx_map_line_w> );
 6535                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 134; extern void __fastcall __macro sgx_set_multimap( unsigned char __far *multi_map<sgx_scr_bank:sgx_scr_addr>, unsigned char screens_w<sgx_map_scrn_w> );
 6536                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 136; extern void __fastcall sgx_draw_map( void );
 6537                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 137; extern void __fastcall sgx_scroll_map( void );
 6538                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 139; extern void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
 6539                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 141; extern unsigned char __fastcall sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
 6540                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 143; #asm
 6541                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 144; .macro	_sgx_set_blkmap.2
 6542                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 145; stz	sgx_scr_bank
 6543                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 146; .endm
 6544                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 148; .macro	_sgx_set_multimap.2
 6545                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 149; lda	sgx_bat_width
 6546                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 150; lsr	a
 6547                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 151; sta	sgx_map_line_w
 6548                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 152; .endm
 6549                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 153; #endasm
 6550                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 155; #endif
 6551                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 157; #endif // __HUCC__
 6552                        		.dbg	line,	"..\..\..\include\hucc\hucc-blkmap.h", 159; #endif // _hucc_blkmap_h
 6553                        		.dbg	line,	"include\init.c", 13; void init_VARIABLES()
 6554                        		.dbg	line,	"include\init.c", 14; {
 6555                        	;***********************
 6556                        	;***********************
 6557                        	
 6558                        		.hucc
 6559    02:C87C             		.proc		_init_VARIABLES
 6560                        		__enter		_init_VARIABLES
 6561                        	
 6562                        		.dbg	line,	"include\init.c", 15; sequence_id = SEQUENCE_GAME;
 6563                        		__st.umiq	2, _sequence_id
         02:C87C  A9 02      			lda.l	#2
         02:C87E  8D 0A 23   			sta	_sequence_id
 6564                        	
 6565                        		.dbg	line,	"include\init.c", 17; level_id = 1;
 6566                        		__st.umiq	1, _level_id
         02:C881  A9 01      			lda.l	#1
         02:C883  8D 0C 23   			sta	_level_id
 6567                        	
 6568                        		.dbg	line,	"include\init.c", 19; sequence_loaded = FALSE;
 6569                        		__st.umiq	0, _sequence_loaded
         02:C886  9C 0B 23   			stz	_sequence_loaded
 6570                        	
 6571                        		.dbg	line,	"include\init.c", 20; }
 6572    02:C889             	.LL265:
 6573                        		__return	0
         02:C889  4C EF FF   			jmp	leave_proc
 6574                        		.dbg	clear
 6575                        		.endp
 6576                        		.pceas
 6577                        	
 6578                        		.dbg	line,	"include\init.c", 23; init_PLAYER()
 6579                        		.dbg	line,	"include\init.c", 24; {
 6580                        	;***********************
 6581                        	;***********************
 6582                        	
 6583                        		.hucc
 6584    02:C843             		.proc		_init_PLAYER
 6585                        		__enter		_init_PLAYER
 6586                        	
 6587                        		.dbg	line,	"include\init.c", 25; player_id = 0;
 6588                        		__st.umiq	0, _player_id
         02:C843  9C 0D 23   			stz	_player_id
 6589                        	
 6590                        		.dbg	line,	"include\init.c", 26; player_axis = AXIS_RIGHT;
 6591                        		__st.umiq	0, _player_axis
         02:C846  9C 0F 23   			stz	_player_axis
 6592                        	
 6593                        		.dbg	line,	"include\init.c", 27; player_previous_axis = player_axis;
 6594                        		__ld.um		_player_axis
         02:C849  AD 0F 23   			lda	_player_axis
         02:C84C  C2         			cly
 6595                        		__st.umq	_player_previous_axis
         02:C84D  8D 10 23   			sta	_player_previous_axis
 6596                        	
 6597                        		.dbg	line,	"include\init.c", 28; player_counter_anim = 0;
 6598                        		__st.umiq	0, _player_counter_anim
         02:C850  9C 11 23   			stz	_player_counter_anim
 6599                        	
 6600                        		.dbg	line,	"include\init.c", 29; player_index_jump = 0;
 6601                        		__st.umiq	0, _player_index_jump
         02:C853  9C 12 23   			stz	_player_index_jump
 6602                        	
 6603                        		.dbg	line,	"include\init.c", 30; player_index_fall = 0;
 6604                        		__st.umiq	0, _player_index_fall
         02:C856  9C 13 23   			stz	_player_index_fall
 6605                        	
 6606                        		.dbg	line,	"include\init.c", 31; player_state = STATE_IDLE;
 6607                        		__st.umiq	0, _player_state
         02:C859  9C 0E 23   			stz	_player_state
 6608                        	
 6609                        		.dbg	line,	"include\init.c", 32; }
 6610    02:C85C             	.LL266:
 6611                        		__return	1
         02:C85C  AA         			tax
         02:C85D  4C EF FF   			jmp	leave_proc
 6612                        		.dbg	clear
 6613                        		.endp
 6614                        		.pceas
 6615                        	
 6616                        		.dbg	line,	"include\init.c", 36; void init_LEVEL()
 6617                        		.dbg	line,	"include\init.c", 37; {
 6618                        	;***********************
 6619                        	;***********************
 6620                        	
 6621                        		.hucc
 6622    0C:DCA0             		.proc		_init_LEVEL
 6623                        		__enter		_init_LEVEL
 6624                        	
 6625                        		.dbg	line,	"include\init.c", 38; if(level_id == 1)
 6626                        		__ld.umq	_level_id
         0C:DCA0  AD 0C 23   			lda	_level_id
 6627                        		__equ_b.uiq	1
         0C:DCA3  C9 01      			cmp	#1
         0C:DCA5  F0 01      			beq	!+
         0C:DCA7  18         			clc
         0C:DCA8             	!:
 6628                        		__bfalse	.LL268
         0C:DCA8  B0 03 4C 82			bcc	.LL268
         0C:DCAC  DF          
 6629                        	
 6630                        		.dbg	line,	"include\init.c", 39; {
 6631                        	
 6632                        		.dbg	line,	"include\init.c", 40; // VSYNC //
 6633                        	
 6634                        		.dbg	line,	"include\init.c", 41; vsync();
 6635                        		__call		_vsync
         0C:DCAD  20 09 E3   			call	_vsync
 6636                        	
 6637                        		.dbg	line,	"include\init.c", 43; // LOAD DEFAULT FONT //
 6638                        	
 6639                        		.dbg	line,	"include\init.c", 44; load_default_font();
 6640                        		 _load_default_font
         0C:DCB0  82         			clx				; Offset to PCE VDC.
         0C:DCB1  20 C7 FF   			call	huc_monofont_x
 6641                        	
 6642                        		.dbg	line,	"include\init.c", 49; // SET VDC 1 SCREEN SIZE (IN TILES) - 64x32 = 512x256 PIXELS
 6643                        	
 6644                        		.dbg	line,	"include\init.c", 50; set_screen_size(SCR_SIZE_64x32);
 6645                        		__st.umiq	1, _al
         0C:DCB4  A9 01      			lda.l	#1
         0C:DCB6  85 F8      			sta	_al
 6646                        		__call		_set_screen_size.1
         0C:DCB8  20 13 FF   			call	_set_screen_size.1
 6647                        	
 6648                        		.dbg	line,	"include\init.c", 53; // SET VDC 2 SCREEN SIZE (IN TILES) - 64x32 = 512x256 PIXELS
 6649                        	
 6650                        		.dbg	line,	"include\init.c", 54; sgx_set_screen_size(SCR_SIZE_64x32);
 6651                        		__st.umiq	1, _al
         0C:DCBB  A9 01      			lda.l	#1
         0C:DCBD  85 F8      			sta	_al
 6652                        		__call		_sgx_set_screen_size.1
         0C:DCBF  20 09 FF   			call	_sgx_set_screen_size.1
 6653                        	
 6654                        		.dbg	line,	"include\init.c", 57; // INIT SPRITE ATTRIBUTE TABLE //
 6655                        	
 6656                        		.dbg	line,	"include\init.c", 58; init_satb();
 6657                        		__call		_init_satb
         0C:DCC2  20 B7 E7   			call	_init_satb
 6658                        	
 6659                        		.dbg	line,	"include\init.c", 63; //**************************************************************************************//
 6660                        	
 6661                        		.dbg	line,	"include\init.c", 64; //                                                                                      //
 6662                        	
 6663                        		.dbg	line,	"include\init.c", 65; //                                        VDC 2                                         //
 6664                        	
 6665                        		.dbg	line,	"include\init.c", 66; //                                                                                      //
 6666                        	
 6667                        		.dbg	line,	"include\init.c", 67; //**************************************************************************************//
 6668                        	
 6669                        		.dbg	line,	"include\init.c", 69; //--------------------------------------------------------------------------------------//
 6670                        	
 6671                        		.dbg	line,	"include\init.c", 70; //                                    LOAD TILESET                                      //
 6672                        	
 6673                        		.dbg	line,	"include\init.c", 71; //--------------------------------------------------------------------------------------//
 6674                        	
 6675                        		.dbg	line,	"include\init.c", 73; sgx_load_vram( 0x1000, tileset_LV1_BG_B, SIZEOF(tileset_LV1_BG_B) >> 1 );
 6676                        		__st.wmiq	4096, _di
         0C:DCC5  64 F0      			stz.l	_di
         0C:DCC7  A9 10      			lda.h	#4096
         0C:DCC9  85 F1      			sta.h	_di
 6677                        		__farptr	_tileset_LV1_BG_B, _bp_bank, _bp
         0C:DCCB  A9 80      			lda.l	#$6000 + ($1FFF & (_tileset_LV1_BG_B))
         0C:DCCD  85 EC      			sta.l	_bp
         0C:DCCF  A9 6D      			lda.h	#$6000 + ($1FFF & (_tileset_LV1_BG_B))
         0C:DCD1  85 ED      			sta.h	_bp
         0C:DCD3  A9 03      			lda	#bank(_tileset_LV1_BG_B)
         0C:DCD5  85 02      			sta	_bp_bank
 6678                        		__ld.wi		___sizeof__tileset_LV1_BG_B
         0C:DCD7  A9 E0      			lda.l	#___sizeof__tileset_LV1_BG_B
         0C:DCD9  A0 72      			ldy.h	#___sizeof__tileset_LV1_BG_B
 6679                        		__lsr.wi	1
         0C:DCDB  42         			say
         0C:DCDC  4A         			lsr	a
         0C:DCDD  42         			say
         0C:DCDE  6A         			ror	a
 6680                        		__st.wmq	_ax
         0C:DCDF  85 F8      			sta.l	_ax
         0C:DCE1  84 F9      			sty.h	_ax
 6681                        		 _sgx_load_vram.3
         0C:DCE3  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
         0C:DCE5  20 77 FF   			call	load_vram_x
 6682                        	
 6683                        		.dbg	line,	"include\init.c", 76; //--------------------------------------------------------------------------------------//
 6684                        	
 6685                        		.dbg	line,	"include\init.c", 77; //                               LOAD WALL & DOOR TILES                                 //
 6686                        	
 6687                        		.dbg	line,	"include\init.c", 78; //--------------------------------------------------------------------------------------//
 6688                        	
 6689                        		.dbg	line,	"include\init.c", 80; sgx_load_vram( LV1_WALL_VRAM_ADR, tileset_LV1_WALL, SIZEOF(tileset_LV1_WALL) >> 1 );
 6690                        		__st.wmiq	4096, _di
         0C:DCE8  64 F0      			stz.l	_di
         0C:DCEA  A9 10      			lda.h	#4096
         0C:DCEC  85 F1      			sta.h	_di
 6691                        		__farptr	_tileset_LV1_WALL, _bp_bank, _bp
         0C:DCEE  A9 00      			lda.l	#$6000 + ($1FFF & (_tileset_LV1_WALL))
         0C:DCF0  85 EC      			sta.l	_bp
         0C:DCF2  A9 60      			lda.h	#$6000 + ($1FFF & (_tileset_LV1_WALL))
         0C:DCF4  85 ED      			sta.h	_bp
         0C:DCF6  A9 03      			lda	#bank(_tileset_LV1_WALL)
         0C:DCF8  85 02      			sta	_bp_bank
 6692                        		__ld.wi		___sizeof__tileset_LV1_WALL
         0C:DCFA  A9 00      			lda.l	#___sizeof__tileset_LV1_WALL
         0C:DCFC  A0 02      			ldy.h	#___sizeof__tileset_LV1_WALL
 6693                        		__lsr.wi	1
         0C:DCFE  42         			say
         0C:DCFF  4A         			lsr	a
         0C:DD00  42         			say
         0C:DD01  6A         			ror	a
 6694                        		__st.wmq	_ax
         0C:DD02  85 F8      			sta.l	_ax
         0C:DD04  84 F9      			sty.h	_ax
 6695                        		 _sgx_load_vram.3
         0C:DD06  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
         0C:DD08  20 77 FF   			call	load_vram_x
 6696                        	
 6697                        		.dbg	line,	"include\init.c", 81; sgx_load_vram( LV1_DOOR_VRAM_ADR, tileset_LV1_DOOR_OPEN, SIZEOF(tileset_LV1_DOOR_OPEN) >> 1 );
 6698                        		__st.wmiq	4352, _di
         0C:DD0B  64 F0      			stz.l	_di
         0C:DD0D  A9 11      			lda.h	#4352
         0C:DD0F  85 F1      			sta.h	_di
 6699                        		__farptr	_tileset_LV1_DOOR_OPEN, _bp_bank, _bp
         0C:DD11  A9 00      			lda.l	#$6000 + ($1FFF & (_tileset_LV1_DOOR_OPEN))
         0C:DD13  85 EC      			sta.l	_bp
         0C:DD15  A9 62      			lda.h	#$6000 + ($1FFF & (_tileset_LV1_DOOR_OPEN))
         0C:DD17  85 ED      			sta.h	_bp
         0C:DD19  A9 03      			lda	#bank(_tileset_LV1_DOOR_OPEN)
         0C:DD1B  85 02      			sta	_bp_bank
 6700                        		__ld.wi		___sizeof__tileset_LV1_DOOR_OPEN
         0C:DD1D  A9 00      			lda.l	#___sizeof__tileset_LV1_DOOR_OPEN
         0C:DD1F  A0 03      			ldy.h	#___sizeof__tileset_LV1_DOOR_OPEN
 6701                        		__lsr.wi	1
         0C:DD21  42         			say
         0C:DD22  4A         			lsr	a
         0C:DD23  42         			say
         0C:DD24  6A         			ror	a
 6702                        		__st.wmq	_ax
         0C:DD25  85 F8      			sta.l	_ax
         0C:DD27  84 F9      			sty.h	_ax
 6703                        		 _sgx_load_vram.3
         0C:DD29  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
         0C:DD2B  20 77 FF   			call	load_vram_x
 6704                        	
 6705                        		.dbg	line,	"include\init.c", 84; //--------------------------------------------------------------------------------------//
 6706                        	
 6707                        		.dbg	line,	"include\init.c", 85; //                                     SET MULTIMAP                                     //
 6708                        	
 6709                        		.dbg	line,	"include\init.c", 86; //--------------------------------------------------------------------------------------//
 6710                        	
 6711                        		.dbg	line,	"include\init.c", 88; // multimap is 2 screens wide //
 6712                        	
 6713                        		.dbg	line,	"include\init.c", 89; sgx_set_multimap( multimap_LV1_BG_B , 5 );
 6714                        		__farptr	_multimap_LV1_BG_B, sgx_scr_bank, sgx_scr_addr
         0C:DD2E  A9 00      			lda.l	#$6000 + ($1FFF & (_multimap_LV1_BG_B))
         0C:DD30  8D A2 28   			sta.l	sgx_scr_addr
         0C:DD33  A9 71      			lda.h	#$6000 + ($1FFF & (_multimap_LV1_BG_B))
         0C:DD35  8D A3 28   			sta.h	sgx_scr_addr
         0C:DD38  A9 09      			lda	#bank(_multimap_LV1_BG_B)
         0C:DD3A  8D A4 28   			sta	sgx_scr_bank
 6715                        		__st.umiq	5, sgx_map_scrn_w
         0C:DD3D  A9 05      			lda.l	#5
         0C:DD3F  8D 63 23   			sta	sgx_map_scrn_w
 6716                        		 _sgx_set_multimap.2
         0C:DD42  AD 5B 23   			lda	sgx_bat_width
         0C:DD45  4A         			lsr	a
         0C:DD46  8D 62 23   			sta	sgx_map_line_w
 6717                        	
 6718                        		.dbg	line,	"include\init.c", 92; //--------------------------------------------------------------------------------------//
 6719                        	
 6720                        		.dbg	line,	"include\init.c", 93; //                                    DRAW TILEMAP                                      //
 6721                        	
 6722                        		.dbg	line,	"include\init.c", 94; //--------------------------------------------------------------------------------------//
 6723                        	
 6724                        		.dbg	line,	"include\init.c", 96; // The blkmap is drawn using global variables for the top-left coordinate
 6725                        	
 6726                        		.dbg	line,	"include\init.c", 97; // in pixels, and the draw width and height in terms of 8x8 characters.
 6727                        	
 6728                        		.dbg	line,	"include\init.c", 99; sgx_map_pxl_x = 96;
 6729                        		__st.wmiq	96, _sgx_map_pxl_x
         0C:DD49  A9 60      			lda.l	#96
         0C:DD4B  8D 64 23   			sta.l	_sgx_map_pxl_x
         0C:DD4E  9C 65 23   			stz.h	_sgx_map_pxl_x
 6730                        	
 6731                        		.dbg	line,	"include\init.c", 100; sgx_map_pxl_y = 768;
 6732                        		__st.wmiq	768, _sgx_map_pxl_y
         0C:DD51  9C 66 23   			stz.l	_sgx_map_pxl_y
         0C:DD54  A9 03      			lda.h	#768
         0C:DD56  8D 67 23   			sta.h	_sgx_map_pxl_y
 6733                        	
 6734                        		.dbg	line,	"include\init.c", 102; sgx_map_draw_w = 63;
 6735                        		__st.umiq	63, _sgx_map_draw_w
         0C:DD59  A9 3F      			lda.l	#63
         0C:DD5B  8D 60 23   			sta	_sgx_map_draw_w
 6736                        	
 6737                        		.dbg	line,	"include\init.c", 103; sgx_map_draw_h = 29;
 6738                        		__st.umiq	29, _sgx_map_draw_h
         0C:DD5E  A9 1D      			lda.l	#29
         0C:DD60  8D 61 23   			sta	_sgx_map_draw_h
 6739                        	
 6740                        		.dbg	line,	"include\init.c", 105; sgx_draw_map();
 6741                        		__call		_sgx_draw_map
         0C:DD63  20 FF FE   			call	_sgx_draw_map
 6742                        	
 6743                        		.dbg	line,	"include\init.c", 110; //**************************************************************************************//
 6744                        	
 6745                        		.dbg	line,	"include\init.c", 111; //                                                                                      //
 6746                        	
 6747                        		.dbg	line,	"include\init.c", 112; //                                        VDC 1                                         //
 6748                        	
 6749                        		.dbg	line,	"include\init.c", 113; //                                                                                      //
 6750                        	
 6751                        		.dbg	line,	"include\init.c", 114; //**************************************************************************************//
 6752                        	
 6753                        		.dbg	line,	"include\init.c", 116; //--------------------------------------------------------------------------------------//
 6754                        	
 6755                        		.dbg	line,	"include\init.c", 117; //                                    LOAD TILESET                                      //
 6756                        	
 6757                        		.dbg	line,	"include\init.c", 118; //--------------------------------------------------------------------------------------//
 6758                        	
 6759                        		.dbg	line,	"include\init.c", 120; load_vram( 0x1000, tileset_LV1_BG_A, SIZEOF(tileset_LV1_BG_A) >> 1 );
 6760                        		__st.wmiq	4096, _di
         0C:DD66  64 F0      			stz.l	_di
         0C:DD68  A9 10      			lda.h	#4096
         0C:DD6A  85 F1      			sta.h	_di
 6761                        		__farptr	_tileset_LV1_BG_A, _bp_bank, _bp
         0C:DD6C  A9 A0      			lda.l	#$6000 + ($1FFF & (_tileset_LV1_BG_A))
         0C:DD6E  85 EC      			sta.l	_bp
         0C:DD70  A9 71      			lda.h	#$6000 + ($1FFF & (_tileset_LV1_BG_A))
         0C:DD72  85 ED      			sta.h	_bp
         0C:DD74  A9 09      			lda	#bank(_tileset_LV1_BG_A)
         0C:DD76  85 02      			sta	_bp_bank
 6762                        		__ld.wi		___sizeof__tileset_LV1_BG_A
         0C:DD78  A9 C0      			lda.l	#___sizeof__tileset_LV1_BG_A
         0C:DD7A  A0 06      			ldy.h	#___sizeof__tileset_LV1_BG_A
 6763                        		__lsr.wi	1
         0C:DD7C  42         			say
         0C:DD7D  4A         			lsr	a
         0C:DD7E  42         			say
         0C:DD7F  6A         			ror	a
 6764                        		__st.wmq	_ax
         0C:DD80  85 F8      			sta.l	_ax
         0C:DD82  84 F9      			sty.h	_ax
 6765                        		 _load_vram.3
         0C:DD84  82         			clx				; Offset to PCE VDC.
         0C:DD85  20 77 FF   			call	load_vram_x
 6766                        	
 6767                        		.dbg	line,	"include\init.c", 123; //--------------------------------------------------------------------------------------//
 6768                        	
 6769                        		.dbg	line,	"include\init.c", 124; //                                 LOAD LIFABAR TILES                                   //
 6770                        	
 6771                        		.dbg	line,	"include\init.c", 125; //--------------------------------------------------------------------------------------//
 6772                        	
 6773                        		.dbg	line,	"include\init.c", 127; load_vram( LIFEBAR_1_VRAM_ADR, tileset_LIFE_RED, SIZEOF(tileset_LIFE_RED) >> 1 );
 6774                        		__st.wmiq	4096, _di
         0C:DD88  64 F0      			stz.l	_di
         0C:DD8A  A9 10      			lda.h	#4096
         0C:DD8C  85 F1      			sta.h	_di
 6775                        		__farptr	_tileset_LIFE_RED, _bp_bank, _bp
         0C:DD8E  A9 00      			lda.l	#$6000 + ($1FFF & (_tileset_LIFE_RED))
         0C:DD90  85 EC      			sta.l	_bp
         0C:DD92  A9 68      			lda.h	#$6000 + ($1FFF & (_tileset_LIFE_RED))
         0C:DD94  85 ED      			sta.h	_bp
         0C:DD96  A9 03      			lda	#bank(_tileset_LIFE_RED)
         0C:DD98  85 02      			sta	_bp_bank
 6776                        		__ld.wi		___sizeof__tileset_LIFE_RED
         0C:DD9A  A9 40      			lda.l	#___sizeof__tileset_LIFE_RED
         0C:DD9C  A0 00      			ldy.h	#___sizeof__tileset_LIFE_RED
 6777                        		__lsr.wi	1
         0C:DD9E  42         			say
         0C:DD9F  4A         			lsr	a
         0C:DDA0  42         			say
         0C:DDA1  6A         			ror	a
 6778                        		__st.wmq	_ax
         0C:DDA2  85 F8      			sta.l	_ax
         0C:DDA4  84 F9      			sty.h	_ax
 6779                        		 _load_vram.3
         0C:DDA6  82         			clx				; Offset to PCE VDC.
         0C:DDA7  20 77 FF   			call	load_vram_x
 6780                        	
 6781                        		.dbg	line,	"include\init.c", 128; load_vram( LIFEBAR_2_VRAM_ADR, tileset_LIFE_ORANGE, SIZEOF(tileset_LIFE_ORANGE) >> 1 );
 6782                        		__st.wmiq	4128, _di
         0C:DDAA  A9 20      			lda.l	#4128
         0C:DDAC  85 F0      			sta.l	_di
         0C:DDAE  A9 10      			lda.h	#4128
         0C:DDB0  85 F1      			sta.h	_di
 6783                        		__farptr	_tileset_LIFE_ORANGE, _bp_bank, _bp
         0C:DDB2  A9 40      			lda.l	#$6000 + ($1FFF & (_tileset_LIFE_ORANGE))
         0C:DDB4  85 EC      			sta.l	_bp
         0C:DDB6  A9 68      			lda.h	#$6000 + ($1FFF & (_tileset_LIFE_ORANGE))
         0C:DDB8  85 ED      			sta.h	_bp
         0C:DDBA  A9 03      			lda	#bank(_tileset_LIFE_ORANGE)
         0C:DDBC  85 02      			sta	_bp_bank
 6784                        		__ld.wi		___sizeof__tileset_LIFE_ORANGE
         0C:DDBE  A9 40      			lda.l	#___sizeof__tileset_LIFE_ORANGE
         0C:DDC0  A0 00      			ldy.h	#___sizeof__tileset_LIFE_ORANGE
 6785                        		__lsr.wi	1
         0C:DDC2  42         			say
         0C:DDC3  4A         			lsr	a
         0C:DDC4  42         			say
         0C:DDC5  6A         			ror	a
 6786                        		__st.wmq	_ax
         0C:DDC6  85 F8      			sta.l	_ax
         0C:DDC8  84 F9      			sty.h	_ax
 6787                        		 _load_vram.3
         0C:DDCA  82         			clx				; Offset to PCE VDC.
         0C:DDCB  20 77 FF   			call	load_vram_x
 6788                        	
 6789                        		.dbg	line,	"include\init.c", 129; load_vram( LIFEBAR_3_VRAM_ADR, tileset_LIFE_YELLOW, SIZEOF(tileset_LIFE_YELLOW) >> 1 );
 6790                        		__st.wmiq	4160, _di
         0C:DDCE  A9 40      			lda.l	#4160
         0C:DDD0  85 F0      			sta.l	_di
         0C:DDD2  A9 10      			lda.h	#4160
         0C:DDD4  85 F1      			sta.h	_di
 6791                        		__farptr	_tileset_LIFE_YELLOW, _bp_bank, _bp
         0C:DDD6  A9 80      			lda.l	#$6000 + ($1FFF & (_tileset_LIFE_YELLOW))
         0C:DDD8  85 EC      			sta.l	_bp
         0C:DDDA  A9 68      			lda.h	#$6000 + ($1FFF & (_tileset_LIFE_YELLOW))
         0C:DDDC  85 ED      			sta.h	_bp
         0C:DDDE  A9 03      			lda	#bank(_tileset_LIFE_YELLOW)
         0C:DDE0  85 02      			sta	_bp_bank
 6792                        		__ld.wi		___sizeof__tileset_LIFE_YELLOW
         0C:DDE2  A9 40      			lda.l	#___sizeof__tileset_LIFE_YELLOW
         0C:DDE4  A0 00      			ldy.h	#___sizeof__tileset_LIFE_YELLOW
 6793                        		__lsr.wi	1
         0C:DDE6  42         			say
         0C:DDE7  4A         			lsr	a
         0C:DDE8  42         			say
         0C:DDE9  6A         			ror	a
 6794                        		__st.wmq	_ax
         0C:DDEA  85 F8      			sta.l	_ax
         0C:DDEC  84 F9      			sty.h	_ax
 6795                        		 _load_vram.3
         0C:DDEE  82         			clx				; Offset to PCE VDC.
         0C:DDEF  20 77 FF   			call	load_vram_x
 6796                        	
 6797                        		.dbg	line,	"include\init.c", 130; load_vram( LIFEBAR_4_VRAM_ADR, tileset_LIFE_YELLOW, SIZEOF(tileset_LIFE_YELLOW) >> 1 );
 6798                        		__st.wmiq	4192, _di
         0C:DDF2  A9 60      			lda.l	#4192
         0C:DDF4  85 F0      			sta.l	_di
         0C:DDF6  A9 10      			lda.h	#4192
         0C:DDF8  85 F1      			sta.h	_di
 6799                        		__farptr	_tileset_LIFE_YELLOW, _bp_bank, _bp
         0C:DDFA  A9 80      			lda.l	#$6000 + ($1FFF & (_tileset_LIFE_YELLOW))
         0C:DDFC  85 EC      			sta.l	_bp
         0C:DDFE  A9 68      			lda.h	#$6000 + ($1FFF & (_tileset_LIFE_YELLOW))
         0C:DE00  85 ED      			sta.h	_bp
         0C:DE02  A9 03      			lda	#bank(_tileset_LIFE_YELLOW)
         0C:DE04  85 02      			sta	_bp_bank
 6800                        		__ld.wi		___sizeof__tileset_LIFE_YELLOW
         0C:DE06  A9 40      			lda.l	#___sizeof__tileset_LIFE_YELLOW
         0C:DE08  A0 00      			ldy.h	#___sizeof__tileset_LIFE_YELLOW
 6801                        		__lsr.wi	1
         0C:DE0A  42         			say
         0C:DE0B  4A         			lsr	a
         0C:DE0C  42         			say
         0C:DE0D  6A         			ror	a
 6802                        		__st.wmq	_ax
         0C:DE0E  85 F8      			sta.l	_ax
         0C:DE10  84 F9      			sty.h	_ax
 6803                        		 _load_vram.3
         0C:DE12  82         			clx				; Offset to PCE VDC.
         0C:DE13  20 77 FF   			call	load_vram_x
 6804                        	
 6805                        		.dbg	line,	"include\init.c", 131; load_vram( LIFEBAR_5_VRAM_ADR, tileset_LIFE_EMPTY, SIZEOF(tileset_LIFE_EMPTY) >> 1 );
 6806                        		__st.wmiq	4224, _di
         0C:DE16  A9 80      			lda.l	#4224
         0C:DE18  85 F0      			sta.l	_di
         0C:DE1A  A9 10      			lda.h	#4224
         0C:DE1C  85 F1      			sta.h	_di
 6807                        		__farptr	_tileset_LIFE_EMPTY, _bp_bank, _bp
         0C:DE1E  A9 C0      			lda.l	#$6000 + ($1FFF & (_tileset_LIFE_EMPTY))
         0C:DE20  85 EC      			sta.l	_bp
         0C:DE22  A9 68      			lda.h	#$6000 + ($1FFF & (_tileset_LIFE_EMPTY))
         0C:DE24  85 ED      			sta.h	_bp
         0C:DE26  A9 03      			lda	#bank(_tileset_LIFE_EMPTY)
         0C:DE28  85 02      			sta	_bp_bank
 6808                        		__ld.wi		___sizeof__tileset_LIFE_EMPTY
         0C:DE2A  A9 40      			lda.l	#___sizeof__tileset_LIFE_EMPTY
         0C:DE2C  A0 00      			ldy.h	#___sizeof__tileset_LIFE_EMPTY
 6809                        		__lsr.wi	1
         0C:DE2E  42         			say
         0C:DE2F  4A         			lsr	a
         0C:DE30  42         			say
         0C:DE31  6A         			ror	a
 6810                        		__st.wmq	_ax
         0C:DE32  85 F8      			sta.l	_ax
         0C:DE34  84 F9      			sty.h	_ax
 6811                        		 _load_vram.3
         0C:DE36  82         			clx				; Offset to PCE VDC.
         0C:DE37  20 77 FF   			call	load_vram_x
 6812                        	
 6813                        		.dbg	line,	"include\init.c", 134; //--------------------------------------------------------------------------------------//
 6814                        	
 6815                        		.dbg	line,	"include\init.c", 135; //                               LOAD WEAPON + ARMOR TILES                              //
 6816                        	
 6817                        		.dbg	line,	"include\init.c", 136; //--------------------------------------------------------------------------------------//
 6818                        	
 6819                        		.dbg	line,	"include\init.c", 138; load_vram( WEAPON_VRAM_ADR, tileset_WEAPON_1, SIZEOF(tileset_WEAPON_1) >> 1 );
 6820                        		__st.wmiq	4256, _di
         0C:DE3A  A9 A0      			lda.l	#4256
         0C:DE3C  85 F0      			sta.l	_di
         0C:DE3E  A9 10      			lda.h	#4256
         0C:DE40  85 F1      			sta.h	_di
 6821                        		__farptr	_tileset_WEAPON_1, _bp_bank, _bp
         0C:DE42  A9 00      			lda.l	#$6000 + ($1FFF & (_tileset_WEAPON_1))
         0C:DE44  85 EC      			sta.l	_bp
         0C:DE46  A9 6B      			lda.h	#$6000 + ($1FFF & (_tileset_WEAPON_1))
         0C:DE48  85 ED      			sta.h	_bp
         0C:DE4A  A9 03      			lda	#bank(_tileset_WEAPON_1)
         0C:DE4C  85 02      			sta	_bp_bank
 6822                        		__ld.wi		___sizeof__tileset_WEAPON_1
         0C:DE4E  A9 80      			lda.l	#___sizeof__tileset_WEAPON_1
         0C:DE50  A0 00      			ldy.h	#___sizeof__tileset_WEAPON_1
 6823                        		__lsr.wi	1
         0C:DE52  42         			say
         0C:DE53  4A         			lsr	a
         0C:DE54  42         			say
         0C:DE55  6A         			ror	a
 6824                        		__st.wmq	_ax
         0C:DE56  85 F8      			sta.l	_ax
         0C:DE58  84 F9      			sty.h	_ax
 6825                        		 _load_vram.3
         0C:DE5A  82         			clx				; Offset to PCE VDC.
         0C:DE5B  20 77 FF   			call	load_vram_x
 6826                        	
 6827                        		.dbg	line,	"include\init.c", 139; load_vram( ARMOR_VRAM_ADR, tileset_ARMOR_2, SIZEOF(tileset_ARMOR_2) >> 1 );
 6828                        		__st.wmiq	4320, _di
         0C:DE5E  A9 E0      			lda.l	#4320
         0C:DE60  85 F0      			sta.l	_di
         0C:DE62  A9 10      			lda.h	#4320
         0C:DE64  85 F1      			sta.h	_di
 6829                        		__farptr	_tileset_ARMOR_2, _bp_bank, _bp
         0C:DE66  A9 80      			lda.l	#$6000 + ($1FFF & (_tileset_ARMOR_2))
         0C:DE68  85 EC      			sta.l	_bp
         0C:DE6A  A9 69      			lda.h	#$6000 + ($1FFF & (_tileset_ARMOR_2))
         0C:DE6C  85 ED      			sta.h	_bp
         0C:DE6E  A9 03      			lda	#bank(_tileset_ARMOR_2)
         0C:DE70  85 02      			sta	_bp_bank
 6830                        		__ld.wi		___sizeof__tileset_ARMOR_2
         0C:DE72  A9 80      			lda.l	#___sizeof__tileset_ARMOR_2
         0C:DE74  A0 00      			ldy.h	#___sizeof__tileset_ARMOR_2
 6831                        		__lsr.wi	1
         0C:DE76  42         			say
         0C:DE77  4A         			lsr	a
         0C:DE78  42         			say
         0C:DE79  6A         			ror	a
 6832                        		__st.wmq	_ax
         0C:DE7A  85 F8      			sta.l	_ax
         0C:DE7C  84 F9      			sty.h	_ax
 6833                        		 _load_vram.3
         0C:DE7E  82         			clx				; Offset to PCE VDC.
         0C:DE7F  20 77 FF   			call	load_vram_x
 6834                        	
 6835                        		.dbg	line,	"include\init.c", 142; //--------------------------------------------------------------------------------------//
 6836                        	
 6837                        		.dbg	line,	"include\init.c", 143; //                                     SET MULTIMAP                                     //
 6838                        	
 6839                        		.dbg	line,	"include\init.c", 144; //--------------------------------------------------------------------------------------//
 6840                        	
 6841                        		.dbg	line,	"include\init.c", 146; // multimap is 2 screens wide //
 6842                        	
 6843                        		.dbg	line,	"include\init.c", 147; set_multimap( multimap_LV1_BG_A , 5 );
 6844                        		__farptr	_multimap_LV1_BG_A, vdc_scr_bank, vdc_scr_addr
         0C:DE82  A9 00      			lda.l	#$6000 + ($1FFF & (_multimap_LV1_BG_A))
         0C:DE84  8D 92 28   			sta.l	vdc_scr_addr
         0C:DE87  A9 78      			lda.h	#$6000 + ($1FFF & (_multimap_LV1_BG_A))
         0C:DE89  8D 93 28   			sta.h	vdc_scr_addr
         0C:DE8C  A9 0B      			lda	#bank(_multimap_LV1_BG_A)
         0C:DE8E  8D 94 28   			sta	vdc_scr_bank
 6845                        		__st.umiq	5, vdc_map_scrn_w
         0C:DE91  A9 05      			lda.l	#5
         0C:DE93  8D 53 23   			sta	vdc_map_scrn_w
 6846                        		 _set_multimap.2
         0C:DE96  AD 4B 23   			lda	vdc_bat_width
         0C:DE99  4A         			lsr	a
         0C:DE9A  8D 52 23   			sta	vdc_map_line_w
 6847                        	
 6848                        		.dbg	line,	"include\init.c", 150; //--------------------------------------------------------------------------------------//
 6849                        	
 6850                        		.dbg	line,	"include\init.c", 151; //                                    DRAW TILEMAP                                      //
 6851                        	
 6852                        		.dbg	line,	"include\init.c", 152; //--------------------------------------------------------------------------------------//
 6853                        	
 6854                        		.dbg	line,	"include\init.c", 154; // The blkmap is drawn using global variables for the top-left coordinate
 6855                        	
 6856                        		.dbg	line,	"include\init.c", 155; // in pixels, and the draw width and height in terms of 8x8 characters.
 6857                        	
 6858                        		.dbg	line,	"include\init.c", 157; vdc_map_pxl_x = 0;
 6859                        		__st.wmiq	0, _vdc_map_pxl_x
         0C:DE9D  9C 54 23   			stz.l	_vdc_map_pxl_x
         0C:DEA0  9C 55 23   			stz.h	_vdc_map_pxl_x
 6860                        	
 6861                        		.dbg	line,	"include\init.c", 158; vdc_map_pxl_y = 0;
 6862                        		__st.wmiq	0, _vdc_map_pxl_y
         0C:DEA3  9C 56 23   			stz.l	_vdc_map_pxl_y
         0C:DEA6  9C 57 23   			stz.h	_vdc_map_pxl_y
 6863                        	
 6864                        		.dbg	line,	"include\init.c", 160; vdc_map_draw_w = 32;
 6865                        		__st.umiq	32, _vdc_map_draw_w
         0C:DEA9  A9 20      			lda.l	#32
         0C:DEAB  8D 50 23   			sta	_vdc_map_draw_w
 6866                        	
 6867                        		.dbg	line,	"include\init.c", 161; vdc_map_draw_h = 28;
 6868                        		__st.umiq	28, _vdc_map_draw_h
         0C:DEAE  A9 1C      			lda.l	#28
         0C:DEB0  8D 51 23   			sta	_vdc_map_draw_h
 6869                        	
 6870                        		.dbg	line,	"include\init.c", 163; draw_map();
 6871                        		__call		_draw_map
         0C:DEB3  20 F5 FE   			call	_draw_map
 6872                        	
 6873                        		.dbg	line,	"include\init.c", 168; //**************************************************************************************//
 6874                        	
 6875                        		.dbg	line,	"include\init.c", 169; //                                                                                      //
 6876                        	
 6877                        		.dbg	line,	"include\init.c", 170; //                                  SETUP SCROLL_SPLIT                                  //
 6878                        	
 6879                        		.dbg	line,	"include\init.c", 171; //                                                                                      //
 6880                        	
 6881                        		.dbg	line,	"include\init.c", 172; //**************************************************************************************//
 6882                        	
 6883                        		.dbg	line,	"include\init.c", 174; //--------------------------------------------------------------------------------------//
 6884                        	
 6885                        		.dbg	line,	"include\init.c", 175; //                                        VDC 2                                         //
 6886                        	
 6887                        		.dbg	line,	"include\init.c", 176; //--------------------------------------------------------------------------------------//
 6888                        	
 6889                        		.dbg	line,	"include\init.c", 178; sgx_scroll_map();
 6890                        		__call		_sgx_scroll_map
         0C:DEB6  20 95 FF   			call	_sgx_scroll_map
 6891                        	
 6892                        		.dbg	line,	"include\init.c", 180; sgx_scroll_split(0,   0, sgx_map_pxl_x & (BAT_SIZE_W - 1), sgx_map_pxl_y & (BAT_SIZE_H - 1), BKG_ON | SPR_ON);
 6893                        		__st.umiq	0, _al
         0C:DEB9  64 F8      			stz	_al
 6894                        		__st.umiq	0, _ah
         0C:DEBB  64 F9      			stz	_ah
 6895                        		__ld.wm		_sgx_map_pxl_x
         0C:DEBD  AD 64 23   			lda.l	_sgx_map_pxl_x
         0C:DEC0  AC 65 23   			ldy.h	_sgx_map_pxl_x
 6896                        		__and.wi	2047
         0C:DEC3  29 FF      			and.l	#2047
         0C:DEC5  42         			say
         0C:DEC6  29 07      			and.h	#2047
         0C:DEC8  42         			say
 6897                        		__st.wmq	_bx
         0C:DEC9  85 FA      			sta.l	_bx
         0C:DECB  84 FB      			sty.h	_bx
 6898                        		__ld.wm		_sgx_map_pxl_y
         0C:DECD  AD 66 23   			lda.l	_sgx_map_pxl_y
         0C:DED0  AC 67 23   			ldy.h	_sgx_map_pxl_y
 6899                        		__and.wi	255
         0C:DED3  29 FF      			and	#255
         0C:DED5  C2         			cly
 6900                        		__st.wmq	_cx
         0C:DED6  85 FC      			sta.l	_cx
         0C:DED8  84 FD      			sty.h	_cx
 6901                        		__st.umiq	192, _dl
         0C:DEDA  A9 C0      			lda.l	#192
         0C:DEDC  85 FE      			sta	_dl
 6902                        		__call		_sgx_scroll_split.5
         0C:DEDE  20 8B FF   			call	_sgx_scroll_split.5
 6903                        	
 6904                        		.dbg	line,	"include\init.c", 185; //--------------------------------------------------------------------------------------//
 6905                        	
 6906                        		.dbg	line,	"include\init.c", 186; //                                   LOAD BG PALETTES                                   //
 6907                        	
 6908                        		.dbg	line,	"include\init.c", 187; //--------------------------------------------------------------------------------------//
 6909                        	
 6910                        		.dbg	line,	"include\init.c", 189; // LOAD ALL PALETTES AT BG PALETTE 0 //
 6911                        	
 6912                        		.dbg	line,	"include\init.c", 190; load_palette( 0, palette_LV1, 16 );
 6913                        		__st.umiq	0, _al
         0C:DEE1  64 F8      			stz	_al
 6914                        		__farptr	_palette_LV1, _bp_bank, _bp
         0C:DEE3  A9 A0      			lda.l	#$6000 + ($1FFF & (_palette_LV1))
         0C:DEE5  85 EC      			sta.l	_bp
         0C:DEE7  A9 78      			lda.h	#$6000 + ($1FFF & (_palette_LV1))
         0C:DEE9  85 ED      			sta.h	_bp
         0C:DEEB  A9 0B      			lda	#bank(_palette_LV1)
         0C:DEED  85 02      			sta	_bp_bank
 6915                        		__st.umiq	16, _ah
         0C:DEEF  A9 10      			lda.l	#16
         0C:DEF1  85 F9      			sta	_ah
 6916                        		__call		_load_palette.3
         0C:DEF3  20 EB FE   			call	_load_palette.3
 6917                        	
 6918                        		.dbg	line,	"include\init.c", 195; //**************************************************************************************//
 6919                        	
 6920                        		.dbg	line,	"include\init.c", 196; //                                                                                      //
 6921                        	
 6922                        		.dbg	line,	"include\init.c", 197; //                                       SPRITES                                        //
 6923                        	
 6924                        		.dbg	line,	"include\init.c", 198; //                                                                                      //
 6925                        	
 6926                        		.dbg	line,	"include\init.c", 199; //**************************************************************************************//
 6927                        	
 6928                        		.dbg	line,	"include\init.c", 201; //--------------------------------------------------------------------------------------//
 6929                        	
 6930                        		.dbg	line,	"include\init.c", 202; //                                        PLAYER                                        //
 6931                        	
 6932                        		.dbg	line,	"include\init.c", 203; //--------------------------------------------------------------------------------------//
 6933                        	
 6934                        		.dbg	line,	"include\init.c", 205; // LOAD PLAYER TILES //
 6935                        	
 6936                        		.dbg	line,	"include\init.c", 206; // 0x2000
 6937                        	
 6938                        		.dbg	line,	"include\init.c", 207; // 32 TILES = 512 //
 6939                        	
 6940                        		.dbg	line,	"include\init.c", 208; // LOAD PLAYER FIRST FRAME OF ANIMATION (IDLE)
 6941                        	
 6942                        		.dbg	line,	"include\init.c", 209; load_vram(PLAYER_VRAM_ADR, tiles_SPR_PLAYER , TILES_16);
 6943                        		__st.wmiq	18432, _di
         0C:DEF6  64 F0      			stz.l	_di
         0C:DEF8  A9 48      			lda.h	#18432
         0C:DEFA  85 F1      			sta.h	_di
 6944                        		__farptr	_tiles_SPR_PLAYER, _bp_bank, _bp
         0C:DEFC  A9 A0      			lda.l	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         0C:DEFE  85 EC      			sta.l	_bp
         0C:DF00  A9 7A      			lda.h	#$6000 + ($1FFF & (_tiles_SPR_PLAYER))
         0C:DF02  85 ED      			sta.h	_bp
         0C:DF04  A9 0B      			lda	#bank(_tiles_SPR_PLAYER)
         0C:DF06  85 02      			sta	_bp_bank
 6945                        		__st.wmiq	256, _ax
         0C:DF08  64 F8      			stz.l	_ax
         0C:DF0A  A9 01      			lda.h	#256
         0C:DF0C  85 F9      			sta.h	_ax
 6946                        		 _load_vram.3
         0C:DF0E  82         			clx				; Offset to PCE VDC.
         0C:DF0F  20 77 FF   			call	load_vram_x
 6947                        	
 6948                        		.dbg	line,	"include\init.c", 212; // SELECT PLAYER CORE SPRITE //
 6949                        	
 6950                        		.dbg	line,	"include\init.c", 213; spr_set(player_id);
 6951                        		__ld.umq	_player_id
         0C:DF12  AD 0D 23   			lda	_player_id
 6952                        		__call		_spr_set.1
         0C:DF15  20 DD E7   			call	_spr_set.1
 6953                        	
 6954                        		.dbg	line,	"include\init.c", 216; player_pos_x = 112;
 6955                        		__st.wmiq	112, _player_pos_x
         0C:DF18  A9 70      			lda.l	#112
         0C:DF1A  8D 16 23   			sta.l	_player_pos_x
         0C:DF1D  9C 17 23   			stz.h	_player_pos_x
 6956                        	
 6957                        		.dbg	line,	"include\init.c", 217; player_pos_y = PLAYER_BASE_Y_POS;
 6958                        		__st.wmiq	128, _player_pos_y
         0C:DF20  A9 80      			lda.l	#128
         0C:DF22  8D 18 23   			sta.l	_player_pos_y
         0C:DF25  9C 19 23   			stz.h	_player_pos_y
 6959                        	
 6960                        		.dbg	line,	"include\init.c", 220; spr_x(player_pos_x);
 6961                        		__ld.wm		_player_pos_x
         0C:DF28  AD 16 23   			lda.l	_player_pos_x
         0C:DF2B  AC 17 23   			ldy.h	_player_pos_x
 6962                        		__call		_spr_x.1
         0C:DF2E  20 0A E8   			call	_spr_x.1
 6963                        	
 6964                        		.dbg	line,	"include\init.c", 221; spr_y(player_pos_y);
 6965                        		__ld.wm		_player_pos_y
         0C:DF31  AD 18 23   			lda.l	_player_pos_y
         0C:DF34  AC 19 23   			ldy.h	_player_pos_y
 6966                        		__call		_spr_y.1
         0C:DF37  20 19 E8   			call	_spr_y.1
 6967                        	
 6968                        		.dbg	line,	"include\init.c", 223; // SET TILES DATA FOR THE PLAYER //
 6969                        	
 6970                        		.dbg	line,	"include\init.c", 224; spr_pattern(PLAYER_VRAM_ADR);
 6971                        		__ld.wi		18432
         0C:DF3A  62         			cla
         0C:DF3B  A0 48      			ldy.h	#18432
 6972                        		__call		_spr_pattern.1
         0C:DF3D  20 26 E8   			call	_spr_pattern.1
 6973                        	
 6974                        		.dbg	line,	"include\init.c", 227; spr_ctrl(FLIP_MAS|SIZE_MAS, NO_FLIP|SZ_32x32);
 6975                        		__st.umiq	185, _al
         0C:DF40  A9 B9      			lda.l	#185
         0C:DF42  85 F8      			sta	_al
 6976                        		__ld.uiq	17
         0C:DF44  A9 11      			lda	#17
 6977                        		__call		_spr_ctrl.2
         0C:DF46  20 3C E8   			call	_spr_ctrl.2
 6978                        	
 6979                        		.dbg	line,	"include\init.c", 230; spr_pal(0);
 6980                        		__ld.uiq	0
         0C:DF49  62         			cla
 6981                        		__call		_spr_pal.1
         0C:DF4A  20 4D E8   			call	_spr_pal.1
 6982                        	
 6983                        		.dbg	line,	"include\init.c", 231; spr_pri(TRUE);
 6984                        		__ld.uiq	1
         0C:DF4D  A9 01      			lda	#1
 6985                        		__call		_spr_pri.1
         0C:DF4F  20 5C E8   			call	_spr_pri.1
 6986                        	
 6987                        		.dbg	line,	"include\init.c", 234; // UPDATE PCE SAT //
 6988                        	
 6989                        		.dbg	line,	"include\init.c", 235; satb_update();
 6990                        		__call		_satb_update
         0C:DF52  20 E1 FE   			call	_satb_update
 6991                        	
 6992                        		.dbg	line,	"include\init.c", 240; //--------------------------------------------------------------------------------------//
 6993                        	
 6994                        		.dbg	line,	"include\init.c", 241; //                                LOAD SPRITES PALETTES                                 //
 6995                        	
 6996                        		.dbg	line,	"include\init.c", 242; //--------------------------------------------------------------------------------------//
 6997                        	
 6998                        		.dbg	line,	"include\init.c", 244; load_palette( 16, palette_PLAYER, 1 );
 6999                        		__st.umiq	16, _al
         0C:DF55  A9 10      			lda.l	#16
         0C:DF57  85 F8      			sta	_al
 7000                        		__farptr	_palette_PLAYER, _bp_bank, _bp
         0C:DF59  A9 A0      			lda.l	#$6000 + ($1FFF & (_palette_PLAYER))
         0C:DF5B  85 EC      			sta.l	_bp
         0C:DF5D  A9 7A      			lda.h	#$6000 + ($1FFF & (_palette_PLAYER))
         0C:DF5F  85 ED      			sta.h	_bp
         0C:DF61  A9 0C      			lda	#bank(_palette_PLAYER)
         0C:DF63  85 02      			sta	_bp_bank
 7001                        		__st.umiq	1, _ah
         0C:DF65  A9 01      			lda.l	#1
         0C:DF67  85 F9      			sta	_ah
 7002                        		__call		_load_palette.3
         0C:DF69  20 EB FE   			call	_load_palette.3
 7003                        	
 7004                        		.dbg	line,	"include\init.c", 249; //**************************************************************************************//
 7005                        	
 7006                        		.dbg	line,	"include\init.c", 250; //                                                                                      //
 7007                        	
 7008                        		.dbg	line,	"include\init.c", 251; //                                      VARIABLES                                       //
 7009                        	
 7010                        		.dbg	line,	"include\init.c", 252; //                                                                                      //
 7011                        	
 7012                        		.dbg	line,	"include\init.c", 253; //**************************************************************************************//
 7013                        	
 7014                        		.dbg	line,	"include\init.c", 255; camera_max_y_position = 768;
 7015                        		__st.wmiq	768, _camera_max_y_position
         0C:DF6C  9C 1A 23   			stz.l	_camera_max_y_position
         0C:DF6F  A9 03      			lda.h	#768
         0C:DF71  8D 1B 23   			sta.h	_camera_max_y_position
 7016                        	
 7017                        		.dbg	line,	"include\init.c", 256; jump_max_index = 34;
 7018                        		__st.umiq	34, _jump_max_index
         0C:DF74  A9 22      			lda.l	#34
         0C:DF76  8D 15 23   			sta	_jump_max_index
 7019                        	
 7020                        		.dbg	line,	"include\init.c", 257; jump_ladder = FALSE;
 7021                        		__st.umiq	0, _jump_ladder
         0C:DF79  9C 14 23   			stz	_jump_ladder
 7022                        	
 7023                        		.dbg	line,	"include\init.c", 260; // VSYNC //
 7024                        	
 7025                        		.dbg	line,	"include\init.c", 261; vsync();
 7026                        		__call		_vsync
         0C:DF7C  20 09 E3   			call	_vsync
 7027                        	
 7028                        		.dbg	line,	"include\init.c", 263; // ENABLE DISPLAY //
 7029                        	
 7030                        		.dbg	line,	"include\init.c", 264; disp_on();
 7031                        		__call		_disp_on
         0C:DF7F  20 16 E4   			call	_disp_on
 7032                        	
 7033                        		.dbg	line,	"include\init.c", 265; }
 7034                        	
 7035                        		.dbg	line,	"include\init.c", 266; }
 7036    0C:DF82             	.LL268:
 7037    0C:DF82             	.LL267:
 7038                        		__return	0
         0C:DF82  4C EF FF   			jmp	leave_proc
 7039                        		.dbg	clear
 7040                        		.endp
 7041                        		.pceas
 7042                        	
 7043                        		.dbg	line,	"main.c", 29; main()
 7044                        		.dbg	line,	"main.c", 30; {
 7045                        	;***********************
 7046                        	;***********************
 7047                        	
 7048                        		.hucc
 7049    02:C193             		.proc		_main
 7050                        		__enter		_main
 7051                        	
 7052                        		.dbg	line,	"main.c", 31; if(!sgx_detect())
 7053                        		 _sgx_detect
         02:C193  AD E8 22   			lda	sgx_detected
         02:C196  C2         			cly
 7054                        		__not.wr
         02:C197  84 00      			sty	__temp
         02:C199  05 00      			ora	__temp
         02:C19B  18         			clc
         02:C19C  D0 01      			bne	!+
         02:C19E  38         			sec
         02:C19F             	!:
 7055                        		__bfalse	.LL270
         02:C19F  90 14      			bcc	.LL270
 7056                        	
 7057                        		.dbg	line,	"main.c", 32; {
 7058                        	
 7059                        		.dbg	line,	"main.c", 33; put_string("Halt: SGX hardware not found", 2, 13);
 7060                        		__ld.wi		__const1+0
         02:C1A1  62         			cla
         02:C1A2  A0 60      			ldy.h	#__const1+0
 7061                        		__st.wmq	_bp
         02:C1A4  85 EC      			sta.l	_bp
         02:C1A6  84 ED      			sty.h	_bp
 7062                        		__st.umiq	2, _dil
         02:C1A8  A9 02      			lda.l	#2
         02:C1AA  85 F0      			sta	_dil
 7063                        		__st.umiq	13, _dih
         02:C1AC  A9 0D      			lda.l	#13
         02:C1AE  85 F1      			sta	_dih
 7064                        		__call		_put_string.3
         02:C1B0  20 68 E6   			call	_put_string.3
 7065                        	
 7066                        		.dbg	line,	"main.c", 35; for(;;)
 7067    02:C1B3             	.LL271	.alias		.LL273
 7068    02:C1B3             	.LL272	.alias		.LL273
 7069    02:C1B3             	.LL273:
 7070                        	
 7071                        		.dbg	line,	"main.c", 36; {
 7072                        	
 7073                        		.dbg	line,	"main.c", 37; // INFINITE LOOP //
 7074                        	
 7075                        		.dbg	line,	"main.c", 38; }
 7076                        		__bra		.LL273
         02:C1B3  80 FE      			bra	.LL273
 7077    02:C1B5             	.LL274:
 7078                        	
 7079                        		.dbg	line,	"main.c", 39; }
 7080                        	
 7081                        		.dbg	line,	"main.c", 44; init_VARIABLES();
 7082    02:C1B5             	.LL270:
 7083                        		__call		_init_VARIABLES
         02:C1B5  20 D7 FE   			call	_init_VARIABLES
 7084                        	
 7085                        		.dbg	line,	"main.c", 47; init_PLAYER();
 7086                        		__call		_init_PLAYER
         02:C1B8  20 CD FE   			call	_init_PLAYER
 7087                        	
 7088                        		.dbg	line,	"main.c", 52; //**************************************************************************************//
 7089                        	
 7090                        		.dbg	line,	"main.c", 53; //                                                                                      //
 7091                        	
 7092                        		.dbg	line,	"main.c", 54; //                                      TITLE                                           //
 7093                        	
 7094                        		.dbg	line,	"main.c", 55; //                                                                                      //
 7095                        	
 7096                        		.dbg	line,	"main.c", 56; //**************************************************************************************//
 7097                        	
 7098                        		.dbg	line,	"main.c", 57; for(;;)
 7099    02:C1BB             	.LL275:
 7100    02:C1BB             	.LL276:
 7101    02:C1BB             	.LL277:
 7102                        	
 7103                        		.dbg	line,	"main.c", 58; {
 7104                        	
 7105                        		.dbg	line,	"main.c", 60; if(sequence_id == SEQUENCE_TITLE)
 7106                        		__not.um	_sequence_id
         02:C1BB  AD 0A 23   			lda	_sequence_id
         02:C1BE  18         			clc
         02:C1BF  D0 01      			bne	!+
         02:C1C1  38         			sec
         02:C1C2             	!:
 7107                        		__bfalse	.LL279
         02:C1C2  90 02      			bcc	.LL279
 7108                        	
 7109                        		.dbg	line,	"main.c", 61; {
 7110                        	
 7111                        		.dbg	line,	"main.c", 63; }
 7112                        	
 7113                        		.dbg	line,	"main.c", 66; else if(sequence_id == SEQUENCE_GAME)
 7114                        		__bra		.LL280
         02:C1C4  80 F5      			bra	.LL280
 7115    02:C1C6             	.LL279:
 7116                        		__ld.umq	_sequence_id
         02:C1C6  AD 0A 23   			lda	_sequence_id
 7117                        		__equ_b.uiq	2
         02:C1C9  C9 02      			cmp	#2
         02:C1CB  F0 01      			beq	!+
         02:C1CD  18         			clc
         02:C1CE             	!:
 7118                        		__bfalse	.LL281
         02:C1CE  90 EB      			bcc	.LL281
 7119                        	
 7120                        		.dbg	line,	"main.c", 67; {
 7121                        	
 7122                        		.dbg	line,	"main.c", 68; // LOADING LOGO SCREEN //
 7123                        	
 7124                        		.dbg	line,	"main.c", 69; if(sequence_loaded == FALSE)
 7125                        		__not.um	_sequence_loaded
         02:C1D0  AD 0B 23   			lda	_sequence_loaded
         02:C1D3  18         			clc
         02:C1D4  D0 01      			bne	!+
         02:C1D6  38         			sec
         02:C1D7             	!:
 7126                        		__bfalse	.LL282
         02:C1D7  90 0A      			bcc	.LL282
 7127                        	
 7128                        		.dbg	line,	"main.c", 70; {
 7129                        	
 7130                        		.dbg	line,	"main.c", 71; init_LEVEL();
 7131                        		__call		_init_LEVEL
         02:C1D9  20 C3 FE   			call	_init_LEVEL
 7132                        	
 7133                        		.dbg	line,	"main.c", 73; sequence_loaded = TRUE;
 7134                        		__st.umiq	1, _sequence_loaded
         02:C1DC  A9 01      			lda.l	#1
         02:C1DE  8D 0B 23   			sta	_sequence_loaded
 7135                        	
 7136                        		.dbg	line,	"main.c", 74; }
 7137                        	
 7138                        		.dbg	line,	"main.c", 77; else
 7139                        		__bra		.LL283
         02:C1E1  80 D8      			bra	.LL283
 7140    02:C1E3             	.LL282:
 7141                        	
 7142                        		.dbg	line,	"main.c", 78; {
 7143                        	
 7144                        		.dbg	line,	"main.c", 79; if(level_id == 1)
 7145                        		__ld.umq	_level_id
         02:C1E3  AD 0C 23   			lda	_level_id
 7146                        		__equ_b.uiq	1
         02:C1E6  C9 01      			cmp	#1
         02:C1E8  F0 01      			beq	!+
         02:C1EA  18         			clc
         02:C1EB             	!:
 7147                        		__bfalse	.LL284
         02:C1EB  90 14      			bcc	.LL284
 7148                        	
 7149                        		.dbg	line,	"main.c", 80; {
 7150                        	
 7151                        		.dbg	line,	"main.c", 81; vsync();
 7152                        		__call		_vsync
         02:C1ED  20 09 E3   			call	_vsync
 7153                        	
 7154                        		.dbg	line,	"main.c", 83; update_PLAYER();
 7155                        		__call		_update_PLAYER
         02:C1F0  20 B9 FE   			call	_update_PLAYER
 7156                        	
 7157                        		.dbg	line,	"main.c", 84; /*put_number(player_state,1,0,0);
 7158                        	
 7159                        		.dbg	line,	"main.c", 85; put_number(player_index_jump,2,0,1);
 7160                        	
 7161                        		.dbg	line,	"main.c", 86; put_number(TABLE_PLAYER_FALL[player_index_jump],2,0,2);
 7162                        	
 7163                        		.dbg	line,	"main.c", 87; put_number(player_pos_y,3,0,3);*/
 7164                        	
 7165                        		.dbg	line,	"main.c", 89; joypad_DIR();
 7166                        		__call		_joypad_DIR
         02:C1F3  20 AF FE   			call	_joypad_DIR
 7167                        	
 7168                        		.dbg	line,	"main.c", 90; joypad_BUTTONS();
 7169                        		__call		_joypad_BUTTONS
         02:C1F6  20 A5 FE   			call	_joypad_BUTTONS
 7170                        	
 7171                        		.dbg	line,	"main.c", 92; satb_update();
 7172                        		__call		_satb_update
         02:C1F9  20 E1 FE   			call	_satb_update
 7173                        	
 7174                        		.dbg	line,	"main.c", 93; scroll_BG();
 7175                        		__call		_scroll_BG
         02:C1FC  20 9B FE   			call	_scroll_BG
 7176                        	
 7177                        		.dbg	line,	"main.c", 94; }
 7178                        	
 7179                        		.dbg	line,	"main.c", 96; else if(level_id == 2)
 7180                        		__bra		.LL285
         02:C1FF  80 BA      			bra	.LL285
 7181    02:C201             	.LL284:
 7182                        		__ld.umq	_level_id
         02:C201  AD 0C 23   			lda	_level_id
 7183                        		__equ_b.uiq	2
         02:C204  C9 02      			cmp	#2
         02:C206  F0 01      			beq	!+
         02:C208  18         			clc
         02:C209             	!:
 7184                        		__bfalse	.LL286
         02:C209  90 02      			bcc	.LL286
 7185                        	
 7186                        		.dbg	line,	"main.c", 97; {
 7187                        	
 7188                        		.dbg	line,	"main.c", 98; //sequence_LV2();
 7189                        	
 7190                        		.dbg	line,	"main.c", 99; }
 7191                        	
 7192                        		.dbg	line,	"main.c", 101; else if(level_id == 3)
 7193                        		__bra		.LL287
         02:C20B  80 AE      			bra	.LL287
 7194    02:C20D             	.LL286:
 7195                        		__ld.umq	_level_id
         02:C20D  AD 0C 23   			lda	_level_id
 7196                        		__equ_b.uiq	3
         02:C210  C9 03      			cmp	#3
         02:C212  F0 01      			beq	!+
         02:C214  18         			clc
         02:C215             	!:
 7197                        		__bfalse	.LL288
         02:C215  90 02      			bcc	.LL288
 7198                        	
 7199                        		.dbg	line,	"main.c", 102; {
 7200                        	
 7201                        		.dbg	line,	"main.c", 103; //sequence_LV3();
 7202                        	
 7203                        		.dbg	line,	"main.c", 104; }
 7204                        	
 7205                        		.dbg	line,	"main.c", 106; else if(level_id == 4)
 7206                        		__bra		.LL289
         02:C217  80 A2      			bra	.LL289
 7207    02:C219             	.LL288:
 7208                        		__ld.umq	_level_id
         02:C219  AD 0C 23   			lda	_level_id
 7209                        		__equ_b.uiq	4
         02:C21C  C9 04      			cmp	#4
         02:C21E  F0 01      			beq	!+
         02:C220  18         			clc
         02:C221             	!:
 7210                        		__bfalse	.LL290
         02:C221  90 02      			bcc	.LL290
 7211                        	
 7212                        		.dbg	line,	"main.c", 107; {
 7213                        	
 7214                        		.dbg	line,	"main.c", 108; //sequence_LV4();
 7215                        	
 7216                        		.dbg	line,	"main.c", 109; }
 7217                        	
 7218                        		.dbg	line,	"main.c", 111; else if(level_id == 5)
 7219                        		__bra		.LL291
         02:C223  80 96      			bra	.LL291
 7220    02:C225             	.LL290:
 7221                        		__ld.umq	_level_id
         02:C225  AD 0C 23   			lda	_level_id
 7222                        		__equ_b.uiq	5
         02:C228  C9 05      			cmp	#5
         02:C22A  F0 01      			beq	!+
         02:C22C  18         			clc
         02:C22D             	!:
 7223                        		__bfalse	.LL292
         02:C22D  90 8C      			bcc	.LL292
 7224                        	
 7225                        		.dbg	line,	"main.c", 112; {
 7226                        	
 7227                        		.dbg	line,	"main.c", 113; //sequence_LV5();
 7228                        	
 7229                        		.dbg	line,	"main.c", 114; }
 7230                        	
 7231                        		.dbg	line,	"main.c", 115; }
 7232    02:C22F             	.LL292	.alias		.LL277
 7233    02:C22F             	.LL291	.alias		.LL277
 7234    02:C22F             	.LL289	.alias		.LL277
 7235    02:C22F             	.LL287	.alias		.LL277
 7236    02:C22F             	.LL285	.alias		.LL277
 7237    02:C22F             	.LL283	.alias		.LL277
 7238                        	
 7239                        		.dbg	line,	"main.c", 116; }
 7240                        	
 7241                        		.dbg	line,	"main.c", 117; }
 7242    02:C22F             	.LL281	.alias		.LL277
 7243    02:C22F             	.LL280	.alias		.LL277
 7244                        		__bra		.LL277
         02:C22F  80 8A      			bra	.LL277
 7245    02:C231             	.LL278:
 7246                        	
 7247                        		.dbg	line,	"main.c", 120; }
 7248    02:C231             	.LL269:
 7249                        		__return	1
         02:C231  AA         			tax
         02:C232  4C EF FF   			jmp	leave_proc
 7250                        		.dbg	clear
 7251                        		.endp
 7252                        		.pceas
 7253                        	
 7254                        		.dbg	clear
 7255               6000     		.rodata
 7256    01:6000             	__const1:
 7257    01:6000  48 61 6C 74			db	'H','a','l','t',':',' ','S','G'
         01:6004  3A 20 53 47 
 7258    01:6008  58 20 68 61			db	'X',' ','h','a','r','d','w','a'
         01:600C  72 64 77 61 
 7259    01:6010  72 65 20 6E			db	'r','e',' ','n','o','t',' ','f'
         01:6014  6F 74 20 66 
 7260    01:6018  6F 75 6E 64			db	'o','u','n','d',$00
         01:601C  00          
 7261    01:601D             	_TABLE_PLAYER_JUMP_V:
 7262    01:601D  FC         			db	-4
 7263    01:601E  FB         			db	-5
 7264    01:601F  F6         			db	-10
 7265    01:6020  FC         			db	-4
 7266    01:6021  FC         			db	-4
 7267    01:6022  F9         			db	-7
 7268    01:6023  FA         			db	-6
 7269    01:6024  FD         			db	-3
 7270    01:6025  FB         			db	-5
 7271    01:6026  FE         			db	-2
 7272    01:6027  FC         			db	-4
 7273    01:6028  FF         			db	-1
 7274    01:6029  FF         			db	-1
 7275    01:602A  FF         			db	-1
 7276    01:602B  FF         			db	-1
 7277    01:602C  00         			db	0
 7278    01:602D  00         			db	0
 7279    01:602E  00         			db	0
 7280    01:602F  00         			db	0
 7281    01:6030  01         			db	1
 7282    01:6031  01         			db	1
 7283    01:6032  01         			db	1
 7284    01:6033  01         			db	1
 7285    01:6034  04         			db	4
 7286    01:6035  02         			db	2
 7287    01:6036  05         			db	5
 7288    01:6037  03         			db	3
 7289    01:6038  06         			db	6
 7290    01:6039  07         			db	7
 7291    01:603A  04         			db	4
 7292    01:603B  04         			db	4
 7293    01:603C  0A         			db	10
 7294    01:603D  04         			db	4
 7295    01:603E  04         			db	4
 7296    01:603F  05         			db	5
 7297    01:6040             	_TABLE_PLAYER_FALL:
 7298    01:6040  00         			db	0
 7299    01:6041  00         			db	0
 7300    01:6042  00         			db	0
 7301    01:6043  00         			db	0
 7302    01:6044  01         			db	1
 7303    01:6045  01         			db	1
 7304    01:6046  01         			db	1
 7305    01:6047  01         			db	1
 7306    01:6048  02         			db	2
 7307    01:6049  02         			db	2
 7308    01:604A  02         			db	2
 7309    01:604B  02         			db	2
 7310    01:604C  03         			db	3
 7311    01:604D  03         			db	3
 7312    01:604E  03         			db	3
 7313    01:604F  04         			db	4
 7314    01:6050  04         			db	4
 7315    01:6051  04         			db	4
 7316    01:6052  04         			db	4
 7317    01:6053  04         			db	4
 7318    01:6054  05         			db	5
 7319    01:6055             	_TABLE_PLAYER_JUMP_LADDER:
 7320    01:6055  FC         			db	-4
 7321    01:6056  FC         			db	-4
 7322    01:6057  FD         			db	-3
 7323    01:6058  FD         			db	-3
 7324    01:6059  FD         			db	-3
 7325    01:605A  FE         			db	-2
 7326    01:605B  FE         			db	-2
 7327    01:605C  FE         			db	-2
 7328    01:605D  FF         			db	-1
 7329    01:605E  FF         			db	-1
 7330    01:605F  FF         			db	-1
 7331    01:6060  FF         			db	-1
 7332    01:6061  FF         			db	-1
 7333    01:6062  00         			db	0
 7334    01:6063  00         			db	0
 7335    01:6064  00         			db	0
 7336    01:6065  00         			db	0
 7337    01:6066  01         			db	1
 7338    01:6067  01         			db	1
 7339    01:6068  01         			db	1
 7340    01:6069  01         			db	1
 7341    01:606A  01         			db	1
 7342    01:606B  02         			db	2
 7343    01:606C  02         			db	2
 7344    01:606D  02         			db	2
 7345    01:606E  03         			db	3
 7346    01:606F  03         			db	3
 7347    01:6070  03         			db	3
 7348    01:6071  04         			db	4
 7349    01:6072  04         			db	4
 7350                        	
 7351               230A     		.bss
 7352    F8:230A             	_sequence_id:
 7353    F8:230A             			ds	1
 7354    F8:230B             	_sequence_loaded:
 7355    F8:230B             			ds	1
 7356    F8:230C             	_level_id:
 7357    F8:230C             			ds	1
 7358    F8:230D             	_player_id:
 7359    F8:230D             			ds	1
 7360    F8:230E             	_player_state:
 7361    F8:230E             			ds	1
 7362    F8:230F             	_player_axis:
 7363    F8:230F             			ds	1
 7364    F8:2310             	_player_previous_axis:
 7365    F8:2310             			ds	1
 7366    F8:2311             	_player_counter_anim:
 7367    F8:2311             			ds	1
 7368    F8:2312             	_player_index_jump:
 7369    F8:2312             			ds	1
 7370    F8:2313             	_player_index_fall:
 7371    F8:2313             			ds	1
 7372    F8:2314             	_jump_ladder:
 7373    F8:2314             			ds	1
 7374    F8:2315             	_jump_max_index:
 7375    F8:2315             			ds	1
 7376    F8:2316             	_player_pos_x:
 7377    F8:2316             			ds	2
 7378    F8:2318             	_player_pos_y:
 7379    F8:2318             			ds	2
 7380    F8:231A             	_camera_max_y_position:
 7381    F8:231A             			ds	2
 7382                        	
 7383                        	
 7384                        	;0 error(s) in compilation
 7385                        	;	literal pool:29
 7386                        	;	constant pool:86
 7387                        	;	global pool:364
 7388                        	;	Macro pool:191
 7389    F8:231C             	leaf_loc:
 7390    F8:231C             			ds	4
 7391    F8:2320             	__check_BG_end:
 7392    F8:2320             	__check_WALL_TR_end:
 7393    F8:2320             	__check_WALL_TL_end:
 7394    F8:2320             	__check_WALL_BR_end:
 7395    F8:2320             	__check_WALL_BL_end:
 7396    F8:2320             	__check_FLOOR_R_end:
 7397    F8:2320             	__check_FLOOR_L_end:
 7398    F8:2320             	__check_LADDER_end:
 7399    F8:2320             	__recenter_CAMERA_end:
 7400                        	
 7401    F8:2320             	__bss_init:
 7402                        	
 7403    F8:2320             	__heap_start:
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-final.asm
    5                        	;
    6                        	; PCEAS auto-includes this file at the end of every pass in HuCC or SDCC.
    7                        	;
    8                        	; Copyright John Brandwood 2024.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; This is used to select which assembly-language library files to include in
   18                        	; a HuCC project, using labels defined in the compiler's header files.
   19                        	;
   20                        	; ***************************************************************************
   21                        	; ***************************************************************************
   22                        	
   23                        			; Allow projects to customize what is included at the end
   24                        			; of a pass without replacing the entire "hucc-final.asm".
   25                        	
   26               E309     			.code
   27               0000     			.bank	CORE_BANK
   28               E309     			.page	CORE_PAGE
   29                        	
                             #[3]   "..\..\..\include\hucc\hucc-final-extra.asm"
   30                        			include	"hucc-final-extra.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-final-extra.asm
    5                        	;
    6                        	; hucc-final.asm includes this file at the end of every pass in HuCC or SDCC.
    7                        	;
    8                        	; Copyright John Brandwood 2024.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; This is used to select which assembly-language library files to include in
   18                        	; a HuCC project, using labels defined in the compiler's header files.
   19                        	;
   20                        	; ***************************************************************************
   21                        	; ***************************************************************************
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   31                        	
   32                        			; Libraries required for basic functionality.
   33                        	
   34               E309     			.code
   35               0000     			.bank	CORE_BANK
   36               E309     			.page	CORE_PAGE
   37                        	
                             #[3]   "..\..\..\include\hucc\common.asm"
   38                        			include	"common.asm"		; Common helpers.
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; common.asm
    5                        	;
    6                        	; Small, generic, PCE subroutines that are commonly useful when developing.
    7                        	;
    8                        	; These should be located in permanently-accessible memory!
    9                        	;
   10                        	; Copyright John Brandwood 2021-2024.
   11                        	;
   12                        	; Distributed under the Boost Software License, Version 1.0.
   13                        	; (See accompanying file LICENSE_1_0.txt or copy at
   14                        	;  http://www.boost.org/LICENSE_1_0.txt)
   15                        	;
   16                        	; ***************************************************************************
   17                        	; ***************************************************************************
   18                        	
   19                        	
   20                        	
   21                        	; ***************************************************************************
   22                        	; ***************************************************************************
   23                        	;
   24                        	; Wait for the next VBLANK IRQ.
   25                        	;
   26                        	
   27    00:E309  AD 41 22   	wait_vsync:	lda	irq_cnt			; System Card variable, changed
   28    00:E30C  CD 41 22   	.loop:		cmp	irq_cnt			; every VBLANK interrupt.
   29    00:E30F  F0 FB      			beq	.loop
   30               0001     		.ifdef	HUCC
   31    00:E311  8D EB 22   			sta	old_cnt			; Remember the frame count.
   32                        		.endif
   33    00:E314  60         			rts
   34                        	
   35                        	
   36                        	
   37                        	; ***************************************************************************
   38                        	; ***************************************************************************
   39                        	;
   40                        	; Delay for the next Y VBLANK IRQs.
   41                        	;
   42                        	
   43               0001     		.ifdef	HUCC
   44    00:E315             	_vsync		.alias	wait_vsync
   45                        	
   46    00:E315  AD 41 22   	_vsync.1:	lda	irq_cnt			; HuCC's vsync(n) was defined
   47    00:E318  38         			sec				; as frames from the previous
   48    00:E319  ED EB 22   			sbc	old_cnt			; vsync() call, 1 to 255.
   49    00:E31C  38         			sec
   50    00:E31D  E5 F8      			sbc	<_al
   51    00:E31F  90 02      			bcc	!+
   52    00:E321  A9 FF      			lda	#$FF
   53    00:E323  49 FF      	!:		eor	#$FF
   54    00:E325  1A         			inc	a
   55    00:E326  A8         			tay
   56                        		.endif
   57                        	
   58    00:E327  44 E0      	wait_nvsync:	bsr	wait_vsync		; # of VBLANK IRQs to wait in
   59    00:E329  88         			dey				; the Y register.
   60    00:E32A  D0 FB      			bne	wait_nvsync
   61    00:E32C  60         			rts
   62                        	
   63                        	
   64                        	
   65               0000     		.ifndef	HUCC
  101                        		.endif
  102                        	
  103                        	
  104                        	
  105                        	; ***************************************************************************
  106                        	; ***************************************************************************
  107                        	;
  108                        	; Map the _bp data far-pointer into MPR3 (& MPR4).
  109                        	;
  110                        	; Because the 16KB RAM region at $2000-$5FFF is composed of two separate
  111                        	; banks, with the 2nd bank having no specific relation to the 1st, there
  112                        	; is no way to deal with a bank-increment, so do not map that region.
  113                        	;
  114                        	; N.B. Library code relies on this preserving X and V!
  115                        	;
  116                        	
  117    00:E32D  98         	map_bp_to_mpr3:	tya				; Put bank into MPR3.
  118    00:E32E  F0 0A      			beq	!+
  119    00:E330  53 08      			tam3
  120    00:E332  A5 ED      			lda.h	<_bp			; Do not remap a ptr to RAM,
  121    00:E334  29 1F      			and	#$1F			; Remap ptr to MPR3.
  122    00:E336  09 60      			ora	#$60
  123    00:E338  85 ED      			sta.h	<_bp
  124    00:E33A  60         	!:		rts
  125                        	
  126    00:E33B  98         	map_bp_to_mpr34:tya				; Put bank into MPR3.
  127    00:E33C  F0 0D      			beq	!+
  128    00:E33E  53 08      			tam3
  129    00:E340  1A         			inc	a			; Put next into MPR4.
  130    00:E341  53 10      			tam4
  131    00:E343  A5 ED      			lda.h	<_bp			; Do not remap a ptr to RAM,
  132    00:E345  29 1F      			and	#$1F			; Remap ptr to MPR3.
  133    00:E347  09 60      			ora	#$60
  134    00:E349  85 ED      			sta.h	<_bp
  135    00:E34B  60         	!:		rts
  136                        	
  137                        	
  138                        	
  139                        	; ***************************************************************************
  140                        	; ***************************************************************************
  141                        	;
  142                        	; Increment the hi-byte of _bp and change TMA3 if necessary.
  143                        	;
  144                        	; N.B. Library code relies on this preserving A,X,Y and V!
  145                        	;
  146                        	
  147    00:E34C  E6 ED      	inc.h_bp_mpr3:	inc.h	<_bp			; Increment hi-byte of _bp.
  148    00:E34E  10 0B      			bpl	!+			; OK if within MPR0-MPR3.
  149    00:E350  48         			pha				; Increment the bank in MPR3,
  150    00:E351  43 08      			tma3				; usually when pointer moves
  151    00:E353  1A         			inc	a			; from $7FFF -> $8000.
  152    00:E354  53 08      			tam3
  153    00:E356  A9 60      			lda	#$60
  154    00:E358  85 ED      			sta.h	<_bp
  155    00:E35A  68         			pla
  156    00:E35B  60         	!:		rts
  157                        	
  158                        	
  159                        	
  160                        	; ***************************************************************************
  161                        	; ***************************************************************************
  162                        	;
  163                        	; Increment the hi-byte of _bp and change TMA3 and TMA4 if necessary.
  164                        	;
  165                        	; N.B. Library code relies on this preserving A,X,Y and V!
  166                        	;
  167                        	
  168    00:E35C  E6 ED      	inc.h_bp_mpr34:	inc.h	<_bp			; Increment hi-byte of _bp.
  169    00:E35E  10 0D      			bpl	!+			; OK if within MPR0-MPR3.
  170    00:E360  48         			pha				; Increment the bank in MPR3,
  171    00:E361  43 10      			tma4				; usually when pointer moves
  172    00:E363  53 08      			tam3				; from $7FFF -> $8000.
  173    00:E365  1A         			inc	a
  174    00:E366  53 10      			tam4
  175    00:E368  A9 60      			lda	#$60
  176    00:E36A  85 ED      			sta.h	<_bp
  177    00:E36C  68         			pla
  178    00:E36D  60         	!:		rts
  179                        	
  180                        	
  181                        	
  182                        	; ***************************************************************************
  183                        	; ***************************************************************************
  184                        	;
  185                        	; Put the _di data pointer into the VDC's MARR or MAWR register.
  186                        	;
  187                        	; N.B. Library code relies on this preserving Y!
  188                        	;
  189                        	
  190               0001     		.if	SUPPORT_SGX
  191    00:E36E  A2 10      	sgx_di_to_marr:	ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  192    00:E370  F0         			db	$F0			; Turn "clx" into a "beq".
  193                        		.endif
  194                        	
  195    00:E371  82         	vdc_di_to_marr:	clx				; Offset to PCE VDC.
  196                        	
  197    00:E372  A9 01      	set_di_to_marr	lda	#VDC_MARR		; Set VDC or SGX destination
  198    00:E374  95 F7      			sta	<vdc_reg, x		; address.
  199    00:E376  9D 00 02   			sta	VDC_AR, x
  200    00:E379  80 09      			bra	!+
  201                        	
  202               0001     		.if	SUPPORT_SGX
  203    00:E37B  A2 10      	sgx_di_to_mawr:	ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  204    00:E37D  F0         			db	$F0			; Turn "clx" into a "beq".
  205                        		.endif
  206                        	
  207    00:E37E  82         	vdc_di_to_mawr:	clx				; Offset to PCE VDC.
  208                        	
  209    00:E37F             	set_di_to_mawr;	lda	#VDC_MAWR		; Set VDC or SGX destination
  210    00:E37F  74 F7      			stz	<vdc_reg, x		; address.
  211    00:E381  9E 00 02   			stz	VDC_AR, x
  212                        	
  213    00:E384  A5 F0      	!:		lda	<_di + 0
  214    00:E386  9D 02 02   			sta	VDC_DL, x
  215    00:E389  A5 F1      			lda	<_di + 1
  216    00:E38B  9D 03 02   			sta	VDC_DH, x
  217                        	
  218    00:E38E  A9 02      			lda	#VDC_VWR		; Select the VRR/VWR data
  219    00:E390  95 F7      			sta	<vdc_reg, x		; register.
  220    00:E392  9D 00 02   			sta	VDC_AR, x
  221    00:E395  60         			rts
  222                        	
  223                        	
  224                        	
  225                        	; ***************************************************************************
  226                        	; ***************************************************************************
  227                        	;
  228                        	; Increment the hi-byte of _di and change TMA4 if necessary.
  229                        	;
  230                        	
  231               0000     		.if	0				; Save memory, for now.
  250                        		.endif
  251                        	
  252                        	
  253                        	
  254                        	; ***************************************************************************
  255                        	; ***************************************************************************
  256                        	;
  257                        	; Far-call a function in another bank.
  258                        	;
  259                        	; This is a potential alternative procedure call trampoline that uses only 10
  260                        	; bytes of common memory per bank of procedures, instead of 10 bytes for each
  261                        	; individual procedure call, BUT it uses the X register as a procedure-index,
  262                        	; and it needs a table of addresses at the end of every procedure bank.
  263                        	;
  264                        	; To use this ...
  265                        	;
  266                        	;  ldx #procedure-index
  267                        	;  jsr far_call_nn
  268                        	;
  269                        	; The called .PROC routine must exit with "jmp leave_proc" and not "rts".
  270                        	;
  271                        	; leave_proc:	pla
  272                        	;		tam6
  273                        	;		tya
  274                        	;		rts
  275                        	;
  276                        	; N.B. This costs 21 cycles vs 18 for the .newproc trampoline code (when you
  277                        	;      exclude preserving YA in zero-page).
  278                        	;
  279                        	; N.B. This was written as an excerise, and definitely not for HuC!
  280                        	;
  281                        	
  282               0000     		.if	0
  295                        		.endif					; 21
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
                             #[3]   "..\..\..\include\hucc\vce.asm"
   39                        			include	"vce.asm"		; Useful VCE routines.
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; vce.asm
    5                        	;
    6                        	; Useful routines for operating the HuC6260 Video Color Encoder
    7                        	;
    8                        	; These should be located in permanently-accessible memory!
    9                        	;
   10                        	; Copyright John Brandwood 2021-2025.
   11                        	;
   12                        	; Distributed under the Boost Software License, Version 1.0.
   13                        	; (See accompanying file LICENSE_1_0.txt or copy at
   14                        	;  http://www.boost.org/LICENSE_1_0.txt)
   15                        	;
   16                        	; ***************************************************************************
   17                        	; ***************************************************************************
   18                        	
   19                        	;
   20                        	; Configure Library ...
   21                        	;
   22                        	
   23               0000     		.ifndef VCE_SPLIT_CROSS
   25                        		.endif
   26                        	
   27                        	
   28                        	
   29                        	; ***************************************************************************
   30                        	; ***************************************************************************
   31                        	;
   32                        	; xfer_palettes - Update the VCE with the queued palettes changes.
   33                        	;
   34                        	; This is normally called in a developer's vsync_hook handler, but it can
   35                        	; be called manually as long as it will not also be called in an interrupt.
   36                        	;
   37                        	; The queued transfers are split into 32-byte chunks so that an HSYNC and/or
   38                        	; TIMER IRQ is not delayed for too long during the VBLANK.
   39                        	;
   40                        	
   41    00:E396  A9 80      	xfer_palettes:	lda	#$80			; Acquire color mutex to avoid
   42    00:E398  0C 20 23   			tsb	color_mutex		; conflict with a delayed VBL.
   43    00:E39B  30 5F      			bmi	.busy
   44                        	
   45    00:E39D  AC 21 23   			ldy	color_queue_r		; Are there any palette xfers
   46    00:E3A0  CC 22 23   			cpy	color_queue_w		; queued up?
   47    00:E3A3  F0 54      			beq	.exit
   48                        	
   49    00:E3A5  08         			php				; Enable interrupts so that an
   50    00:E3A6  58         			cli				; HSYNC or TIMER IRQ can occur.
   51                        	
   52    00:E3A7  43 08      			tma3				; Preserve MPR3 & MPR4 because
   53    00:E3A9  48         			pha				; this normally runs in the
   54    00:E3AA  43 10      			tma4				; VBLANK IRQ.
   55    00:E3AC  48         			pha
   56                        	
   57               0001     		.if	!CDROM
   58    00:E3AD  73 02 E4 86			tii	.tia_func, color_tia, 8 ; Copy TIA to RAM.
         00:E3B1  22 08 00    
   59                        		.endif
   60                        	
   61    00:E3B4  B9 23 23   	.next_item:	lda	color_index, y		; Get the next set of palettes
   62    00:E3B7  0A         			asl	a			; from the queue.
   63    00:E3B8  0A         			asl	a
   64    00:E3B9  0A         			asl	a
   65    00:E3BA  0A         			asl	a
   66    00:E3BB  8D 02 04   			sta	VCE_CTA + 0
   67    00:E3BE  62         			cla
   68    00:E3BF  2A         			rol	a
   69    00:E3C0  8D 03 04   			sta	VCE_CTA + 1
   70                        	
   71    00:E3C3  BE 2B 23   			ldx	color_count,y		; How many palettes to xfer?
   72                        	
   73    00:E3C6  B9 43 23   			lda	color_bank, y		; Map data into MPR3 & MPR4.
   74    00:E3C9  53 08      			tam3
   75    00:E3CB  1A         			inc	a
   76    00:E3CC  53 10      			tam4
   77    00:E3CE  B9 3B 23   			lda	color_addr_h, y
   78    00:E3D1  8D 88 22   			sta	.ram_tia + 2
   79    00:E3D4  B9 33 23   			lda	color_addr_l, y
   80    00:E3D7  8D 87 22   	.palette_loop:	sta	.ram_tia + 1
   81                        	
   82               0000     		.if	CDROM
   84                        		.else
   85    00:E3DA  20 86 22   			jsr	.ram_tia		; Copy 32-bytes to the VCE.
   86                        		.endif
   87                        	
   88    00:E3DD  18         			clc				; Increment the data ptr to
   89    00:E3DE  69 20      			adc	#32			; the next 32-byte palette.
   90    00:E3E0  B0 1B      			bcs	.next_page
   91                        	
   92    00:E3E2  CA         	.next_palette:	dex				; Any palettes left to xfer?
   93    00:E3E3  D0 F2      			bne	.palette_loop
   94                        	
   95    00:E3E5  C8         			iny				; Increment the queue index.
   96    00:E3E6  98         			tya
   97    00:E3E7  29 07      			and	#7
   98    00:E3E9  A8         			tay
   99                        	
  100    00:E3EA  CC 22 23   			cpy	color_queue_w		; Any more items in the queue?
  101    00:E3ED  D0 C5      			bne	.next_item
  102    00:E3EF  8C 21 23   			sty	color_queue_r		; Signal the queue is empty.
  103                        	
  104    00:E3F2  68         			pla				; Restore MPR3 & MPR4.
  105    00:E3F3  53 10      			tam4
  106    00:E3F5  68         			pla
  107    00:E3F6  53 08      			tam3
  108                        	
  109    00:E3F8  28         			plp				; Restore interrupt state.
  110                        	
  111    00:E3F9  9C 20 23   	.exit:		stz	color_mutex		; Release color mutex.
  112                        	
  113    00:E3FC  60         	.busy:		rts
  114                        	
  115    00:E3FD  EE 88 22   	.next_page:	inc	.ram_tia + 2
  116    00:E400  80 E0      			bra	.next_palette
  117                        	
  118               0001     		.if	!CDROM
  119               2286     	.ram_tia	=	color_tia		; Use a TIA in RAM.
  120                        	
  121    00:E402  E3 00 00 04	.tia_func:	tia	0, VCE_CTW, 32
         00:E406  04 20 00    
  122    00:E409  60         			rts
  123                        		.endif	!CDROM
  124                        	
  125               2320     			.bss
  126                        	
  127    F8:2320             	color_mutex:	ds	1			; Mutex for VCE changes.
  128    F8:2321             	color_queue_r:	ds	1			; Ring buffer read index.
  129    F8:2322             	color_queue_w:	ds	1			; Ring buffer write index.
  130    F8:2323             	color_index:	ds	8			; Ring buffer - Palette index.
  131    F8:232B             	color_count:	ds	8			; Ring buffer - Palette count.
  132    F8:2333             	color_addr_l:	ds	8			; Ring buffer - Data Ptr (lo).
  133    F8:233B             	color_addr_h:	ds	8			; Ring buffer - Data Ptr (hi).
  134    F8:2343             	color_bank:	ds	8			; Ring buffer - Data Ptr (bank).
  135                        	
  136               E40A     			.code
  137                        	
  138                        	
  139                        	
  140                        	; ***************************************************************************
  141                        	; ***************************************************************************
  142                        	;
  143                        	; load_palettes - Queue a set of palettes to upload to the VCE next VBLANK.
  144                        	;
  145                        	; Args: _al = Palette index (0..15 for BG, 16..31 for SPR).
  146                        	; Args: _ah = Palette count (1..32).
  147                        	; Args: _bp = Pointer to palette data.
  148                        	; Args:   Y = Bank to map into MPR3 & MPR4, or zero to leave unchanged.
  149                        	;
  150                        	; N.B. Y==0 is only useful if the palette data is permanently mapped!
  151                        	;
  152                        	
  153                        	load_palettes	.proc
  179                        			.endp
  180                        	
  181                        	
  182                        	
  183                        	; ***************************************************************************
  184                        	; ***************************************************************************
  185                        	;
  186                        	; clear_vce - Clear all 512 of the VCE's palette entries.
  187                        	;
  188                        	
  189    02:C860             	clear_vce	.proc
  190                        	
  191    02:C860  08         			php				; Disable interrupts to avoid
  192    02:C861  78         			sei				; VBLANK palette upload.
  193    02:C862  C2         			cly
  194    02:C863  9C 02 04   			stz	VCE_CTA+0		; Set VCE write address.
  195    02:C866  9C 03 04   			stz	VCE_CTA+1
  196    02:C869  9C 04 04   	.loop:		stz	VCE_CTW+0		; Set lo-byte of color.
  197    02:C86C  9C 05 04   			stz	VCE_CTW+1		; Write 1 color value.
  198    02:C86F  9C 04 04   			stz	VCE_CTW+0		; Set lo-byte of color.
  199    02:C872  9C 05 04   			stz	VCE_CTW+1		; Write 1 color value.
  200    02:C875  88         			dey
  201    02:C876  D0 F1      			bne	.loop
  202    02:C878  28         			plp
  203                        	
  204                        			leave				; All done, phew!
         02:C879  4C EF FF   			jmp	leave_proc
  205                        	
  206                        			.endp
  207                        	
  208               0001     		.ifdef	HUCC
  209    00:E40A             			.alias	_clear_palette		= clear_vce
  210                        		.endif
  211                        	
  212                        	
  213                        	
  214                        	; ***************************************************************************
  215                        	; ***************************************************************************
  216                        	;
  217                        	; read_palettes - Read palettes from the VCE into a buffer in RAM.
  218                        	;
  219                        	; Args: _al = Palette index (0..15 for BG, 16..31 for SPR).
  220                        	; Args: _ah = Palette count (1..32).
  221                        	; Args: _di = Pointer to palette data destination in RAM.
  222                        	;
  223                        	; The transfer is split into 32-byte chunks so that an HSYNC and/or TIMER
  224                        	; IRQ is not delayed for too long while executing.
  225                        	;
  226                        	
  227                        	read_palettes	.proc
  281                        			.endp
  282                        	
  283               0001     		.ifdef	HUCC
  284    00:E40A             			.alias	_read_palette.3		= read_palettes
  285                        		.endif
  286                        	
  287                        	
  288                        	
  289                        	vce_fade_funcs	.procgroup
  516                        			.endprocgroup
  517                        	
  518                        	
  519                        	
  520                        	; ***************************************************************************
  521                        	; ***************************************************************************
  522                        	;
  523                        	; cross_fade_to - Cross fade a palette in RAM towards a reference palette.
  524                        	;
  525                        	; Args: _al = Number of colors (1..256).
  526                        	; Args: _di = Pointer to faded palette destination in RAM.
  527                        	; Args: _bp = Pointer to reference palette data.
  528                        	; Args:   Y = Bank to map into MPR3 & MPR4, or zero to leave unchanged.
  529                        	;
  530                        	; N.B. Y==0 is only useful if the reference palette data is already mapped!
  531                        	;
  532                        	; N.B. This only updates the palette in RAM by 1 RGB step, so it will need
  533                        	;      to be called 7 times to guarantee that you've reached the target.
  534                        	;
  535                        	
  536                        	cross_fade_to	.proc
  658                        			.endp
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
                             #[3]   "..\..\..\include\hucc\vdc.asm"
   40                        			include	"vdc.asm"		; Useful VDC routines.
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; vdc.asm
    5                        	;
    6                        	; Useful routines for operating the HuC6270 Video Display Controller.
    7                        	;
    8                        	; These should be located in permanently-accessible memory!
    9                        	;
   10                        	; Copyright John Brandwood 2021-2025.
   11                        	;
   12                        	; Distributed under the Boost Software License, Version 1.0.
   13                        	; (See accompanying file LICENSE_1_0.txt or copy at
   14                        	;  http://www.boost.org/LICENSE_1_0.txt)
   15                        	;
   16                        	; ***************************************************************************
   17                        	; ***************************************************************************
   18                        	
   19                        	;
   20                        	; Include dependancies ...
   21                        	;
   22                        	
   23                        			include "common.asm"		; Common helpers.
   24                        			include "vce.asm"		; Useful VCE routines.
   25                        	
   26                        	;
   27                        	; Choose how much to transfer to VRAM in a single chunk, normally 16-bytes.
   28                        	;
   29                        	; The cycle timings for a TIA-to-VRAM depend upon how the VDC's MWR CPU slots
   30                        	; line up to the CPU's writes, and how long the VDC has to halt the CPU while
   31                        	; it fetches the next scanline's sprite data.
   32                        	;
   33                        	; These cycle timings are for 0 sprites (best) and 16 sprites (worst) ...
   34                        	;
   35                        	; 32-byte TIA takes 270..364 cycles in 5MHz, 242..312 cycles in 7MHz. (8.44 cycles-per-byte best-case at 5MHz.)
   36                        	; 24-byte TIA takes 210..298 cycles in 5MHz, 186..256 cycles in 7MHz. (8.75 cycles-per-byte best-case at 5MHz.)
   37                        	; 16-byte TIA takes 142..234 cycles in 5MHz, 128..200 cycles in 7MHz. (8.88 cycles-per-byte best-case at 5MHz.)
   38                        	;
   39                        	; If a user wishes to be able to put RCR interrupts one-line-after-another,
   40                        	; then it is only safe to use 32-byte chunks if there are no TIMER or IRQ2
   41                        	; interrupts ... which is almost-impossible to rely on in library code!
   42                        	;
   43                        	
   44               0000     		.ifndef	VRAM_XFER_SIZE
   46                        		.endif
   47                        	
   48                        	;
   49                        	; Enable BG & SPR layers, and RCR interrupt.
   50                        	;
   51                        	
   52    00:E40A  A9 04      	set_rcron:	lda	#$04			; Enable RCR interrupt.
   53    00:E40C  80 0A      			bra	!+
   54                        	
   55    00:E40E  A9 80      	set_bgon:	lda	#$80			; Enable BG layer.
   56    00:E410  80 06      			bra	!+
   57                        	
   58    00:E412  A9 40      	set_spron:	lda	#$40			; Enable SPR layer.
   59    00:E414  80 02      			bra	!+
   60                        	
   61    00:E416  A9 C0      	set_dspon:	lda	#$C0			; Enable BG & SPR layers.
   62                        	
   63    00:E418  04 F3      	!:		tsb	<vdc_crl		; These take effect when
   64               0001     		.if	SUPPORT_SGX			; the next VBLANK occurs.
   65    00:E41A  04 03      			tsb	<sgx_crl
   66                        		.endif
   67    00:E41C  60         			rts
   68                        	
   69                        	;
   70                        	; Disable BG & SPR layers, and RCR interrupt.
   71                        	;
   72                        	
   73    00:E41D  A9 04      	set_rcroff:	lda	#$04			; Disable RCR interrupt.
   74    00:E41F  80 0A      			bra	!+
   75                        	
   76    00:E421  A9 80      	set_bgoff:	lda	#$80			; Disable BG layer.
   77    00:E423  80 06      			bra	!+
   78                        	
   79    00:E425  A9 40      	set_sproff:	lda	#$40			; Disable SPR layer.
   80    00:E427  80 02      			bra	!+
   81                        	
   82    00:E429  A9 C0      	set_dspoff:	lda	#$C0			; Disable BG & SPR layers.
   83                        	
   84    00:E42B  14 F3      	!:		trb	<vdc_crl		; These take effect when
   85               0001     		.if	SUPPORT_SGX			; the next VBLANK occurs.
   86    00:E42D  14 03      			trb	<sgx_crl
   87                        		.endif
   88    00:E42F  60         			rts
   89                        	
   90                        	
   91                        	
   92                        	; ***************************************************************************
   93                        	; ***************************************************************************
   94                        	;
   95                        	; Put the _di data pointer into the VDC's MARR or MAWR register.
   96                        	;
   97                        	; N.B. Library code relies on this preserving Y!
   98                        	;
   99                        	; Args: _di + 0 = BAT X coordinate.
  100                        	; Args: _di + 1 = BAT Y coordinate.
  101                        	;
  102                        	; Here because it relies on the "vdc_bat_width" that is defined in this file.
  103                        	;
  104                        	
  105               0001     		.if	SUPPORT_SGX
  106    00:E430  A2 10      	sgx_di_xy_marr:	ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  107    00:E432  F0         			db	$F0			; Turn "clx" into a "beq".
  108                        		.endif
  109                        	
  110    00:E433  82         	vdc_di_xy_marr:	clx				; Offset to PCE VDC.
  111                        	
  112    00:E434  62         	set_di_xy_mawr:	cla
  113    00:E435  3C 4B 23   			bit	vdc_bat_width, x	; Set by set_bat_size().
  114    00:E438  30 08      			bmi	.w128
  115    00:E43A  70 03      			bvs	.w64
  116    00:E43C  46 F1      	.w32:		lsr.h	<_di
  117    00:E43E  6A         			ror	a
  118    00:E43F  46 F1      	.w64:		lsr.h	<_di
  119    00:E441  6A         			ror	a
  120    00:E442  46 F1      	.w128:		lsr.h	<_di
  121    00:E444  6A         			ror	a
  122    00:E445  05 F0      			ora.l	<_di
  123    00:E447  85 F0      			sta.l	<_di
  124    00:E449  4C 7F E3   			jmp	set_di_to_mawr		; In "common.asm".
  125                        	
  126                        	
  127                        	
  128    01:DFBA             	vdc_clear_vram	.procgroup			; These routines share code!
  129                        	
  130                        	; ***************************************************************************
  131                        	; ***************************************************************************
  132                        	;
  133                        	; clear_vram_sgx - Clear all of VRAM in the SGX VDC.
  134                        	; clear_vram_vdc - Clear all of VRAM in the PCE VDC.
  135                        	;
  136                        	; Args: _ax = word value to write to the BAT.
  137                        	; Args: _bl = hi-byte of size of BAT (# of words).
  138                        	;
  139                        	
  140               0001     		.if	SUPPORT_SGX
  141    01:DFBA             	clear_vram_sgx	.proc
  142                        	
  143    01:DFBA  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  144    01:DFBC  F0         			db	$F0			; Turn "clx" into a "beq".
  145                        	
  146    01:DFBD             			.ref	clear_vram_vdc		; Need clear_vram_vdc
  147                        			.endp
  148                        		.endif
  149                        	
  150    01:DFBD             	clear_vram_vdc	.proc
  151                        	
  152    01:DFBD  82         			clx				; Offset to PCE VDC.
  153                        	
  154    01:DFBE  20 87 FE   	clear_vram_x:	call	clear_bat_x		; Clear the BAT.
  155                        	
  156    01:DFC1  A9 80      			lda	#$80			; Xvert hi-byte of # words
  157    01:DFC3  38         			sec				; in screen to loop count.
  158    01:DFC4  E5 FA      			sbc	<_bl
  159    01:DFC6  4A         			lsr	a
  160                        	
  161                        	;		cly				; Clear the rest of VRAM.
  162    01:DFC7  9E 02 02   			stz	VDC_DL, x
  163    01:DFCA  9E 03 02   	.clr_loop:	stz	VDC_DH, x		; Seperate writes to minimize
  164    01:DFCD  88         			dey				; VDC MWR penalty.
  165    01:DFCE  9E 03 02   			stz	VDC_DH, x
  166    01:DFD1  D0 F7      			bne	.clr_loop
  167    01:DFD3  3A         			dec	a
  168    01:DFD4  D0 F4      			bne	.clr_loop
  169                        	
  170                        			leave				; All done, phew!
         01:DFD6  4C EF FF   			jmp	leave_proc
  171                        	
  172                        			.endp
  173                        	
  174                        	
  175                        	
  176                        	; ***************************************************************************
  177                        	; ***************************************************************************
  178                        	;
  179                        	; clear_bat_sgx - Clear the BAT in the SGX VDC.
  180                        	; clear_bat_vdc - Clear the BAT in the PCE VDC.
  181                        	;
  182                        	; Args: _ax = word value to write to the BAT.
  183                        	; Args: _bl = hi-byte of size of BAT (# of words).
  184                        	;
  185                        	
  186               0001     		.if	SUPPORT_SGX
  187                        	clear_bat_sgx	.proc
  193                        			.endp
  194                        		.endif
  195                        	
  196    01:DFD9             	clear_bat_vdc	.proc
  197                        	
  198    01:DFD9  82         			clx				; Offset to PCE VDC.
  199                        	
  200    01:DFDA             			.ref	clear_bat_x		; Need clear_bat_x
  201                        			.endp
  202                        	
  203    01:DFDA             	clear_bat_x	.proc				; HuCC uses this entry point.
  204                        	
  205    01:DFDA  64 F0      			stz	<_di + 0		; Set VDC or SGX destination
  206    01:DFDC  64 F1      			stz	<_di + 1		; address.
  207    01:DFDE  20 7F E3   			jsr	set_di_to_mawr
  208                        	
  209    01:DFE1  A5 FA      			lda	<_bl			; Xvert hi-byte of # words
  210    01:DFE3  4A         			lsr	a			; in screen to loop count.
  211                        	
  212    01:DFE4  C2         			cly
  213    01:DFE5  48         	.bat_loop:	pha
  214    01:DFE6  A5 F8      			lda	<_ax + 0
  215    01:DFE8  9D 02 02   			sta	VDC_DL, x
  216    01:DFEB  A5 F9      			lda	<_ax + 1
  217    01:DFED  9D 03 02   	.bat_pair:	sta	VDC_DH, x		; Seperate writes to minimize
  218    01:DFF0  88         			dey				; VDC MWR penalty.
  219    01:DFF1  9D 03 02   			sta	VDC_DH, x
  220    01:DFF4  D0 F7      			bne	.bat_pair
  221                        	
  222    01:DFF6  68         			pla
  223    01:DFF7  3A         			dec	a
  224    01:DFF8  D0 EB      			bne	.bat_loop
  225                        	
  226                        			leave
         01:DFFA  4C EF FF   			jmp	leave_proc
  227                        	
  228                        			.endp
  229                        	
  230                        			.endprocgroup
  231                        	
  232                        	;
  233                        	;
  234                        	;
  235                        	
  236    01:DEDB             	vdc_set_mode	.procgroup			; These routines share code!
  237                        	
  238                        	; ***************************************************************************
  239                        	; ***************************************************************************
  240                        	;
  241                        	; set_mode_sgx - Set video hardware registers from a data table.
  242                        	; set_mode_vdc - Set video hardware registers from a data table.
  243                        	;
  244                        	; Args: _bp, Y = _farptr to data table mapped into MPR3 & MPR4.
  245                        	;
  246                        	
  247               0001     		.if	SUPPORT_SGX
  248    01:DEDB             	set_mode_sgx	.proc
  249                        	
  250    01:DEDB  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  251    01:DEDD  F0         			db	$F0			; Turn "clx" into a "beq".
  252                        	
  253                        			.endp
  254                        		.endif
  255                        	
  256    01:DEDE             	set_mode_vdc	.proc
  257                        	
  258    01:DEDE  82         			clx				; Offset to PCE VDC.
  259                        	
  260    01:DEDF  F7 F8      			smb7	<_al			; Signal no set_bat_size() yet.
  261                        	
  262    01:DEE1  43 08      			tma3				; Preserve MPR3.
  263    01:DEE3  48         			pha
  264    01:DEE4  43 10      			tma4				; Preserve MPR4.
  265    01:DEE6  48         			pha
  266                        	
  267    01:DEE7  20 3B E3   			jsr	map_bp_to_mpr34		; Map data to MPR3 & MPR4.
  268                        	
  269    01:DEEA  08         			php				; Disable interrupts.
  270    01:DEEB  78         			sei
  271                        	
  272    01:DEEC  C2         			cly				; Table size is < 256 bytes.
  273                        	
  274    01:DEED  B1 EC      	.loop:		lda	[_bp], y		; Get the register #, +ve for
  275    01:DEEF  F0 46      			beq	.done			; VDC, -128 for VCE_CR.
  276    01:DEF1  10 0C      			bpl	.set_vdc_reg
  277                        	
  278                        			; Set the VCE_CR register.
  279                        	
  280    01:DEF3  C8         	.set_vce_cr:	iny
  281                        	
  282    01:DEF4  B1 EC      			lda	[_bp], y		; Get lo-byte of register.
  283    01:DEF6  C8         			iny
  284    01:DEF7  8D 44 22   			sta	vce_cr			; No SGX shadow for this!
  285    01:DEFA  8D 00 04   			sta	VCE_CR			; Set the VCE clock speed.
  286    01:DEFD  80 EE      			bra	.loop			; Do not set VDC_MWR reg bits!
  287                        	
  288                        			; Set a VDC register.
  289                        	
  290    01:DEFF  C8         	.set_vdc_reg:	iny
  291    01:DF00  9D 00 02   			sta	VDC_AR, x		; Set which VDC register.
  292                        	
  293    01:DF03  C9 05      			cmp	#VDC_CR			; CS if VDC_CR or higher.
  294    01:DF05  F0 14      			beq	.skip_cc
  295    01:DF07  18         			clc				; CC if not VDC_CR.
  296                        	
  297    01:DF08  49 09      			eor	#VDC_MWR		; Check if this the VDC_MWR
  298    01:DF0A  D0 0F      			bne	.skip_cc		; without changing CC.
  299                        	
  300    01:DF0C  B1 EC      			lda	[_bp], y		; Remember the BAT size so that
  301    01:DF0E  8D 42 22   			sta	vdc_mwr			; set_bat_size() can be called.
  302    01:DF11  4A         			lsr	a
  303    01:DF12  4A         			lsr	a
  304    01:DF13  4A         			lsr	a
  305    01:DF14  4A         			lsr	a
  306    01:DF15  85 F8      			sta	<_al
  307    01:DF17  C8         			iny
  308    01:DF18  C8         			iny
  309    01:DF19  80 D2      			bra	.loop
  310                        	
  311    01:DF1B  B1 EC      	.skip_cc:	lda	[_bp], y		; Get lo-byte of register.
  312    01:DF1D  C8         			iny
  313    01:DF1E  90 08      			bcc	.not_vdc_cr
  314                        	
  315               0001     		.if	SUPPORT_SGX
  316    01:DF20  E0 00      			cpx	#0			; Writing to the VDC or SGX?
  317    01:DF22  F0 02      			beq	.save_crl
  318    01:DF24  29 F7      			and	#$F7			; We only need 1 vblank IRQ!
  319                        		.endif
  320                        	
  321    01:DF26  95 F3      	.save_crl:	sta	<vdc_crl, x		; Save VDC_CR shadow register.
  322                        	
  323    01:DF28  9D 02 02   	.not_vdc_cr:	sta	VDC_DL, x		; Write to VDC.
  324                        	
  325    01:DF2B  B1 EC      			lda	[_bp], y		; Get hi-byte of register.
  326    01:DF2D  C8         			iny
  327    01:DF2E  9D 03 02   			sta	VDC_DH, x
  328    01:DF31  90 BA      			bcc	.loop			; Next register, please!
  329                        	
  330    01:DF33  95 F4      			sta	<vdc_crh, x		; Save VDC_CR shadow register.
  331                        	
  332    01:DF35  80 B6      			bra	.loop			; Next register, please!
  333                        	
  334                        			; All registers set!
  335                        	
  336    01:DF37  A9 02      	.done:		lda	#VDC_VWR		; Leave with VDC_VWR set.
  337    01:DF39  95 F7      			sta	<vdc_reg, x
  338                        	;		lda	<vdc_reg, x		; Restore previous VDC_AR from
  339    01:DF3B  9D 00 02   			sta	VDC_AR, x		; the shadow variable.
  340                        	
  341    01:DF3E  28         			plp				; Restore interrupts.
  342                        	
  343    01:DF3F  68         			pla				; Restore MPR4.
  344    01:DF40  53 10      			tam4
  345    01:DF42  68         			pla				; Restore MPR3.
  346    01:DF43  53 08      			tam3
  347                        	
  348    01:DF45  7F F8 07   			bbr7	<_al, set_bat_size	; Update if BAT size changed.
  349                        	
  350                        			leave				; All done, phew!
         01:DF48  4C EF FF   			jmp	leave_proc
  351                        	
  352    01:DF4B             			.ref	set_bat_vdc
  353                        			.endp
  354                        	
  355                        	
  356                        	
  357                        	; ***************************************************************************
  358                        	; ***************************************************************************
  359                        	;
  360                        	; set_bat_sgx - Change the SGX BAT size and initialize variables based on it.
  361                        	; set_bat_vdc - Change the PCE BAT size and initialize variables based on it.
  362                        	;
  363                        	; Args: _al = new size (0-7).
  364                        	;
  365                        	; (VDC_MWR_32x32  >> 4) or in HuCC, SCR_SIZE_32x32.
  366                        	; (VDC_MWR_32x64  >> 4) or in HuCC, SCR_SIZE_32x64.
  367                        	; (VDC_MWR_64x32  >> 4) or in HuCC, SCR_SIZE_64x32.
  368                        	; (VDC_MWR_64x64  >> 4) or in HuCC, SCR_SIZE_64x64.
  369                        	; (VDC_MWR_128x32 >> 4) or in HuCC, SCR_SIZE_128x32.
  370                        	; (VDC_MWR_128x64 >> 4) or in HuCC, SCR_SIZE_128x64.
  371                        	;
  372                        	
  373               0001     		.if	SUPPORT_SGX
  374    01:DF4B             	set_bat_sgx	.proc
  375                        	
  376    01:DF4B  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  377    01:DF4D  F0         			db	$F0			; Turn "clx" into a "beq".
  378                        	
  379    01:DF4E             			.ref	set_bat_vdc
  380                        			.endp
  381                        		.endif
  382                        	
  383    01:DF4E             	set_bat_vdc	.proc
  384                        	
  385    01:DF4E  82         			clx				; Offset to PCE VDC.
  386                        	
  387    01:DF4F  A5 F8      	set_bat_size:	lda	<_al			; Get BAT size value.
  388    01:DF51  29 07      			and	#7			; Sanitize screen size value.
  389    01:DF53  A8         			tay
  390    01:DF54  0A         			asl	a			; Put it in bits 4..6.
  391    01:DF55  0A         			asl	a
  392    01:DF56  0A         			asl	a
  393    01:DF57  0A         			asl	a
  394    01:DF58  85 00      			sta	<__temp
  395                        	
  396    01:DF5A  B9 9A DF   			lda	.width, y
  397    01:DF5D  9D 4B 23   			sta	vdc_bat_width, x
  398    01:DF60  3A         			dec	a
  399    01:DF61  9D 4D 23   			sta	vdc_bat_x_mask, x
  400                        	
  401    01:DF64  B9 A2 DF   			lda	.height, y
  402    01:DF67  9D 4C 23   			sta	vdc_bat_height, x
  403    01:DF6A  3A         			dec	a
  404    01:DF6B  9D 4E 23   			sta	vdc_bat_y_mask, x
  405                        	
  406    01:DF6E  B9 AA DF   			lda	.limit, y
  407    01:DF71  9D 4F 23   			sta	vdc_bat_limit, x
  408                        	
  409    01:DF74  B9 B2 DF   			lda	.increment, y		; Put the VRAM increment for a
  410    01:DF77  95 F4      			sta	<vdc_crh, x		; line into vdc_crh for later.
  411                        	
  412    01:DF79  08         			php
  413    01:DF7A  78         			sei
  414                        	
  415    01:DF7B  A9 09      			lda	#VDC_MWR
  416    01:DF7D  9D 00 02   			sta	VDC_AR, x
  417                        	
  418    01:DF80  AD 42 22   			lda	vdc_mwr			; Get the MWR access width bits.
  419    01:DF83  29 8F      			and	#%10001111
  420    01:DF85  05 00      			ora	<__temp
  421               0001     		.if	SUPPORT_SGX
  422    01:DF87  E0 00      			cpx	#PCE_VDC_OFFSET		; This has no SGX shadow!
  423    01:DF89  D0 03      			bne	!+
  424                        		.endif
  425    01:DF8B  8D 42 22   			sta	vdc_mwr
  426    01:DF8E  9D 02 02   	!:		sta	VDC_DL, x
  427                        	
  428    01:DF91  B5 F7      			lda	<vdc_reg, x		; Restore previous VDC_AR from
  429    01:DF93  9D 00 02   			sta	VDC_AR, x		; the shadow variable.
  430                        	
  431    01:DF96  28         			plp
  432                        	
  433                        			leave
         01:DF97  4C EF FF   			jmp	leave_proc
  434                        	
  435    01:DF9A  20 40 80 80	.width:		db	$20,$40,$80,$80,$20,$40,$80,$80
         01:DF9E  20 40 80 80 
  436    01:DFA2  20 20 20 20	.height:	db	$20,$20,$20,$20,$40,$40,$40,$40
         01:DFA6  40 40 40 40 
  437    01:DFAA  03 07 0F 0F	.limit:		db	$03,$07,$0F,$0F,$07,$0F,$1F,$1F
         01:DFAE  07 0F 1F 1F 
  438    01:DFB2  08 10 18 18	.increment	db	$08,$10,$18,$18,$08,$10,$18,$18
         01:DFB6  08 10 18 18 
  439                        	
  440               234B     			.bss
  441                        	
  442                        	; **************
  443                        	; 16-bytes of VDC BAT information.
  444                        	;
  445                        	; N.B. MUST be 16-bytes before the SGX versions to use PCE_VDC_OFFSET.
  446                        	;
  447                        	; N.B. Declared inside this .proc so that they can be stripped if unused.
  448                        	
  449                        	; Initialized by set_bat_vdc.
  450    F8:234B             	vdc_bat_width:	ds	1	; $20, $40, $80
  451    F8:234C             	vdc_bat_height:	ds	1	; $20, $40
  452    F8:234D             	vdc_bat_x_mask:	ds	1	; $1F, $3F, $7F
  453    F8:234E             	vdc_bat_y_mask:	ds	1	; $1F, $3F
  454    F8:234F             	vdc_bat_limit:	ds	1	; (>$03FF), (>$07FF), (>$0FFF), (>$1FFF)
  455                        	
  456                        	; From blkmap.asm just to avoid wasting .bss space with padding.
  457    F8:2350             	vdc_map_draw_w:	ds	1	; (SCR_WIDTH / 8) + 1
  458    F8:2351             	vdc_map_draw_h:	ds	1	; (SCR_HEIGHT / 8) + 1
  459    F8:2352             	vdc_map_line_w:	ds	1	; Line width of map data in tiles.
  460    F8:2353             	vdc_map_scrn_w:	ds	1	; Line width of map data in screens.
  461    F8:2354             	vdc_map_pxl_x:	ds	2	; Current top-left X in pixels.
  462    F8:2356             	vdc_map_pxl_y:	ds	2	; Current top-left Y in pixels.
  463    F8:2358             	vdc_map_option:	ds	1	; Flags to disable BAT alignment.
  464                        	
  465                        	; From hucc-old-spr.asm just to avoid wasting .bss space with padding.
  466    F8:2359             	spr_max:	ds	1
  467    F8:235A             	spr_clr:	ds	1
  468                        	
  469               0001     		.if	SUPPORT_SGX
  470                        	
  471                        	; **************
  472                        	; 16-bytes of SGX BAT information.
  473                        	;
  474                        	; N.B. MUST be 16-bytes after the VDC versions to use SGX_VDC_OFFSET.
  475                        	;
  476                        	; N.B. Declared inside this .proc so that they can be stripped if unused.
  477                        	
  478                        	; Initialized by set_bat_sgx.
  479    F8:235B             	sgx_bat_width:	ds	1	; $20, $40, $80
  480    F8:235C             	sgx_bat_height:	ds	1	; $20, $40
  481    F8:235D             	sgx_bat_x_mask:	ds	1	; $1F, $3F, $7F
  482    F8:235E             	sgx_bat_y_mask:	ds	1	; $1F, $3F
  483    F8:235F             	sgx_bat_limit:	ds	1	; (>$03FF), (>$07FF), (>$0FFF), (>$1FFF)
  484                        	
  485                        	; From blkmap.asm just to avoid wasting .bss space with padding.
  486    F8:2360             	sgx_map_draw_w:	ds	1	; (SCR_WIDTH / 8) + 1
  487    F8:2361             	sgx_map_draw_h:	ds	1	; (SCR_HEIGHT / 8) + 1
  488    F8:2362             	sgx_map_line_w:	ds	1	; Line width of map data in tiles.
  489    F8:2363             	sgx_map_scrn_w:	ds	1	; Line width of map data in screens.
  490    F8:2364             	sgx_map_pxl_x:	ds	2	; Current top-left X in pixels.
  491    F8:2366             	sgx_map_pxl_y:	ds	2	; Current top-left Y in pixels.
  492    F8:2368             	sgx_map_option:	ds	1	; Flags to disable BAT alignment.
  493                        	
  494                        	; From hucc-old-spr.asm just to avoid wasting .bss space with padding.
  495    F8:2369             	sgx_spr_max:	ds	1
  496    F8:236A             	sgx_spr_clr:	ds	1
  497                        	
  498                        		.endif
  499                        	
  500               DFBA     			.code
  501                        	
  502                        			.endp
  503                        	
  504                        			.endprocgroup
  505                        	
  506                        	
  507                        	
  508                        	; ***************************************************************************
  509                        	; ***************************************************************************
  510                        	;
  511                        	; sgx_detect - Detect whether we're running on a SuperGrafx (and init VPC).
  512                        	;
  513                        	; Returns: X,C-flag, and "sgx_detected" = NZ, CS if detected.
  514                        	;
  515                        	; ***************************************************************************
  516                        	;
  517                        	; https://web.archive.org/web/20161129055659/http://cgfm2.emuviews.com/txt/sgxtech.txt
  518                        	;
  519                        	; ***************************************************************************
  520                        	;
  521                        	; HuC6202 VIDEO PRIORITY CONTROLLER (huge thanks to Charles MacDonald!)
  522                        	;
  523                        	; The VPC has no access to sprite priority data, it can only sort pixels
  524                        	; based upon which VDC and whether they are "sprite" or "background".
  525                        	;
  526                        	; This can sometimes lead to unexpected results with low-priority sprites.
  527                        	;
  528                        	; VPC registers $0008 and $0009 make up four 4-bit values that define the
  529                        	; enabled layers and priority setting for the four possible window areas.
  530                        	;
  531                        	; Bits 3-0 of $0008 are for the region where Window 1 and 2 overlap
  532                        	; Bits 7-4 of $0008 are for the region occupied by only Window 2
  533                        	; Bits 3-0 of $0009 are for the region occupied by only Window 1
  534                        	; Bits 7-4 of $0009 are for the region where no Window is present
  535                        	;
  536                        	;  Each 4-bit value has the same format:
  537                        	;
  538                        	;  Bit 0: VDC #1 graphics are 0=disabled, 1=enabled
  539                        	;  Bit 1: VDC #2 graphics are 0=disabled, 1=enabled
  540                        	;  Bit 2: Bit 0 of priority setting
  541                        	;  Bit 3: Bit 1 of priority setting
  542                        	;
  543                        	;   Priority Setting 0b00xx: (useful when VDC #1 is a fullscreen HUD)
  544                        	;
  545                        	;    FRONT
  546                        	;     SP1 = VDC #1 (pce) sprite pixels
  547                        	;     BG1 = VDC #1 (pce) background pixels
  548                        	;     SP2 = VDC #2 (sgx) sprite pixels
  549                        	;     BG2 = VDC #2 (sgx) background pixels
  550                        	;    BACK
  551                        	;
  552                        	;   Priority Setting 0b01xx: (useful for parallax backgrounds)
  553                        	;
  554                        	;    FRONT
  555                        	;     SP1 = VDC #1 (pce) sprite pixels
  556                        	;     SP2 = VDC #2 (sgx) sprite pixels
  557                        	;     BG1 = VDC #1 (pce) background pixels
  558                        	;     BG2 = VDC #2 (sgx) background pixels
  559                        	;    BACK
  560                        	;
  561                        	;   Priority Setting 0b10xx: (only useful for special effects)
  562                        	;
  563                        	;    FRONT
  564                        	;     BG1 = VDC #1 (pce) background pixels (transparent where sprites)
  565                        	;     BG2 = VDC #2 (sgx) background pixels
  566                        	;     SP1 = VDC #1 (pce) sprite pixels
  567                        	;     SP2 = VDC #2 (sgx) sprite pixels
  568                        	;    BACK
  569                        	
  570               0001     		.if	SUPPORT_SGX
  571               0001     		.if	1
  572    02:C6EF             	sgx_detect	.proc
  573                        	
  574    02:C6EF  A0 7F      			ldy	#$7F			; Use VRAM address $7F7F
  575    02:C6F1  84 F0      			sty.l	<_di			; because it won't cause
  576    02:C6F3  84 F1      			sty.h	<_di			; a screen glitch.
  577                        	
  578    02:C6F5  20 7B E3   			jsr	sgx_di_to_mawr		; Write $0001 to SGX VRAM.
  579    02:C6F8  A0 01      			ldy	#$01
  580    02:C6FA  8C 12 02   			sty	SGX_DL
  581    02:C6FD  9C 13 02   			stz	SGX_DH
  582                        	
  583    02:C700  20 7E E3   			jsr	vdc_di_to_mawr		; Write $0000 to VDC VRAM.
  584    02:C703  9C 02 02   			stz	VDC_DL
  585    02:C706  9C 03 02   			stz	VDC_DH
  586                        	
  587    02:C709  20 6E E3   			jsr	sgx_di_to_marr		; Check value in SGX VRAM.
  588    02:C70C  AC 12 02   			ldy	SGX_DL			; $01 if found, $00 if not.
  589    02:C70F  8C E8 22   			sty	sgx_detected
  590    02:C712  F0 10      			beq	!+			; Skip the rest if not SGX.
  591                        	
  592    02:C714  20 7B E3   			jsr	sgx_di_to_mawr		; Write $0000 to SGX VRAM
  593    02:C717  9C 12 02   			stz	SGX_DL			; to clean VRAM contents.
  594    02:C71A  9C 13 02   			stz	SGX_DH
  595                        	
  596    02:C71D  73 2A C7 08			tii	.vpc_mode, VPC_CR, 8	; Initialize the HuC6202 VPC.
         02:C721  02 08 00    
  597                        	
  598    02:C724  98         	!:		tya
  599    02:C725  AA         			tax				; "leave" copies X back to A.
  600    02:C726  4A         			lsr	a			; Also CC if PCE, CS if SGX.
  601                        	
  602                        			leave				; All done, phew!
         02:C727  4C EF FF   			jmp	leave_proc
  603                        		.else
  618                        		.endif
  619                        	
  620               0000     		.ifndef	SGX_PARALLAX
  622                        		.endif
  623                        	
  624               0001     		.if	SGX_PARALLAX
  625    02:C72A  00 70      	.vpc_mode:	dw	$7000			; Use SGX as a parallax layer
  626    02:C72C  00 00      			dw	$0000			; behind a VDC background.
  627    02:C72E  00 00      			dw	$0000
  628    02:C730  00 00      			dw	$0000
  629                        		.else
  634                        		.endif	SGX_PARALLAX
  635                        	
  636                        			.endp
  637                        	
  638               0000     		.ifndef	CORE_VERSION			; CORE has this in the kernel.
  642                        		.endif	CORE_VERSION
  643                        	
  644                        		.endif	SUPPORT_SGX
  645                        	
  646                        	
  647                        	
  648                        	
  649                        	vdc_copy_to	.procgroup			; These routines share code!
  799                        			.endprocgroup
  800                        	
  801                        	
  802                        	
  803                        	; ***************************************************************************
  804                        	; ***************************************************************************
  805                        	;
  806                        	; init_240x208 - An example of initializing screen and VRAM.
  807                        	;
  808                        	; This can be used as-is, or copied to your own program and modified.
  809                        	;
  810                        	
  811                        	init_240x208	.proc
  892                        			.endp
  893                        	
  894                        	
  895                        	
  896                        	; ***************************************************************************
  897                        	; ***************************************************************************
  898                        	;
  899                        	; init_256x224 - An example of initializing screen and VRAM.
  900                        	;
  901                        	; This can be used as-is, or copied to your own program and modified.
  902                        	;
  903                        	
  904                        	init_256x224	.proc
  985                        			.endp
  986                        	
  987                        	
  988                        	
  989                        	; ***************************************************************************
  990                        	; ***************************************************************************
  991                        	;
  992                        	; init_352x224 - An example of initializing screen and VRAM.
  993                        	;
  994                        	; This can be used as-is, or copied to your own program and modified.
  995                        	;
  996                        	
  997                        	init_352x224	.proc
 1078                        			.endp
 1079                        	
 1080                        	
 1081                        	
 1082                        	; ***************************************************************************
 1083                        	; ***************************************************************************
 1084                        	;
 1085                        	; init_512x224 - An example of initializing screen and VRAM.
 1086                        	;
 1087                        	; This can be used as-is, or copied to your own program and modified.
 1088                        	;
 1089                        	
 1090                        	init_512x224	.proc
 1171                        			.endp
 1172                        	
 1173                        	
 1174                        	
 1175                        	; ***************************************************************************
 1176                        	; ***************************************************************************
 1177                        	;
 1178                        	; init_320x208 - An example of initializing screen and VRAM.
 1179                        	;
 1180                        	; This can be used as-is, or copied to your own program and modified.
 1181                        	;
 1182                        	; This resolution is rarely-seen, but it has no overscan, so it has a use.
 1183                        	;
 1184                        	
 1185                        	init_320x208	.proc
 1266                        			.endp
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   41                        	
                             #[3]   "..\..\..\include\hucc\hucc-math.asm"
   42                        			include	"hucc-math.asm"		; HuCC multiply and divide.
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-math.asm
    5                        	;
    6                        	; Basic (i.e. very slow) 8-bit and 16-bit multiply and divide routines.
    7                        	;
    8                        	; Copyright John Brandwood 2021-2024.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; This is basically a set of SDCC-compatible routines, but using Y:A for the
   18                        	; primary register instead of X:A.
   19                        	;
   20                        	; Using Y:A makes the routines instantly usable with HuCC, and it also makes
   21                        	; them usable with SDCC with just an "sxy" before and after the call.
   22                        	;
   23                        	; ***************************************************************************
   24                        	; ***************************************************************************
   25                        	
   26               E44C     			.code
   27                        	
   28               2000     	multiplier	=	__temp
   29               2094     	multiplicand	=	___SDCC_m6502_ret0
   30               2094     	product		=	multiplicand
   31                        	
   32               2000     	__mulint_PARM_2	=	multiplier
   33                        	
   34               2000     	divisor		=	__temp
   35               2094     	dividend	=	___SDCC_m6502_ret0
   36               2094     	quotient	=	dividend
   37               2096     	remainder	=	___SDCC_m6502_ret2
   38                        	
   39               2000     	__moduint_PARM_2 =	divisor
   40               2000     	__modsint_PARM_2 =	divisor
   41               2000     	__divuint_PARM_2 =	divisor
   42               2000     	__divsint_PARM_2 =	divisor
   43                        	
   44                        	
   45                        	
   46                        	; ***************************************************************************
   47                        	; int
   48                        	; _mulint (int a, int b)
   49                        	;
   50                        	; 1st parameter in Y:A (multiplicand)
   51                        	; 2nd parameter in __mulint_PARM_2 (multiplier)
   52                        	; result in Y:A
   53                        	;
   54                        	; N.B. signed and unsigned multiply only differ in the top 16 of the 32bits!
   55                        	
   56    00:E44C  85 94      	__mulint:	sta	<multiplicand + 0
   57    00:E44E  84 95      			sty	<multiplicand + 1
   58                        	
   59    00:E450  A2 10      			ldx	#16			; Loop 16 times.
   60                        	
   61    00:E452  46 95      			lsr	<multiplicand + 1	; Divide multiplicand by 2
   62    00:E454  66 94      			ror	<multiplicand + 0	; and clear the 16th bit.
   63                        	
   64    00:E456  62         			cla				; Clear top word of product.
   65    00:E457  85 96      			sta.l	<multiplicand + 2
   66    00:E459  90 0B      			bcc	.rotate
   67                        	
   68    00:E45B  A8         	.add:		tay				; Add the 16-bit multiplier to
   69    00:E45C  18         			clc				; top 16-bits of the product.
   70    00:E45D  A5 96      			lda	<multiplicand + 2
   71    00:E45F  65 00      			adc.l	<multiplier
   72    00:E461  85 96      			sta	<multiplicand + 2
   73    00:E463  98         			tya
   74    00:E464  65 01      			adc.h	<multiplier
   75                        	
   76    00:E466  6A         	.rotate:	ror	a			; Rotate product into the top
   77    00:E467  66 96      			ror	<multiplicand + 2	; bits of the multiplicand ...
   78    00:E469  66 95      			ror	<multiplicand + 1	; and divide multiplicand by 2.
   79    00:E46B  66 94      			ror	<multiplicand + 0
   80                        	
   81    00:E46D  CA         			dex
   82    00:E46E  B0 EB      			bcs	.add			; Add multiplier to top word?
   83    00:E470  D0 F4      			bne	.rotate			; Completed 16 bits?
   84                        	
   85    00:E472  85 97      			sta	<multiplicand + 3	; Save top byte of product.
   86                        	
   87    00:E474  A5 94      			lda.l	<multiplicand		; Return the bottom 16-bits of
   88    00:E476  A4 95      			ldy.h	<multiplicand		; the 32-bit product.
   89                        	
   90    00:E478  60         			rts
   91                        	
   92                        	
   93                        	
   94                        	; ***************************************************************************
   95                        	; unsigned int
   96                        	; _divuint (unsigned int x, unsigned int y)
   97                        	;
   98                        	; 1st parameter in Y:A (unsigned dividend)
   99                        	; 2nd parameter in __divuint_PARM_2 (unsigned divisor)
  100                        	; result in Y:A
  101                        	
  102    00:E479  20 81 E4   	__divuint:	jsr	__moduint		; Call the basic uint division.
  103                        	
  104    00:E47C  A5 94      			lda.l	<quotient		; Then get the result from where
  105    00:E47E  A4 95      			ldy.h	<quotient		; it was calculated.
  106    00:E480  60         			rts
  107                        	
  108                        	
  109                        	
  110                        	; ***************************************************************************
  111                        	; unsigned int
  112                        	; _moduint (unsigned int x, unsigned int y)
  113                        	;
  114                        	; 1st parameter in Y:A (unsigned dividend)
  115                        	; 2nd parameter in __moduint_PARM_2 (unsigned divisor)
  116                        	; result in Y:A
  117                        	;
  118                        	; If the dividend has more bits than the divisor, then we need to check the
  119                        	; 17th bit of the remainder!
  120                        	
  121               0000     		.if	0
  176                        		.else
  177                        	
  178    00:E481  85 94      	__moduint:	sta.l	<dividend		; 1st SDCC parameter in Y:A.
  179    00:E483  84 95      			sty.h	<dividend
  180                        	
  181    00:E485  A5 00      	divmoduint:	lda.l	<divisor		; Check for a divide-by-zero.
  182    00:E487  05 01      			ora.h	<divisor
  183    00:E489  F0 FE      	.zero:		beq	.zero
  184                        	
  185    00:E48B  A2 11      			ldx	#16 + 1
  186                        	
  187    00:E48D  C2         			cly				; Clear remainder.
  188    00:E48E  84 97      			sty.h	<remainder
  189                        	
  190    00:E490  98         	.skip:		tya				; Restore remainder lo-byte.
  191                        	
  192    00:E491  26 94      	.loop:		rol.l	<dividend		; Quotient bit -> dividend LSB.
  193    00:E493  26 95      			rol.h	<dividend		; Rotate dividend, MSB -> C.
  194                        	
  195    00:E495  CA         			dex
  196    00:E496  F0 14      			beq	.finished
  197                        	
  198    00:E498  2A         			rol	a			; Rotate C into remainder.
  199    00:E499  26 97      			rol.h	<remainder
  200                        	;		php				; Preserve remainder 17th bit.
  201                        	
  202    00:E49B  A8         			tay				; Preserve remainder lo-byte.
  203                        	
  204    00:E49C  C5 00      			cmp.l	<divisor		; Test divisor.
  205    00:E49E  A5 97      			lda.h	<remainder
  206    00:E4A0  E5 01      			sbc.h	<divisor
  207    00:E4A2  90 EC      			bcc	.skip			; CC if divisor > remainder.
  208                        	
  209                        	;		cmp.l	<divisor		; If the dividend has more bits
  210                        	;		lda.h	<remainder		; than the divisor then we need
  211                        	;		sbc.h	<divisor		; to check the remainder hi-bit.
  212                        	;		bcs	.subtract		; CS if divisor <= remainder.
  213                        	;		plp				; Restore remainder 17th bit.
  214                        	;		bcc	.skip			; CC if divisor > remainder.
  215                        	;		db	$90			; Turn "plp" into "bcc" to skip.
  216                        	;.subtract:	plp				; Discard remainder 17th bit.
  217                        	;		sec
  218                        	
  219    00:E4A4  85 97      			sta.h	<remainder		; Subtract divisor.
  220    00:E4A6  98         			tya
  221    00:E4A7  E5 00      			sbc.l	<divisor
  222    00:E4A9  38         			sec				
  223    00:E4AA  80 E5      			bra	.loop
  224                        	
  225    00:E4AC  A4 97      	.finished:	ldy.h	<remainder		; Get the remainder hi-byte.
  226                        	
  227    00:E4AE  60         			rts
  228                        	
  229                        		.endif
  230                        	
  231                        	
  232                        	
  233                        	; ***************************************************************************
  234                        	; int
  235                        	; _divsint (int x, int y)
  236                        	;
  237                        	; 1st parameter in Y:A (signed dividend)
  238                        	; 2nd parameter in __divsint_PARM_2 (signed divisor)
  239                        	; result in Y:A
  240                        	
  241    00:E4AF  20 B7 E4   	__divsint:	jsr	__modsint		; Call the basic sint division.
  242                        	
  243    00:E4B2  A5 94      			lda.l	<quotient		; Then get the result from where
  244    00:E4B4  A4 95      			ldy.h	<quotient		; it was calculated.
  245    00:E4B6  60         			rts
  246                        	
  247                        	
  248                        	
  249                        	; ***************************************************************************
  250                        	; int
  251                        	; _modsint (int x, int y)
  252                        	;
  253                        	; 1st parameter in Y:A (signed dividend)
  254                        	; 2nd parameter in __modsint_PARM_2 (signed divisor)
  255                        	; result in Y:A
  256                        	
  257    00:E4B7  84 95      	__modsint:	sty.h	<dividend
  258                        	
  259    00:E4B9  C0 80      			cpy	#$80			; Remainder -ve if dividend
  260    00:E4BB  08         			php				; was -ve.
  261    00:E4BC  90 03      			bcc	!+
  262    00:E4BE  20 0E E5   			jsr	neg_yacs		; Negate the dividend.
  263                        	
  264    00:E4C1  85 94      	!:		sta.l	<dividend		; Store the dividend.
  265    00:E4C3  A5 95      			lda.h	<dividend
  266    00:E4C5  84 95      			sty.h	<dividend
  267                        	
  268    00:E4C7  45 01      			eor.h	<divisor		; Quotient is -ve if divisor
  269    00:E4C9  08         			php				; and dividend signs differ.
  270                        	
  271    00:E4CA  A5 01      			lda.h	<divisor		; Is the divisor -ve?
  272    00:E4CC  10 0B      			bpl	!+
  273                        	
  274    00:E4CE  38         			sec				; Negate the divisor.
  275    00:E4CF  62         			cla
  276    00:E4D0  E5 00      			sbc.l	<divisor
  277    00:E4D2  85 00      			sta.l	<divisor
  278    00:E4D4  62         			cla
  279    00:E4D5  E5 01      			sbc.h	<divisor
  280    00:E4D7  85 01      			sta.h	<divisor
  281                        	
  282    00:E4D9  20 85 E4   	!:		jsr	divmoduint		; Do the unsigned division.
  283                        	
  284    00:E4DC  28         	.result:	plp				; Should the quotient be -ve?
  285    00:E4DD  10 0D      			bpl	.remainder
  286                        	
  287    00:E4DF  AA         			tax				; Preserve remainder lo-byte.
  288                        	
  289    00:E4E0  38         			sec				; Then negate the quotient.
  290    00:E4E1  62         			cla
  291    00:E4E2  E5 94      			sbc.l	<dividend
  292    00:E4E4  85 94      			sta.l	<dividend
  293    00:E4E6  62         			cla
  294    00:E4E7  E5 95      			sbc.h	<dividend
  295    00:E4E9  85 95      			sta.h	<dividend
  296                        	
  297    00:E4EB  8A         			txa				; Restore remainder lo-byte.
  298                        	
  299    00:E4EC  28         	.remainder:	plp				; Was the dividend -ve?
  300    00:E4ED  B0 1F      			bcs	neg_yacs		; Then negate the remainder.
  301    00:E4EF  60         			rts
  302                        	
  303                        	
  304                        	
  305                        	; ***************************************************************************
  306                        	; unsigned int
  307                        	; _muluchar (unsigned char x, unsigned char y)
  308                        	;
  309                        	; 1st parameter in A (unsigned multiplicand)
  310                        	; 2nd parameter in Y (unsigned multiplier)
  311                        	; result in Y:A
  312                        	
  313    00:E4F0  84 00      	__muluchar:	sty	<multiplier
  314                        	
  315    00:E4F2  A0 08      	muluchar_a:	ldy	#8			; Loop 8 times.
  316                        	
  317    00:E4F4  4A         			lsr	a			; Divide multiplicand by 2
  318    00:E4F5  85 94      			sta	<multiplicand		; and clear the 8th bit.
  319                        	
  320    00:E4F7  62         			cla				; Clear top byte of product.
  321    00:E4F8  90 03      			bcc	.rotate
  322                        	
  323    00:E4FA  18         	.add:		clc				; Add the 8-bit multiplier to
  324    00:E4FB  65 00      			adc	<multiplier		; top 8-bits of the product.
  325                        	
  326    00:E4FD  6A         	.rotate:	ror	a			; Rotate product into the top
  327    00:E4FE  66 94      			ror	<multiplicand		; bits of the multiplicand.
  328                        	
  329    00:E500  88         			dey
  330    00:E501  B0 F7      			bcs	.add			; Add multiplier to top byte?
  331    00:E503  D0 F8      			bne	.rotate			; Completed 8 bits?
  332                        	
  333    00:E505  A8         			tay				; Return the 16-bit product.
  334    00:E506  A5 94      			lda	<multiplicand
  335                        	
  336    00:E508  60         			rts
  337                        	
  338                        	
  339                        	
  340                        	; ***************************************************************************
  341                        	; signed int
  342                        	; abs (signed int x)
  343                        	;
  344                        	; 1st parameter in Y:A (signed)
  345                        	; result in Y:A
  346                        	
  347    00:E509  C0 80      	_abs:		cpy	#$80			; Is the hi-byte -ve?
  348    00:E50B  90 0B      			bcc	!+
  349                        	
  350    00:E50D  38         	neg_ya:		sec
  351    00:E50E  49 FF      	neg_yacs:	eor	#$FF
  352    00:E510  69 00      			adc	#0
  353    00:E512  42         			say
  354    00:E513  49 FF      			eor	#$FF
  355    00:E515  69 00      			adc	#0
  356    00:E517  42         			say
  357    00:E518  60         	!:		rts
  358                        	
  359    00:E519             	_abs.1		.alias	_abs
  360                        	
  361                        	
  362                        	
  363                        	; ***************************************************************************
  364                        	; signed int
  365                        	; _mulschar (signed char x, signed char y)
  366                        	;
  367                        	; 1st parameter in A (signed multiplicand)
  368                        	; 2nd parameter in Y (signed multiplier)
  369                        	; result in Y:A
  370                        	;
  371                        	; N.B. Y and A get swapped to make the code shorter.
  372                        	
  373    00:E519  85 94      	__mulschar:	sta	<multiplicand		; Remember multiplicand sign.
  374                        	
  375    00:E51B  C9 80      			cmp	#$80			; Is the multiplicand -ve?
  376    00:E51D  90 03      			bcc	!+
  377    00:E51F  49 FF      			eor	#$FF			; Negate the multiplicand.
  378    00:E521  1A         			inc	a
  379    00:E522  85 00      	!:		sta	<multiplier		; Then save it as multiplier.
  380                        	
  381    00:E524  98         			tya				; Product -ve if multiplicand
  382    00:E525  45 94      			eor	<multiplicand		; and multiplier signs differ.
  383    00:E527  08         			php				; Remember product sign.
  384                        	
  385    00:E528  98         			tya				; Is the multiplicand -ve?
  386    00:E529  10 03      			bpl	!+
  387    00:E52B  49 FF      			eor	#$FF			; Negate the multiplicand.
  388    00:E52D  1A         			inc	a
  389                        	
  390    00:E52E  20 F2 E4   	!:		jsr	muluchar_a		; Multiplier already saved.
  391                        	
  392    00:E531  28         			plp				; Is the product -ve?
  393    00:E532  30 D9      			bmi	neg_ya
  394    00:E534  60         			rts
  395                        	
  396                        	
  397                        	
  398                        	; ***************************************************************************
  399                        	; unsigned int
  400                        	; _mulsuchar (signed char x, signed char y)
  401                        	;
  402                        	; 1st parameter in A (unsigned multiplicand)
  403                        	; 2nd parameter in Y (signed multiplier)
  404                        	; result in Y:A
  405                        	;
  406                        	; N.B. Y and A get swapped to make the code shorter.
  407                        	
  408    00:E535  42         	__mulsuchar:	say				; Put the signed param in A.
  409                        			; drop through to __muluschar
  410                        	
  411                        	
  412                        	
  413                        	; ***************************************************************************
  414                        	; signed int
  415                        	; _muluschar (unsigned char x, unsigned char y)
  416                        	;
  417                        	; 1st parameter in A (signed multiplicand)
  418                        	; 2nd parameter in Y (unsigned multiplier)
  419                        	; result in Y:A
  420                        	
  421    00:E536  C9 80      	__muluschar:	cmp	#$80			; Is multiplicand -ve?
  422    00:E538  08         			php				; Remember the sign.
  423    00:E539  90 03      			bcc	!+
  424    00:E53B  49 FF      			eor	#$FF			; Negate multiplicand.
  425    00:E53D  1A         			inc	a
  426                        	
  427    00:E53E  20 F0 E4   	!:		jsr	__muluchar		; Do the unsigned multiply.
  428                        	
  429    00:E541  28         			plp				; Was multiplicand -ve?
  430    00:E542  B0 CA      			bcs	neg_yacs		; Then negate the product.
  431    00:E544  60         			rts
  432                        	
  433                        	
  434                        	
  435                        	; ***************************************************************************
  436                        	; unsigned int
  437                        	; _moduchar (unsigned char x, unsigned char y)
  438                        	;
  439                        	; 1st parameter in A (unsigned dividend)
  440                        	; 2nd parameter in Y (unsigned divisor)
  441                        	; result in Y:A
  442                        	
  443    00:E545  84 00      	__moduchar:	sty.l	<divisor
  444                        	
  445    00:E547  0A         	divmodu8_a:	asl	a			; Rotate dividend, MSB -> C.
  446    00:E548  85 94      			sta.l	<dividend
  447    00:E54A  64 95      			stz.h	<dividend		; Clear quotient hi-byte.
  448                        	
  449    00:E54C  A0 08      			ldy	#8
  450    00:E54E  62         			cla				; Clear remainder.
  451    00:E54F  2A         	.loop:		rol	a			; Rotate C into remainder.
  452    00:E550  C5 00      			cmp	<divisor		; Test divisor.
  453    00:E552  90 02      			bcc	.skip			; CC if divisor > remainder.
  454    00:E554  E5 00      			sbc	<divisor		; Subtract divisor.
  455    00:E556  26 94      	.skip:		rol	<dividend		; Quotient bit -> dividend LSB.
  456    00:E558  88         			dey
  457    00:E559  D0 F4      			bne	.loop
  458                        	
  459    00:E55B  C2         			cly				; Clear hi-byte of return.
  460    00:E55C  60         			rts				; Return the 16-bit remainder.
  461                        	
  462                        	
  463                        	
  464                        	; ***************************************************************************
  465                        	; unsigned int
  466                        	; _divuchar (unsigned char x, unsigned char y)
  467                        	;
  468                        	; 1st parameter in A (unsigned dividend)
  469                        	; 2nd parameter in Y (unsigned divisor)
  470                        	; result in Y:A
  471                        	
  472    00:E55D  20 45 E5   	__divuchar:	jsr	__moduchar
  473                        	
  474    00:E560  A5 94      			lda	<dividend		; Get the dividend lo-byte.
  475    00:E562  60         			rts				; Return the 16-bit dividend.
  476                        	
  477                        	
  478                        	
  479                        	; ***************************************************************************
  480                        	; signed int
  481                        	; _modschar (signed char x, signed char y)
  482                        	;
  483                        	; 1st parameter in A (signed dividend)
  484                        	; 2nd parameter in Y (signed divisor)
  485                        	; result in Y:A
  486                        	
  487    00:E563  AA         	__modschar:	tax				; Preserve the dividend.
  488    00:E564  08         			php				; Remember remainder sign.
  489                        	
  490    00:E565  84 00      			sty	<divisor		; Quotient negative if divisor
  491    00:E567  45 00      			eor	<divisor		; and dividend signs differ.
  492    00:E569  08         			php				; Remember the quotient sign.
  493                        	
  494    00:E56A  98         			tya				; Is the divisor -ve?
  495    00:E56B  10 05      			bpl	!+
  496    00:E56D  49 FF      			eor	#$FF			; Negate the divisor.
  497    00:E56F  1A         			inc	a
  498    00:E570  85 00      			sta	<divisor
  499                        	
  500    00:E572  8A         	!:		txa				; Is the dividend -ve?
  501    00:E573  10 03      			bpl	divmods8_a
  502                        	
  503    00:E575  49 FF      	divmods8_neg:	eor	#$FF			; Negate the dividend.
  504    00:E577  1A         			inc	a
  505                        	
  506    00:E578  20 47 E5   	divmods8_a:	jsr	divmodu8_a		; Do the unsigned division.
  507                        	
  508    00:E57B  28         			plp				; Should the quotient be -ve?
  509    00:E57C  10 0C      			bpl	!+
  510                        	
  511    00:E57E  AA         			tax				; Preserve remainder lo-byte.
  512                        	
  513    00:E57F  38         			sec				; Negate the quotient.
  514    00:E580  62         			cla
  515    00:E581  E5 94      			sbc.l	<dividend
  516    00:E583  85 94      			sta.l	<dividend
  517    00:E585  A9 FF      			lda	#$FF
  518    00:E587  85 95      			sta.h	<dividend
  519                        	
  520    00:E589  8A         			txa				; Restore remainder lo-byte.
  521                        	
  522    00:E58A  28         	!:		plp				; Was the dividend -ve?
  523    00:E58B  10 05      			bpl	!+
  524                        	
  525    00:E58D  49 FF      			eor	#$FF			; Then negate the remainder.
  526    00:E58F  1A         			inc	a
  527    00:E590  A0 FF      			ldy	#$FF
  528                        	
  529    00:E592  60         	!:		rts
  530                        	
  531                        	
  532                        	
  533                        	; ***************************************************************************
  534                        	; signed int
  535                        	; _moduschar (unsigned char x, unsigned char y)
  536                        	;
  537                        	; 1st parameter in A (signed dividend)
  538                        	; 2nd parameter in Y (unsigned divisor)
  539                        	; result in Y:A
  540                        	
  541    00:E593  84 00      	__moduschar:	sty.l	<divisor
  542                        	
  543    00:E595  A8         			tay				; Is the dividend -ve?
  544    00:E596  08         			php				; Remember remainder sign.
  545    00:E597  08         			php				; Remember quotient sign.
  546    00:E598  30 DB      			bmi	divmods8_neg
  547    00:E59A  80 DC      			bra	divmods8_a
  548                        	
  549                        	
  550                        	
  551                        	; ***************************************************************************
  552                        	; unsigned int
  553                        	; _modsuchar (signed char x, signed char y)
  554                        	;
  555                        	; 1st parameter in A (unsigned dividend)
  556                        	; 2nd parameter in Y (signed divisor)
  557                        	; result in Y:A
  558                        	
  559    00:E59C  AA         	__modsuchar:	tax				; Preserve the dividend.
  560    00:E59D  08         			php				; Remember remainder sign.
  561                        	
  562    00:E59E  98         			tya				; Check the divisor sign.
  563    00:E59F  08         			php				; Remember quotient sign.
  564    00:E5A0  10 03      			bpl	!+
  565    00:E5A2  49 FF      			eor	#$FF			; Negate the divisor.
  566    00:E5A4  1A         			inc	a
  567    00:E5A5  85 00      	!:		sta.l	<divisor
  568                        	
  569    00:E5A7  8A         			txa				; Restore the dividend.
  570    00:E5A8  80 CE      			bra	divmods8_a
  571                        	
  572                        	
  573                        	
  574                        	; ***************************************************************************
  575                        	; signed int
  576                        	; _divschar (signed char x, signed char y)
  577                        	;
  578                        	; 1st parameter in A (signed dividend)
  579                        	; 2nd parameter in Y (signed divisor)
  580                        	; result in Y:A
  581                        	
  582    00:E5AA  20 63 E5   	__divschar:	jsr	__modschar
  583                        	
  584    00:E5AD  A5 94      			lda.l	<dividend
  585    00:E5AF  A4 95      			ldy.h	<dividend
  586    00:E5B1  60         			rts
  587                        	
  588                        	
  589                        	
  590                        	; ***************************************************************************
  591                        	; signed int
  592                        	; _divuschar (unsigned char x, unsigned char y)
  593                        	;
  594                        	; 1st parameter in A (signed dividend)
  595                        	; 2nd parameter in Y (unsigned divisor)
  596                        	; result in Y:A
  597                        	
  598    00:E5B2  20 93 E5   	__divuschar:	jsr	__moduschar
  599                        	
  600    00:E5B5  A5 94      			lda.l	<dividend
  601    00:E5B7  A4 95      			ldy.h	<dividend
  602    00:E5B9  60         			rts
  603                        	
  604                        	
  605                        	
  606                        	; ***************************************************************************
  607                        	; unsigned int
  608                        	; _divsuchar (signed char x, signed char y)
  609                        	;
  610                        	; 1st parameter in A (unsigned dividend)
  611                        	; 2nd parameter in Y (signed divisor)
  612                        	; result in Y:A
  613                        	
  614    00:E5BA  20 9C E5   	__divsuchar:	jsr	__modsuchar
  615                        	
  616    00:E5BD  A5 94      			lda.l	<dividend
  617    00:E5BF  A4 95      			ldy.h	<dividend
  618    00:E5C1  60         			rts
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   43                        	
   44                        			; Define in hucc-config.inc to remove this.
   45                        	
   46               0001     		.ifndef	HUCC_NO_DEFAULT_RANDOM
                             #[3]   "..\..\..\include\hucc\random.asm"
   47                        			include	"random.asm"		; Random number generator.
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; random.asm
    5                        	;
    6                        	; Pseudo-random number generator (https://github.com/bbbradsmith/prng_6502)
    7                        	;
    8                        	; Copyright Brad Smith 2019.
    9                        	;
   10                        	; License:
   11                        	;
   12                        	; This code and may be used, reused, and modified for any purpose, commercial
   13                        	; or non-commercial.
   14                        	;
   15                        	; Attribution in released binaries or documentation is appreciated but not
   16                        	; required.
   17                        	;
   18                        	; ***************************************************************************
   19                        	; ***************************************************************************
   20                        	;
   21                        	; This is a linear feedback shift register (LFSR) in Galois form, which is
   22                        	; iterated 8 times to produce an 8-bit pseudo-random number.
   23                        	;
   24                        	; Two widths of LFSR are provided:
   25                        	;
   26                        	;  24-bit requires 3 bytes, and repeats after 16777215 calls.
   27                        	;  32-bit requires 4 bytes, and repeats after 4294967295 calls.
   28                        	;
   29                        	; Usage:
   30                        	;
   31                        	;  Initialize the zero-page "random" variable to any value other than 0.
   32                        	;  The size of "random" is 3 or 4 bytes, depending on the width of LFSR
   33                        	;  chosen.
   34                        	;
   35                        	;  Call one of the RNG functions and an 8-bit result will be returned in the
   36                        	;  A-register (with flags), and the Y-register will be clobbered.
   37                        	;
   38                        	;  Do not mix RNGs of different width in the same program, unless you can
   39                        	;  give them each separate "random" state storage.
   40                        	;
   41                        	; ***************************************************************************
   42                        	; ***************************************************************************
   43                        	
   44                        	
   45               0001     		.ifndef	_KICKC				; Variables defined in C?
   46               2098     			.zp
   47    F8:2098             	random:		.ds	4			; Seed is 3 or 4 bytes.
   48               E5C2     			.code
   49                        		.endif	_KICKC
   50                        	
   51                        	
   52                        	
   53                        	; ***************************************************************************
   54                        	; ***************************************************************************
   55                        	;
   56                        	; init_random - Initialize a 32-bit LFSR using an 8-bit seed value in Y.
   57                        	;
   58                        	; The LFSR is initialized to n'th entry of a standard CRC-32 lookup-table,
   59                        	; which gives it a decent distribution of bits.
   60                        	;
   61                        	; Since seed is an 8-bit value, there are 255 (256-1) possible starting
   62                        	; states for the LFSR, because 0 would generate a 0 state.
   63                        	;
   64                        	; CRC-32 code by Paul Guertin. See http://6502.org/source/integers/crc.htm
   65                        	;
   66                        	
   67    02:C7AF             	init_random	.proc
   68                        	
   69    02:C7AF  A9 01      			lda	#1			; Init CRC-32 table value.
   70    02:C7B1  85 98      			sta	<random + 0
   71    02:C7B3  98         			tya				; Get and check the seed value.
   72    02:C7B4  D0 01      			bne	.reverse_seed
   73    02:C7B6  3A         			dec	a			; Which must be non-zero!
   74    02:C7B7  4A         	.reverse_seed:	lsr	a			; Reverse the bits so that small changes
   75    02:C7B8  26 98      			rol	<random + 0		; in the seed make larger differences in
   76    02:C7BA  90 FB      			bcc	.reverse_seed		; the initial state.
   77                        	
   78    02:C7BC  64 99      			stz	<random + 1		; A contains the high byte of the CRC-32.
   79    02:C7BE  64 9A      			stz	<random + 2		; The other three bytes are in memory.
   80    02:C7C0  62         			cla
   81                        	
   82    02:C7C1  A0 08      			ldy	#8			; Y counts bits in a byte.
   83    02:C7C3  4A         	.bit_loop:	lsr	a			; The CRC-32 algorithm is similar to CRC-16
   84    02:C7C4  66 9A      			ror	<random + 2		; except that it is reversed (originally for
   85    02:C7C6  66 99      			ror	<random + 1		; hardware reasons). This is why we shift
   86    02:C7C8  66 98      			ror	<random + 0		; right instead of left here.
   87    02:C7CA  90 16      			bcc	.no_add			; Do nothing if no overflow,
   88    02:C7CC  49 ED      			eor	#$ED			; else add CRC-32 polynomial $EDB88320.
   89                        	
   90    02:C7CE  48         			pha				; Save high byte while we do others.
   91    02:C7CF  A5 9A      			lda	<random + 2
   92    02:C7D1  49 B8      			eor	#$B8			; Most reference books give the CRC-32 poly
   93    02:C7D3  85 9A      			sta	<random + 2		; as $04C11DB7. This is actually the same if
   94    02:C7D5  A5 99      			lda	<random + 1		; you write it in binary and read it right-
   95    02:C7D7  49 83      			eor	#$83			; to-left instead of left-to-right. Doing it
   96    02:C7D9  85 99      			sta	<random + 1		; this way means we won't have to explicitly
   97    02:C7DB  A5 98      			lda	<random + 0		; reverse things afterwards.
   98    02:C7DD  49 20      			eor	#$20
   99    02:C7DF  85 98      			sta	<random + 0
  100    02:C7E1  68         			pla				; Restore high byte.
  101                        	
  102    02:C7E2  88         	.no_add:	dey				; Do next bit.
  103    02:C7E3  D0 DE      			bne	.bit_loop
  104                        	
  105    02:C7E5  85 9B      			sta	<random + 3		; Save CRC-32 high-byte.
  106                        	
  107                        			leave				; All done!
         02:C7E7  4C EF FF   			jmp	leave_proc
  108                        	
  109                        			.endp
  110                        	
  111                        	
  112                        	
  113                        	; ***************************************************************************
  114                        	; ***************************************************************************
  115                        	;
  116                        	; get_random - 8-bit LFSR pseudo-random number with a 24-bit cycle.
  117                        	;
  118                        	; The pseudo-random sequence repeats after (2^24)-1 calls.
  119                        	;
  120                        	; Written by Wim Couwenberg, see ...
  121                        	;
  122                        	; "https://wimcouwenberg.wordpress.com/2020/11/15/ ...
  123                        	;  a-fast-24-bit-prng-algorithm-for-the-6502-processor/"
  124                        	;
  125                        	; Takes 68 cycles on the HuC6280, incl JSR & RTS.
  126                        	;
  127                        	; N.B. HuCC library code relies on this preserving X and Y!
  128                        	;
  129                        	
  130    00:E5C2  C2         	_rand8:		cly				; Entry point for HuCC.
  131                        	
  132    00:E5C3  A5 98      	get_random:	lda	<random + 0		; Operation 7 (with carry clear).
  133    00:E5C5  0A         			asl	a
  134    00:E5C6  45 99      			eor	<random + 1
  135    00:E5C8  85 99      			sta	<random + 1
  136    00:E5CA  2A         			rol	a             		; Operation 9.
  137    00:E5CB  45 9A      			eor	<random + 2
  138    00:E5CD  85 9A      			sta	<random + 2
  139    00:E5CF  45 98      			eor	<random + 0		; Operation 5.
  140    00:E5D1  85 98      			sta	<random + 0
  141    00:E5D3  A5 99      			lda	<random + 1		; Operation 15.
  142    00:E5D5  6A         			ror	a
  143    00:E5D6  45 9A      			eor	<random + 2
  144    00:E5D8  85 9A      			sta	<random + 2
  145    00:E5DA  45 99      			eor	<random + 1		; Operation 6.
  146    00:E5DC  85 99      			sta	<random + 1
  147    00:E5DE  60         			rts
  148                        	
  149                        	
  150                        	
  151               0000     		.if	0
  316                        		.endif
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   48                        		.endif
   49                        	
   50                        			; Optional libraries that get used when their header files
   51                        			; are included in a HuCC project.
   52                        			;
   53                        			; When the HuCC compiler is invoked with the "--legacy"
   54                        			; option to compile old projects, then the "huc.h" file
   55                        			; is automatically included, which then includes a list
   56                        			; of specific headers corresponding to HuC's library.
   57                        	
   58               0001     		.ifdef	HUCC_USES_GFX
                             #[3]   "..\..\..\include\hucc\hucc-gfx.asm"
   59                        			include	"hucc-gfx.asm"		; Set in hucc_gfx.h
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; huc-gfx.asm
    5                        	;
    6                        	; Based on the original HuC and MagicKit functions by David Michel and the
    7                        	; other original HuC developers.
    8                        	;
    9                        	; Modifications copyright John Brandwood 2024-2025.
   10                        	;
   11                        	; Distributed under the Boost Software License, Version 1.0.
   12                        	; (See accompanying file LICENSE_1_0.txt or copy at
   13                        	;  http://www.boost.org/LICENSE_1_0.txt)
   14                        	;
   15                        	; ***************************************************************************
   16                        	; ***************************************************************************
   17                        	
   18                        	;
   19                        	; Include dependancies ...
   20                        	;
   21                        	
   22                        			include "common.asm"		; Common helpers.
   23                        			include "vce.asm"		; Useful VCE routines.
   24                        			include "vdc.asm"		; Useful VCE routines.
   25                        	
   26                        	
   27                        	
   28                        	; ***************************************************************************
   29                        	; ***************************************************************************
   30                        	;
   31                        	; void __fastcall disp_on( void );
   32                        	; void __fastcall disp_off( void );
   33                        	
   34    00:E5DF             			.alias	_disp_on		= set_dspon
   35    00:E5DF             			.alias	_disp_off		= set_dspoff
   36                        	
   37                        	
   38                        	
   39                        	; ***************************************************************************
   40                        	; ***************************************************************************
   41                        	;
   42                        	; void __fastcall set_screen_size( unsigned char value<_al> );
   43                        	; void __fastcall sgx_set_screen_size( unsigned char value<_al> );
   44                        	;
   45                        	
   46    00:E5DF             			.alias	_set_screen_size.1	= set_bat_vdc
   47    00:E5DF             			.alias	_sgx_set_screen_size.1	= set_bat_sgx
   48                        	
   49                        	
   50                        	
   51                        	; ***************************************************************************
   52                        	; ***************************************************************************
   53                        	;
   54                        	; void __fastcall init_256x224( void );
   55                        	
   56    02:C3B3             	_init_256x224	.proc
   57                        	
   58               0800     	.BAT_SIZE	=	64 * 32
   59               0080     	.CHR_0x20	=	.BAT_SIZE / 16		; 1st tile # after the BAT.
   60               7F00     	.SAT_ADDR	=	$7F00			; SAT takes 16 tiles of VRAM.
   61                        	
   62    02:C3B3  08         			php				; Disable interrupts.
   63    02:C3B4  78         			sei
   64                        	
   65    02:C3B5  20 7D FE   			call	clear_vce		; Clear all palettes.
   66                        	
   67    02:C3B8  A9 80      			lda.l	#.CHR_0x20		; CHR # of ASCII ' '.
   68    02:C3BA  85 F8      			sta.l	<_ax
   69    02:C3BC  A9 00      			lda.h	#.CHR_0x20
   70    02:C3BE  85 F9      			sta.h	<_ax
   71                        	
   72    02:C3C0  A9 08      			lda	#>.BAT_SIZE		; Size of BAT in words.
   73    02:C3C2  85 FA      			sta	<_bl
   74                        	
   75    02:C3C4  20 91 FE   			call	clear_vram_vdc		; Clear VRAM.
   76               0001     		.if	SUPPORT_SGX
   77    02:C3C7  20 73 FE   			call	clear_vram_sgx
   78                        		.endif
   79                        	
   80    02:C3CA  A9 EE      			lda	#<.mode_256x224		; Disable BKG & SPR layers but
   81    02:C3CC  85 EC      			sta.l	<_bp			; enable RCR & VBLANK IRQ.
   82    02:C3CE  A9 C3      			lda	#>.mode_256x224
   83    02:C3D0  85 ED      			sta.h	<_bp
   84                        	
   85               0001     		.if	SUPPORT_SGX
   86    02:C3D2  20 69 FE   			call	sgx_detect		; Are we really on an SGX?
   87    02:C3D5  90 05      			bcc	!+
   88    02:C3D7  A0 02      			ldy	#^.mode_256x224		; Set SGX 1st, with no VBL.
   89    02:C3D9  20 5F FE   			call	set_mode_sgx
   90                        		.endif
   91    02:C3DC  A0 02      	!:		ldy	#^.mode_256x224		; Set VDC 2nd, VBL allowed.
   92    02:C3DE  20 55 FE   			call	set_mode_vdc
   93                        	
   94               0001     		.if	SUPPORT_SGX
   95    02:C3E1  2C 10 02   			bit	SGX_SR			; Purge any overdue RCR.
   96                        		.endif
   97    02:C3E4  2C 00 02   			bit	VDC_SR			; Purge any overdue VBL.
   98    02:C3E7  28         			plp				; Restore interrupts.
   99                        	
  100    02:C3E8  20 09 E3   			call	wait_vsync		; Wait for the next VBLANK.
  101                        	
  102                        			leave				; All done, phew!
         02:C3EB  4C EF FF   			jmp	leave_proc
  103                        	
  104                        			; A standard 256x224 screen with overscan.
  105                        	
  106    02:C3EE  80         	.mode_256x224:	db	$80			; VCE Control Register.
  107    02:C3EF  04         			db	VCE_CR_5MHz + XRES_SOFT	;   Video Clock + Artifact Reduction
  108                        	
  109    02:C3F0  09         			db	VDC_MWR			; Memory-access Width Register
  110    02:C3F1  10 00      			dw	VDC_MWR_64x32 + VDC_MWR_1CYCLE
  111    02:C3F3  0A         			db	VDC_HSR			; Horizontal Sync Register
  112    02:C3F4  02 02      			dw	VDC_HSR_256
  113    02:C3F6  0B         			db	VDC_HDR			; Horizontal Display Register
  114    02:C3F7  1F 04      			dw	VDC_HDR_256
  115    02:C3F9  0C         			db	VDC_VPR			; Vertical Sync Register
  116    02:C3FA  02 17      			dw	VDC_VPR_224
  117    02:C3FC  0D         			db	VDC_VDW			; Vertical Display Register
  118    02:C3FD  DF 00      			dw	VDC_VDW_224
  119    02:C3FF  0E         			db	VDC_VCR			; Vertical Display END position Register
  120    02:C400  FF 00      			dw	VDC_VCR_224
  121    02:C402  0F         			db	VDC_DCR			; DMA Control Register
  122    02:C403  10 00      			dw	$0010			;   Enable automatic VRAM->SATB
  123    02:C405  13         			db	VDC_DVSSR		; VRAM->SATB address $7F00
  124    02:C406  00 7F      			dw	.SAT_ADDR
  125    02:C408  07         			db	VDC_BXR			; Background X-Scroll Register
  126    02:C409  00 00      			dw	$0000
  127    02:C40B  08         			db	VDC_BYR			; Background Y-Scroll Register
  128    02:C40C  00 00      			dw	$0000
  129    02:C40E  06         			db	VDC_RCR			; Raster Counter Register
  130    02:C40F  00 00      			dw	$0000			;   Never occurs!
  131    02:C411  05         			db	VDC_CR			; Control Register
  132    02:C412  0C 00      			dw	$000C			;   Enable VSYNC & RCR IRQ
  133    02:C414  00         			db	0
  134                        	
  135                        			.endp
  136                        	
  137                        	
  138                        	
  139                        	; ***************************************************************************
  140                        	; ***************************************************************************
  141                        	;
  142                        	; void __fastcall init_240x208( void );
  143                        	
  144                        	_init_240x208	.proc
  223                        			.endp
  224                        	
  225                        	
  226                        	
  227                        	; ***************************************************************************
  228                        	; ***************************************************************************
  229                        	;
  230                        	; void __fastcall _macro set_xres( unsigned int x_pixels<_ax> );
  231                        	; void __fastcall _macro sgx_set_xres( unsigned int x_pixels<_ax> );
  232                        	;
  233                        	; void __fastcall set_xres( unsigned int x_pixels<_ax>, unsigned char blur_flag<_bl> );
  234                        	; void __fastcall sgx_set_xres( unsigned int x_pixels<_ax>, unsigned char blur_flag<_bl> );
  235                        	;
  236                        	; blur_flag = XRES_SOFT (default if not specified), XRES_SHARP or XRES_KEEP
  237                        	
  238                        	set_xres_group	.procgroup			; These routines share code!
  337                        			.endprocgroup	; set_xres_group
  338                        	
  339                        	
  340                        	
  341                        	; ***************************************************************************
  342                        	; ***************************************************************************
  343                        	;
  344                        	; HuC VRAM Functions
  345                        	;
  346                        	; ***************************************************************************
  347                        	; ***************************************************************************
  348                        	
  349                        	
  350    09:DF8A             	load_vram_group	.procgroup			; These routines share code!
  351                        	
  352                        	; ***************************************************************************
  353                        	; ***************************************************************************
  354                        	;
  355                        	; void __fastcall load_vram( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_words<_ax> );
  356                        	; void __fastcall sgx_load_vram( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned int num_words<_ax> );
  357                        	;
  358                        	; void __fastcall far_load_vram( unsigned int vram<_di>, unsigned int num_words<_ax> );
  359                        	; void __fastcall sgx_far_load_vram( unsigned int vram<_di>, unsigned int num_words<_ax> );
  360                        	;
  361                        	; load_vram_sgx -  copy a block of memory to VRAM
  362                        	; load_vram_vdc -  copy a block of memory to VRAM
  363                        	;
  364                        	; _bp		= BAT memory location
  365                        	; _bp_bank	= BAT bank
  366                        	; _di		= VRAM base address
  367                        	; _ax		= nb of words to copy
  368                        	; ----
  369                        	; N.B. BAT data *must* be word-aligned!
  370                        	
  371               0000     		.ifndef	VRAM_XFER_SIZE
  373                        		.endif
  374                        	
  375    09:DF8A             	load_vram_x	.proc
  376                        	
  377    09:DF8A  43 08      			tma3
  378    09:DF8C  48         			pha
  379    09:DF8D  43 10      			tma4
  380    09:DF8F  48         			pha
  381                        	
  382    09:DF90  A4 02      			ldy	<_bp_bank
  383    09:DF92  20 3B E3   			jsr	map_bp_to_mpr34		; Map data to MPR3 & MPR4.
  384                        	
  385    09:DF95  20 7F E3   			jsr	set_di_to_mawr
  386                        	
  387                        	;		tii	.vdc_tai, ram_tia, 8
  388                        	
  389               0001     		.if	SUPPORT_SGX
  390    09:DF98  8A         			txa				; Select which VDC to write
  391    09:DF99  1A         			inc	a			; to.
  392    09:DF9A  1A         			inc	a
  393    09:DF9B  8D F3 22   			sta.l	ram_tia_dst
  394                        		.endif
  395                        	
  396    09:DF9E  A9 10      			lda	#VRAM_XFER_SIZE		; Split into 16-byte chunks
  397    09:DFA0  8D F5 22   			sta.l	ram_tia_len		; for stable IRQ response.
  398                        	
  399    09:DFA3  A6 EC      			ldx.l	<_bp
  400    09:DFA5  8E F1 22   			stx.l	ram_tia_src
  401    09:DFA8  A4 ED      			ldy.h	<_bp
  402    09:DFAA  8C F2 22   			sty.h	ram_tia_src
  403                        	
  404    09:DFAD  A5 F8      			lda.l	<_ax			; Length in words.
  405    09:DFAF  48         			pha				; Preserve length.l
  406                        	
  407    09:DFB0  46 F9      			lsr.h	<_ax
  408    09:DFB2  6A         			ror	a
  409    09:DFB3  46 F9      			lsr.h	<_ax
  410    09:DFB5  6A         			ror	a
  411    09:DFB6  46 F9      			lsr.h	<_ax
  412    09:DFB8  6A         			ror	a
  413               0000     		.if	VRAM_XFER_SIZE == 32
  416                        		.endif
  417                        	
  418    09:DFB9  22         			sax				; x=chunks-lo
  419    09:DFBA  F0 1F      			beq	.next_block		; a=source-lo, y=source-hi
  420                        	
  421    09:DFBC  20 F0 22   	.chunk_loop:	jsr	ram_tia			; transfer 16-bytes
  422                        	
  423    09:DFBF  18         			clc				; increment source
  424    09:DFC0  69 10      			adc	#VRAM_XFER_SIZE
  425    09:DFC2  8D F1 22   			sta.l	ram_tia_src
  426    09:DFC5  90 11      			bcc	.same_page
  427    09:DFC7  C8         			iny
  428    09:DFC8  10 0B      			bpl	.same_bank		; remap_data
  429                        	
  430    09:DFCA  42         			say
  431    09:DFCB  43 10      			tma4
  432    09:DFCD  53 08      			tam3
  433    09:DFCF  1A         			inc	a
  434    09:DFD0  53 10      			tam4
  435    09:DFD2  A9 60      			lda	#$60
  436    09:DFD4  42         			say
  437                        	
  438    09:DFD5  8C F2 22   	.same_bank:	sty.h	ram_tia_src
  439                        	
  440    09:DFD8  CA         	.same_page:	dex
  441    09:DFD9  D0 E1      			bne	.chunk_loop
  442                        	
  443    09:DFDB  C6 F9      	.next_block:	dec.h	<_ax
  444    09:DFDD  10 DD      			bpl	.chunk_loop
  445                        	
  446    09:DFDF  68         			pla				; Restore length.l
  447    09:DFE0  29 07      			and	#VRAM_XFER_SIZE / 2 - 1
  448    09:DFE2  F0 07      			beq	.done
  449                        	
  450    09:DFE4  0A         			asl	a			; Convert words to bytes.
  451    09:DFE5  8D F5 22   			sta.l	ram_tia_len
  452                        	
  453    09:DFE8  20 F0 22   			jsr	ram_tia			; transfer remainder
  454                        	
  455    09:DFEB  68         	.done:		pla
  456    09:DFEC  53 10      			tam4
  457    09:DFEE  68         			pla
  458    09:DFEF  53 08      			tam3
  459                        	
  460                        			leave
         09:DFF1  4C EF FF   			jmp	leave_proc
  461                        	
  462                        			.endp
  463                        	
  464                        			.endprocgroup	; load_vram_group
  465                        	
  466                        	
  467                        	
  468                        	; ***************************************************************************
  469                        	; ***************************************************************************
  470                        	;
  471                        	; void __fastcall load_bat( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
  472                        	; void __fastcall sgx_load_bat( unsigned int vram<_di>, unsigned char __far *data<_bp_bank:_bp>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
  473                        	;
  474                        	; void __fastcall far_load_bat( unsigned int vram<_di>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
  475                        	; void __fastcall sgx_far_load_bat( unsigned int vram<_di>, unsigned char tiles_w<_al>, unsigned char tiles_h<_ah> );
  476                        	;
  477                        	; load_bat_sgx - transfer a BAT to VRAM
  478                        	; load_bat_vdc - transfer a BAT to VRAM
  479                        	;
  480                        	; transfer a BAT to VRAM
  481                        	; ----
  482                        	; _bp		= BAT memory location
  483                        	; _bp_bank	= BAT bank
  484                        	; _di		= VRAM base address
  485                        	; _al		= nb of column to copy
  486                        	; _ah		= nb of row
  487                        	; ----
  488                        	; N.B. BAT data *must* be word-aligned!
  489                        	
  490               20EC     	_gfx_load_bat_PARM_2	=	_bp
  491               20F0     	_gfx_load_bat_PARM_3	=	_di
  492               20F8     	_gfx_load_bat_PARM_4	=	_al
  493               20F9     	_gfx_load_bat_PARM_5	=	_ah
  494                        	
  495    02:C732             	load_bat_group	.procgroup			; These routines share code!
  496                        	
  497               0001     		.if	SUPPORT_SGX
  498                        			.proc	_sgx_load_bat.4
  505                        			.endp
  506                        		.endif
  507                        	
  508    02:C732             			.proc	_load_bat.4
  509    02:C732             			.alias	_far_load_bat.3		= _load_bat.4
  510                        	
  511    02:C732  82         			clx				; Offset to PCE VDC.
  512                        	
  513    02:C733  43 08      			tma3
  514    02:C735  48         			pha
  515                        	
  516    02:C736  A4 02      			ldy	<_bp_bank
  517    02:C738  20 2D E3   			jsr	map_bp_to_mpr3		; Map data to MPR3.
  518                        	
  519    02:C73B  A4 EC      			ldy.l	<_bp
  520    02:C73D  64 EC      			stz.l	<_bp
  521                        	
  522    02:C73F  20 7F E3   	.line_loop:	jsr	set_di_to_mawr
  523                        	
  524    02:C742  A5 F8      			lda	<_al
  525    02:C744  85 00      			sta	<__temp
  526    02:C746  B1 EC      	.tile_loop:	lda	[_bp], y
  527    02:C748  9D 02 02   			sta	VDC_DL, x
  528    02:C74B  C8         			iny
  529    02:C74C  B1 EC      			lda	[_bp], y
  530    02:C74E  9D 03 02   			sta	VDC_DH, x
  531    02:C751  C8         			iny
  532    02:C752  D0 03      			bne	!+
  533    02:C754  20 4C E3   			jsr	inc.h_bp_mpr3
  534    02:C757  C6 00      	!:		dec	<__temp
  535    02:C759  D0 EB      			bne	.tile_loop
  536                        	
  537    02:C75B  BD 4B 23   			lda	vdc_bat_width, x
  538    02:C75E  18         			clc
  539    02:C75F  65 F0      			adc.l	<_di
  540    02:C761  85 F0      			sta.l	<_di
  541    02:C763  90 02      			bcc	!+
  542    02:C765  E6 F1      			inc.h	<_di
  543                        	
  544    02:C767  C6 F9      	!:		dec	<_ah
  545    02:C769  D0 D4      			bne	.line_loop
  546                        	
  547    02:C76B  68         			pla
  548    02:C76C  53 08      			tam3
  549                        	
  550                        			leave
         02:C76E  4C EF FF   			jmp	leave_proc
  551                        	
  552                        			.endp
  553                        	
  554                        			.endprocgroup	; load_bat_group
  555                        	
  556                        	
  557                        	
  558                        	; ***************************************************************************
  559                        	; ***************************************************************************
  560                        	;
  561                        	; void __fastcall load_palette( unsigned char palette<_al>, unsigned char __far *data<_bp_bank:_bp>, unsigned char num_palettes<_ah> );
  562                        	;
  563                        	; void __fastcall far_load_palette( unsigned char palette<_al>, unsigned char num_palettes<_ah> );
  564                        	
  565    02:C818             			.proc	_load_palette.3
  566    02:C818             			.alias	_far_load_palette.2	= _load_palette.3
  567                        	
  568    02:C818  AC 22 23   			ldy	color_queue_w		; Get the queue's write index.
  569                        	
  570    02:C81B  A5 EC      			lda.l	<_bp			; Add this set of palettes to
  571    02:C81D  99 33 23   			sta	color_addr_l, y		; the queue.
  572    02:C820  A5 ED      			lda.h	<_bp
  573    02:C822  99 3B 23   			sta	color_addr_h, y
  574    02:C825  A5 02      			lda	<_bp_bank
  575    02:C827  99 43 23   			sta	color_bank, y
  576    02:C82A  A5 F8      			lda	<_al
  577    02:C82C  99 23 23   			sta	color_index, y
  578    02:C82F  A5 F9      			lda	<_ah
  579    02:C831  99 2B 23   			sta	color_count, y
  580                        	
  581    02:C834  C8         			iny				; Increment the queue index.
  582    02:C835  98         			tya
  583    02:C836  29 07      			and	#7
  584                        	
  585    02:C838  CD 21 23   	.wait:		cmp	color_queue_r		; If the queue is full, wait
  586    02:C83B  F0 FB      			beq	.wait			; for the next VBLANK.
  587                        	
  588    02:C83D  8D 22 23   			sta	color_queue_w		; Signal item is in the queue.
  589                        	
  590                        			leave				; All done, phew!
         02:C840  4C EF FF   			jmp	leave_proc
  591                        	
  592                        			.endp
  593                        	
  594                        	
  595                        	
  596               0000     		.if	0
  620                        		.endif
  621                        	
  622                        	
  623                        	
  624                        	; ***************************************************************************
  625                        	; ***************************************************************************
  626                        	;
  627                        	; void __fastcall load_background( unsigned char __far *tiles<_bp_bank:_bp>, unsigned char __far *palettes<__fbank:__fptr>, unsigned char __far *bat<_cl:_bx>, unsigned char w<_dl>, unsigned char w<_dh> );
  628                        	
  629                        			.proc	_load_background.5
  667                        			.endp
  668                        	
  669                        	
  670                        	
  671                        	; ***************************************************************************
  672                        	; ***************************************************************************
  673                        	;
  674                        	; void __fastcall vram2vram( unsigned int vram_dst<_ax>, unsigned int vram_src<_bx>, unsigned int word_len<_cx> );
  675                        	; void __fastcall sgx_vram2vram( unsigned int vram_dst<_ax>, unsigned int vram_src<_bx>, unsigned int word_len<_cx> );
  676                        	;
  677                        	
  678               0001     		.if	SUPPORT_SGX
  679                        			.proc	_sgx_vram2vram.3
  685                        			.endp
  686                        		.endif
  687                        	
  688    02:C771             			.proc	_vram2vram.3
  689                        	
  690    02:C771  82         			clx				; Offset to PCE VDC.
  691                        	
  692    02:C772  08         			php
  693    02:C773  78         			sei
  694    02:C774  A9 11      			lda	#VDC_DESR
  695    02:C776  9D 00 02   			sta	VDC_AR, x
  696    02:C779  A5 F8      			lda.l	<_ax
  697    02:C77B  9D 02 02   			sta	VDC_DL, x
  698    02:C77E  A5 F9      			lda.h	<_ax
  699    02:C780  9D 03 02   			sta	VDC_DH, x
  700                        	
  701    02:C783  A9 10      			lda	#VDC_SOUR
  702    02:C785  9D 00 02   			sta	VDC_AR, x
  703    02:C788  A5 FA      			lda.l	<_bx
  704    02:C78A  9D 02 02   			sta	VDC_DL, x
  705    02:C78D  A5 FB      			lda.h	<_bx
  706    02:C78F  9D 03 02   			sta	VDC_DH, x
  707                        	
  708    02:C792  A9 12      			lda	#VDC_LENR
  709    02:C794  9D 00 02   			sta	VDC_AR, x
  710    02:C797  18         			clc
  711    02:C798  A5 FC      			lda.l	<_cx
  712    02:C79A  69 FF      			adc	#$FF
  713    02:C79C  9D 02 02   			sta	VDC_DL, x
  714    02:C79F  A5 FD      			lda.h	<_cx
  715    02:C7A1  69 FF      			adc	#$FF
  716    02:C7A3  9D 03 02   			sta	VDC_DH, x
  717                        	
  718    02:C7A6  B5 F7      			lda	<vdc_reg, x
  719    02:C7A8  8D 00 02   			sta	VDC_AR
  720    02:C7AB  28         			plp
  721                        	
  722                        			leave
         02:C7AC  4C EF FF   			jmp	leave_proc
  723                        	
  724                        			.endp
  725                        	
  726                        	
  727                        	
  728                        	; ***************************************************************************
  729                        	; ***************************************************************************
  730                        	;
  731                        	; HuC Font Functions
  732                        	;
  733                        	; ***************************************************************************
  734                        	; ***************************************************************************
  735                        	
  736                        	
  737                        	
  738               236B     			.bss
  739                        	
  740                        	; **************
  741                        	; 16-bytes of VDC BAT information.
  742                        	;
  743                        	; N.B. MUST be 16-bytes before the SGX versions to use PCE_VDC_OFFSET.
  744                        	
  745    F8:236B             	_vdc_font_base:	ds	2	; Tile number of ASCII '\0'.
  746                        	
  747                        	; From hucc-printf.asm just to avoid wasting .bss space with padding.
  748    F8:236D             	_vdc_tty_x_lhs:	ds	1	; TTY minimum X position.
  749    F8:236E             	_vdc_tty_y_top:	ds	1	; TTY minimum Y position.
  750    F8:236F             	_vdc_tty_x:	ds	1	; TTY current X position.
  751    F8:2370             	_vdc_tty_y:	ds	1	; TTY current Y position.
  752                        	
  753               0001     		.if	SUPPORT_SGX
  754                        	
  755                        	; **************
  756                        	; 16-bytes of SGX BAT information.
  757                        	;
  758                        	; N.B. MUST be 16-bytes after the VDC versions to use SGX_VDC_OFFSET.
  759                        	
  760    F8:2371             			ds	10	; Padding to ensure the 16-byte delta.
  761                        	
  762    F8:237B             	_sgx_font_base:	ds	2	; Tile number of ASCII '\0'.
  763                        	
  764                        	; From hucc-printf.asm just to avoid wasting .bss space with padding.
  765    F8:237D             	_sgx_tty_x_lhs:	ds	1	; TTY minimum X position.
  766    F8:237E             	_sgx_tty_y_top:	ds	1	; TTY minimum Y position.
  767    F8:237F             	_sgx_tty_x:	ds	1	; TTY current X position.
  768    F8:2380             	_sgx_tty_y:	ds	1	; TTY current Y position.
  769                        	
  770                        		.endif
  771                        	
  772                        	;_font_base	.alias	vdc_font_base
  773                        	
  774               E5DF     			.code
  775                        	
  776                        	
  777                        	
  778                        	; ***************************************************************************
  779                        	; ***************************************************************************
  780                        	;
  781                        	; void __fastcall set_font_addr( unsigned int vram<acc> );
  782                        	; void __fastcall sgx_set_font_addr( unsigned int vram<acc> );
  783                        	
  784               0001     		.if	SUPPORT_SGX
  785    00:E5DF             	_sgx_set_font_addr.1:
  786    00:E5DF  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  787    00:E5E1  F0         			db	$F0			; Turn "clx" into a "beq".
  788                        		.endif
  789                        	
  790    00:E5E2             	_set_font_addr.1:
  791    00:E5E2  82         			clx				; Offset to PCE VDC.
  792                        	
  793    00:E5E3  84 00      	set_font_addr:	sty	<__temp
  794    00:E5E5  46 00      			lsr	<__temp
  795    00:E5E7  6A         			ror	a
  796    00:E5E8  46 00      			lsr	<__temp
  797    00:E5EA  6A         			ror	a
  798    00:E5EB  46 00      			lsr	<__temp
  799    00:E5ED  6A         			ror	a
  800    00:E5EE  46 00      			lsr	<__temp
  801    00:E5F0  6A         			ror	a
  802    00:E5F1  38         			sec
  803    00:E5F2  E9 20      			sbc	#$20
  804    00:E5F4  9D 6B 23   			sta.l	_vdc_font_base,x
  805    00:E5F7  B0 02      			bcs	!+
  806    00:E5F9  C6 00      			dec	<__temp
  807                        	
  808    00:E5FB  BD 6C 23   	!:		lda.h	_vdc_font_base, x
  809    00:E5FE  29 F0      			and	#$F0
  810    00:E600  05 00      			ora	<__temp
  811    00:E602  9D 6C 23   			sta.h	_vdc_font_base, x
  812    00:E605  60         			rts
  813                        	
  814                        	
  815                        	
  816                        	; ***************************************************************************
  817                        	; ***************************************************************************
  818                        	;
  819                        	; void __fastcall set_font_pal( unsigned char palette<acc> );
  820                        	; void __fastcall sgx_set_font_pal( unsigned char palette<acc> );
  821                        	
  822               0001     		.if	SUPPORT_SGX
  823    00:E606             	_sgx_set_font_pal.1:
  824    00:E606  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  825    00:E608  F0         			db	$F0			; Turn "clx" into a "beq".
  826                        		.endif
  827                        	
  828    00:E609             	_set_font_pal:					; For compatibility with HuC.
  829    00:E609             	_set_font_pal.1:
  830    00:E609  82         			clx				; Offset to PCE VDC.
  831    00:E60A  0A         			asl	a
  832    00:E60B  0A         			asl	a
  833    00:E60C  0A         			asl	a
  834    00:E60D  0A         			asl	a
  835    00:E60E  85 00      			sta	<__temp
  836                        	
  837    00:E610  BD 6C 23   			lda.h	_vdc_font_base, x
  838    00:E613  29 0F      			and	#$0F
  839    00:E615  05 00      			ora	<__temp
  840    00:E617  9D 6C 23   			sta.h	_vdc_font_base, x
  841    00:E61A  60         			rts
  842                        	
  843                        	
  844                        	
  845                        	; ***************************************************************************
  846                        	; ***************************************************************************
  847                        	;
  848                        	; void __fastcall load_font( char far *font<_bp_bank:_bp>, unsigned char count<_al> );
  849                        	;
  850                        	; void __fastcall load_font( char far *font<_bp_bank:_bp>, unsigned char count<_al>, unsigned int vram<acc> );
  851                        	; void __fastcall sgx_load_font( char far *font<_bp_bank:_bp>, unsigned char count<_al>, unsigned int vram<acc> );
  852                        	;
  853                        	; void __fastcall far_load_font( unsigned char count<_al>, unsigned int vram<acc> );
  854                        	; void __fastcall sgx_far_load_font( unsigned char count<_al>, unsigned int vram<acc> );
  855                        	
  856    00:E61B  AC 4F 23   	_load_font.2:	ldy	vdc_bat_limit		; Load the font directly
  857    00:E61E  C8         			iny				; after the BAT (stupid!).
  858    00:E61F  62         			cla
  859    00:E620  80 03      			bra	_load_font.3
  860                        	
  861               0001     		.if	SUPPORT_SGX
  862    00:E622             	_sgx_load_font.3:
  863    00:E622  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  864    00:E624  F0         			db	$F0			; Turn "clx" into a "beq".
  865                        		.endif
  866                        	
  867    00:E625  82         	_load_font.3:	clx				; Offset to PCE VDC.
  868                        	
  869    00:E626  85 F0      			sta.l	<_di			; Load the font directly
  870    00:E628  84 F1      			sty.h	<_di			; after the BAT (stupid!).
  871                        	
  872    00:E62A  20 E3 E5   			jsr	set_font_addr		; Set xxx_font_base from addr.
  873                        	
  874    00:E62D  A5 F8      			lda	<__al			; Convert #tiles into #words.
  875    00:E62F  64 F9      			stz	<__ah
  876    00:E631  0A         			asl	a
  877    00:E632  26 F9      			rol	<__ah
  878    00:E634  0A         			asl	a
  879    00:E635  26 F9      			rol	<__ah
  880    00:E637  0A         			asl	a
  881    00:E638  26 F9      			rol	<__ah
  882    00:E63A  0A         			asl	a
  883    00:E63B  26 F9      			rol	<__ah
  884    00:E63D  85 F8      			sta	<__al
  885    00:E63F  4C 77 FF   			jmp	load_vram_x
  886                        	
  887    00:E642             			.alias	_far_load_font.2	= _load_font.3
  888    00:E642             			.alias	_sgx_far_load_font.2	= _sgx_load_font.3
  889                        	
  890                        	
  891                        	
  892                        	; ***************************************************************************
  893                        	; ***************************************************************************
  894                        	;
  895                        	; void __fastcall cls();
  896                        	; void __fastcall sgx_cls();
  897                        	;
  898                        	; void __fastcall cls( int tile<acc> );
  899                        	; void __fastcall sgx_cls( int tile<acc> );
  900                        	
  901               0001     		.if	SUPPORT_SGX
  902    00:E642  A2 10      	_sgx_cls:	ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  903    00:E644  F0         			db	$F0			; Turn "clx" into a "beq".
  904                        		.endif
  905                        	
  906    00:E645  82         	_cls:		clx				; Offset to PCE VDC.
  907                        	
  908    00:E646  BD 6B 23   	clear_tty_x:	lda.l	_vdc_font_base, x
  909    00:E649  BC 6C 23   			ldy.h	_vdc_font_base, x
  910    00:E64C  18         			clc
  911    00:E64D  69 20      			adc	#' '
  912    00:E64F  90 07      			bcc	!+
  913    00:E651  C8         			iny
  914    00:E652  80 04      			bra	!+
  915                        	
  916               0001     		.if	SUPPORT_SGX
  917    00:E654  A2 10      	_sgx_cls.1:	ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  918    00:E656  F0         			db	$F0			; Turn "clx" into a "beq".
  919                        		.endif
  920                        	
  921    00:E657  82         	_cls.1:		clx
  922                        	
  923    00:E658  85 F8      	!:		sta.l	<_ax			; VRAM word to write.
  924    00:E65A  84 F9      			sty.h	<_ax
  925    00:E65C  BD 4F 23   			lda	vdc_bat_limit, x	; BAT size hi-byte.
  926    00:E65F  1A         			inc	a
  927    00:E660  85 FA      			sta	<_bl
  928    00:E662  4C 87 FE   			jmp	clear_bat_x
  929                        	
  930                        	
  931                        	
  932                        	; ***************************************************************************
  933                        	; ***************************************************************************
  934                        	;
  935                        	; void __fastcall __macro load_default_font( void );
  936                        	; void __fastcall __macro sgx_load_default_font( void );
  937                        	;
  938                        	; Args: _bp, _bp_bank = _farptr to font data mapped into MPR3 & MPR4.
  939                        	; Args: _di = VRAM destination address.
  940                        	; Args: monofont_fg = font color (0..15)
  941                        	; Args: monofont_bg = background color (0..15)
  942                        	; Args: _al = number of tiles (aka characters) 0==256
  943                        	
  944    09:D860             	huc_monofont_x	.proc
  945                        	
  946               2381     			.bss
  947    F8:2381             	monofont_fg:	.ds	1
  948    F8:2382             	monofont_bg:	.ds	1
  949               D860     			.code
  950                        	
  951    09:D860  BC 4F 23   			ldy	vdc_bat_limit, x	; BAT limit mask hi-byte.
  952    09:D863  C8         			iny
  953    09:D864  62         			cla
  954    09:D865  85 F0      			sta.l	<_di			; Load the font directly
  955    09:D867  84 F1      			sty.h	<_di			; after the BAT (stupid!).
  956                        	
  957    09:D869  20 E3 E5   			jsr	set_font_addr		; Set xxx_font_base from addr.
  958                        	
  959    09:D86C  A9 F0      			lda.l	#.font
  960    09:D86E  85 EC      			sta.l	<_bp
  961    09:D870  A9 D8      			lda.h	#.font
  962    09:D872  85 ED      			sta.h	<_bp
  963                        	
  964    09:D874  A9 60      			lda	#$60			; #characters.
  965    09:D876  85 F8      			sta	<_al
  966                        	
  967    09:D878  20 7F E3   			jsr	set_di_to_mawr
  968                        	
  969    09:D87B  AD 81 23   			lda	monofont_fg		; Foreground pixel color.
  970    09:D87E  85 00      			sta	<__temp
  971    09:D880  AD 82 23   			lda	monofont_bg		; Background pixel color.
  972    09:D883  DA         			phx
  973    09:D884  A2 FC      			ldx.l	#_cx			; Create a bit mask for each
  974    09:D886  9E 00 20   	.bg_loop:	stz	$2000, x		; plane of the background.
  975    09:D889  4A         			lsr	a
  976    09:D88A  90 03      			bcc	.bg_plane
  977    09:D88C  DE 00 20   			dec	$2000, x
  978    09:D88F  E8         	.bg_plane:	inx
  979    09:D890  D0 F4      			bne	.bg_loop
  980    09:D892  FA         			plx
  981                        	
  982    09:D893  C2         	.tile_loop:	cly
  983                        	
  984    09:D894  B1 EC      	.plane01:	lda	[_bp], y		; Get font byte.
  985    09:D896  8F 00 06   			bbs0	<__temp, .set_plane0
  986    09:D899  49 FF      	.clr_plane0:	eor	#$FF			; Clr font bits in background.
  987    09:D89B  25 FC      			and	<_cx + 0
  988    09:D89D  80 02      			bra	.put_plane0
  989    09:D89F  05 FC      	.set_plane0:	ora	<_cx + 0		; Set font bits in background.
  990    09:D8A1  9D 02 02   	.put_plane0:	sta	VDC_DL, x
  991                        	
  992    09:D8A4  B1 EC      			lda	[_bp], y		; Get font byte.
  993    09:D8A6  9F 00 06   			bbs1	<__temp, .set_plane1
  994    09:D8A9  49 FF      	.clr_plane1:	eor	#$FF			; Clr font bits in background.
  995    09:D8AB  25 FD      			and	<_cx + 1
  996    09:D8AD  80 02      			bra	.put_plane1
  997    09:D8AF  05 FD      	.set_plane1:	ora	<_cx + 1		; Set font bits in background.
  998    09:D8B1  9D 03 02   	.put_plane1:	sta	VDC_DH, x
  999                        	
 1000    09:D8B4  C8         			iny
 1001    09:D8B5  C0 08      			cpy	#8
 1002    09:D8B7  90 DB      			bcc	.plane01
 1003                        	
 1004    09:D8B9  C2         			cly
 1005                        	
 1006    09:D8BA  B1 EC      	.plane23:	lda	[_bp], y		; Get font byte.
 1007    09:D8BC  AF 00 06   			bbs2	<__temp, .set_plane2
 1008    09:D8BF  49 FF      	.clr_plane2:	eor	#$FF			; Clr font bits in background.
 1009    09:D8C1  25 FE      			and	<_cx + 2
 1010    09:D8C3  80 02      			bra	.put_plane2
 1011    09:D8C5  05 FE      	.set_plane2:	ora	<_cx + 2		; Set font bits in background.
 1012    09:D8C7  9D 02 02   	.put_plane2:	sta	VDC_DL, x
 1013                        	
 1014    09:D8CA  B1 EC      			lda	[_bp], y		; Get font byte.
 1015    09:D8CC  BF 00 06   			bbs3	<__temp, .set_plane3
 1016    09:D8CF  49 FF      	.clr_plane3:	eor	#$FF			; Clr font bits in background.
 1017    09:D8D1  25 FF      			and	<_cx + 3
 1018    09:D8D3  80 02      			bra	.put_plane3
 1019    09:D8D5  05 FF      	.set_plane3:	ora	<_cx + 3		; Set font bits in background.
 1020    09:D8D7  9D 03 02   	.put_plane3:	sta	VDC_DH, x
 1021                        	
 1022    09:D8DA  C8         			iny
 1023    09:D8DB  C0 08      			cpy	#8
 1024    09:D8DD  90 DB      			bcc	.plane23
 1025                        	
 1026    09:D8DF  A5 EC      			lda.l	<_bp
 1027    09:D8E1  69 07      			adc	#8-1
 1028    09:D8E3  85 EC      			sta.l	<_bp
 1029    09:D8E5  90 02      			bcc	!+
 1030    09:D8E7  E6 ED      			inc.h	<_bp
 1031                        	
 1032    09:D8E9  C6 F8      	!:		dec	<_al
 1033    09:D8EB  D0 A6      			bne	.tile_loop
 1034                        	
 1035                        			leave				; All done, phew!
         09:D8ED  4C EF FF   			jmp	leave_proc
 1036                        	
 1037    09:D8F0             	.font:		incbin	"data/font8x8-bold-short-iso646-fr.dat", 128
 1038                        	
 1039                        			.endp
 1040                        	
 1041                        	
 1042                        	
 1043                        	; ***************************************************************************
 1044                        	; ***************************************************************************
 1045                        	;
 1046                        	; HuC Text Output
 1047                        	;
 1048                        	; ***************************************************************************
 1049                        	; ***************************************************************************
 1050                        	
 1051                        	
 1052                        	
 1053    02:C0D4             	vdc_tty_out	.procgroup			; These routines share code!
 1054                        	
 1055                        	; ***************************************************************************
 1056                        	; ***************************************************************************
 1057                        	;
 1058                        	; void __fastcall put_char( unsigned char digit<_bl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
 1059                        	
 1060               0001     		.if	SUPPORT_SGX
 1061                        	put_char_sgx	.proc
 1067                        			.endp
 1068                        		.endif
 1069                        	
 1070    02:C0D4             	put_char_vdc	.proc
 1071                        	
 1072    02:C0D4  82         			clx				; Offset to PCE VDC.
 1073                        	
 1074    02:C0D5  20 34 E4   			jsr	set_di_xy_mawr
 1075                        	
 1076    02:C0D8  62         			cla				; Push EOL marker.
 1077    02:C0D9  48         			pha
 1078                        	
 1079    02:C0DA  A5 FA      			lda	<_bl
 1080    02:C0DC  48         			pha				; Push character to output.
 1081    02:C0DD  80 58      			bra	!output+
 1082                        	
 1083    02:C0DF             			.ref	put_hex_vdc		; Need put_number_vdc
 1084                        			.endp
 1085                        	
 1086    02:C0DF             			.alias	_put_char.3		= put_char_vdc
 1087                        	
 1088                        	
 1089                        	
 1090                        	; ***************************************************************************
 1091                        	; ***************************************************************************
 1092                        	;
 1093                        	; void __fastcall put_digit( unsigned char digit<_bl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
 1094                        	
 1095               0001     		.if	SUPPORT_SGX
 1096                        	put_digit_sgx	.proc
 1102                        			.endp
 1103                        		.endif
 1104                        	
 1105    02:C0DF             	put_digit_vdc	.proc
 1106                        	
 1107    02:C0DF  82         			clx				; Offset to PCE VDC.
 1108                        	
 1109    02:C0E0  20 34 E4   			jsr	set_di_xy_mawr
 1110                        	
 1111    02:C0E3  62         			cla				; Push EOL marker.
 1112    02:C0E4  48         			pha
 1113                        	
 1114    02:C0E5  A5 FA      			lda	<_bl			; Convert hex digit to ASCII.
 1115    02:C0E7  29 0F      			and	#$0F
 1116    02:C0E9  C9 0A      			cmp	#10
 1117    02:C0EB  90 02      			bcc	!+
 1118    02:C0ED  69 06      			adc	#6
 1119    02:C0EF  69 30      	!:		adc	#'0'
 1120    02:C0F1  48         			pha				; Push character to output.
 1121    02:C0F2  80 43      			bra	!output+
 1122                        	
 1123    02:C0F4             			.ref	put_hex_vdc		; Need put_number_vdc
 1124                        			.endp
 1125                        	
 1126    02:C0F4             			.alias	_put_digit.3		= put_digit_vdc
 1127                        	
 1128                        	
 1129                        	
 1130                        	; ***************************************************************************
 1131                        	; ***************************************************************************
 1132                        	;
 1133                        	; void __fastcall put_hex( unsigned int number<_bx>, unsigned char length<_cl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
 1134                        	
 1135               0001     		.if	SUPPORT_SGX
 1136                        	put_hex_sgx	.proc
 1141                        			.endp
 1142                        		.endif
 1143                        	
 1144    02:C0F4             	put_hex_vdc	.proc
 1145                        	
 1146    02:C0F4  82         			clx				; Offset to PCE VDC.
 1147                        	
 1148    02:C0F5  20 34 E4   			jsr	set_di_xy_mawr
 1149                        	
 1150    02:C0F8  A4 FC      			ldy	<_cl			; Total #characters to print,
 1151    02:C0FA  F0 3E      			beq	!exit+			; NOT minimum #characters!
 1152                        	
 1153    02:C0FC  86 00      			stx	<__temp			; Preserve which VDC.
 1154                        	
 1155    02:C0FE  82         			clx				; Push EOL marker.
 1156    02:C0FF  DA         			phx
 1157                        	
 1158    02:C100  B5 FA      	.hex_byte:	lda.l	<_bx, x			; Convert hex digit to ASCII.
 1159    02:C102  29 0F      			and	#$0F
 1160    02:C104  C9 0A      			cmp	#10
 1161    02:C106  90 02      			bcc	!+
 1162    02:C108  69 06      			adc	#6
 1163    02:C10A  69 30      	!:		adc	#'0'
 1164    02:C10C  48         			pha				; Push character to output.
 1165    02:C10D  88         			dey
 1166    02:C10E  F0 15      			beq	.hex_done
 1167                        	
 1168    02:C110  B5 FA      			lda.l	<_bx, x			; Convert hex digit to ASCII.
 1169    02:C112  4A         			lsr	a
 1170    02:C113  4A         			lsr	a
 1171    02:C114  4A         			lsr	a
 1172    02:C115  4A         			lsr	a
 1173    02:C116  C9 0A      			cmp	#10
 1174    02:C118  90 02      			bcc	!+
 1175    02:C11A  69 06      			adc	#6
 1176    02:C11C  69 30      	!:		adc	#'0'
 1177    02:C11E  48         			pha				; Push character to output.
 1178    02:C11F  88         			dey
 1179    02:C120  F0 03      			beq	.hex_done
 1180                        	
 1181    02:C122  E8         			inx
 1182    02:C123  80 DB      			bra	.hex_byte
 1183                        	
 1184    02:C125  A6 00      	.hex_done:	ldx	<__temp			; Restore which VDC.
 1185    02:C127  80 0E      			bra	!output+
 1186                        	
 1187    02:C129  18         	.write:		clc
 1188    02:C12A  7D 6B 23   			adc.l	_vdc_font_base, x
 1189    02:C12D  9D 02 02   			sta	VDC_DL, x
 1190    02:C130  62         			cla
 1191    02:C131  7D 6C 23   			adc.h	_vdc_font_base, x
 1192    02:C134  9D 03 02   			sta	VDC_DH, x
 1193                        	
 1194    02:C137  68         	!output:	pla				; Pop the digits and output.
 1195    02:C138  D0 EF      			bne	.write
 1196                        	
 1197                        	!exit:		leave				; All done!
         02:C13A  4C EF FF   			jmp	leave_proc
 1198                        	
 1199                        			.endp
 1200                        	
 1201    02:C13D             			.alias	_put_hex.4 = put_hex_vdc
 1202                        	
 1203                        	
 1204                        	
 1205                        	; ***************************************************************************
 1206                        	; ***************************************************************************
 1207                        	;
 1208                        	; void __fastcall put_number( unsigned int number<_bx>, unsigned char length<_cl>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
 1209                        	
 1210               0001     		.if	SUPPORT_SGX
 1211                        	put_number_sgx	.proc
 1216                        			.endp
 1217                        		.endif
 1218                        	
 1219    02:C13D             	put_number_vdc	.proc
 1220                        	
 1221    02:C13D  82         			clx				; Offset to PCE VDC.
 1222                        	
 1223    02:C13E  20 34 E4   			jsr	set_di_xy_mawr
 1224                        	
 1225    02:C141  A4 FC      			ldy	<_cl			; Total #characters to print,
 1226    02:C143  F0 F5      			beq	!exit-			; NOT minimum #characters!
 1227                        	
 1228    02:C145  86 00      			stx	<__temp			; Preserve which VDC.
 1229                        	
 1230    02:C147  82         			clx				; Push EOL marker.
 1231    02:C148  DA         			phx
 1232                        	
 1233    02:C149  A6 FB      			ldx.h	<_bx			; Is the number -ve?
 1234    02:C14B  86 FC      			stx	<_cl			; Remember this.
 1235    02:C14D  10 10      			bpl	.divide_by_ten
 1236                        	
 1237    02:C14F  38         			sec				; Make the number +ve.
 1238    02:C150  A5 FA      			lda.l	<_bx
 1239    02:C152  49 FF      			eor	#$FF
 1240    02:C154  69 00      			adc	#0
 1241    02:C156  85 FA      			sta.l	<_bx
 1242    02:C158  8A         			txa
 1243    02:C159  49 FF      			eor	#$FF
 1244    02:C15B  69 00      			adc	#0
 1245    02:C15D  85 FB      			sta.h	<_bx
 1246                        	
 1247    02:C15F  A2 10      	.divide_by_ten:	ldx	#16
 1248    02:C161  62         			cla				; Clear Remainder.
 1249    02:C162  06 FA      			asl.l	<_bx			; Rotate Dividend, MSB -> C.
 1250    02:C164  26 FB      			rol.h	<_bx
 1251    02:C166  2A         	.divide_loop:	rol	a			; Rotate C into Remainder.
 1252    02:C167  C9 0A      			cmp	#10			; Test Divisor.
 1253    02:C169  90 02      			bcc	.divide_less		; CC if Divisor > Remainder.
 1254    02:C16B  E9 0A      			sbc	#10			; Subtract Divisor.
 1255    02:C16D  26 FA      	.divide_less:	rol.l	<_bx			; Quotient bit -> Dividend LSB.
 1256    02:C16F  26 FB      			rol.h	<_bx			; Rotate Dividend, MSB -> C.
 1257    02:C171  CA         			dex
 1258    02:C172  D0 F2      			bne	.divide_loop
 1259                        	
 1260    02:C174  18         			clc
 1261    02:C175  69 30      			adc	#'0'			; Always leaves C clr.
 1262    02:C177  48         			pha				; Push character to output.
 1263    02:C178  88         			dey
 1264    02:C179  F0 10      			beq	!pad+
 1265    02:C17B  A5 FA      			lda.l	<_bx			; Repeat while non-zero.
 1266    02:C17D  05 FB      			ora.h	<_bx
 1267    02:C17F  D0 DE      			bne	.divide_by_ten
 1268                        	
 1269    02:C181  A6 00      			ldx	<__temp			; Restore which VDC.
 1270                        	
 1271    02:C183  A5 FC      			lda	<_cl			; Was the number -ve?
 1272    02:C185  10 04      			bpl	!pad+
 1273    02:C187  A9 2D      			lda	#'-'			; Output a leading '-'.
 1274    02:C189  48         			pha
 1275    02:C18A  88         			dey
 1276                        	
 1277    02:C18B  A9 20      	!pad:		lda	#' '			; Add padding characters.
 1278    02:C18D  88         	.loop:		dey
 1279    02:C18E  30 A7      			bmi	!output-
 1280    02:C190  48         			pha
 1281    02:C191  80 FA      			bra	.loop
 1282                        	
 1283    02:C193             			.ref	put_hex_vdc		; Need put_number_vdc
 1284                        	
 1285                        			.endp
 1286                        	
 1287    02:C193             			.alias	_put_number.4 = put_number_vdc
 1288                        	
 1289                        	
 1290                        	
 1291                        	; ***************************************************************************
 1292                        	; ***************************************************************************
 1293                        	;
 1294                        	; void __fastcall put_raw( unsigned int data<_bx>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
 1295                        	
 1296               0001     		.if	SUPPORT_SGX
 1297                        	put_raw_sgx	.proc
 1302                        			.endp
 1303                        		.endif
 1304                        	
 1305                        	put_raw_vdc	.proc
 1318                        			.endp
 1319                        	
 1320    02:C193             			.alias	_put_raw.3		= put_raw_vdc
 1321                        	
 1322                        			.endprocgroup			; vdc_tty_out
 1323                        	
 1324                        	
 1325                        	
 1326                        	; ***************************************************************************
 1327                        	; ***************************************************************************
 1328                        	;
 1329                        	; void __fastcall put_string( unsigned char *string<_bp>, unsigned char bat_x<_dil>, unsigned char bat_y<_dih> );
 1330                        	;
 1331                        	; N.B. This is not a .proc right now because it is called from procedures
 1332                        	; that contain embedded strings, and the string aren't banked in before
 1333                        	; printing (yet).
 1334                        	
 1335               0001     		.if	SUPPORT_SGX
 1336    00:E665             	_sgx_put_string.3:
 1337    00:E665  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
 1338    00:E667  F0         			db	$F0			; Turn "clx" into a "beq".
 1339                        		.endif
 1340                        	
 1341    00:E668  82         	_put_string.3:	clx				; Offset to PCE VDC.
 1342                        	
 1343    00:E669  20 34 E4   			jsr	set_di_xy_mawr
 1344                        	
 1345    00:E66C  C2         			cly
 1346    00:E66D  B1 EC      	.chr_loop:	lda	[_bp], y
 1347    00:E66F  F0 15      			beq	.done
 1348                        	
 1349    00:E671  18         			clc
 1350    00:E672  7D 6B 23   			adc.l	_vdc_font_base, x
 1351    00:E675  9D 02 02   			sta	VDC_DL, x
 1352    00:E678  62         			cla
 1353    00:E679  7D 6C 23   			adc.h	_vdc_font_base, x
 1354    00:E67C  9D 03 02   			sta	VDC_DH, x
 1355                        	
 1356    00:E67F  C8         			iny
 1357    00:E680  D0 EB      			bne	.chr_loop
 1358    00:E682  E6 ED      			inc.h	<_bp
 1359    00:E684  80 E7      			bra	.chr_loop
 1360                        	
 1361    00:E686  60         	.done:		rts
 1362                        	
 1363                        	
 1364                        	
 1365                        	; ***************************************************************************
 1366                        	; ***************************************************************************
 1367                        	;
 1368                        	; void __fastcall set_color_rgb( unsigned int index<VCE_CTA>, unsigned char r<_al>, unsigned char g<_ah>, unsigned char b<acc> );
 1369                        	;
 1370                        	; r:	red	RED:	bit 3-5
 1371                        	; g:	green	GREEN:	bit 6-8
 1372                        	; b:	blue	BLUE:	bit 0-2
 1373                        	
 1374    00:E687             	_set_color_rgb.4:
 1375                        	;		and	#7
 1376    00:E687  85 00      			sta	<__temp
 1377    00:E689  A5 F8      			lda	<_al
 1378                        	;		and	#7
 1379    00:E68B  0A         			asl	a
 1380    00:E68C  0A         			asl	a
 1381    00:E68D  0A         			asl	a
 1382    00:E68E  05 00      			ora	<__temp
 1383    00:E690  0A         			asl	a
 1384    00:E691  0A         			asl	a
 1385    00:E692  85 00      			sta	<__temp
 1386    00:E694  A5 F9      			lda	<_ah
 1387                        	;		and	#7
 1388    00:E696  4A         			lsr	a
 1389    00:E697  66 00      			ror	<__temp
 1390    00:E699  4A         			lsr	a
 1391    00:E69A  66 00      			ror	<__temp
 1392    00:E69C  A8         			tay
 1393    00:E69D  A5 00      			lda	<__temp
 1394    00:E69F  8D 04 04   			sta.l	VCE_CTW
 1395    00:E6A2  8C 05 04   			sty.h	VCE_CTW
 1396    00:E6A5  60         			rts
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   60                        		.endif
   61                        	
   62               0001     		.ifdef	HUCC_USES_STRING		; Set in hucc_string.h
                             #[3]   "..\..\..\include\hucc\hucc-string.asm"
   63                        			include	"hucc-string.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-string.asm
    5                        	;
    6                        	; Not-quite-standard, but fast, replacements for <string.h>.
    7                        	;
    8                        	; Copyright John Brandwood 2024.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; !!! WARNING : non-standard return values !!!
   18                        	;
   19                        	; Strings are limited to a maximum of 255 characters (+ the terminator)!
   20                        	;
   21                        	; The memcpy(), strcpy() and strcat() functions do NOT return the destination
   22                        	; address, and they are declared "void" to check that the value is not used.
   23                        	;
   24                        	; mempcpy() is provided which returns the end address instead of the starting
   25                        	; address, because this is typically more useful.
   26                        	;
   27                        	; Please note that both memcpy() and memset() are implemented using a TII for
   28                        	; speed, and so the length should be < 16 bytes if used in time-critical bits
   29                        	; of code (such as when using a split screen) because they delay interrupts.
   30                        	;
   31                        	; strncpy() and strncat() are not provided, because strncpy() was not created
   32                        	; for the purpose of avoiding string overruns, and strncat() is just a poorly
   33                        	; designed function.
   34                        	;
   35                        	; POSIX strlcpy() and strlcat() are provided instead, but once again they are
   36                        	; slightly non-standard in that the return value when there is an overflow is
   37                        	; the buffer size (so that the overflow can be detected), instead of the full
   38                        	; size of the destination string that was too big to fit in the buffer.
   39                        	;
   40                        	; ***************************************************************************
   41                        	; ***************************************************************************
   42                        	
   43                        	
   44                        	
   45                        	; ***************************************************************************
   46                        	; ***************************************************************************
   47                        	;
   48                        	; void __fastcall strcpy( char *destination<_di>, char *source<_bp> );
   49                        	; void __fastcall strcat( char *destination<_di>, char *source<_bp> );
   50                        	;
   51                        	; unsigned int __fastcall strlcpy( char *destination<_di>, char *source<_bp>, unsigned char size<acc> );
   52                        	; unsigned int __fastcall strlcat( char *destination<_di>, char *source<_bp>, unsigned char size<acc> );
   53                        	; unsigned int __fastcall strlen( char *source<_bp> );
   54                        	;
   55                        	; NOT WORKING YET (needs compiler changes) ...
   56                        	;
   57                        	; void __fastcall strcpy( char *destination<_di>, char __far *source<_bp_bank:_bp> );
   58                        	; void __fastcall strcat( char *destination<_di>, char __far *source<_bp_bank:_bp> );
   59                        	;
   60                        	; unsigned int __fastcall strlcpy( char *destination<_di>, char __far *source<_bp_bank:_bp>, unsigned char size<acc> );
   61                        	; unsigned int __fastcall strlcat( char *destination<_di>, char __far *source<_bp_bank:_bp>, unsigned char size<acc> );
   62                        	; unsigned int __fastcall strlen( char __far *source<_bp_bank:_bp> );
   63                        	
   64    00:E6A6  62         	_strcat:	cla				; Max string length == 256!
   65    00:E6A7  A0 01      			ldy.h	#256
   66                        	
   67    00:E6A9  AA         	_strlcat:	tax				; X = buffer length (1..256).
   68                        	
   69               0000     		.ifdef	_DEBUG
   74                        		.endif
   75                        	
   76    00:E6AA  43 08      			tma3				; Preserve MPR3 and MPR4.
   77    00:E6AC  48         			pha
   78    00:E6AD  43 10      			tma4
   79    00:E6AF  48         			pha
   80                        	
   81                        	;		ldy	<_bp_bank		; Map the source string.
   82                        	;		beq	.no_bank
   83                        	;		jsr	map_bp_to_mpr34
   84                        	
   85    00:E6B0  C2         	.no_bank:	cly
   86                        	
   87    00:E6B1  B1 F0      	.find:		lda	[_di], y		; Find the end of the string.
   88    00:E6B3  F0 08      			beq	.adjust
   89    00:E6B5  C8         			iny
   90    00:E6B6  CA         			dex
   91    00:E6B7  D0 F8      			bne	.find
   92    00:E6B9  98         			tya				; A:Y = buffer length.
   93    00:E6BA  62         			cla
   94    00:E6BB  80 28      			bra	str_overflow
   95                        	
   96    00:E6BD  98         	.adjust:	tya				; Subtract Y from _bp so that
   97    00:E6BE  49 FF      			eor	#$FF			; _bp and _di use the same Y.
   98    00:E6C0  38         			sec
   99    00:E6C1  65 EC      			adc.l	<_bp
  100    00:E6C3  85 EC      			sta.l	<_bp
  101    00:E6C5  B0 0F      			bcs	str_copy
  102    00:E6C7  C6 ED      			dec.h	<_bp
  103    00:E6C9  80 0B      			bra	str_copy
  104                        	
  105                        			;
  106                        	
  107    00:E6CB  62         	_strcpy:	cla				; Max string length == 256!
  108    00:E6CC  A0 01      			ldy.h	#256
  109                        	
  110    00:E6CE  AA         	_strlcpy:	tax				; X = buffer length (1..256).
  111                        	
  112               0000     		.ifdef	_DEBUG
  117                        		.endif
  118                        	
  119    00:E6CF  43 08      			tma3				; Preserve MPR3 and MPR4.
  120    00:E6D1  48         			pha
  121    00:E6D2  43 10      			tma4
  122    00:E6D4  48         			pha
  123                        	
  124                        	;		ldy	<_bp_bank		; Map the source string.
  125                        	;		beq	.no_bank
  126                        	;		jsr	map_bp_to_mpr34
  127                        	
  128    00:E6D5  C2         	.no_bank:	cly
  129                        	
  130    00:E6D6  B1 EC      	str_copy:	lda	[_bp], y
  131    00:E6D8  91 F0      			sta	[_di], y
  132    00:E6DA  F0 1E      			beq	str_exit		; A:Y = string length.
  133    00:E6DC  C8         			iny
  134    00:E6DD  CA         			dex
  135    00:E6DE  D0 F6      			bne	str_copy
  136                        	
  137    00:E6E0  88         			dey
  138    00:E6E1  62         			cla
  139    00:E6E2  91 F0      			sta	[_di], y
  140    00:E6E4  C8         			iny				; A:Y = buffer length.
  141    00:E6E5  D0 13      	str_overflow:	bne	str_exit
  142    00:E6E7  1A         			inc	a			; A:Y = buffer length = 256.
  143    00:E6E8  80 10      			bra	str_exit
  144                        	
  145                        			;
  146                        	
  147    00:E6EA  43 08      	_strlen:	tma3
  148    00:E6EC  48         			pha
  149    00:E6ED  43 10      			tma4
  150    00:E6EF  48         			pha
  151                        	
  152                        	;		ldy	<_bp_bank
  153                        	;		beq	.no_bank
  154                        	;		jsr	map_bp_to_mpr34
  155                        	
  156    00:E6F0  C2         	.no_bank:	cly
  157                        	
  158    00:E6F1  B1 EC      	.find:		lda	[_bp], y
  159    00:E6F3  F0 05      			beq	str_exit
  160    00:E6F5  C8         			iny
  161    00:E6F6  D0 F9      			bne	.find
  162    00:E6F8  A9 01      			lda.h	#256			; A:Y = overflow length = 256.
  163                        	
  164    00:E6FA  AA         	str_exit:	tax				; X:Y = string or buffer length.
  165                        	
  166    00:E6FB  68         			pla				; Restore MPR3 and MPR4.
  167    00:E6FC  53 10      			tam4
  168    00:E6FE  68         			pla
  169    00:E6FF  53 08      			tam3
  170                        	
  171    00:E701  8A         			txa				; A:Y = string or buffer length.
  172    00:E702  42         			say				; Y:A = string or buffer length.
  173                        	
  174    00:E703  60         			rts
  175                        	
  176    00:E704             			.alias	_strlen.1		= _strlen
  177    00:E704             			.alias	_strcpy.2		= _strcpy
  178    00:E704             			.alias	_strcat.2		= _strcat
  179    00:E704             			.alias	_strlcpy.3		= _strlcpy
  180    00:E704             			.alias	_strlcat.3		= _strlcat
  181                        	
  182                        	
  183                        	
  184                        	; ***************************************************************************
  185                        	; ***************************************************************************
  186                        	;
  187                        	; void __fastcall memcpy( unsigned char *destination<ram_tii_dst>, unsigned char  *source<ram_tii_src>, unsigned int count<acc> );
  188                        	; unsigned char * __fastcall mempcpy( unsigned char *destination<ram_tii_dst>, unsigned char  *source<ram_tii_src>, unsigned int count<acc> );
  189                        	;
  190                        	; void __fastcall farmemcpy( unsigned char *destination<ram_tii_dst>, unsigned char __far *source<_bp_bank:ram_tii_src>, unsigned int count<acc> );
  191                        	; unsigned char * __fastcall farmempcpy( unsigned char *destination<ram_tii_dst>, unsigned char __far *source<_bp_bank:ram_tii_src>, unsigned int count<acc> );
  192                        	;
  193                        	; void __fastcall far_memcpy( unsigned char *destination<ram_tii_dst>, unsigned int count<acc> );
  194                        	; unsigned char * __fastcall far_mempcpy( unsigned char *destination<ram_tii_dst>, unsigned int count<acc> );
  195                        	;
  196                        	
  197    00:E704             	_memcpy.3:
  198    00:E704  64 02      	_mempcpy.3:	stz	<_bp_bank		; Map the source memory.
  199                        	
  200    00:E706             	_farmemcpy.3:
  201    00:E706  8C FE 22   	_farmempcpy.3:	sty.h	ram_tii_len		; Check for zero length.
  202    00:E709  8D FD 22   			sta.l	ram_tii_len
  203    00:E70C  0D FE 22   			ora.h	ram_tii_len
  204    00:E70F  F0 18      			beq	.zero_length
  205                        	
  206    00:E711  43 08      			tma3				; Preserve MPR3 and MPR4.
  207    00:E713  48         			pha
  208    00:E714  43 10      			tma4
  209    00:E716  48         			pha
  210                        	
  211    00:E717  A5 02      			lda	<_bp_bank		; Map the source memory.
  212    00:E719  F0 05      			beq	.no_bank
  213                        	
  214    00:E71B  53 08      			tam3				; Put bank into MPR3.
  215    00:E71D  1A         			inc	a
  216    00:E71E  53 10      			tam4				; Put next into MPR4.
  217                        	
  218                        	;		lda.h	ram_tii_src		; Remap ptr to MPR3.
  219                        	;		and	#$1F
  220                        	;		ora	#$60
  221                        	;		sta.h	ram_tii_src
  222                        	
  223    00:E720  20 F8 22   	.no_bank:	jsr	ram_tii			; Copy the memory.
  224                        	
  225    00:E723  68         			pla				; Restore MPR3 and MPR4.
  226    00:E724  53 10      			tam4
  227    00:E726  68         			pla
  228    00:E727  53 08      			tam3
  229                        	
  230    00:E729  18         	.zero_length:	clc				; Return the end address
  231    00:E72A  AD FB 22   			lda.l	ram_tii_dst		; like mempcpy().
  232    00:E72D  6D FD 22   			adc.l	ram_tii_len
  233    00:E730  A8         			tay
  234    00:E731  AD FC 22   			lda.h	ram_tii_dst
  235    00:E734  6D FE 22   			adc.h	ram_tii_len
  236    00:E737  42         			say
  237                        	
  238    00:E738  60         			rts
  239                        	
  240    00:E739             			.alias	_far_memcpy.2		= _farmemcpy.3
  241    00:E739             			.alias	_far_mempcpy.2		= _farmempcpy.3
  242                        	
  243                        	
  244                        	
  245                        	; ***************************************************************************
  246                        	; ***************************************************************************
  247                        	;
  248                        	; void __fastcall memset( unsigned char *destination<ram_tii_src>, unsigned char value<_al>, unsigned int count<acc> );
  249                        	
  250    00:E739  C9 00      	_memset:	cmp	#0			; Decrement the length, check
  251    00:E73B  D0 05      			bne	!+			; for zero and set C. 
  252    00:E73D  C0 00      			cpy	#0
  253    00:E73F  F0 23      			beq	.zero_length
  254    00:E741  88         			dey
  255    00:E742  3A         	!:		dec	a
  256    00:E743  8D FD 22   			sta.l	ram_tii_len
  257    00:E746  8C FE 22   			sty.h	ram_tii_len
  258                        	
  259    00:E749  AD F9 22   			lda.l	ram_tii_src		; ram_tii_dst = ram_tii_src + 1
  260    00:E74C  85 88      			sta.l	<__ptr
  261    00:E74E  69 00      			adc	#0
  262    00:E750  8D FB 22   			sta.l	ram_tii_dst
  263    00:E753  AD FA 22   			lda.h	ram_tii_src
  264    00:E756  85 89      			sta.h	<__ptr
  265    00:E758  69 00      			adc	#0
  266    00:E75A  8D FC 22   			sta.h	ram_tii_dst
  267                        	
  268    00:E75D  A5 F8      			lda	<_al			; Set the fill value.
  269    00:E75F  92 88      			sta	[__ptr]
  270                        	
  271    00:E761  4C F8 22   			jmp	ram_tii			; Copy the memory.
  272                        	
  273    00:E764  60         	.zero_length:	rts
  274                        	
  275    00:E765             			.alias	_memset.3		= _memset
  276                        	
  277                        	
  278                        	
  279                        	; ***************************************************************************
  280                        	; ***************************************************************************
  281                        	;
  282                        	; int __fastcall strcmp( char *string1<_di>, char *string2<_bp> );
  283                        	; int __fastcall strncmp( char *string1<_di>, char *string2<_bp>, unsigned int count<_ax> );
  284                        	;
  285                        	; int __fastcall __macro memcmp( unsigned char *string1<_di>, unsigned char *string2<_bp>, unsigned int count<_ax> );
  286                        	; int __fastcall farmemcmp( unsigned char *string1<_di>, unsigned char __far *string2<_bp_bank:_bp>, unsigned int count<_ax> );
  287                        	; int __fastcall far_memcmp( unsigned char *string1<_di>, unsigned int count<_ax> );
  288                        	;
  289                        	;  0 	if strings are equal
  290                        	;  1 	if the first non-matching character in string1 > string2 (in ASCII).
  291                        	; -1 	if the first non-matching character in string1 < string2 (in ASCII).
  292                        	
  293    02:C659             	hucc_memcmp	.procgroup
  294                        	
  295                        	_strcmp.2	.proc
  300                        			.endp				; Fall through.
  301                        	
  302    02:C659             	_strncmp.3	.proc
  303    02:C659  64 02      			stz	<_bp_bank		; Assume strings are mapped.
  304    02:C65B  89 40      			bit	#$40			; Set the V bit for strcmp.
  305    02:C65D  50         			db	$50			; Turn "clv" into "bvc".
  306    02:C65E             			.ref	_farmemcmp.3		; Don't strip _farmemcmp.3!
  307                        			.endp				; Fall through.
  308                        	
  309    02:C65E             	_farmemcmp.3	.proc
  310    02:C65E  B8         			clv				; Clr the V bit for memcmp.
  311                        	
  312    02:C65F  43 08      			tma3				; Preserve MPR3 and MPR4.
  313    02:C661  48         			pha
  314    02:C662  43 10      			tma4
  315    02:C664  48         			pha
  316                        	
  317    02:C665  A4 02      			ldy	<_bp_bank		; Map string2.
  318    02:C667  F0 03      			beq	.no_bank
  319                        	
  320    02:C669  20 3B E3   			jsr	map_bp_to_mpr34
  321                        	
  322    02:C66C  C2         	.no_bank:	cly
  323                        	
  324    02:C66D  A6 F8      			ldx.l	<_ax			; Increment length.l
  325    02:C66F  E8         			inx
  326    02:C670  CA         	.loop:		dex				; Decrement length.l
  327    02:C671  F0 17      			beq	.page
  328    02:C673  B1 F0      	.test:		lda	[_di], y		; string1 - string2
  329    02:C675  D1 EC      			cmp	[_bp], y
  330    02:C677  90 1E      			bcc	.return_neg		; string1 < string2 
  331    02:C679  D0 17      			bne	.return_pos		; string1 > string2
  332    02:C67B  50 04      			bvc	!+			; Only check for end-of-string
  333    02:C67D  C9 00      			cmp	#0			; if the V flag is set.
  334    02:C67F  F0 0D      			beq	.return_same
  335    02:C681  C8         	!:		iny
  336    02:C682  D0 EC      			bne	.loop
  337    02:C684  E6 F1      			inc.h	<_di
  338    02:C686  E6 ED      			inc.h	<_bp			; Limited to 8KB maximum!
  339                        	;		jsr	inc.h_bp_mpr34
  340    02:C688  80 E6      			bra	.loop
  341                        	
  342    02:C68A  C6 F9      	.page:		dec.h	<_ax			; Decrement length.h 
  343    02:C68C  10 E5      			bpl	.test			; Limit comparison to 32KB.
  344                        	;		bra	cmp_same
  345                        	
  346    02:C68E  82         	.return_same:	clx				; Return code in Y:X, X -> A.
  347    02:C68F  C2         			cly
  348    02:C690  80 09      			bra	!+
  349                        	
  350    02:C692  A2 01      	.return_pos:	ldx	#$01			; Return code in Y:X, X -> A.
  351    02:C694  C2         			cly
  352    02:C695  80 04      			bra	!+
  353                        	
  354    02:C697  A2 FF      	.return_neg:	ldx	#$FF			; Return code in Y:X, X -> A.
  355    02:C699  A0 FF      			ldy	#$FF
  356                        	
  357    02:C69B  68         	!:		pla				; Restore MPR3 and MPR4.
  358    02:C69C  53 10      			tam4
  359    02:C69E  68         			pla
  360    02:C69F  53 08      			tam3
  361                        	
  362                        			leave				; Return and copy X -> A.
         02:C6A1  4C EF FF   			jmp	leave_proc
  363                        	
  364                        			.endp
  365                        	
  366                        			.endprocgroup			; hucc_memcmp
  367                        	
  368    00:E765             			.alias	_far_memcmp.2		= _farmemcmp.3
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   64                        		.endif
   65                        	
   66               0001     		.ifdef	HUCC_USES_NEW_SCROLL		; Set in hucc_scroll.h
                             #[3]   "..\..\..\include\hucc\hucc-scroll.asm"
   67                        			include	"hucc-scroll.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-scroll.asm
    5                        	;
    6                        	; Routines for a fast split-screen scrolling system.
    7                        	;
    8                        	; Copyright John Brandwood 2024.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; The maximum number of splits for each screen layer is set in your project's
   18                        	; "hucc-config.inc" file, with the library having a limit of 128-per-layer.
   19                        	;
   20                        	; Your first active split must be defined to start at screen line 0, and then
   21                        	; the rest of the active splits must be in increasing line order to match the
   22                        	; way that the PC Engine displays the output image.
   23                        	;
   24                        	; You can have disabled splits interleaved with your active splits.
   25                        	;
   26                        	; Splits that are normally disabled can be used to create full screen effects
   27                        	; such as bouncing the screen up and down by adding blank areas at the top or
   28                        	; bottom of the screen, and then rapidly changing the height of those areas.
   29                        	;
   30                        	; ***************************************************************************
   31                        	; ***************************************************************************
   32                        	
   33                        	
   34                        	
   35               0000     		.ifndef	HUCC_PCE_SPLITS
   37                        		.endif
   38                        	
   39               0000     		.ifndef	HUCC_SGX_SPLITS
   41                        		.endif
   42                        	
   43               0000     		.if	(HUCC_PCE_SPLITS < 2) || (HUCC_PCE_SPLITS > 128)
   45                        		.endif
   46                        	
   47               0000     		.if	(HUCC_SGX_SPLITS < 2) || (HUCC_SGX_SPLITS > 128)
   49                        		.endif
   50                        	
   51               0144     	HUCC_1ST_RCR	=	$144
   52               00E0     	HUCC_SCR_HEIGHT	=	224
   53                        	
   54               E765     			.code
   55                        	
   56                        	
   57                        	
   58                        	; ***************************************************************************
   59                        	; ***************************************************************************
   60                        	;
   61                        	; void __fastcall scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
   62                        	; void __fastcall sgx_scroll_split( unsigned char index<_al>, unsigned char screen_line<_ah>, unsigned int bat_x<_bx>, unsigned int bat_y<_cx>, unsigned char display_flags<_dl> );
   63                        	;
   64                        	; set screen scrolling
   65                        	
   66                        			.proc	_scroll_split.5
  143                        			.endp
  144                        	
  145               0001     		.if	SUPPORT_SGX
  146                        	
  147    02:C235             			.proc	_sgx_scroll_split.5
  148                        	
  149    02:C235  08         			php				; Disable interrupts while
  150    02:C236  78         			sei				; updating this structure.
  151                        	
  152    02:C237  A6 F8      			ldx	<_al			; Region number.
  153    02:C239  E0 08      			cpx	#HUCC_SGX_SPLITS
  154    02:C23B  B0 FE      	.hang:		bcs	.hang			; Better a hang than a crash!
  155                        	
  156    02:C23D  BD 04 24   			lda	sgx_region_sel, x	; Update the parameter copy
  157    02:C240  5D 0C 24   			eor	sgx_region_new, x	; that is not displayed now.
  158    02:C243  D0 3B      			bne	.regionA
  159                        	
  160    02:C245  A5 F9      	.regionB:	lda	<_ah			; Scanline (i.e. top).
  161    02:C247  C9 E0      			cmp	#HUCC_SCR_HEIGHT	; Skip if offscreen.
  162    02:C249  B0 31      			bcs	!done+
  163    02:C24B  9D 2C 24   			sta	sgx_regionB_rcr, x
  164                        	
  165    02:C24E  C9 00      			cmp	#0			; Either Y at top of the frame
  166    02:C250  F0 01      			beq	!+			; or Y-1 because the RCR code
  167    02:C252  18         			clc				; sets it on the line before.
  168    02:C253  A5 FC      	!:		lda.l	<_cx
  169    02:C255  E9 00      			sbc	#0
  170    02:C257  9D 5C 24   			sta	sgx_regionB_yl, x
  171    02:C25A  A5 FD      			lda.h	<_cx
  172    02:C25C  E9 00      			sbc	#0
  173    02:C25E  9D 6C 24   			sta	sgx_regionB_yh, x
  174                        	
  175    02:C261  A5 FA      			lda.l	<_bx
  176    02:C263  9D 3C 24   			sta	sgx_regionB_xl, x
  177    02:C266  A5 FB      			lda.h	<_bx
  178    02:C268  9D 4C 24   			sta	sgx_regionB_xh, x
  179                        	
  180    02:C26B  A5 FE      			lda	<_dl
  181    02:C26D  29 C0      			and	#$C0			; Flags (mark it as enabled).
  182    02:C26F  09 0C      			ora	#$0C
  183    02:C271  9D 1C 24   			sta	sgx_regionB_crl, x
  184                        	
  185    02:C274  A9 01      			lda	#1			; Mark that we've changed the
  186    02:C276  9D 0C 24   			sta	sgx_region_new, x	; selected region.
  187    02:C279  9D 04 24   			sta	sgx_region_sel, x
  188                        	
  189    02:C27C  28         	!done:		plp				; Restore interrupts.
  190                        			leave				; All done!
         02:C27D  4C EF FF   			jmp	leave_proc
  191                        	
  192    02:C280  A5 F9      	.regionA:	lda	<_ah			; Scanline (i.e. top).
  193    02:C282  C9 E0      			cmp	#HUCC_SCR_HEIGHT	; Skip if offscreen.
  194    02:C284  B0 31      			bcs	!done+
  195    02:C286  9D 24 24   			sta	sgx_regionA_rcr, x
  196                        	
  197    02:C289  C9 00      			cmp	#0			; Either Y at top of the frame
  198    02:C28B  F0 01      			beq	!+			; or Y-1 because the RCR code
  199    02:C28D  18         			clc				; sets it on the line before.
  200    02:C28E  A5 FC      	!:		lda.l	<_cx
  201    02:C290  E9 00      			sbc	#0
  202    02:C292  9D 54 24   			sta	sgx_regionA_yl, x
  203    02:C295  A5 FD      			lda.h	<_cx
  204    02:C297  E9 00      			sbc	#0
  205    02:C299  9D 64 24   			sta	sgx_regionA_yh, x
  206                        	
  207    02:C29C  A5 FA      			lda.l	<_bx
  208    02:C29E  9D 34 24   			sta	sgx_regionA_xl, x
  209    02:C2A1  A5 FB      			lda.h	<_bx
  210    02:C2A3  9D 44 24   			sta	sgx_regionA_xh, x
  211                        	
  212    02:C2A6  A5 FE      			lda	<_dl
  213    02:C2A8  29 C0      			and	#$C0			; Flags (mark it as enabled).
  214    02:C2AA  09 0C      			ora	#$0C
  215    02:C2AC  9D 14 24   			sta	sgx_regionA_crl, x
  216                        	
  217    02:C2AF  A9 01      			lda	#1			; Mark that we've changed the
  218    02:C2B1  9D 0C 24   			sta	sgx_region_new, x	; selected region.
  219    02:C2B4  9E 04 24   			stz	sgx_region_sel, x
  220                        	
  221    02:C2B7  28         	!done:		plp				; Restore interrupts.
  222                        			leave				; All done!
         02:C2B8  4C EF FF   			jmp	leave_proc
  223                        	
  224                        			.endp
  225                        	
  226                        		.endif	SUPPORT_SGX
  227                        	
  228                        	
  229                        	
  230                        	; ***************************************************************************
  231                        	; ***************************************************************************
  232                        	;
  233                        	; void __fastcall disable_split( unsigned char index<acc> );
  234                        	; void __fastcall sgx_disable_split( unsigned char index<acc> );
  235                        	;
  236                        	; disable screen scrolling for a scroll region
  237                        	
  238    00:E765             	_disable_split.1:
  239    00:E765  08         			php				; Disable interrupts while
  240    00:E766  78         			sei				; updating this structure.
  241                        	
  242    00:E767  C9 08      			cmp	#HUCC_PCE_SPLITS	; Better a hang than a crash!
  243    00:E769  B0 FE      	.hang:		bcs	.hang
  244    00:E76B  AA         			tax
  245                        	
  246    00:E76C  BD 83 23   			lda	vdc_region_sel, x	; Update the parameter copy
  247    00:E76F  5D 8B 23   			eor	vdc_region_new, x	; that is not displayed now.
  248    00:E772  D0 0D      			bne	.regionA
  249                        	
  250    00:E774  9E 9B 23   	.regionB:	stz	vdc_regionB_crl, x	; Region disabled if $00.
  251                        	
  252    00:E777  A9 01      			lda	#1			; Mark that we've changed the
  253    00:E779  9D 8B 23   			sta	vdc_region_new, x	; selected region.
  254    00:E77C  9D 83 23   			sta	vdc_region_sel, x
  255                        	
  256    00:E77F  28         			plp				; Restore interrupts.
  257    00:E780  60         			rts
  258                        	
  259    00:E781  9E 93 23   	.regionA:	stz	vdc_regionA_crl, x	; Region disabled if $00.
  260                        	
  261    00:E784  A9 01      			lda	#1			; Mark that we've changed the
  262    00:E786  9D 8B 23   			sta	vdc_region_new, x	; selected region.
  263    00:E789  9E 83 23   			stz	vdc_region_sel, x
  264                        	
  265    00:E78C  28         			plp				; Restore interrupts.
  266    00:E78D  60         			rts
  267                        	
  268               0001     		.if	SUPPORT_SGX
  269                        	
  270    00:E78E             	_sgx_disable_split.1:
  271    00:E78E  08         			php				; Disable interrupts while
  272    00:E78F  78         			sei				; updating this structure.
  273                        	
  274    00:E790  C9 08      			cmp	#HUCC_SGX_SPLITS	; Better a hang than a crash!
  275    00:E792  B0 FE      	.hang:		bcs	.hang
  276    00:E794  AA         			tax
  277                        	
  278    00:E795  BD 04 24   			lda	sgx_region_sel, x	; Update the parameter copy
  279    00:E798  5D 0C 24   			eor	sgx_region_new, x	; that is not displayed now.
  280    00:E79B  D0 0D      			bne	.regionA
  281                        	
  282    00:E79D  9E 1C 24   	.regionB:	stz	sgx_regionB_crl, x	; Region disabled if $00.
  283                        	
  284    00:E7A0  A9 01      			lda	#1			; Mark that we've changed the
  285    00:E7A2  9D 0C 24   			sta	sgx_region_new, x	; selected region.
  286    00:E7A5  9D 04 24   			sta	sgx_region_sel, x
  287                        	
  288    00:E7A8  28         			plp				; Restore interrupts.
  289    00:E7A9  60         			rts
  290                        	
  291    00:E7AA  9E 14 24   	.regionA:	stz	sgx_regionA_crl, x	; Region disabled if $00.
  292                        	
  293    00:E7AD  A9 01      			lda	#1			; Mark that we've changed the
  294    00:E7AF  9D 0C 24   			sta	sgx_region_new, x	; selected region.
  295    00:E7B2  9E 04 24   			stz	sgx_region_sel, x
  296                        	
  297    00:E7B5  28         			plp				; Restore interrupts.
  298    00:E7B6  60         			rts
  299                        	
  300                        		.endif	SUPPORT_SGX
  301                        	
  302                        	
  303                        	
  304                        	; ***************************************************************************
  305                        	; ***************************************************************************
  306                        	;
  307                        	; vbl_init_scroll
  308                        	;
  309                        	; From Charles MacDonald's pcetech.txt ...
  310                        	;
  311                        	;  Raster Compare Register (RCR):
  312                        	;
  313                        	;  The range of the RCR is 263 lines, relative to the start of the active
  314                        	;  display period. (defined by VSW, VDS, and VCR) The VDC treats the first
  315                        	;  scanline of the active display period as $0040, so the valid ranges for
  316                        	;  the RCR register are $0040 to $0146.
  317                        	;
  318                        	;  For example, assume VSW=$02, VDS=$17. This positions the first line of
  319                        	;  the active display period at line 25 of the frame. An RCR value of $0040
  320                        	;  (zero) causes an interrupt at line 25, and a value of $0146 (262) causes an
  321                        	;  interrupt at line 24 of the next frame.
  322                        	;
  323                        	;  Any other RCR values that are out of range ($00-$3F, $147-$3FF) will never
  324                        	;  result in a successful line compare.
  325                        	;
  326                        	; Processing time:
  327                        	;
  328                        	; Old HuC rcr_init: 2148 cycles if all 8 regions pre-sorted
  329                        	; Old HuC rcr_init: 4346 cycles if all 8 regions need sorting
  330                        	;
  331                        	; New HuCC vbl_init_scroll:   8 disabled splits:  290 cycles
  332                        	; New HuCC vbl_init_scroll:   8  enabled splits:  384 cycles
  333                        	;
  334                        	; New HuCC vbl_init_scroll:  16 disabled splits:  506 cycles
  335                        	; New HuCC vbl_init_scroll:  16  enabled splits:  672 cycles
  336                        	;
  337                        	; New HuCC vbl_init_scroll:  32 disabled splits:  953 cycles
  338                        	; New HuCC vbl_init_scroll:  32  enabled splits: 1263 cycles
  339                        	;
  340                        	; New HuCC vbl_init_scroll:  64 disabled splits: 1802 cycles
  341                        	; New HuCC vbl_init_scroll:  64  enabled splits: 2400 cycles
  342                        	;
  343                        	; New HuCC vbl_init_scroll: 128 disabled splits: 3530 cycles
  344                        	; New HuCC vbl_init_scroll: 128  enabled splits: 4704 cycles
  345                        	;
  346                        	; Memory used is 16 bytes per scroll per VDC!
  347                        	
  348               2383     			.bss
  349                        	
  350    F8:2383             	vdc_region_sel:	.ds	HUCC_PCE_SPLITS		; Use A or B region next frame?
  351    F8:238B             	vdc_region_new:	.ds	HUCC_PCE_SPLITS		; 1 if vdc_region_sel modified.
  352                        	
  353    F8:2393             	vdc_regionA_crl:.ds	HUCC_PCE_SPLITS		; Two copies of each setting
  354    F8:239B             	vdc_regionB_crl:.ds	HUCC_PCE_SPLITS		; HUCC_PCE_SPLITS bytes apart,
  355    F8:23A3             	vdc_regionA_rcr:.ds	HUCC_PCE_SPLITS		; one setting for the current
  356    F8:23AB             	vdc_regionB_rcr:.ds	HUCC_PCE_SPLITS		; frame, and one setting that
  357    F8:23B3             	vdc_regionA_xl:	.ds	HUCC_PCE_SPLITS		; gets modified and then used
  358    F8:23BB             	vdc_regionB_xl:	.ds	HUCC_PCE_SPLITS		; on the next frame after the
  359    F8:23C3             	vdc_regionA_xh:	.ds	HUCC_PCE_SPLITS		; change is made.
  360    F8:23CB             	vdc_regionB_xh:	.ds	HUCC_PCE_SPLITS		; Regions will have different
  361    F8:23D3             	vdc_regionA_yl:	.ds	HUCC_PCE_SPLITS		; A or B currently active!
  362    F8:23DB             	vdc_regionB_yl:	.ds	HUCC_PCE_SPLITS
  363    F8:23E3             	vdc_regionA_yh:	.ds	HUCC_PCE_SPLITS
  364    F8:23EB             	vdc_regionB_yh:	.ds	HUCC_PCE_SPLITS
  365                        	
  366    F8:23F3             	vdc_next_region:.ds	1			; Linked list of region indexes
  367    F8:23F4             	vdc_regionA_nxt:.ds	HUCC_PCE_SPLITS		; for the current frame.
  368    F8:23FC             	vdc_regionB_nxt:.ds	HUCC_PCE_SPLITS
  369                        	
  370               0001     		.if	SUPPORT_SGX
  371                        	
  372    F8:2404             	sgx_region_sel:	.ds	HUCC_SGX_SPLITS		; Use A or B region next frame?
  373    F8:240C             	sgx_region_new:	.ds	HUCC_SGX_SPLITS		; 1 if sgx_region_sel modified.
  374                        	
  375    F8:2414             	sgx_regionA_crl:.ds	HUCC_SGX_SPLITS		; Two copies of each setting
  376    F8:241C             	sgx_regionB_crl:.ds	HUCC_SGX_SPLITS		; HUCC_SGX_SPLITS bytes apart,
  377    F8:2424             	sgx_regionA_rcr:.ds	HUCC_SGX_SPLITS		; one setting for the current
  378    F8:242C             	sgx_regionB_rcr:.ds	HUCC_SGX_SPLITS		; frame, and one setting that
  379    F8:2434             	sgx_regionA_xl:	.ds	HUCC_SGX_SPLITS		; gets modified and then used
  380    F8:243C             	sgx_regionB_xl:	.ds	HUCC_SGX_SPLITS		; on the next frame after the
  381    F8:2444             	sgx_regionA_xh:	.ds	HUCC_SGX_SPLITS		; change is made.
  382    F8:244C             	sgx_regionB_xh:	.ds	HUCC_SGX_SPLITS		; Regions will have different
  383    F8:2454             	sgx_regionA_yl:	.ds	HUCC_SGX_SPLITS		; A or B currently active!
  384    F8:245C             	sgx_regionB_yl:	.ds	HUCC_SGX_SPLITS
  385    F8:2464             	sgx_regionA_yh:	.ds	HUCC_SGX_SPLITS
  386    F8:246C             	sgx_regionB_yh:	.ds	HUCC_SGX_SPLITS
  387                        	
  388    F8:2474             	sgx_next_region:.ds	1			; Linked list of region indexes
  389    F8:2475             	sgx_regionA_nxt:.ds	HUCC_SGX_SPLITS		; for the current frame.
  390    F8:247D             	sgx_regionB_nxt:.ds	HUCC_SGX_SPLITS
  391                        	
  392                        		.endif
  393                        	
  394               E7B7     			.code
  395                        	
  396    02:C2BB             	vbl_init_scroll	.proc
  397                        	
  398    02:C2BB  62         			cla				; A = previous active index
  399    02:C2BC  A2 08      			ldx	#HUCC_PCE_SPLITS	; so $00 for end-of-screen.
  400                        	
  401    02:C2BE  18         			clc				; For regionB indexes.
  402                        	
  403    02:C2BF  CA         	!next_region:	dex				; All regions updated?
  404    02:C2C0  30 20      			bmi	!save_first+
  405                        	
  406    02:C2C2  9E 8B 23   			stz	vdc_region_new, x	; Clear region modified flag.
  407                        	
  408    02:C2C5  BC 83 23   			ldy	vdc_region_sel, x	; 0=regionA or 1=regionB.
  409    02:C2C8  F0 0D      			beq	!use_regionA+
  410                        	
  411    02:C2CA  BC 9B 23   	!use_regionB:	ldy	vdc_regionB_crl, x	; Region disabled if $00.
  412    02:C2CD  F0 F0      			beq	!next_region-
  413    02:C2CF  9D FC 23   			sta	vdc_regionB_nxt, x	; Save index of next region.
  414    02:C2D2  8A         			txa				; A = current region index.
  415    02:C2D3  69 08      			adc	#HUCC_PCE_SPLITS	; Always leaves CC!
  416    02:C2D5  80 E8      			bra	!next_region-
  417                        	
  418    02:C2D7  BC 93 23   	!use_regionA:	ldy	vdc_regionA_crl, x	; Region disabled if $00.
  419    02:C2DA  F0 E3      			beq	!next_region-
  420    02:C2DC  9D F4 23   			sta	vdc_regionA_nxt, x	; Save index of next region.
  421    02:C2DF  8A         			txa				; A = current region index.
  422    02:C2E0  80 DD      			bra	!next_region-
  423                        	
  424    02:C2E2  8D F3 23   	!save_first:	sta	vdc_next_region		; Save index of 1st region.
  425                        	
  426    02:C2E5  AA         			tax				; NZ if first active region
  427    02:C2E6  D0 03      			bne	!init_first+		; is not region 0.
  428    02:C2E8  98         			tya				; NZ if region 0 is active.
  429    02:C2E9  F0 0F      			beq	!+			; If no active leave RCR=0.
  430                        	
  431    02:C2EB  A9 06      	!init_first:	lda	#VDC_RCR		; 1st RCR always happens just
  432    02:C2ED  8D 00 02   			sta	VDC_AR			; before the display starts.
  433    02:C2F0  A9 44      			lda.l	#HUCC_1ST_RCR
  434    02:C2F2  8D 02 02   			sta	VDC_DL
  435    02:C2F5  A9 01      			lda.h	#HUCC_1ST_RCR
  436    02:C2F7  8D 03 02   			sta	VDC_DH
  437                        	
  438               0001     		.if	SUPPORT_SGX
  439                        	
  440    02:C2FA  62         	!:		cla				; A = previous active index
  441    02:C2FB  A2 08      			ldx	#HUCC_SGX_SPLITS	; so $00 for end-of-screen.
  442                        	
  443    02:C2FD  18         			clc				; For regionB indexes.
  444                        	
  445    02:C2FE  CA         	!next_region:	dex				; All regions updated?
  446    02:C2FF  30 20      			bmi	!save_first+
  447                        	
  448    02:C301  9E 0C 24   			stz	sgx_region_new, x	; Clear region modified flag.
  449                        	
  450    02:C304  BC 04 24   			ldy	sgx_region_sel, x	; 0=regionA or 1=regionB.
  451    02:C307  F0 0D      			beq	!use_regionA+
  452                        	
  453    02:C309  BC 1C 24   	!use_regionB:	ldy	sgx_regionB_crl, x	; Region disabled if $00.
  454    02:C30C  F0 F0      			beq	!next_region-
  455    02:C30E  9D 7D 24   			sta	sgx_regionB_nxt, x	; Save index of next region.
  456    02:C311  8A         			txa				; A = current region index.
  457    02:C312  69 08      			adc	#HUCC_SGX_SPLITS	; Always leaves CC!
  458    02:C314  80 E8      			bra	!next_region-
  459                        	
  460    02:C316  BC 14 24   	!use_regionA:	ldy	sgx_regionA_crl, x	; Region disabled if $00.
  461    02:C319  F0 E3      			beq	!next_region-
  462    02:C31B  9D 75 24   			sta	sgx_regionA_nxt, x	; Save index of next region.
  463    02:C31E  8A         			txa				; A = current region index.
  464    02:C31F  80 DD      			bra	!next_region-
  465                        	
  466    02:C321  8D 74 24   	!save_first:	sta	sgx_next_region		; Save index of 1st region.
  467                        	
  468    02:C324  AA         			tax				; NZ if first active region
  469    02:C325  D0 03      			bne	!init_first+		; is not region 0.
  470    02:C327  98         			tya				; NZ if region 0 is active.
  471    02:C328  F0 0F      			beq	!+			; If no active leave RCR=0.
  472                        	
  473    02:C32A  A9 06      	!init_first:	lda	#VDC_RCR		; 1st RCR always happens just
  474    02:C32C  8D 10 02   			sta	SGX_AR			; before the display starts.
  475    02:C32F  A9 44      			lda.l	#HUCC_1ST_RCR
  476    02:C331  8D 12 02   			sta	SGX_DL
  477    02:C334  A9 01      			lda.h	#HUCC_1ST_RCR
  478    02:C336  8D 13 02   			sta	SGX_DH
  479                        	
  480                        		.endif	SUPPORT_SGX
  481                        	
  482                        	!:		leave				; All done!
         02:C339  4C EF FF   			jmp	leave_proc
  483                        	
  484                        			.endp
  485                        	
  486                        	
  487                        	
  488               0001     		.if	SUPPORT_SGX
  489                        	
  490                        	; ***************************************************************************
  491                        	; ***************************************************************************
  492                        	;
  493                        	; VDC_RCR_MACRO and SGX_RCR_MACRO
  494                        	;
  495                        	; A 16-byte TIA takes 142..234 cycles in 5MHz, 128..200 cycles in 7MHz.
  496                        	; A 32-byte TIA takes 270..364 cycles in 5MHz, 242..312 cycles in 7MHz. (527 DUO)
  497                        	;
  498                        	; You need to write the last RCR setting within 540 cycles in order to catch
  499                        	; the next line (at 256/336/512 resolution).
  500                        	;
  501                        	; That gives 305 cycles from the RCR to write the last setting, or there
  502                        	; will be a visible glitch on the screen.
  503                        	
  504               0000     		.ifndef	USING_RCR_MACROS
  506                        		.endif
  507                        	
  508                        	;		;;;				; 8 (cycles for the INT)
  509                        	;		bbs1	<irq_vec, .hook		; 8
  510                        	;		jmp	[irq1_hook]		; 7
  511                        	
  512                        	;		;;;				; 8 (cycles for the INT)
  513                        	;		jmp	irq1_handler		; 4
  514                        	
  515                        	;irq1_handler:	pha				; 3 Save all registers.
  516                        	;		phx				; 3
  517                        	;		phy				; 3
  518                        	;
  519                        	;		lda	VDC_SR			; 6 Acknowledge the VDC's IRQ.
  520                        	;		sta	<vdc_sr			; 4 Remember what caused it.
  521                        	;
  522                        	;		ldx	SGX_SR			; 6 Read SGX_SR after VDC_SR in
  523                        	;		stx	<sgx_sr			; 4 case this is not an SGX!
  524                        	;
  525                        	;!:		and	#$04			; 2 Is this an HSYNC interrupt?
  526                        	;		beq	!+			; 2
  527                        	
  528                        			.macro	VDC_RCR_MACRO
  529                        	
  530                        			st0	#VDC_RCR		; 5
  531                        	
  532                        			ldx	vdc_next_region		; 5 X and Y can be greater than
  533                        			ldy	vdc_regionA_nxt, x	; 5 HUCC_PCE_SPLITS if regionB!
  534                        			clc				; 2
  535                        			bne	!set_next_rcr+		; 4 Stop RCR if next line is 0.
  536                        	
  537                        			and	const_0000		; 5 A=$00 with the same #cycles
  538                        			bra	!clr_next_rcr+		; 4 as if the branch were taken.
  539                        	
  540                        	!set_next_rcr:	lda	vdc_regionA_rcr, y	; 5 Set next RCR 1 line before
  541                        			adc	#64-1			; 2 the region begins, or 0 to
  542                        	!clr_next_rcr:	sta	VDC_DL			; 6 disable.
  543                        			cla				; 2
  544                        			rol	a			; 2
  545                        			sta	VDC_DH			; 6
  546                        	
  547                        			st0	#VDC_BYR		; 5 Do BYR first to mitigate the
  548                        			lda	vdc_regionA_yl, x	; 5 glitch if the IRQ is delayed.
  549                        			sta	VDC_DL			; 6 = 105 cycles from RCR on SGX
  550                        			lda	vdc_regionA_yh, x	; 5
  551                        			sta	VDC_DH			; 6
  552                        	
  553                        			st0	#VDC_CR			; 5
  554                        			lda	vdc_regionA_crl, x	; 5
  555                        	;		asl	a
  556                        			sta	VDC_DL			; 6
  557                        	
  558                        			st0	#VDC_BXR		; 2
  559                        			lda	vdc_regionA_xl, x	; 5
  560                        			sta	VDC_DL			; 6
  561                        			lda	vdc_regionA_xh, x	; 5
  562                        			sta	VDC_DH			; 6 = 156 cycles from RCR if DUO
  563                        	
  564                        	;		bcc	!+
  565                        	;		lda	vdc_regionA_yh, x	; 5
  566                        	;		sta.l	VCE_CTW			; 6
  567                        	
  568                        			sty	vdc_next_region		; 5
  569                        	
  570                        			.endm
  571                        	
  572                        	;!:		bbr2	<sgx_sr, !+		; 6 Is this an HSYNC interrupt?
  573                        	
  574                        			.macro	SGX_RCR_MACRO
  575                        	
  576                        			lda	#VDC_RCR		; 2
  577                        			sta	SGX_AR			; 6
  578                        	
  579                        			ldx	sgx_next_region		; 5 X and Y can be greater than
  580                        			ldy	sgx_regionA_nxt, x	; 5 HUCC_SGX_SPLITS if regionB!
  581                        			clc				; 2
  582                        			bne	!set_next_rcr+		; 4 Stop RCR if next line is 0.
  583                        	
  584                        			and	const_0000		; 5 A=$00 with the same #cycles
  585                        			bra	!clr_next_rcr+		; 4 as if the branch were taken.
  586                        	
  587                        	!set_next_rcr:	lda	sgx_regionA_rcr, y	; 5 Set next RCR 1 line before
  588                        			adc	#64-1			; 2 the region begins, or 0 to
  589                        	!clr_next_rcr:	sta	SGX_DL			; 6 disable.
  590                        			cla				; 2
  591                        			rol	a			; 2
  592                        			sta	SGX_DH			; 6
  593                        	
  594                        			lda	#VDC_BYR		; 2 Do BYR first to mitigate the
  595                        			sta	SGX_AR			; 6 glitch if the IRQ is delayed.
  596                        			lda	sgx_regionA_yl, x	; 5
  597                        			sta	SGX_DL			; 6
  598                        			lda	sgx_regionA_yh, x	; 5
  599                        			sta	SGX_DH			; 6
  600                        	
  601                        			lda	#VDC_CR			; 2
  602                        			sta	SGX_AR			; 6
  603                        			lda	sgx_regionA_crl, x	; 5
  604                        			sta	SGX_DL			; 6
  605                        	
  606                        			lda	#VDC_BXR		; 2
  607                        			sta	SGX_AR			; 6
  608                        			lda	sgx_regionA_xl, x	; 5
  609                        			sta	SGX_DL			; 6
  610                        			lda	sgx_regionA_xh, x	; 5
  611                        			sta	SGX_DH			; 6 = 293 cycles (282 if no YH)
  612                        	
  613                        			sty	sgx_next_region		; 5
  614                        	
  615                        			.endm
  616                        	
  617                        		.else	SUPPORT_SGX
  697                        		.endif	SUPPORT_SGX
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   68                        		.else
   72                        		.endif	HUCC_USES_NEW_SCROLL
   73                        	
   74               0001     		.ifdef	HUCC_USES_OLD_SPR		; Set in hucc_old_spr.h
                             #[3]   "..\..\..\include\hucc\hucc-old-spr.asm"
   75                        			include	"hucc-old-spr.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-old-spr.asm
    5                        	;
    6                        	; Based on the original HuC and MagicKit functions by David Michel and the
    7                        	; other original HuC developers.
    8                        	;
    9                        	; Modifications copyright John Brandwood 2024.
   10                        	;
   11                        	; Distributed under the Boost Software License, Version 1.0.
   12                        	; (See accompanying file LICENSE_1_0.txt or copy at
   13                        	;  http://www.boost.org/LICENSE_1_0.txt)
   14                        	;
   15                        	; ***************************************************************************
   16                        	; ***************************************************************************
   17                        	
   18                        	;
   19                        	; Include dependancies ...
   20                        	;
   21                        	
   22                        			include "common.asm"		; Common helpers.
   23                        			include "vce.asm"		; Useful VCE routines.
   24                        			include "vdc.asm"		; Useful VCE routines.
   25                        	
   26                        	
   27                        	
   28                        	; ***************************************************************************
   29                        	; ***************************************************************************
   30                        	;
   31                        	; HuC Sprite Functions
   32                        	;
   33                        	; ***************************************************************************
   34                        	; ***************************************************************************
   35                        	
   36               209C     			.zp
   37    F8:209C             	spr_ptr:	ds	2
   38               2485     			.bss
   39    F8:2485             	spr_sat:	ds	512
   40               E7B7     			.code
   41                        	
   42               0001     		.if	SUPPORT_SGX
   43               209E     			.zp
   44    F8:209E             	sgx_spr_ptr:	ds	2
   45               2685     			.bss
   46    F8:2685             	sgx_spr_sat:	ds	512	; N.B. Directly after spr_sat!
   47               E7B7     			.code
   48                        		.endif
   49                        	
   50                        	; Moved to hucc-old-map.asm just to save space. This NEEDS to be changed!
   51                        	;
   52                        	;		.bss
   53                        	;spr_max:	ds	1
   54                        	;spr_clr:	ds	1
   55                        	;	.if	SUPPORT_SGX
   56                        	;sgx_spr_max:	ds	1
   57                        	;sgx_spr_clr:	ds	1
   58                        	;	.endif
   59                        	;		.code
   60                        	
   61                        	
   62                        	
   63                        	; ***************************************************************************
   64                        	; ***************************************************************************
   65                        	;
   66                        	; void __fastcall init_satb( void );
   67                        	; void __fastcall reset_satb( void );
   68                        	;
   69                        	; void __fastcall sgx_init_satb( void );
   70                        	; void __fastcall sgx_reset_satb( void );
   71                        	
   72    00:E7B7             	_reset_satb:
   73    00:E7B7  C2         	_init_satb:	cly
   74    00:E7B8  62         			cla
   75    00:E7B9  99 85 24   	!:		sta	spr_sat + $0000, y
   76    00:E7BC  99 85 25   			sta	spr_sat + $0100, y
   77    00:E7BF  C8         			iny
   78    00:E7C0  D0 F7      			bne	!-
   79    00:E7C2  8C 59 23   			sty	spr_max
   80    00:E7C5  C8         			iny
   81    00:E7C6  8C 5A 23   			sty	spr_clr
   82    00:E7C9  60         			rts
   83                        	
   84               0001     		.if	SUPPORT_SGX
   85    00:E7CA             	_sgx_reset_satb:
   86    00:E7CA  C2         	_sgx_init_satb:	cly
   87    00:E7CB  62         			cla
   88    00:E7CC  99 85 26   	!:		sta	sgx_spr_sat + $0000, y
   89    00:E7CF  99 85 27   			sta	sgx_spr_sat + $0100, y
   90    00:E7D2  C8         			iny
   91    00:E7D3  D0 F7      			bne	!-
   92    00:E7D5  8C 69 23   			sty	sgx_spr_max
   93    00:E7D8  C8         			iny
   94    00:E7D9  8C 6A 23   			sty	sgx_spr_clr
   95    00:E7DC  60         			rts
   96                        		.endif
   97                        	
   98                        	
   99                        	
  100                        	; ***************************************************************************
  101                        	; ***************************************************************************
  102                        	;
  103                        	; void __fastcall satb_update( void );
  104                        	; void __fastcall sgx_satb_update( void );
  105                        	
  106    02:C6A4             	old_satb_group	.procgroup
  107                        	
  108               0001     		.if	SUPPORT_SGX
  109                        			.proc	_sgx_satb_update
  115                        			.endp
  116                        		.endif
  117                        	
  118    02:C6A4             			.proc	_satb_update
  119                        	
  120    02:C6A4  82         			clx				; Offset to PCE VDC.
  121                        	
  122    02:C6A5  A9 7F      			lda.h	#$7F00			; HuC puts the SAT here in VRAM
  123                        	;		lda.h	#$0800			; but we put it here instead
  124    02:C6A7  64 F0      			stz.l	<_di
  125    02:C6A9  85 F1      			sta.h	<_di
  126    02:C6AB  20 7F E3   			jsr	set_di_to_mawr
  127                        	
  128               0001     		.if	SUPPORT_SGX
  129    02:C6AE  8A         			txa				; Select which VDC to write
  130    02:C6AF  1A         			inc	a			; to.
  131    02:C6B0  1A         			inc	a
  132    02:C6B1  8D F3 22   			sta.l	ram_tia_dst
  133                        		.endif
  134                        	
  135    02:C6B4  A9 10      			lda	#VRAM_XFER_SIZE		; Split into 16-byte chunks
  136    02:C6B6  8D F5 22   			sta.l	ram_tia_len		; for stable IRQ response.
  137                        	
  138    02:C6B9  BC 59 23   			ldy	spr_max, x		; Highest sprite that was set.
  139    02:C6BC  C8         			iny
  140                        	
  141    02:C6BD  BD 5A 23   			lda	spr_clr, x
  142    02:C6C0  F0 05      			beq	!+
  143    02:C6C2  9E 5A 23   			stz	spr_clr, x
  144    02:C6C5  A0 40      			ldy	#64
  145                        	
  146    02:C6C7  98         	!:		tya
  147    02:C6C8  F0 22      			beq	.exit
  148                        	
  149    02:C6CA  3A         			dec	a			; round up to the next group of 2 sprites
  150    02:C6CB  4A         			lsr	a
  151               0000     		.if	VRAM_XFER_SIZE == 32
  153                        		.endif
  154    02:C6CC  1A         			inc	a
  155    02:C6CD  A8         			tay
  156                        	
  157    02:C6CE  A9 24      			lda.h	#spr_sat
  158                        	
  159               0001     		.if	SUPPORT_SGX
  160    02:C6D0  E0 00      			cpx	#0
  161    02:C6D2  F0 02      			beq	!+
  162                        	
  163    02:C6D4  A9 26      			lda.h	#sgx_spr_sat
  164                        		.endif
  165                        	
  166    02:C6D6  8D F2 22   	!:		sta.h	ram_tia_src
  167                        	
  168    02:C6D9  A9 85      			lda.l	#spr_sat		; Same for SGX and PCE!
  169    02:C6DB  8D F1 22   	.chunk_loop:	sta.l	ram_tia_src
  170                        	
  171    02:C6DE  20 F0 22   			jsr	ram_tia			; transfer 16-bytes
  172                        	
  173    02:C6E1  18         			clc				; increment source
  174    02:C6E2  69 10      			adc	#VRAM_XFER_SIZE
  175    02:C6E4  90 03      			bcc	.same_page
  176    02:C6E6  EE F2 22   			inc.h	ram_tia_src
  177                        	
  178    02:C6E9  88         	.same_page:	dey
  179    02:C6EA  D0 EF      			bne	.chunk_loop
  180                        	
  181                        	.exit:		leave
         02:C6EC  4C EF FF   			jmp	leave_proc
  182                        	
  183                        			.endp
  184                        	
  185                        			.endprocgroup	; old_satb_group
  186                        	
  187                        	
  188                        	
  189                        	; ***************************************************************************
  190                        	; ***************************************************************************
  191                        	;
  192                        	; void __fastcall spr_set( unsigned char num<acc> );
  193                        	
  194    00:E7DD  CD 59 23   	_spr_set.1:	cmp	spr_max
  195    00:E7E0  90 03      			bcc	!+
  196    00:E7E2  8D 59 23   			sta	spr_max
  197    00:E7E5  A0 24      	!:		ldy.h	#spr_sat
  198    00:E7E7  0A         			asl	a
  199    00:E7E8  0A         			asl	a
  200    00:E7E9  0A         			asl	a
  201    00:E7EA  90 02      			bcc	!+
  202    00:E7EC  C8         			iny
  203    00:E7ED  18         			clc
  204    00:E7EE  69 85      	!:		adc.l	#spr_sat
  205    00:E7F0  85 9C      			sta.l	<spr_ptr
  206    00:E7F2  90 01      			bcc	!+
  207    00:E7F4  C8         			iny
  208    00:E7F5  84 9D      	!:		sty.h	<spr_ptr
  209    00:E7F7  60         			rts
  210                        	
  211                        	
  212                        	
  213                        	; ***************************************************************************
  214                        	; ***************************************************************************
  215                        	;
  216                        	; void __fastcall spr_hide( void );
  217                        	
  218    00:E7F8  A0 01      	_spr_hide:	ldy	#1
  219    00:E7FA  B1 9C      			lda	[spr_ptr], y
  220    00:E7FC  09 02      			ora	#2
  221    00:E7FE  91 9C      			sta	[spr_ptr], y
  222    00:E800  60         			rts
  223                        	
  224                        	
  225                        	
  226                        	; ***************************************************************************
  227                        	; ***************************************************************************
  228                        	;
  229                        	; void __fastcall spr_show( void );
  230                        	
  231    00:E801  A0 01      	_spr_show:	ldy	#1
  232    00:E803  B1 9C      			lda	[spr_ptr], y
  233    00:E805  29 01      			and	#1
  234    00:E807  91 9C      			sta	[spr_ptr], y
  235    00:E809  60         			rts
  236                        	
  237                        	
  238                        	
  239                        	; ***************************************************************************
  240                        	; ***************************************************************************
  241                        	;
  242                        	; void __fastcall spr_x( unsigned int value<acc> );
  243                        	
  244    00:E80A  02         	_spr_x.1:	sxy
  245    00:E80B  18         			clc
  246    00:E80C  69 20      			adc	#32
  247    00:E80E  A0 02      			ldy	#2
  248    00:E810  91 9C      			sta	[spr_ptr], y
  249    00:E812  8A         			txa
  250    00:E813  69 00      			adc	#0
  251    00:E815  C8         			iny
  252    00:E816  91 9C      			sta	[spr_ptr], y
  253    00:E818  60         			rts
  254                        	
  255                        	
  256                        	
  257                        	; ***************************************************************************
  258                        	; ***************************************************************************
  259                        	;
  260                        	; void __fastcall spr_y( unsigned int value<acc> );
  261                        	
  262    00:E819  18         	_spr_y.1:	clc
  263    00:E81A  69 40      			adc	#64
  264    00:E81C  92 9C      			sta	[spr_ptr]
  265    00:E81E  98         			tya
  266    00:E81F  69 00      			adc	#0
  267    00:E821  A0 01      			ldy	#1
  268    00:E823  91 9C      			sta	[spr_ptr], y
  269    00:E825  60         			rts
  270                        			
  271                        	
  272                        	
  273                        	; ***************************************************************************
  274                        	; ***************************************************************************
  275                        	;
  276                        	; void __fastcall spr_pattern( unsigned int vaddr<acc> );
  277                        	
  278    00:E826  84 00      	_spr_pattern.1:	sty	<__temp		;     zp=fedcba98 a=76543210
  279    00:E828  0A         			asl	a		; c=f zp=edcba987 a=6543210_
  280    00:E829  26 00      			rol	<__temp
  281    00:E82B  2A         			rol	a		; c=e zp=dcba9876 a=543210_f
  282    00:E82C  26 00      			rol	<__temp
  283    00:E82E  2A         			rol	a		; c=d zp=cba98765 a=43210_fe
  284    00:E82F  26 00      			rol	<__temp
  285    00:E831  2A         			rol	a		; c=4 zp=cba98765 a=3210_fed
  286    00:E832  A0 05      			ldy	#5
  287    00:E834  91 9C      			sta	[spr_ptr], y
  288    00:E836  A5 00      			lda	<__temp
  289    00:E838  88         			dey
  290    00:E839  91 9C      			sta	[spr_ptr], y
  291    00:E83B  60         			rts
  292                        	
  293                        	
  294                        	
  295                        	; ***************************************************************************
  296                        	; ***************************************************************************
  297                        	;
  298                        	; void __fastcall spr_ctrl( unsigned char mask<_al>, unsigned char value<acc> );
  299                        	
  300    00:E83C  25 F8      	_spr_ctrl.2:	and	<_al
  301    00:E83E  85 00      			sta	<__temp
  302    00:E840  A5 F8      			lda	<_al
  303    00:E842  49 FF      			eor	#$FF
  304    00:E844  A0 07      			ldy	#7
  305    00:E846  31 9C      			and	[spr_ptr], y
  306    00:E848  05 00      			ora	<__temp
  307    00:E84A  91 9C      			sta	[spr_ptr], y
  308    00:E84C  60         			rts
  309                        	
  310                        	
  311                        	
  312                        	; ***************************************************************************
  313                        	; ***************************************************************************
  314                        	;
  315                        	; void __fastcall spr_pal( unsigned char palette<acc> )
  316                        	
  317    00:E84D  29 0F      	_spr_pal.1:	and	#$0F
  318    00:E84F  85 00      			sta	<__temp
  319    00:E851  A0 06      			ldy	#6
  320    00:E853  B1 9C      			lda	[spr_ptr], y
  321    00:E855  29 F0      			and	#$F0
  322    00:E857  05 00      			ora	<__temp
  323    00:E859  91 9C      			sta	[spr_ptr], y
  324    00:E85B  60         			rts
  325                        	
  326                        	
  327                        	
  328                        	; ***************************************************************************
  329                        	; ***************************************************************************
  330                        	;
  331                        	; void __fastcall spr_pri( unsigned char priority<acc> )
  332                        	
  333    00:E85C  C9 01      	_spr_pri.1:	cmp	#1
  334    00:E85E  A0 06      			ldy	#6
  335    00:E860  B1 9C      			lda	[spr_ptr], y
  336    00:E862  29 7F      			and	#$7F
  337    00:E864  90 02      			bcc	!+
  338    00:E866  09 80      			ora	#$80
  339    00:E868  91 9C      	!:		sta	[spr_ptr], y
  340    00:E86A  60         			rts
  341                        	
  342                        	
  343                        	
  344                        	; ***************************************************************************
  345                        	; ***************************************************************************
  346                        	;
  347                        	; unsigned int __fastcall spr_get_x( void );
  348                        	
  349    00:E86B  38         	_spr_get_x:	sec
  350    00:E86C  A0 02      			ldy	#2
  351    00:E86E  B1 9C      			lda	[spr_ptr], y
  352    00:E870  E9 20      			sbc	#32
  353    00:E872  AA         			tax
  354    00:E873  C8         			iny
  355    00:E874  B1 9C      			lda	[spr_ptr], y
  356    00:E876  E9 00      			sbc	#0
  357    00:E878  A8         			tay
  358    00:E879  8A         			txa
  359    00:E87A  60         			rts
  360                        	
  361                        	
  362                        	
  363                        	; ***************************************************************************
  364                        	; ***************************************************************************
  365                        	;
  366                        	; unsigned int __fastcall spr_get_y( void );
  367                        	
  368    00:E87B  38         	_spr_get_y:	sec
  369    00:E87C  B2 9C      			lda	[spr_ptr]
  370    00:E87E  E9 40      			sbc	#64
  371    00:E880  AA         			tax
  372    00:E881  A0 01      			ldy	#1
  373    00:E883  B1 9C      			lda	[spr_ptr], y
  374    00:E885  E9 00      			sbc	#0
  375    00:E887  A8         			tay
  376    00:E888  8A         			txa
  377    00:E889  60         			rts
  378                        	
  379                        	
  380                        	
  381               0001     		.if	SUPPORT_SGX
  382                        	
  383                        	; ***************************************************************************
  384                        	; ***************************************************************************
  385                        	;
  386                        	; void __fastcall sgx_spr_set( unsigned char num<acc> );
  387                        	
  388    00:E88A  CD 69 23   	_sgx_spr_set.1:	cmp	sgx_spr_max
  389    00:E88D  90 03      			bcc	!+
  390    00:E88F  8D 69 23   			sta	sgx_spr_max
  391    00:E892  A0 26      	!:		ldy.h	#sgx_spr_sat
  392    00:E894  0A         			asl	a
  393    00:E895  0A         			asl	a
  394    00:E896  0A         			asl	a
  395    00:E897  90 02      			bcc	!+
  396    00:E899  C8         			iny
  397    00:E89A  18         			clc
  398    00:E89B  69 85      	!:		adc.l	#sgx_spr_sat
  399    00:E89D  85 9E      			sta.l	<sgx_spr_ptr
  400    00:E89F  90 01      			bcc	!+
  401    00:E8A1  C8         			iny
  402    00:E8A2  84 9F      	!:		sty.h	<sgx_spr_ptr
  403    00:E8A4  60         			rts
  404                        	
  405                        	
  406                        	
  407                        	; ***************************************************************************
  408                        	; ***************************************************************************
  409                        	;
  410                        	; void __fastcall sgx_spr_hide( void );
  411                        	
  412    00:E8A5  A0 01      	_sgx_spr_hide:	ldy	#1
  413    00:E8A7  B1 9E      			lda	[sgx_spr_ptr], y
  414    00:E8A9  09 02      			ora	#2
  415    00:E8AB  91 9E      			sta	[sgx_spr_ptr], y
  416    00:E8AD  60         			rts
  417                        	
  418                        	
  419                        	
  420                        	; ***************************************************************************
  421                        	; ***************************************************************************
  422                        	;
  423                        	; void __fastcall sgx_spr_show( void );
  424                        	
  425    00:E8AE  A0 01      	_sgx_spr_show:	ldy	#1
  426    00:E8B0  B1 9E      			lda	[sgx_spr_ptr], y
  427    00:E8B2  29 01      			and	#1
  428    00:E8B4  91 9E      			sta	[sgx_spr_ptr], y
  429    00:E8B6  60         			rts
  430                        	
  431                        	
  432                        	
  433                        	; ***************************************************************************
  434                        	; ***************************************************************************
  435                        	;
  436                        	; void __fastcall sgx_spr_x( unsigned int value<acc> );
  437                        	
  438    00:E8B7  02         	_sgx_spr_x.1:	sxy
  439    00:E8B8  18         			clc
  440    00:E8B9  69 20      			adc	#32
  441    00:E8BB  A0 02      			ldy	#2
  442    00:E8BD  91 9E      			sta	[sgx_spr_ptr], y
  443    00:E8BF  8A         			txa
  444    00:E8C0  69 00      			adc	#0
  445    00:E8C2  C8         			iny
  446    00:E8C3  91 9E      			sta	[sgx_spr_ptr], y
  447    00:E8C5  60         			rts
  448                        	
  449                        	
  450                        	
  451                        	; ***************************************************************************
  452                        	; ***************************************************************************
  453                        	;
  454                        	; void __fastcall sgx_spr_y( unsigned int value<acc> );
  455                        	
  456    00:E8C6  18         	_sgx_spr_y.1:	clc
  457    00:E8C7  69 40      			adc	#64
  458    00:E8C9  92 9E      			sta	[sgx_spr_ptr]
  459    00:E8CB  98         			tya
  460    00:E8CC  69 00      			adc	#0
  461    00:E8CE  A0 01      			ldy	#1
  462    00:E8D0  91 9E      			sta	[sgx_spr_ptr], y
  463    00:E8D2  60         			rts
  464                        			
  465                        	
  466                        	
  467                        	; ***************************************************************************
  468                        	; ***************************************************************************
  469                        	;
  470                        	; void __fastcall sgx_spr_pattern( unsigned int vaddr<acc> );
  471                        	
  472    00:E8D3             	_sgx_spr_pattern.1:
  473    00:E8D3  84 00      			sty	<__temp		;     zp=fedcba98 a=76543210
  474    00:E8D5  0A         			asl	a		; c=f zp=edcba987 a=6543210_
  475    00:E8D6  26 00      			rol	<__temp
  476    00:E8D8  2A         			rol	a		; c=e zp=dcba9876 a=543210_f
  477    00:E8D9  26 00      			rol	<__temp
  478    00:E8DB  2A         			rol	a		; c=d zp=cba98765 a=43210_fe
  479    00:E8DC  26 00      			rol	<__temp
  480    00:E8DE  2A         			rol	a		; c=4 zp=cba98765 a=3210_fed
  481    00:E8DF  A0 05      			ldy	#5
  482    00:E8E1  91 9E      			sta	[sgx_spr_ptr], y
  483    00:E8E3  A5 00      			lda	<__temp
  484    00:E8E5  88         			dey
  485    00:E8E6  91 9E      			sta	[sgx_spr_ptr], y
  486    00:E8E8  60         			rts
  487                        	
  488                        	
  489                        	
  490                        	; ***************************************************************************
  491                        	; ***************************************************************************
  492                        	;
  493                        	; void __fastcall sgx_spr_ctrl( unsigned char mask<_al>, unsigned char value<acc> );
  494                        	
  495    00:E8E9  25 F8      	_sgx_spr_ctrl.2:and	<_al
  496    00:E8EB  85 00      			sta	<__temp
  497    00:E8ED  A5 F8      			lda	<_al
  498    00:E8EF  49 FF      			eor	#$FF
  499    00:E8F1  A0 07      			ldy	#7
  500    00:E8F3  31 9E      			and	[sgx_spr_ptr], y
  501    00:E8F5  05 00      			ora	<__temp
  502    00:E8F7  91 9E      			sta	[sgx_spr_ptr], y
  503    00:E8F9  60         			rts
  504                        	
  505                        	
  506                        	
  507                        	; ***************************************************************************
  508                        	; ***************************************************************************
  509                        	;
  510                        	; void __fastcall sgx_spr_pal( unsigned char palette<acc> )
  511                        	
  512    00:E8FA  29 0F      	_sgx_spr_pal.1:	and	#$0F
  513    00:E8FC  85 00      			sta	<__temp
  514    00:E8FE  A0 06      			ldy	#6
  515    00:E900  B1 9E      			lda	[sgx_spr_ptr], y
  516    00:E902  29 F0      			and	#$F0
  517    00:E904  05 00      			ora	<__temp
  518    00:E906  91 9E      			sta	[sgx_spr_ptr], y
  519    00:E908  60         			rts
  520                        	
  521                        	
  522                        	
  523                        	; ***************************************************************************
  524                        	; ***************************************************************************
  525                        	;
  526                        	; void __fastcall sgx_spr_pri( unsigned char priority<acc> )
  527                        	
  528    00:E909  C9 01      	_sgx_spr_pri.1:	cmp	#1
  529    00:E90B  A0 06      			ldy	#6
  530    00:E90D  B1 9E      			lda	[sgx_spr_ptr], y
  531    00:E90F  29 7F      			and	#$7F
  532    00:E911  90 02      			bcc	!+
  533    00:E913  09 80      			ora	#$80
  534    00:E915  91 9E      	!:		sta	[sgx_spr_ptr], y
  535    00:E917  60         			rts
  536                        	
  537                        	
  538                        	
  539                        	; ***************************************************************************
  540                        	; ***************************************************************************
  541                        	;
  542                        	; unsigned int __fastcall sgx_spr_get_x( void );
  543                        	
  544    00:E918  38         	_sgx_spr_get_x:	sec
  545    00:E919  A0 02      			ldy	#2
  546    00:E91B  B1 9E      			lda	[sgx_spr_ptr], y
  547    00:E91D  E9 20      			sbc	#32
  548    00:E91F  AA         			tax
  549    00:E920  C8         			iny
  550    00:E921  B1 9E      			lda	[sgx_spr_ptr], y
  551    00:E923  E9 00      			sbc	#0
  552    00:E925  A8         			tay
  553    00:E926  8A         			txa
  554    00:E927  60         			rts
  555                        	
  556                        	
  557                        	
  558                        	; ***************************************************************************
  559                        	; ***************************************************************************
  560                        	;
  561                        	; unsigned int __fastcall sgx_spr_get_y( void );
  562                        	
  563    00:E928  38         	_sgx_spr_get_y:	sec
  564    00:E929  B2 9E      			lda	[sgx_spr_ptr]
  565    00:E92B  E9 40      			sbc	#64
  566    00:E92D  AA         			tax
  567    00:E92E  A0 01      			ldy	#1
  568    00:E930  B1 9E      			lda	[sgx_spr_ptr], y
  569    00:E932  E9 00      			sbc	#0
  570    00:E934  A8         			tay
  571    00:E935  8A         			txa
  572    00:E936  60         			rts
  573                        	
  574                        		.endif	SUPPORT_SGX
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   76                        		.endif
   77                        	
   78               0001     		.ifdef	HUCC_USES_BLKMAP		; Set in hucc_blkmap.h
                             #[3]   "..\..\..\include\hucc\blkmap.asm"
   79                        			include	"blkmap.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; blkmap.asm
    5                        	;
    6                        	; A map system based on 16x16 meta-tiles (aka "blocks", aka CHR/BLK/MAP).
    7                        	;
    8                        	; Copyright John Brandwood 2025.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; The maximum X and Y size for blkmaps is 128 blocks (2048 pixels).
   18                        	;
   19                        	; The maximum total size for a blkmap is 16KBytes, which allows for maps up
   20                        	; to 128x128 blocks (2048x2048 pixels).
   21                        	;
   22                        	; Huge multi-screen blkmaps are also supported (optionally).
   23                        	;
   24                        	; The maximum X and Y for multi-screen maps is 128 screens (32768 pixels).
   25                        	;
   26                        	; The maximum total size for a multi-screen map is 8KBytes, which allows for
   27                        	; a total of 1024 screens.
   28                        	;
   29                        	; ***************************************************************************
   30                        	; ***************************************************************************
   31                        	
   32                        	;
   33                        	; Include dependancies ...
   34                        	;
   35                        	
   36                        			include "common.asm"		; Common helpers.
   37                        			include "vce.asm"		; Useful VCE routines.
   38                        			include "vdc.asm"		; Useful VCE routines.
   39                        	
   40                        	;
   41                        	; Support large blkmaps up to 16KBytes instead of the regular 8KBytes?
   42                        	;
   43                        	; The maximum X and Y size for regular blkmaps is 128 tiles (2048 pixels).
   44                        	;
   45                        	; This allows for individual maps up to 128x128 tiles (2048x2048 pixels) vs
   46                        	; default limit of 128x64 or 64x128.
   47                        	;
   48                        	
   49               0000     		.ifndef	BLKMAP_LARGEMAP
   51                        		.endif
   52                        	
   53                        	;
   54                        	; Support huge multi-screen maps, up to 32768 pixels wide/high?
   55                        	;
   56                        	; These are sectorized maps split into individual BAT-sized "screens", with
   57                        	; a maximum of 1024 screens per map.
   58                        	;
   59                        	; The BAT size that is used when drawing *must* be the same as the BAT size
   60                        	; that was chosen when creating the multi-screen map.
   61                        	;
   62                        	; Each screen can use a unique set of block definitions, or it might choose
   63                        	; to share the same block definitions that are used on another screen.
   64                        	;
   65                        	; Each screen may choose which 8KByte banks of character data to select for
   66                        	; the 4 banks (32KBytes) of VRAM that its block definitions use, with a max
   67                        	; of 16 banks of characters per multi-screen map.
   68                        	;
   69                        	; Loading those character banks dynamically is an exercise for the user!
   70                        	;
   71                        	; Enabling support adds extra library code, and slightly slows down the use
   72                        	; of regular blkmaps.
   73                        	;
   74                        	
   75               0000     		.ifndef	BLKMAP_MULTISCR
   77                        		.endif
   78                        	
   79                        	;
   80                        	; Block definitions can either use character data from VRAM $1000..$7FFF or
   81                        	; they can be limited to use the 32KByte of characters in VRAM $1000..$4FFF
   82                        	; which then frees up 2-bits for flag information for each character in the
   83                        	; block.
   84                        	;
   85                        	; These 2-bits are perfect for using as collision information in game maps,
   86                        	; allowing storage of states like transparent, solid, up-slope, down-slope.
   87                        	;
   88                        	; Typically this flag information is set by the map conversion tools from a
   89                        	; seperate "collision" map layer.
   90                        	;
   91                        	
   92               0000     		.ifndef	BLKDEF_CHR_FLAG
   94                        		.endif
   95                        	
   96                        	;
   97                        	; Block definitions are accessed in MPR2 ($4000..$5FFF), and must not cross
   98                        	; the bank boundary.
   99                        	;
  100                        	; When working this way, 8 pointers in ZP are used to access the individual
  101                        	; bytes in the block definition. This is fine when using a regular map on a
  102                        	; PC Engine, but it is awfully slow when using multi-screen maps or drawing
  103                        	; maps on both VDC chips in a SuperGRAFX because the pointer values must be
  104                        	; constantly changed.
  105                        	;
  106                        	; When using multi-screen maps, or when developing a SuperGRAFX game, or if
  107                        	; developing a CDROM game, then it is usually preferable to store the block
  108                        	; definitions with 2KByte alignment, especially if they are normally stored
  109                        	; compressed and then decompressed into a 2KByte buffer in RAM when needed.
  110                        	;
  111                        	; This option controls whether the definitions are stored 2KByte aligned or
  112                        	; if pointers should be used instead.
  113                        	;
  114                        	
  115               0000     		.ifndef	BLKDEF_POINTERS
  117                        		.endif
  118                        	
  119                        	;
  120                        	; Add a timing bar to the scroll_map() to see how long the drawing takes?
  121                        	;
  122                        	
  123               0000     		.ifndef	BLKMAP_TIMETEST
  125                        		.endif
  126                        	
  127                        	;
  128                        	;
  129                        	;
  130                        	
  131               0000     		.if	BLKDEF_POINTERS
  144                        		.else
  145                        	
  146                        		; If the block definititions are 2KByte aligned.
  147                        	
  148               4000     	BLK_4000_TL_L	=	$4000
  149               4100     	BLK_4000_TR_L	=	$4100
  150               4200     	BLK_4000_BL_L	=	$4200
  151               4300     	BLK_4000_BR_L	=	$4300
  152               4400     	BLK_4000_TL_H	=	$4400
  153               4500     	BLK_4000_TR_H	=	$4500
  154               4600     	BLK_4000_BL_H	=	$4600
  155               4700     	BLK_4000_BR_H	=	$4700
  156                        	
  157               4800     	BLK_4800_TL_L	=	$4800
  158               4900     	BLK_4800_TR_L	=	$4900
  159               4A00     	BLK_4800_BL_L	=	$4A00
  160               4B00     	BLK_4800_BR_L	=	$4B00
  161               4C00     	BLK_4800_TL_H	=	$4C00
  162               4D00     	BLK_4800_TR_H	=	$4D00
  163               4E00     	BLK_4800_BL_H	=	$4E00
  164               4F00     	BLK_4800_BR_H	=	$4F00
  165                        	
  166               5000     	BLK_5000_TL_L	=	$5000
  167               5100     	BLK_5000_TR_L	=	$5100
  168               5200     	BLK_5000_BL_L	=	$5200
  169               5300     	BLK_5000_BR_L	=	$5300
  170               5400     	BLK_5000_TL_H	=	$5400
  171               5500     	BLK_5000_TR_H	=	$5500
  172               5600     	BLK_5000_BL_H	=	$5600
  173               5700     	BLK_5000_BR_H	=	$5700
  174                        	
  175               5800     	BLK_5800_TL_L	=	$5800
  176               5900     	BLK_5800_TR_L	=	$5900
  177               5A00     	BLK_5800_BL_L	=	$5A00
  178               5B00     	BLK_5800_BR_L	=	$5B00
  179               5C00     	BLK_5800_TL_H	=	$5C00
  180               5D00     	BLK_5800_TR_H	=	$5D00
  181               5E00     	BLK_5800_BL_H	=	$5E00
  182               5F00     	BLK_5800_BR_H	=	$5F00
  183                        	
  184                        		.endif
  185                        	
  186               0080     	MAP_UNALIGNED_X	=	$80
  187               0040     	MAP_UNALIGNED_Y	=	$40
  188                        	
  189                        	;
  190                        	;
  191                        	;
  192                        	
  193               2885     			.bss
  194                        	
  195                        	; **************
  196                        	; 8-byte (or 2-byte) entry for each SCREEN in the MULTI_MAP.
  197                        	
  198               0000     			.rsset	0
  199               0000     		.if	BLKDEF_POINTERS
  202                        		.else
  203               0000     	SCR_MAP_PAGE	.rs	1	; 256-byte aligned.
  204               0001     	SCR_MAP_BANK	.rs	1
  205               0002     	SCR_BLK_PAGE	.rs	1	; >$4000, >$4800, >$5000, or >$5800.
  206               0003     	SCR_BLK_BANK	.rs	1
  207               0004     	SCR_TBL_PAGE	.rs	1	; 256-byte aligned.
  208               0005     	SCR_TBL_BANK	.rs	1
  209               0006     	SCR_CHR_12	.rs	1	; Which CHR banks are used by the BLK, with
  210               0007     	SCR_CHR_34	.rs	1	; a max of 16 CHR banks per MULTI_MAP.
  211                        		.endif
  212                        	
  213                        			; A simple macro to help build a multi-screen map.
  214                        	
  215               0000     		.ifndef	SCREEN
  224                        		.endif
  225                        	
  226    F8:2885             	map_blk_flag:	ds	1	; Returned from _get_map_block().
  227    F8:2886             	map_blk_mask:	ds	1	; Returned from _get_map_block().
  228                        	
  229                        	; **************
  230                        	; 16-bytes of VDC blkmap info.
  231                        	;
  232                        	; N.B. MUST be 16-bytes before the SGX versions to use PCE_VDC_OFFSET.
  233                        	
  234    F8:2887             	vdc_old_chr_x:	ds	1	; Previous top-left X in CHR (lo-byte only).
  235    F8:2888             	vdc_old_chr_y:	ds	1	; Previous top-left Y in CHR (lo-byte only).
  236                        	
  237    F8:2889             	vdc_tbl_addr:	ds	2	; 256-byte aligned.
  238    F8:288B             	vdc_tbl_bank:	ds	1
  239                        	
  240    F8:288C             	vdc_blk_addr:	ds	2	; 2KBytes of data, 256-byte aligned.
  241    F8:288E             	vdc_blk_bank:	ds	1
  242                        	
  243    F8:288F             	vdc_map_addr:	ds	2	; Mapped into MPR3..MPR5, max 16KBytes.
  244    F8:2891             	vdc_map_bank:	ds	1
  245                        	
  246    F8:2892             	vdc_scr_addr:	ds	2	; 8KByte maximum size.
  247    F8:2894             	vdc_scr_bank:	ds	1
  248    F8:2895             	vdc_scr_chr12:	ds	1	; Which CHR banks are used by the BLK, with
  249    F8:2896             	vdc_scr_chr34:	ds	1	; a max of 16 banks per multi-screen map.
  250                        	
  251               0001     		.if	SUPPORT_SGX
  252                        	
  253                        	; **************
  254                        	; 16-bytes of SGX blkmap info.
  255                        	;
  256                        	; N.B. MUST be 16-bytes after the VDC versions to use SGX_VDC_OFFSET.
  257                        	
  258    F8:2897             	sgx_old_chr_x:	ds	1	; Previous top-left X in CHR (lo-byte only).
  259    F8:2898             	sgx_old_chr_y:	ds	1	; Previous top-left Y in CHR (lo-byte only).
  260                        	
  261    F8:2899             	sgx_tbl_addr:	ds	2	; 256-byte aligned.
  262    F8:289B             	sgx_tbl_bank:	ds	1
  263                        	
  264    F8:289C             	sgx_blk_addr:	ds	2	; 2KBytes of data, 256-byte aligned.
  265    F8:289E             	sgx_blk_bank:	ds	1
  266                        	
  267    F8:289F             	sgx_map_addr:	ds	2	; Mapped into MPR3..MPR4, max 8KBytes.
  268    F8:28A1             	sgx_map_bank:	ds	1
  269                        	
  270    F8:28A2             	sgx_scr_addr:	ds	2	; 8KByte maximum size.
  271    F8:28A4             	sgx_scr_bank:	ds	1
  272    F8:28A5             	sgx_scr_chr12:	ds	1	; Which CHR banks are used by the BLK, with
  273    F8:28A6             	sgx_scr_chr34:	ds	1	; a max of 16 banks per multi-screen map.
  274                        	
  275                        		.endif	SUPPORT_SGX
  276                        	
  277               0000     		.if	0
  310                        		.endif	0
  311                        	
  312                        	; **************
  313                        	; Aliases for the asm variable names in HuCC.
  314                        	;
  315                        	
  316               0001     		.ifdef	HUCC
  317                        	
  318    F8:28A7             	_map_blk_flag	.alias	map_blk_flag
  319    F8:28A7             	_map_blk_mask	.alias	map_blk_mask
  320                        	
  321    F8:28A7             	_vdc_map_draw_w	.alias	vdc_map_draw_w
  322    F8:28A7             	_vdc_map_draw_h	.alias	vdc_map_draw_h
  323    F8:28A7             	_vdc_map_pxl_x	.alias	vdc_map_pxl_x
  324    F8:28A7             	_vdc_map_pxl_y	.alias	vdc_map_pxl_y
  325    F8:28A7             	_vdc_old_chr_x	.alias	vdc_old_chr_x
  326    F8:28A7             	_vdc_old_chr_y	.alias	vdc_old_chr_y
  327    F8:28A7             	_vdc_tbl_addr	.alias	vdc_tbl_addr
  328    F8:28A7             	_vdc_tbl_bank	.alias	vdc_tbl_bank
  329    F8:28A7             	_vdc_blk_addr	.alias	vdc_blk_addr
  330    F8:28A7             	_vdc_blk_bank	.alias	vdc_blk_bank
  331    F8:28A7             	_vdc_map_line_w	.alias	vdc_map_line_w
  332    F8:28A7             	_vdc_map_scrn_w	.alias	vdc_map_scrn_w
  333    F8:28A7             	_vdc_map_addr	.alias	vdc_map_addr
  334    F8:28A7             	_vdc_map_bank	.alias	vdc_map_bank
  335    F8:28A7             	_vdc_scr_addr	.alias	vdc_scr_addr
  336    F8:28A7             	_vdc_scr_bank	.alias	vdc_scr_bank
  337    F8:28A7             	_vdc_scr_chr12	.alias	vdc_scr_chr12
  338    F8:28A7             	_vdc_scr_chr34	.alias	vdc_scr_chr34
  339                        	
  340               0001     		.if	SUPPORT_SGX
  341    F8:28A7             	_sgx_map_draw_w	.alias	sgx_map_draw_w
  342    F8:28A7             	_sgx_map_draw_h	.alias	sgx_map_draw_h
  343    F8:28A7             	_sgx_map_pxl_x	.alias	sgx_map_pxl_x
  344    F8:28A7             	_sgx_map_pxl_y	.alias	sgx_map_pxl_y
  345    F8:28A7             	_sgx_old_chr_x	.alias	sgx_old_chr_x
  346    F8:28A7             	_sgx_old_chr_y	.alias	sgx_old_chr_y
  347    F8:28A7             	_sgx_tbl_addr	.alias	sgx_tbl_addr
  348    F8:28A7             	_sgx_tbl_bank	.alias	sgx_tbl_bank
  349    F8:28A7             	_sgx_blk_addr	.alias	sgx_blk_addr
  350    F8:28A7             	_sgx_blk_bank	.alias	sgx_blk_bank
  351    F8:28A7             	_sgx_map_line_w	.alias	sgx_map_line_w
  352    F8:28A7             	_sgx_map_scrn_w	.alias	sgx_map_scrn_w
  353    F8:28A7             	_sgx_map_addr	.alias	sgx_map_addr
  354    F8:28A7             	_sgx_map_bank	.alias	sgx_map_bank
  355    F8:28A7             	_sgx_scr_addr	.alias	sgx_scr_addr
  356    F8:28A7             	_sgx_scr_bank	.alias	sgx_scr_bank
  357    F8:28A7             	_sgx_scr_chr12	.alias	sgx_scr_chr12
  358    F8:28A7             	_sgx_scr_chr34	.alias	sgx_scr_chr34
  359                        		.endif	SUPPORT_SGX
  360                        	
  361                        		.endif	HUCC
  362                        	
  363                        	; **************
  364                        	; Temporary variables for drawing, using common zero-page locations.
  365                        	;
  366                        	
  367               20F8     	map_bat_x	=	_al	; Set by draw_map(), scroll_map() if drawing
  368               20F9     	map_bat_y	=	_ah	; aligned, or as parameters to blit_map().
  369                        	
  370               20FA     	map_draw_w	=	_bl	; Set by draw_map(), scroll_map(), but given
  371               20FB     	map_draw_h	=	_bh	; as parameters to blit_map().
  372                        	
  373               20FC     	map_pxl_x	=	_cx	; Set by draw_map(), scroll_map() and also by
  374               20FC     	map_chr_x	=	_cl	; blit__map(), from current vdc_map_pxl_x.
  375               20FD     	map_scrn_x	=	_ch
  376                        	
  377               20FE     	map_pxl_y	=	_dx	; Set by draw_map(), scroll_map() and also by
  378               20FE     	map_chr_y	=	_dl	; blit__map(), from current vdc_map_pxl_y.
  379               20FF     	map_scrn_y	=	_dh
  380                        	
  381               20EE     	map_line	=	_si	; Start of map data line being drawn.
  382                        	
  383               2000     	map_count	=	__temp + 0
  384               2001     	map_drawn	=	__temp + 1
  385                        	
  386               E937     			.code
  387                        	
  388                        	
  389                        	
  390    01:D16C             	blkmap_group	.procgroup
  391                        	
  392                        	; ***************************************************************************
  393                        	; ***************************************************************************
  394                        	;
  395                        	; _set_blocks - Initialize the block definition pointers.
  396                        	; _sgx_set_blocks - Initialize the block definition pointers.
  397                        	;
  398                        	; void __fastcall set_blocks( unsigned char __far *blk_def<vdc_blk_bank:vdc_blk_addr>, unsigned char __far *flg_def<vdc_tbl_bank:vdc_tbl_addr>, unsigned char number_of_blk<_al> );
  399                        	; void __fastcall sgx_set_blocks( unsigned char __far *blk_def<sgx_blk_bank:sgx_blk_addr>, unsigned char __far *flg_def<sgx_tbl_bank:sgx_tbl_addr>, unsigned char number_of_blk<_al> );
  400                        	;
  401                        	
  402               0001     		.if	SUPPORT_SGX
  403                        	
  404                        			.proc	_sgx_set_blocks.3
  410                        			.endp
  411                        		.endif
  412                        	
  413    01:D16C             			.proc	_set_blocks.3
  414                        	
  415    01:D16C  82         			clx				; Offset to PCE VDC.
  416                        	
  417    01:D16D  BD 8A 28   			lda.h	vdc_tbl_addr, x		; Remap the address to MPR2.
  418    01:D170  29 1F      			and	#$1F
  419    01:D172  09 40      			ora	#$40
  420    01:D174  9D 8A 28   			sta.h	vdc_tbl_addr, x
  421                        	
  422    01:D177  BD 8D 28   			lda.h	vdc_blk_addr, x		; Remap the address to MPR2.
  423    01:D17A  29 1F      			and	#$1F
  424    01:D17C  09 40      			ora	#$40
  425    01:D17E  9D 8D 28   			sta.h	vdc_blk_addr, x
  426                        	
  427               0000     		.if	BLKDEF_POINTERS
  479                        		.endif	BLKDEF_POINTERS
  480                        	
  481                        			leave
         01:D181  4C EF FF   			jmp	leave_proc
  482                        	
  483                        			.endp
  484                        	
  485                        	
  486                        	
  487                        	; ***************************************************************************
  488                        	; ***************************************************************************
  489                        	;
  490                        	; _draw_map - Draw the entire screen at the current coordinates.
  491                        	; _sgx_draw_map - Draw the entire screen at the current coordinates.
  492                        	;
  493                        	; void __fastcall draw_map( void );
  494                        	; void __fastcall sgx_draw_map( void );
  495                        	;
  496                        	
  497               0001     		.if	SUPPORT_SGX
  498                        	
  499    01:D184             	_sgx_draw_map	.proc
  500                        	
  501    01:D184  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  502    01:D186  F0         			db	$F0			; Turn "clx" into a "beq".
  503                        	
  504    01:D187             			.ref	_draw_map
  505                        			.endp
  506                        		.endif
  507                        	
  508    01:D187             	_draw_map	.proc
  509                        	
  510    01:D187  82         			clx				; Offset to PCE VDC.
  511                        	
  512    01:D188  43 04      			tma2				; Preserve MPR2..MPR4.
  513    01:D18A  48         			pha
  514    01:D18B  43 08      			tma3
  515    01:D18D  48         			pha
  516    01:D18E  43 10      			tma4
  517    01:D190  48         			pha
  518               0000     		.if	BLKMAP_LARGEMAP
  521                        		.endif
  522                        	
  523    01:D191  20 93 D2   			jsr	map_pxl_2_chr		; Set up the draw coordinates.
  524                        	
  525    01:D194  A5 FC      			lda	<map_chr_x		; Reset previous X position.
  526    01:D196  9D 87 28   			sta	vdc_old_chr_x, x
  527                        	
  528    01:D199  A5 FE      			lda	<map_chr_y		; Reset previous Y position,
  529    01:D19B  1A         			inc	a			; ready to draw multiple rows.
  530    01:D19C  9D 88 28   			sta	vdc_old_chr_y, x
  531                        	
  532    01:D19F  BD 50 23   			lda	vdc_map_draw_w, x	; Draw the whole screen.
  533    01:D1A2  85 FA      			sta	<map_draw_w
  534    01:D1A4  BD 51 23   			lda	vdc_map_draw_h, x
  535    01:D1A7  85 FB      			sta	<map_draw_h
  536                        	
  537    01:D1A9  20 E9 D4   			jsr	map_scroll_y		; Draw N row of CHR to the BAT.
  538                        	
  539               0000     		.if	BLKMAP_LARGEMAP
  542                        		.endif
  543    01:D1AC  68         			pla				; Restore MPR2..MPR4.
  544    01:D1AD  53 10      			tam4
  545    01:D1AF  68         			pla
  546    01:D1B0  53 08      			tam3
  547    01:D1B2  68         			pla
  548    01:D1B3  53 04      			tam2
  549                        	
  550                        			leave
         01:D1B5  4C EF FF   			jmp	leave_proc
  551                        	
  552                        			.endp
  553                        	
  554                        	
  555                        	
  556                        	; ***************************************************************************
  557                        	; ***************************************************************************
  558                        	;
  559                        	; _scroll_map - Draw a single row of CHR into the BAT to update the edge.
  560                        	; _sgx_scroll_map - Draw a single row of CHR into the BAT to update the edge.
  561                        	;
  562                        	; void __fastcall scroll_map( void );
  563                        	; void __fastcall sgx_scroll_map( void );
  564                        	;
  565                        	
  566               0001     		.if	SUPPORT_SGX
  567                        	
  568    01:D1B8             	_sgx_scroll_map	.proc
  569                        	
  570    01:D1B8  A2 10      			ldx	#SGX_VDC_OFFSET		; Offset to SGX VDC.
  571    01:D1BA  F0         			db	$F0			; Turn "clx" into a "beq".
  572                        	
  573    01:D1BB             			.ref	_scroll_map
  574                        			.endp
  575                        		.endif
  576                        	
  577    01:D1BB             	_scroll_map	.proc
  578                        	
  579    01:D1BB  82         			clx				; Offset to PCE VDC.
  580                        	
  581               0000     		.if	BLKMAP_TIMETEST
  587                        		.endif
  588                        	
  589    01:D1BC  43 04      			tma2				; Preserve MPR2..MPR4.
  590    01:D1BE  48         			pha
  591    01:D1BF  43 08      			tma3
  592    01:D1C1  48         			pha
  593    01:D1C2  43 10      			tma4
  594    01:D1C4  48         			pha
  595               0000     		.if	BLKMAP_LARGEMAP
  598                        		.endif
  599                        	
  600    01:D1C5  20 93 D2   			jsr	map_pxl_2_chr		; Set up the draw coordinates.
  601                        	
  602               0001     		.if	BLKMAP_MULTISCR
  603    01:D1C8  A5 FD      			lda	<map_scrn_x		; map_scroll_x can change this!
  604    01:D1CA  48         			pha
  605                        		.endif
  606                        	
  607    01:D1CB  BD 51 23   			lda	vdc_map_draw_h, x	; Draw new LHS or RHS if needed.
  608    01:D1CE  85 FB      			sta	<map_draw_h
  609                        	;		lda	#1			; map_scroll_x only ever draws a
  610                        	;		sta	<map_draw_w		; single column.
  611    01:D1D0  20 CA D3   			jsr	map_scroll_x
  612                        	
  613    01:D1D3  BD 87 28   			lda	vdc_old_chr_x, x	; Restore map_chr_x which could
  614    01:D1D6  85 FC      			sta	<map_chr_x		; be changed by map_scroll_x.
  615                        	
  616               0001     		.if	BLKMAP_MULTISCR
  617    01:D1D8  68         			pla				; Restore before map_scroll_y.
  618    01:D1D9  85 FD      			sta	<map_scrn_x
  619                        		.endif
  620                        	
  621    01:D1DB  BD 50 23   			lda	vdc_map_draw_w, x	; Draw new TOP or BTM if needed.
  622    01:D1DE  85 FA      			sta	<map_draw_w
  623    01:D1E0  A9 01      			lda	#1
  624    01:D1E2  85 FB      			sta	<map_draw_h
  625    01:D1E4  20 E9 D4   			jsr	map_scroll_y
  626                        	
  627               0000     		.if	BLKMAP_LARGEMAP
  630                        		.endif
  631    01:D1E7  68         			pla				; Restore MPR2..MPR4.
  632    01:D1E8  53 10      			tam4
  633    01:D1EA  68         			pla
  634    01:D1EB  53 08      			tam3
  635    01:D1ED  68         			pla
  636    01:D1EE  53 04      			tam2
  637                        	
  638               0000     		.if	BLKMAP_TIMETEST
  640                        		.endif
  641                        	
  642                        			leave
         01:D1F0  4C EF FF   			jmp	leave_proc
  643                        	
  644                        			.endp
  645                        	
  646                        	
  647                        	
  648                        	; ***************************************************************************
  649                        	; ***************************************************************************
  650                        	;
  651                        	; _blit_map - Draw a map rectangle to specific BAT coordinates.
  652                        	; _sgx_blit_map - Draw a map rectangle to specific BAT coordinates.
  653                        	;
  654                        	; void __fastcall blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
  655                        	; void __fastcall sgx_blit_map( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
  656                        	;
  657                        	; Normally you'd just use _draw_map() and _scroll_map(), but for those folks
  658                        	; who really wish to take manual control, you can use this.
  659                        	;
  660                        	
  661               0001     		.if	SUPPORT_SGX
  662                        	
  663                        	_sgx_blit_map	.proc
  669                        			.endp
  670                        		.endif
  671                        	
  672    01:D1F3             	_blit_map	.proc
  673                        	
  674    01:D1F3  82         			clx				; Offset to PCE VDC.
  675                        	
  676    01:D1F4  BD 94 28   			lda	vdc_scr_bank, x		; Skip this if a multi-screen
  677    01:D1F7  D0 36      			bne	.exit			; blkmap.
  678                        	
  679    01:D1F9  43 04      			tma2				; Preserve MPR2..MPR4.
  680    01:D1FB  48         			pha
  681    01:D1FC  43 08      			tma3
  682    01:D1FE  48         			pha
  683    01:D1FF  43 10      			tma4
  684    01:D201  48         			pha
  685               0000     		.if	BLKMAP_LARGEMAP
  688                        		.endif
  689                        	
  690    01:D202  BD 58 23   			lda	vdc_map_option, x	; Preserve current map options.
  691    01:D205  48         			pha
  692    01:D206  09 C0      			ora	#MAP_UNALIGNED_X | MAP_UNALIGNED_Y
  693    01:D208  9D 58 23   			sta	vdc_map_option, x
  694                        	
  695    01:D20B  20 93 D2   			jsr	map_pxl_2_chr		; Set up the draw coordinates.
  696                        	
  697    01:D20E  A5 FA      			lda	<map_draw_w		; Are we drawing just 1 column?
  698    01:D210  C9 01      			cmp	#1
  699    01:D212  F0 1E      			beq	.draw_column
  700                        	
  701                        			; Draw N rows.
  702                        	
  703    01:D214  A5 FC      	.draw_rows:	lda	<map_chr_x		; Reset previous X position.
  704    01:D216  9D 87 28   			sta	vdc_old_chr_x, x
  705                        	
  706    01:D219  A5 FE      			lda	<map_chr_y		; Reset previous Y position,
  707    01:D21B  1A         			inc	a			; ready to draw rows upwards.
  708    01:D21C  9D 88 28   			sta	vdc_old_chr_y, x
  709                        	
  710    01:D21F  20 E9 D4   			jsr	map_scroll_y		; Draw a row of CHR to the BAT.
  711                        	
  712                        			; Drawing completed.
  713                        	
  714    01:D222  68         	.finished:	pla				; Restore previous map options.
  715    01:D223  9D 58 23   			sta	vdc_map_option, x
  716                        	
  717               0000     		.if	BLKMAP_LARGEMAP
  720                        		.endif
  721    01:D226  68         			pla				; Restore MPR2..MPR4.
  722    01:D227  53 10      			tam4
  723    01:D229  68         			pla
  724    01:D22A  53 08      			tam3
  725    01:D22C  68         			pla
  726    01:D22D  53 04      			tam2
  727                        	
  728                        	.exit:		leave
         01:D22F  4C EF FF   			jmp	leave_proc
  729                        	
  730                        			; Draw 1 column.
  731                        	
  732    01:D232  A5 FC      	.draw_column:	lda	<map_chr_x		; Reset previous X position.
  733    01:D234  1A         			inc	a			; ready to draw 1 column.
  734    01:D235  9D 87 28   			sta	vdc_old_chr_x, x
  735                        	
  736    01:D238  A5 FE      			lda	<map_chr_y		; Reset previous Y position.
  737    01:D23A  9D 88 28   			sta	vdc_old_chr_y, x
  738                        	
  739    01:D23D  20 CA D3   			jsr	map_scroll_x		; Draw a single column of CHR.
  740                        	
  741    01:D240  80 E0      			bra	.finished
  742                        	
  743                        			.endp
  744                        	
  745                        	
  746                        	
  747                        	; ***************************************************************************
  748                        	; ***************************************************************************
  749                        	;
  750                        	; _get_map_block - Get the block number used at a map pixel coordinate.
  751                        	; _sgx_get_map_block - Get the block number used at a map pixel coordinate.
  752                        	;
  753                        	; unsigned char __fastcall _get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
  754                        	; unsigned char __fastcall _sgx_get_map_block( unsigned int x<map_pxl_x>, unsigned int y<map_pxl_y> );
  755                        	;
  756                        	
  757               0001     		.if	SUPPORT_SGX
  758                        	
  759                        			.proc	_sgx_get_map_block.2
  765                        			.endp
  766                        		.endif
  767                        	
  768    01:D242             			.proc	_get_map_block.2
  769                        	
  770    01:D242  82         			clx				; Offset to PCE VDC.
  771                        	
  772    01:D243  43 04      			tma2				; Preserve MPR2..MPR4.
  773    01:D245  48         			pha
  774    01:D246  43 08      			tma3
  775    01:D248  48         			pha
  776    01:D249  43 10      			tma4
  777    01:D24B  48         			pha
  778               0000     		.if	BLKMAP_LARGEMAP
  781                        		.endif
  782                        	
  783    01:D24C  20 A7 D2   			jsr	xvt_pxl_2_chr		; Set up the query coordinates.
  784                        	
  785    01:D24F  20 D5 D2   			jsr	map_chr_2_data		; Page in the map address.
  786                        	
  787    01:D252  B2 EC      			lda	[_bp]			; Read the BLK from the map.
  788    01:D254  A8         			tay
  789                        	
  790    01:D255  A5 FC      			lda	<map_chr_x		; Calc the BLK address offset
  791    01:D257  4A         			lsr	a			; use depending upon even/odd
  792    01:D258  A5 FE      			lda	<map_chr_y		; CHR coordinates (not BAT to
  793    01:D25A  29 01      			and	#1			; support unaligned drawing).
  794    01:D25C  2A         			rol	a
  795    01:D25D  09 04      			ora	#4			; Offset to BLK table top byte.
  796    01:D25F  7D 8D 28   			adc.h	vdc_blk_addr, x		; What is the BLK data address?
  797    01:D262  85 ED      			sta.h	<_bp			; $4000, $4800, $5000 or $5800.
  798    01:D264  64 EC      			stz.l	<_bp
  799    01:D266  B1 EC      			lda	[_bp], y		; Read the collision flags from
  800    01:D268  29 0C      			and	#%00001100		; the top byte of the CHR.
  801    01:D26A  4A         			lsr	a
  802    01:D26B  4A         			lsr	a
  803    01:D26C  4A         			lsr	a			; Swizzle the bottom bit to get
  804    01:D26D  90 02      			bcc	!+			; the same bit order as used in
  805    01:D26F  09 02      			ora	#2			; .HALTMAP layer.
  806    01:D271  8D 85 28   	!:		sta	map_blk_flag
  807                        	
  808    01:D274  BD 8B 28   			lda	vdc_tbl_bank, x		; Is there a table of flags?
  809    01:D277  F0 09      			beq	!+
  810    01:D279  53 08      			tam3
  811                        	;		inc	a
  812                        	;		tam4
  813                        	;		lda.l	vdc_tbl_addr, x
  814                        	;		sta.l	<_bp
  815    01:D27B  BD 8A 28   			lda.h	vdc_tbl_addr, x		; If so, it must be aligned!
  816    01:D27E  85 ED      			sta.h	<_bp
  817    01:D280  B1 EC      			lda	[_bp], y		; Read the .MASKMAP/.OVERMAP
  818    01:D282  8D 86 28   	!:		sta	map_blk_mask		; flag value for this BLK.
  819                        	
  820               0000     		.if	BLKMAP_LARGEMAP
  823                        		.endif
  824    01:D285  68         			pla				; Restore MPR2..MPR4.
  825    01:D286  53 10      			tam4
  826    01:D288  68         			pla
  827    01:D289  53 08      			tam3
  828    01:D28B  68         			pla
  829    01:D28C  53 04      			tam2
  830                        	
  831    01:D28E  02         			sxy				; Put the BLK number in X.
  832    01:D28F  C2         			cly
  833                        	
  834                        			leave				; All done!
         01:D290  4C EF FF   			jmp	leave_proc
  835                        	
  836                        			.endp
  837                        	
  838                        	
  839                        	
  840                        	; ***************************************************************************
  841                        	; ***************************************************************************
  842                        	;
  843                        	; map_pxl_2_chr - Convert PXL to CHR, BLK and SCR coordinates.
  844                        	;
  845                        	
  846    01:D293  BD 56 23   	map_pxl_2_chr:	lda.l	vdc_map_pxl_y, x	; Get current map Y coordinate.
  847    01:D296  85 FE      			sta.l	<map_pxl_y
  848    01:D298  BD 57 23   			lda.h	vdc_map_pxl_y, x
  849    01:D29B  85 FF      			sta.h	<map_pxl_y
  850                        	
  851    01:D29D  BD 54 23   			lda.l	vdc_map_pxl_x, x	; Get current map X coordinate.
  852    01:D2A0  85 FC      			sta.l	<map_pxl_x
  853    01:D2A2  BD 55 23   			lda.h	vdc_map_pxl_x, x
  854    01:D2A5  85 FD      			sta.h	<map_pxl_x
  855                        	
  856    01:D2A7  A5 FD      	xvt_pxl_2_chr:	lda.h	<map_pxl_x		; Xvert map_pxl_x to map_chr_x.
  857               0001     		.if	BLKMAP_MULTISCR
  858    01:D2A9  A8         			tay				; Xvert map_pxl_x to map_scrn_x.
  859    01:D2AA  3C 4B 23   			bit	vdc_bat_width, x
  860    01:D2AD  70 03      			bvs	.w64
  861    01:D2AF  10 02      			bpl	.w32
  862    01:D2B1  4A         	.w128:		lsr	a
  863    01:D2B2  4A         	.w64:		lsr	a
  864    01:D2B3  85 FD      	.w32:		sta	<map_scrn_x
  865    01:D2B5  98         			tya
  866                        		.endif
  867    01:D2B6  4A         			lsr	a
  868    01:D2B7  66 FC      			ror.l	<map_pxl_x
  869    01:D2B9  4A         			lsr	a
  870    01:D2BA  66 FC      			ror.l	<map_pxl_x
  871    01:D2BC  4A         			lsr	a
  872    01:D2BD  66 FC      			ror.l	<map_pxl_x		; Max map width is 256 CHR.
  873                        	
  874    01:D2BF  A5 FF      			lda.h	<map_pxl_y		; Xvert map_pxl_y to map_chr_y.
  875               0001     		.if	BLKMAP_MULTISCR
  876    01:D2C1  A8         			tay				; Xvert map_pxl_y to map_scrn_y.
  877    01:D2C2  3C 4C 23   			bit	vdc_bat_height, x
  878    01:D2C5  50 01      			bvc	.h32
  879    01:D2C7  4A         	.h64:		lsr	a
  880    01:D2C8  85 FF      	.h32:		sta	<map_scrn_y
  881    01:D2CA  98         			tya
  882                        		.endif
  883    01:D2CB  4A         			lsr	a
  884    01:D2CC  66 FE      			ror.l	<map_pxl_y
  885    01:D2CE  4A         			lsr	a
  886    01:D2CF  66 FE      			ror.l	<map_pxl_y
  887    01:D2D1  4A         			lsr	a
  888    01:D2D2  66 FE      			ror.l	<map_pxl_y		; Max map width is 256 CHR.
  889                        	
  890    01:D2D4  60         			rts
  891                        	
  892                        	
  893                        	
  894                        	; ***************************************************************************
  895                        	; ***************************************************************************
  896                        	;
  897                        	; map_chr_2_data - Page in the MAP address for the CHR coordinates.
  898                        	;
  899                        	
  900    01:D2D5             	map_chr_2_data:
  901                        	
  902               0001     		.if	BLKMAP_MULTISCR
  903                        	
  904                        			; Initialization for a multi-screen map.
  905                        	
  906    01:D2D5  BD 94 28   			lda	vdc_scr_bank, x		; Skip this if regular blkmap.
  907    01:D2D8  F0 3A      			beq	.regular
  908                        	
  909    01:D2DA  A5 FC      	.multiscreen:	lda	<map_chr_x		; Compare old_x with cur_x.
  910    01:D2DC  3D 4D 23   			and	vdc_bat_x_mask, x
  911    01:D2DF  85 F8      			sta	<map_bat_x		; Save BAT X chr coordinate.
  912                        	
  913    01:D2E1  A5 FE      			lda	<map_chr_y		; Save BAT Y chr coordinate.
  914    01:D2E3  3D 4E 23   			and	vdc_bat_y_mask, x
  915    01:D2E6  85 F9      			sta	<map_bat_y
  916    01:D2E8  4A         			lsr	a			; Map BLK Y coordinate.
  917    01:D2E9  85 EF      			sta.h	<map_line
  918    01:D2EB  62         			cla
  919    01:D2EC  3C 4B 23   			bit	vdc_bat_width, x
  920    01:D2EF  30 08      			bmi	.w128
  921    01:D2F1  70 03      			bvs	.w64
  922    01:D2F3  46 EF      	.w32:		lsr.h	<map_line
  923    01:D2F5  6A         			ror	a
  924    01:D2F6  46 EF      	.w64:		lsr.h	<map_line
  925    01:D2F8  6A         			ror	a
  926    01:D2F9  46 EF      	.w128:		lsr.h	<map_line
  927    01:D2FB  6A         			ror	a
  928    01:D2FC  46 EF      			lsr.h	<map_line		; Hi-byte of (BLK Y * width).
  929    01:D2FE  6A         			ror	a
  930    01:D2FF  85 EE      			sta.l	<map_line		; Lo-byte of (BLK Y * width).
  931                        	
  932    01:D301  20 55 D3   			jsr	map_set_screen		; Put BLK & MAP in MPR2-MPR5.
  933                        	
  934    01:D304  A5 F8      			lda	<map_bat_x		; Calc map data pointer.
  935    01:D306  4A         			lsr	a			; Map BLK X coordinate.
  936    01:D307  05 EE      			ora.l	<map_line
  937    01:D309  85 EC      			sta.l	<_bp
  938    01:D30B  A5 EF      			lda.h	<map_line
  939    01:D30D  18         			clc
  940    01:D30E  7D 90 28   			adc.h	vdc_map_addr, x		; N.B. 256-byte aligned!
  941    01:D311  85 ED      			sta.h	<_bp
  942                        	
  943    01:D313  60         			rts
  944                        	
  945                        		.endif	BLKMAP_MULTISCR
  946                        	
  947                        			; Initialization for a regular map.
  948                        	
  949    01:D314  A5 FC      	.regular:	lda	<map_chr_x		; Compare old_x with cur_x.
  950                        	;		bit	vdc_map_option, x	; Set bit7 to disable aligning
  951                        	;		bmi	!+			; BAT X with the map X.
  952    01:D316  3D 4D 23   			and	vdc_bat_x_mask, x
  953    01:D319  85 F8      			sta	<map_bat_x		; Save BAT X chr coordinate.
  954                        	
  955    01:D31B  A5 FE      	!:		lda	<map_chr_y		; A = map CHR Y coordinate.
  956    01:D31D  A8         			tay
  957    01:D31E  4A         			lsr	a
  958    01:D31F  42         			say				; Y = map BLK Y coordinate.
  959                        	
  960                        	;		bit	vdc_map_option, x	; Set bit6 to disable aligning
  961                        	;		bvs	!+			; BAT Y with the map Y.
  962    01:D320  3D 4E 23   			and	vdc_bat_y_mask, x
  963    01:D323  85 F9      			sta	<map_bat_y		; Save BAT Y chr coordinate.
  964                        	
  965               0000     		.if	BLKMAP_LARGEMAP
  970                        		.endif
  971                        	
  972    01:D325  BD 52 23   	!:		lda	vdc_map_line_w, x	; Map width in BLK.
  973               0000     		.if	FAST_MULTIPLY
  986                        		.else
  987    01:D328  84 EF      			sty.h	<map_line		; Takes 144..176 cycles.
  988    01:D32A  A0 08      			ldy	#8
  989    01:D32C  4A         			lsr	a
  990    01:D32D  85 EE      			sta.l	<map_line
  991    01:D32F  62         			cla
  992    01:D330  90 03      			bcc	.rotate
  993    01:D332  18         	.add:		clc
  994    01:D333  65 EF      			adc.h	<map_line
  995    01:D335  6A         	.rotate:	ror	a
  996    01:D336  66 EE      			ror.l	<map_line		; Lo-byte of (BLK Y * width).
  997    01:D338  88         			dey
  998    01:D339  B0 F7      			bcs	.add
  999    01:D33B  D0 F8      			bne	.rotate
 1000    01:D33D  A8         			tay				; Hi-byte of (BLK Y * width).
 1001                        		.endif
 1002                        	
 1003    01:D33E  A5 FC      	!:		lda	<map_chr_x		; Map CHR X coordinate.
 1004    01:D340  4A         			lsr	a			; Map BLK X coordinate.
 1005    01:D341  18         			clc
 1006    01:D342  65 EE      			adc.l	<map_line		; Lo-byte of (BLK Y * width).
 1007    01:D344  90 01      			bcc	!+
 1008    01:D346  C8         			iny				; Hi-byte of (BLK Y * width).
 1009                        	
 1010    01:D347  18         	!:		clc				; Calc map data pointer.
 1011    01:D348  7D 8F 28   			adc.l	vdc_map_addr, x
 1012    01:D34B  85 EC      			sta.l	<_bp			; Maximum map size is 16KBytes
 1013    01:D34D  98         			tya				; so we don't need to consider
 1014    01:D34E  7D 90 28   			adc.h	vdc_map_addr, x		; bank overflow.
 1015    01:D351  85 ED      			sta.h	<_bp
 1016                        	
 1017    01:D353  80 66      			bra	map_set_banks		; Put BLK & MAP in MPR2-MPR5.
 1018                        	
 1019                        	
 1020                        	
 1021               0001     		.if	BLKMAP_MULTISCR
 1022                        	
 1023                        	; ***************************************************************************
 1024                        	; ***************************************************************************
 1025                        	;
 1026                        	; map_set_screen -
 1027                        	;
 1028                        	; Maximum X and Y dimension of 128 screens (32768 pixels).
 1029                        	; Maximum 8KByte total size of screen data (1024 screens).
 1030                        	;
 1031                        	
 1032    01:D355  A4 FF      	map_set_screen:	ldy	<map_scrn_y		; Map SCR Y coordinate.
 1033    01:D357  BD 53 23   			lda	vdc_map_scrn_w, x	; Map width in SCREENS.
 1034                        	
 1035               0000     		.if	FAST_MULTIPLY
 1048                        		.else
 1049    01:D35A  84 ED      			sty.h	<_bp			; Takes 144..176 cycles.
 1050    01:D35C  A0 08      			ldy	#8
 1051    01:D35E  4A         			lsr	a
 1052    01:D35F  85 EC      			sta.l	<_bp
 1053    01:D361  62         			cla
 1054    01:D362  90 03      			bcc	.rotate
 1055    01:D364  18         	.add:		clc
 1056    01:D365  65 ED      			adc.h	<_bp
 1057    01:D367  6A         	.rotate:	ror	a
 1058    01:D368  66 EC      			ror.l	<_bp			; Lo-byte of (SCR Y * width).
 1059    01:D36A  88         			dey
 1060    01:D36B  B0 F7      			bcs	.add
 1061    01:D36D  D0 F8      			bne	.rotate
 1062    01:D36F  A8         			tay				; Hi-byte of (SCR Y * width).
 1063                        		.endif
 1064                        	
 1065    01:D370  A5 FD      			lda	<map_scrn_x		; Map SCR X coordinate.
 1066    01:D372  18         			clc
 1067    01:D373  65 EC      			adc.l	<_bp
 1068    01:D375  90 01      			bcc	!+
 1069    01:D377  C8         			iny
 1070                        	
 1071    01:D378  84 ED      	!:		sty.h	<_bp			; 2 bytes per screen entry, max
 1072    01:D37A  0A         			asl	a			; 8KByte screen table.
 1073    01:D37B  26 ED      			rol.h	<_bp
 1074               0001     		.if	BLKDEF_POINTERS == 0
 1075    01:D37D  0A         			asl	a			; 8 bytes per screen entry when
 1076    01:D37E  26 ED      			rol.h	<_bp			; not using BLK pointers.
 1077    01:D380  0A         			asl	a
 1078    01:D381  26 ED      			rol.h	<_bp
 1079                        		.endif
 1080                        	
 1081    01:D383  7D 92 28   			adc.l	vdc_scr_addr, x		; Calc screen data pointer.
 1082    01:D386  85 EC      			sta.l	<_bp			; Maximum data size is 8KBytes
 1083    01:D388  A5 ED      			lda.h	<_bp			; so we don't need to consider
 1084    01:D38A  7D 93 28   			adc.h	vdc_scr_addr, x		; bank overflow.
 1085    01:D38D  85 ED      			sta.h	<_bp
 1086                        	
 1087    01:D38F  BD 94 28   			lda	vdc_scr_bank, x		; Map the SCR data in MPR3..MPR4.
 1088    01:D392  53 08      			tam3
 1089    01:D394  1A         			inc	a
 1090    01:D395  53 10      			tam4
 1091                        	
 1092    01:D397  C2         			cly
 1093    01:D398  B1 EC      			lda	[_bp], y		; Get SCR_MAP_PAGE.
 1094    01:D39A  9D 90 28   			sta.h	vdc_map_addr, x
 1095    01:D39D  C8         			iny
 1096    01:D39E  B1 EC      			lda	[_bp], y		; Get SCR_MAP_BANK.
 1097    01:D3A0  9D 91 28   			sta	vdc_map_bank, x
 1098                        	
 1099               0001     		.if	BLKDEF_POINTERS == 0
 1100    01:D3A3  C8         			iny
 1101    01:D3A4  B1 EC      			lda	[_bp], y		; Get SCR_BLK_PAGE.
 1102    01:D3A6  9D 8D 28   			sta.h	vdc_blk_addr, x
 1103    01:D3A9  C8         			iny
 1104    01:D3AA  B1 EC      			lda	[_bp], y		; Get SCR_BLK_BANK.
 1105    01:D3AC  9D 8E 28   			sta	vdc_blk_bank, x
 1106    01:D3AF  C8         			iny
 1107    01:D3B0  B1 EC      			lda	[_bp], y		; Get SCR_TBL_PAGE.
 1108    01:D3B2  9D 8A 28   			sta.h	vdc_tbl_addr, x
 1109    01:D3B5  C8         			iny
 1110    01:D3B6  B1 EC      			lda	[_bp], y		; Get SCR_TBL_BANK.
 1111    01:D3B8  9D 8B 28   			sta	vdc_tbl_bank, x
 1112               0000     		.if	0				; These are not currently used.
 1119                        		.endif
 1120                        		.endif
 1121                        	
 1122                        	;		lda	vdc_bat_width, x	; Set up the map width.
 1123                        	;		lsr	a			; This should have been set
 1124                        	;		sta	vdc_map_line_w, x	; with the multi-screen map.
 1125                        	
 1126                        	;		jmp	map_set_banks		; Put BLK & MAP in MPR2-MPR5.
 1127                        	
 1128                        			; Fall through to map_set_banks.
 1129                        	
 1130                        		.endif	BLKMAP_MULTISCR
 1131                        	
 1132                        	
 1133                        	
 1134                        	; ***************************************************************************
 1135                        	; ***************************************************************************
 1136                        	;
 1137                        	; map_set_banks - Put BLK & MAP in MPR2-MPR5.
 1138                        	;
 1139                        	
 1140    01:D3BB  BD 8E 28   	map_set_banks:	lda	vdc_blk_bank, x		; Put the BLK into MPR2.
 1141    01:D3BE  53 04      			tam2
 1142                        	
 1143    01:D3C0  BD 91 28   			lda	vdc_map_bank, x		; Put the MAP into MPR3-MPR5.
 1144    01:D3C3  53 08      			tam3
 1145    01:D3C5  1A         			inc	a
 1146    01:D3C6  53 10      			tam4
 1147               0000     		.if	BLKMAP_LARGEMAP
 1156                        		.endif
 1157                        	
 1158    01:D3C8  60         	!:		rts
 1159                        	
 1160                        	
 1161                        	
 1162                        	; ***************************************************************************
 1163                        	; ***************************************************************************
 1164                        	;
 1165                        	; map_scroll_x - Update the BAT when X coordinate changes.
 1166                        	;
 1167                        	; N.B. This will alter map_chr_x and map_scrn_x if moved in +ve direction!
 1168                        	;
 1169                        	; N.B. This only ever draws a single column!
 1170                        	;
 1171                        	
 1172    01:D3C9  60         	!no_change:	rts
 1173                        	
 1174    01:D3CA             	map_scroll_x:
 1175                        	
 1176               0001     		.if	BLKMAP_MULTISCR
 1177                        	
 1178                        			; Initialization for a multi-screen map.
 1179                        	
 1180    01:D3CA  BD 94 28   			lda	vdc_scr_bank, x		; Skip this if regular blkmap.
 1181    01:D3CD  F0 56      			beq	.regular
 1182                        	
 1183    01:D3CF  A5 FC      	.multiscreen:	lda	<map_chr_x		; Compare old_x with cur_x.
 1184    01:D3D1  DD 87 28   			cmp	vdc_old_chr_x, x
 1185               0001     		.if	BLKMAP_TIMETEST == 0
 1186    01:D3D4  F0 F3      			beq	!no_change-		; Do nothing if no change.
 1187                        		.endif
 1188    01:D3D6  9D 87 28   			sta	vdc_old_chr_x, x
 1189    01:D3D9  30 11      			bmi	!+			; Test the sign of the change.
 1190                        	
 1191    01:D3DB  18         			clc				; Draw RHS if chr_x >= old_x.
 1192    01:D3DC  3D 4D 23   			and	vdc_bat_x_mask, x
 1193    01:D3DF  7D 50 23   			adc	vdc_map_draw_w, x	; Usually (SCR_WIDTH / 8) + 1.
 1194    01:D3E2  3A         			dec	a
 1195    01:D3E3  85 FC      			sta	<map_chr_x		; Update CHR X chr coordinate.
 1196    01:D3E5  3C 4B 23   			bit	vdc_bat_width, x
 1197    01:D3E8  F0 02      			beq	!+
 1198    01:D3EA  E6 FD      			inc	<map_scrn_x		; Wrapped to the next screen.
 1199                        	
 1200    01:D3EC  3D 4D 23   	!:		and	vdc_bat_x_mask, x
 1201    01:D3EF  85 F8      			sta	<map_bat_x		; Save BAT X chr coordinate.
 1202                        	
 1203    01:D3F1  A5 FE      			lda	<map_chr_y		; Save BAT Y chr coordinate.
 1204    01:D3F3  3D 4E 23   			and	vdc_bat_y_mask, x
 1205    01:D3F6  85 F9      			sta	<map_bat_y
 1206    01:D3F8  4A         			lsr	a			; Map BLK Y coordinate.
 1207    01:D3F9  85 EF      			sta.h	<map_line
 1208    01:D3FB  62         			cla
 1209    01:D3FC  3C 4B 23   			bit	vdc_bat_width, x
 1210    01:D3FF  30 08      			bmi	.w128
 1211    01:D401  70 03      			bvs	.w64
 1212    01:D403  46 EF      	.w32:		lsr.h	<map_line
 1213    01:D405  6A         			ror	a
 1214    01:D406  46 EF      	.w64:		lsr.h	<map_line
 1215    01:D408  6A         			ror	a
 1216    01:D409  46 EF      	.w128:		lsr.h	<map_line
 1217    01:D40B  6A         			ror	a
 1218    01:D40C  46 EF      			lsr.h	<map_line		; Hi-byte of (BLK Y * width).
 1219    01:D40E  6A         			ror	a
 1220    01:D40F  85 EE      			sta.l	<map_line		; Lo-byte of (BLK Y * width).
 1221                        	
 1222    01:D411  20 55 D3   			jsr	map_set_screen		; Put BLK & MAP in MPR2-MPR5.
 1223                        	
 1224    01:D414  A5 F8      			lda	<map_bat_x		; Calc map data pointer.
 1225    01:D416  4A         			lsr	a			; Map BLK X coordinate.
 1226    01:D417  05 EE      			ora.l	<map_line
 1227    01:D419  85 EC      			sta.l	<_bp
 1228    01:D41B  A5 EF      			lda.h	<map_line
 1229    01:D41D  18         			clc
 1230    01:D41E  7D 90 28   			adc.h	vdc_map_addr, x		; N.B. 256-byte aligned!
 1231    01:D421  85 ED      			sta.h	<_bp
 1232                        	
 1233    01:D423  80 5D      			bra	.draw_col		; Now draw it.
 1234                        	
 1235                        		.endif	BLKMAP_MULTISCR
 1236                        	
 1237                        			; Initialization for a regular map.
 1238                        	
 1239    01:D425  A5 FC      	.regular:	lda	<map_chr_x		; Compare old_x with cur_x.
 1240    01:D427  DD 87 28   			cmp	vdc_old_chr_x, x
 1241               0001     		.if	BLKMAP_TIMETEST == 0
 1242    01:D42A  F0 9D      			beq	!no_change-		; Do nothing if no change.
 1243                        		.endif
 1244    01:D42C  9D 87 28   			sta	vdc_old_chr_x, x
 1245    01:D42F  30 07      			bmi	!+			; Test the sign of the change.
 1246                        	
 1247    01:D431  18         			clc				; Draw RHS if chr_x >= old_x.
 1248    01:D432  7D 50 23   			adc	vdc_map_draw_w, x	; Usually (SCR_WIDTH / 8) + 1.
 1249    01:D435  3A         			dec	a
 1250    01:D436  85 FC      			sta	<map_chr_x		; Update CHR X chr coordinate.
 1251                        	
 1252    01:D438  3C 58 23   	!:		bit	vdc_map_option, x	; Set bit7 to disable aligning
 1253    01:D43B  30 05      			bmi	!+			; BAT X with the map X.
 1254    01:D43D  3D 4D 23   			and	vdc_bat_x_mask, x
 1255    01:D440  85 F8      			sta	<map_bat_x		; Save BAT X chr coordinate.
 1256                        	
 1257    01:D442  A5 FE      	!:		lda	<map_chr_y		; A = map CHR Y coordinate.
 1258    01:D444  A8         			tay
 1259    01:D445  4A         			lsr	a
 1260    01:D446  42         			say				; Y = map BLK Y coordinate.
 1261                        	
 1262    01:D447  3C 58 23   			bit	vdc_map_option, x	; Set bit6 to disable aligning
 1263    01:D44A  70 05      			bvs	!+			; BAT Y with the map Y.
 1264    01:D44C  3D 4E 23   			and	vdc_bat_y_mask, x
 1265    01:D44F  85 F9      			sta	<map_bat_y		; Save BAT Y chr coordinate.
 1266                        	
 1267               0000     		.if	BLKMAP_LARGEMAP
 1272                        		.endif
 1273                        	
 1274    01:D451  BD 52 23   	!:		lda	vdc_map_line_w, x	; Map width in BLK.
 1275               0000     		.if	FAST_MULTIPLY
 1288                        		.else
 1289    01:D454  84 EF      			sty.h	<map_line		; Takes 144..176 cycles.
 1290    01:D456  A0 08      			ldy	#8
 1291    01:D458  4A         			lsr	a
 1292    01:D459  85 EE      			sta.l	<map_line
 1293    01:D45B  62         			cla
 1294    01:D45C  90 03      			bcc	.rotate
 1295    01:D45E  18         	.add:		clc
 1296    01:D45F  65 EF      			adc.h	<map_line
 1297    01:D461  6A         	.rotate:	ror	a
 1298    01:D462  66 EE      			ror.l	<map_line		; Lo-byte of (BLK Y * width).
 1299    01:D464  88         			dey
 1300    01:D465  B0 F7      			bcs	.add
 1301    01:D467  D0 F8      			bne	.rotate
 1302    01:D469  A8         			tay				; Hi-byte of (BLK Y * width).
 1303                        		.endif
 1304                        	
 1305    01:D46A  A5 FC      	!:		lda	<map_chr_x		; Map CHR X coordinate.
 1306    01:D46C  4A         			lsr	a			; Map BLK X coordinate.
 1307    01:D46D  18         			clc
 1308    01:D46E  65 EE      			adc.l	<map_line		; Lo-byte of (BLK Y * width).
 1309    01:D470  90 01      			bcc	!+
 1310    01:D472  C8         			iny				; Hi-byte of (BLK Y * width).
 1311                        	
 1312    01:D473  18         	!:		clc				; Calc map data pointer.
 1313    01:D474  7D 8F 28   			adc.l	vdc_map_addr, x
 1314    01:D477  85 EC      			sta.l	<_bp			; Maximum map size is 16KBytes
 1315    01:D479  98         			tya				; so we don't need to consider
 1316    01:D47A  7D 90 28   			adc.h	vdc_map_addr, x		; bank overflow.
 1317    01:D47D  85 ED      			sta.h	<_bp
 1318                        	
 1319    01:D47F  20 BB D3   			jsr	map_set_banks		; Put BLK & MAP in MPR2-MPR5.
 1320                        	
 1321                        			; Draw the first part of the column.
 1322                        	
 1323    01:D482  A5 F8      	.draw_col:	lda	<map_bat_x		; Set the BAT VRAM destination
 1324    01:D484  85 F0      			sta.l	<_di			; coordinates.
 1325    01:D486  A5 F9      			lda	<map_bat_y
 1326    01:D488  85 F1      			sta.h	<_di
 1327                        	
 1328    01:D48A  5D 4E 23   			eor	vdc_bat_y_mask, x	; Calc CHR before wrap.
 1329    01:D48D  1A         			inc	a
 1330    01:D48E  DD 51 23   			cmp	vdc_map_draw_h, x	; Usually (SCR_HEIGHT / 8) + 1.
 1331    01:D491  90 03      			bcc	!+
 1332    01:D493  BD 51 23   			lda	vdc_map_draw_h, x	; Maximum CHR to draw.
 1333    01:D496  85 00      	!:		sta	<map_count		; Set number of CHR to draw.
 1334    01:D498  85 01      			sta	<map_drawn		; Preserve number of CHR drawn.
 1335                        	
 1336    01:D49A  A9 05      			lda	#VDC_CR			; Set VDC auto-increment from
 1337    01:D49C  95 F7      			sta	<vdc_reg, x		; the BAT width, which is set
 1338    01:D49E  9D 00 02   			sta	VDC_AR, x		; up by set_screen_size().
 1339    01:D4A1  B5 F4      			lda	<vdc_crh, x
 1340    01:D4A3  9D 03 02   			sta	VDC_DH, x
 1341                        	
 1342    01:D4A6  20 E8 D7   			jsr	blk_col_strip		; Draw top of vertical strip.
 1343                        	
 1344                        			; Wrap around and draw the rest of the column (if needed).
 1345                        	
 1346    01:D4A9  38         			sec				; Are there any more CHR that
 1347    01:D4AA  BD 51 23   			lda	vdc_map_draw_h, x	; need to be drawn?
 1348    01:D4AD  E5 01      			sbc	<map_drawn
 1349    01:D4AF  F0 2C      			beq	.done
 1350                        	
 1351    01:D4B1  85 00      			sta	<map_count		; Set number of CHR to draw.
 1352                        	
 1353    01:D4B3  A5 FE      			lda	<map_chr_y		; Update CHR Y coordinate for
 1354    01:D4B5  48         			pha				; drawing unaligned tiles.
 1355    01:D4B6  18         			clc
 1356    01:D4B7  65 01      			adc	<map_drawn
 1357    01:D4B9  85 FE      			sta	<map_chr_y
 1358                        	
 1359               0001     		.if	BLKMAP_MULTISCR
 1360    01:D4BB  BD 94 28   			lda	vdc_scr_bank, x		; Skip this if regular blkmap.
 1361    01:D4BE  F0 0F      			beq	!+
 1362                        	
 1363    01:D4C0  E6 FF      			inc	<map_scrn_y		; Wrapped to the next screen.
 1364                        	
 1365    01:D4C2  20 55 D3   			jsr	map_set_screen		; Put BLK & MAP in MPR2-MPR5.
 1366                        	
 1367    01:D4C5  A5 F8      			lda	<map_bat_x		; Calc map data pointer.
 1368    01:D4C7  4A         			lsr	a			; Map BLK X coordinate.
 1369    01:D4C8  85 EC      			sta.l	<_bp
 1370    01:D4CA  BD 90 28   			lda.h	vdc_map_addr, x		; N.B. 256-byte aligned!
 1371    01:D4CD  85 ED      			sta.h	<_bp
 1372                        		.endif
 1373                        	
 1374    01:D4CF  A5 F8      	!:		lda	<map_bat_x		; Set the BAT VRAM destination
 1375    01:D4D1  85 F0      			sta.l	<_di			; coordinates.
 1376    01:D4D3  64 F1      			stz.h	<_di			; Reset 1st row to draw.
 1377                        	
 1378    01:D4D5  20 E8 D7   			jsr	blk_col_strip		; Draw btm of vertical strip.
 1379                        	
 1380               0001     		.if	BLKMAP_MULTISCR
 1381    01:D4D8  C6 FF      			dec	<map_scrn_y		; Restore, no check if should.
 1382                        		.endif
 1383                        	
 1384    01:D4DA  68         			pla				; Restore CHR Y coordinate, we
 1385    01:D4DB  85 FE      			sta	<map_chr_y		; might draw another column!
 1386                        	
 1387    01:D4DD  A9 05      	.done:		lda	#VDC_CR			; Set VDC auto-increment to 1.
 1388    01:D4DF  95 F7      			sta	<vdc_reg, x
 1389    01:D4E1  9D 00 02   			sta	VDC_AR, x
 1390    01:D4E4  9E 03 02   			stz	VDC_DH, x
 1391                        	
 1392    01:D4E7  60         			rts
 1393                        	
 1394                        	
 1395                        	
 1396                        	; ***************************************************************************
 1397                        	; ***************************************************************************
 1398                        	;
 1399                        	; map_scroll_y - Update the BAT when Y coordinate changes.
 1400                        	;
 1401                        	; N.B. This will alter map_chr_y and map_scrn_y if moved in +ve direction!
 1402                        	;
 1403                        	; N.B. This draws multiple rows when called from _draw_map or _blit_map.
 1404                        	;
 1405                        	
 1406    01:D4E8  60         	!no_change:	rts
 1407                        	
 1408    01:D4E9             	map_scroll_y:
 1409                        	
 1410               0001     		.if	BLKMAP_MULTISCR
 1411                        	
 1412                        			; Initialization for a multi-screen map.
 1413                        	
 1414    01:D4E9  BD 94 28   			lda	vdc_scr_bank, x		; Skip this if regular blkmap.
 1415    01:D4EC  F0 56      			beq	.regular
 1416                        	
 1417    01:D4EE  A5 FE      	.multiscr:	lda	<map_chr_y		; Compare old_y with cur_y.
 1418    01:D4F0  DD 88 28   			cmp	vdc_old_chr_y, x
 1419               0001     		.if	BLKMAP_TIMETEST == 0
 1420    01:D4F3  F0 F3      			beq	!no_change-		; Do nothing if no change.
 1421                        		.endif
 1422    01:D4F5  9D 88 28   			sta	vdc_old_chr_y, x
 1423    01:D4F8  30 11      			bmi	!+			; Test the sign of the change.
 1424                        	
 1425    01:D4FA  18         			clc				; Draw bottom if chr_y >= old_y.
 1426    01:D4FB  3D 4E 23   			and	vdc_bat_y_mask, x
 1427    01:D4FE  7D 51 23   			adc	vdc_map_draw_h, x	; Usually (SCR_HEIGHT / 8) + 1.
 1428    01:D501  3A         			dec	a
 1429    01:D502  85 FE      			sta	<map_chr_y		; Update CHR Y chr coordinate.
 1430    01:D504  3C 4C 23   			bit	vdc_bat_height, x
 1431    01:D507  F0 02      			beq	!+
 1432    01:D509  E6 FF      			inc	<map_scrn_y		; Wrapped to the next screen.
 1433                        	
 1434    01:D50B  3D 4E 23   	!:		and	vdc_bat_y_mask, x
 1435    01:D50E  85 F9      			sta	<map_bat_y		; Save BAT Y chr coordinate.
 1436                        	
 1437    01:D510  4A         			lsr	a			; Map BLK Y coordinate.
 1438    01:D511  85 EF      			sta.h	<map_line
 1439    01:D513  62         			cla
 1440    01:D514  3C 4B 23   			bit	vdc_bat_width, x
 1441    01:D517  30 08      			bmi	.w128
 1442    01:D519  70 03      			bvs	.w64
 1443    01:D51B  46 EF      	.w32:		lsr.h	<map_line
 1444    01:D51D  6A         			ror	a
 1445    01:D51E  46 EF      	.w64:		lsr.h	<map_line
 1446    01:D520  6A         			ror	a
 1447    01:D521  46 EF      	.w128:		lsr.h	<map_line
 1448    01:D523  6A         			ror	a
 1449    01:D524  46 EF      			lsr.h	<map_line		; Hi-byte of (BLK Y * width).
 1450    01:D526  6A         			ror	a
 1451    01:D527  85 EE      			sta.l	<map_line		; Lo-byte of (BLK Y * width).
 1452                        	
 1453    01:D529  A5 FC      			lda	<map_chr_x
 1454    01:D52B  3D 4D 23   			and	vdc_bat_x_mask, x
 1455    01:D52E  85 F8      			sta	<map_bat_x		; Save BAT X chr coordinate.
 1456                        	
 1457                        			; Loop to here if drawing multiple multi-screen rows.
 1458                        	
 1459    01:D530  20 55 D3   	.multiscr_row:	jsr	map_set_screen		; Put BLK & MAP in MPR2-MPR5.
 1460                        	
 1461    01:D533  A5 F8      			lda	<map_bat_x		; Calc map data pointer.
 1462    01:D535  4A         			lsr	a			; Map BLK X coordinate.
 1463    01:D536  05 EE      			ora.l	<map_line
 1464    01:D538  85 EC      			sta.l	<_bp
 1465    01:D53A  A5 EF      			lda.h	<map_line
 1466    01:D53C  18         			clc
 1467    01:D53D  7D 90 28   			adc.h	vdc_map_addr, x		; N.B. 256-byte aligned!
 1468    01:D540  85 ED      			sta.h	<_bp
 1469                        	
 1470    01:D542  80 60      			bra	.draw_row		; Now draw it.
 1471                        	
 1472                        		.endif	BLKMAP_MULTISCR
 1473                        	
 1474                        			; Initialization for a regular blkmap.
 1475                        	
 1476    01:D544  A5 FE      	.regular:	lda	<map_chr_y		; Compare old_y with cur_y.
 1477    01:D546  DD 88 28   			cmp	vdc_old_chr_y, x
 1478               0001     		.if	BLKMAP_TIMETEST == 0
 1479    01:D549  F0 9D      			beq	!no_change-		; Do nothing if no change.
 1480                        		.endif
 1481    01:D54B  9D 88 28   			sta	vdc_old_chr_y, x
 1482    01:D54E  30 07      			bmi	!+			; Test the sign of the change.
 1483                        	
 1484    01:D550  18         			clc				; Draw bottom if chr_y >= old_y.
 1485    01:D551  7D 51 23   			adc	vdc_map_draw_h, x	; Usually (SCR_HEIGHT / 8) + 1.
 1486    01:D554  3A         			dec	a
 1487    01:D555  85 FE      			sta	<map_chr_y		; Update CHR Y chr coordinate.
 1488                        	
 1489    01:D557  A8         	!:		tay				; A = map CHR Y coordinate.
 1490    01:D558  4A         			lsr	a
 1491    01:D559  42         			say				; Y = map BLK Y coordinate.
 1492                        	
 1493    01:D55A  3C 58 23   			bit	vdc_map_option, x	; Set bit6 to disable aligning
 1494    01:D55D  70 05      			bvs	!+			; BAT Y with the map Y.
 1495    01:D55F  3D 4E 23   			and	vdc_bat_y_mask, x
 1496    01:D562  85 F9      			sta	<map_bat_y		; Save BAT Y chr coordinate.
 1497                        	
 1498    01:D564  3C 58 23   	!:		bit	vdc_map_option, x	; Set bit7 to disable aligning
 1499    01:D567  30 07      			bmi	!+			; BAT X with the map X.
 1500    01:D569  A5 FC      			lda	<map_chr_x
 1501    01:D56B  3D 4D 23   			and	vdc_bat_x_mask, x
 1502    01:D56E  85 F8      			sta	<map_bat_x		; Save BAT X chr coordinate.
 1503    01:D570             	!:
 1504                        	
 1505               0000     		.if	BLKMAP_LARGEMAP
 1510                        		.endif
 1511                        	
 1512    01:D570  BD 52 23   			lda	vdc_map_line_w, x	; Map width in BLK.
 1513               0000     		.if	FAST_MULTIPLY
 1526                        		.else
 1527    01:D573  84 EF      			sty.h	<map_line		; Takes 144..176 cycles.
 1528    01:D575  A0 08      			ldy	#8
 1529    01:D577  4A         			lsr	a
 1530    01:D578  85 EE      			sta.l	<map_line
 1531    01:D57A  62         			cla
 1532    01:D57B  90 03      			bcc	.rotate
 1533    01:D57D  18         	.add:		clc
 1534    01:D57E  65 EF      			adc.h	<map_line
 1535    01:D580  6A         	.rotate:	ror	a
 1536    01:D581  66 EE      			ror.l	<map_line		; Lo-byte of (BLK Y * width).
 1537    01:D583  88         			dey
 1538    01:D584  B0 F7      			bcs	.add
 1539    01:D586  D0 F8      			bne	.rotate
 1540    01:D588  85 EF      			sta.h	<map_line		; Hi-byte of (BLK Y * width).
 1541                        		.endif
 1542                        	
 1543    01:D58A  20 BB D3   			jsr	map_set_banks		; Put BLK & MAP in MPR2-MPR5.
 1544                        	
 1545                        			; Loop to here if drawing multiple regular blkmap rows.
 1546                        	
 1547    01:D58D  A4 EF      	.regular_row:	ldy.h	<map_line		; Hi-byte of (BLK Y * width).
 1548    01:D58F  A5 FC      			lda	<map_chr_x		; Map CHR X coordinate.
 1549    01:D591  4A         			lsr	a			; Map BLK X coordinate.
 1550    01:D592  18         			clc
 1551    01:D593  65 EE      			adc.l	<map_line		; Lo-byte of (BLK Y * width).
 1552    01:D595  90 01      			bcc	!+
 1553    01:D597  C8         			iny
 1554    01:D598  18         	!:		clc				; Calc map data pointer.
 1555    01:D599  7D 8F 28   			adc.l	vdc_map_addr, x
 1556    01:D59C  85 EC      			sta.l	<_bp			; Maximum map size is 16KBytes
 1557    01:D59E  98         			tya				; so we don't need to consider
 1558    01:D59F  7D 90 28   			adc.h	vdc_map_addr, x		; bank overflow.
 1559    01:D5A2  85 ED      			sta.h	<_bp
 1560                        	
 1561                        			; Draw the first part of the row.
 1562                        	
 1563    01:D5A4  A5 F9      	.draw_row:	lda	<map_bat_y		; Set the BAT VRAM destination
 1564    01:D5A6  85 F1      			sta.h	<_di			; coordinates.
 1565    01:D5A8  A5 F8      			lda	<map_bat_x
 1566    01:D5AA  85 F0      			sta.l	<_di
 1567                        	
 1568    01:D5AC  5D 4D 23   			eor	vdc_bat_x_mask, x	; Calc CHR before wrap.
 1569    01:D5AF  1A         			inc	a
 1570    01:D5B0  C5 FA      			cmp	<map_draw_w		; Usually (SCR_WIDTH / 8) + 1.
 1571    01:D5B2  90 02      			bcc	!+
 1572    01:D5B4  A5 FA      			lda	<map_draw_w		; Maximum CHR to draw.
 1573    01:D5B6  85 00      	!:		sta	<map_count		; Set number of CHR to draw.
 1574    01:D5B8  85 01      			sta	<map_drawn		; Preserve number of CHR drawn.
 1575                        	
 1576    01:D5BA  20 2A D6   			jsr	blk_row_strip		; Draw lhs of horizontal strip.
 1577                        	
 1578                        			; Wrap around and draw the rest of the row (if needed).
 1579                        	
 1580    01:D5BD  38         			sec				; Are there any more CHR that
 1581    01:D5BE  A5 FA      			lda	<map_draw_w		; need to be drawn?
 1582    01:D5C0  E5 01      			sbc	<map_drawn
 1583    01:D5C2  F0 2E      			beq	.done_row
 1584                        	
 1585    01:D5C4  85 00      			sta	<map_count		; Set number of CHR to draw.
 1586                        	
 1587    01:D5C6  A5 FC      			lda	<map_chr_x		; Update CHR X coordinate for
 1588    01:D5C8  48         			pha				; drawing unaligned tiles.
 1589    01:D5C9  18         			clc
 1590    01:D5CA  65 01      			adc	<map_drawn
 1591    01:D5CC  85 FC      			sta	<map_chr_x
 1592                        	
 1593               0001     		.if	BLKMAP_MULTISCR
 1594    01:D5CE  BD 94 28   			lda	vdc_scr_bank, x		; Skip this if regular blkmap.
 1595    01:D5D1  F0 11      			beq	!+
 1596                        	
 1597    01:D5D3  E6 FD      			inc	<map_scrn_x		; Wrapped to the next screen.
 1598                        	
 1599    01:D5D5  20 55 D3   			jsr	map_set_screen		; Locate screen's BLK and MAP.
 1600                        	
 1601    01:D5D8  18         			clc				; Calc map data pointer.
 1602    01:D5D9  A5 EE      			lda.l	<map_line
 1603    01:D5DB  85 EC      			sta.l	<_bp
 1604    01:D5DD  A5 EF      			lda.h	<map_line
 1605    01:D5DF  7D 90 28   			adc.h	vdc_map_addr, x		; N.B. 256-byte aligned!
 1606    01:D5E2  85 ED      			sta.h	<_bp
 1607                        		.endif
 1608                        	
 1609    01:D5E4  A5 F9      	!:		lda	<map_bat_y		; Set the BAT VRAM destination
 1610    01:D5E6  85 F1      			sta.h	<_di			; coordinates.
 1611    01:D5E8  64 F0      			stz.l	<_di			; Reset 1st column to draw.
 1612                        	
 1613    01:D5EA  20 2A D6   			jsr	blk_row_strip		; Draw rhs of horizontal strip.
 1614                        	
 1615               0001     		.if	BLKMAP_MULTISCR
 1616    01:D5ED  C6 FD      			dec	<map_scrn_x		; Restore, no check if should.
 1617                        		.endif	BLKMAP_MULTISCR
 1618                        	
 1619    01:D5EF  68         			pla				; Restore CHR X coordinate, we
 1620    01:D5F0  85 FC      			sta	<map_chr_x		; might draw another row!
 1621                        	
 1622    01:D5F2  C6 FB      	.done_row:	dec	<map_draw_h		; Are all desired rows drawn?
 1623    01:D5F4  F0 33      			beq	.finished
 1624                        	
 1625    01:D5F6  E6 FE      			inc	<map_chr_y		; Move CHR Y down by 1.
 1626                        	
 1627    01:D5F8  A5 FE      			lda	<map_chr_y		; If new BLK then ...
 1628    01:D5FA  4A         			lsr	a
 1629    01:D5FB  B0 0B      			bcs	!+
 1630    01:D5FD  BD 52 23   			lda	vdc_map_line_w, x	; Move the map line pointer to
 1631    01:D600  65 EE      			adc.l	<map_line		; the next line.
 1632    01:D602  85 EE      			sta.l	<map_line
 1633    01:D604  90 02      			bcc	!+
 1634    01:D606  E6 EF      			inc.h	<map_line
 1635                        	
 1636    01:D608  A5 F9      	!:		lda	<map_bat_y		; Move BAT Y down by 1.
 1637    01:D60A  1A         			inc	a
 1638    01:D60B  3D 4E 23   			and	vdc_bat_y_mask, x
 1639    01:D60E  85 F9      			sta	<map_bat_y
 1640                        	
 1641               0001     		.if	BLKMAP_MULTISCR
 1642    01:D610  BC 94 28   			ldy	vdc_scr_bank, x		; Skip this if regular blkmap.
 1643    01:D613  D0 03 4C 8D			beq	.regular_row
         01:D617  D5          
 1644                        	
 1645    01:D618  A8         			tay				; If wrapped to the top line of
 1646    01:D619  D0 0B      			bne	!+			; of the BAT then increment the
 1647    01:D61B  E6 FF      			inc	<map_scrn_y		; screen.
 1648                        	
 1649    01:D61D  BD 4F 23   			lda	vdc_bat_limit, x	; The map line must wrap around
 1650    01:D620  4A         			lsr	a			; too. This is simple since its
 1651    01:D621  4A         			lsr	a			; size (in bytes) is 1/4 of the
 1652    01:D622  25 EF      			and.h	<map_line		; BAT size (in words) and it is
 1653    01:D624  85 EF      			sta.h	<map_line		; a power-of-2.
 1654                        	
 1655    01:D626  4C 30 D5   	!:		jmp	.multiscr_row		; Draw next row.
 1656                        		.else
 1658                        		.endif	BLKMAP_MULTISCR
 1659                        	
 1660    01:D629  60         	.finished:	rts
 1661                        	
 1662                        	
 1663                        	
 1664               0000     		.if	BLKDEF_POINTERS
 1858                        		.else	BLKDEF_POINTERS
 1859                        	
 1860                        	
 1861                        	
 1862                        	; ***************************************************************************
 1863                        	; ***************************************************************************
 1864                        	;
 1865                        	; blk_row_strip - Draw a single row of CHR into the BAT.
 1866                        	;
 1867                        	
 1868    01:D62A  20 34 E4   	blk_row_strip:	jsr	set_di_xy_mawr		; Set the BAT VRAM destination.
 1869                        	
 1870    01:D62D  A5 FC      			lda	<map_chr_x		; Select what drawing code to
 1871    01:D62F  4A         			lsr	a			; use depending upon even/odd
 1872    01:D630  A5 FE      			lda	<map_chr_y		; CHR coordinates (not BAT to
 1873    01:D632  29 01      			and	#1			; support unaligned drawing).
 1874    01:D634  2A         			rol	a
 1875    01:D635  0A         			asl	a
 1876    01:D636  1D 8D 28   			ora.h	vdc_blk_addr, x		; What is the BLK data address?
 1877    01:D639  29 1E      			and	#%00011110		; $4000, $4800, $5000 or $5800.
 1878    01:D63B  A8         			tay
 1879    01:D63C  B9 49 D6   			lda.h	.jump_table, y		; Push the address of the code.
 1880    01:D63F  48         			pha
 1881    01:D640  B9 48 D6   			lda.l	.jump_table, y
 1882    01:D643  48         			pha
 1883                        	
 1884    01:D644  B2 EC      			lda	[_bp]			; Get the first BLK number.
 1885    01:D646  A8         			tay
 1886                        	
 1887    01:D647  60         			rts				; Jump to the drawing code.
 1888                        	
 1889    01:D648  6A D6      	.jump_table:	dw	b4000_top_even - 1
 1890    01:D64A  7D D6      			dw	b4000_top_odd - 1
 1891    01:D64C  9A D6      			dw	b4000_btm_even - 1
 1892    01:D64E  AD D6      			dw	b4000_btm_odd - 1
 1893                        	
 1894    01:D650  CA D6      			dw	b4800_top_even - 1
 1895    01:D652  DD D6      			dw	b4800_top_odd - 1
 1896    01:D654  FA D6      			dw	b4800_btm_even - 1
 1897    01:D656  0D D7      			dw	b4800_btm_odd - 1
 1898                        	
 1899    01:D658  2A D7      			dw	b5000_top_even - 1
 1900    01:D65A  3D D7      			dw	b5000_top_odd - 1
 1901    01:D65C  5A D7      			dw	b5000_btm_even - 1
 1902    01:D65E  6D D7      			dw	b5000_btm_odd - 1
 1903                        	
 1904    01:D660  8A D7      			dw	b5800_top_even - 1
 1905    01:D662  9D D7      			dw	b5800_top_odd - 1
 1906    01:D664  BA D7      			dw	b5800_btm_even - 1
 1907    01:D666  CD D7      			dw	b5800_btm_odd - 1
 1908                        	
 1909                        			; top horizontal (32+2 rept)
 1910                        			;
 1911                        			; 89 cycles per block * 17 -> 1513 cycles
 1912                        	
 1913    01:D668  B2 EC      	!repeat:	lda	[_bp]			; 7
 1914    01:D66A  A8         			tay				; 2
 1915                        	
 1916    01:D66B  B9 00 40   	b4000_top_even:	lda	BLK_4000_TL_L, y	; 5
 1917    01:D66E  9D 02 02   			sta	VDC_DL, x		; 6
 1918    01:D671  B9 00 44   			lda	BLK_4000_TL_H, y	; 5
 1919               0001     		.if	BLKDEF_CHR_FLAG
 1920    01:D674  29 F3      			and	#%11110011		; 2
 1921                        		.endif
 1922    01:D676  1A         			inc	a			; 2
 1923    01:D677  9D 03 02   			sta	VDC_DH, x		; 6
 1924                        	
 1925    01:D67A  C6 00      			dec	<map_count		; 6
 1926    01:D67C  F0 19      			beq	!end+			; 2
 1927                        	
 1928    01:D67E  B9 00 41   	b4000_top_odd:	lda	BLK_4000_TR_L, y	; 5
 1929    01:D681  9D 02 02   			sta	VDC_DL, x		; 6
 1930    01:D684  B9 00 45   			lda	BLK_4000_TR_H, y	; 5
 1931               0001     		.if	BLKDEF_CHR_FLAG
 1932    01:D687  29 F3      			and	#%11110011		; 2
 1933                        		.endif
 1934    01:D689  1A         			inc	a			; 2
 1935    01:D68A  9D 03 02   			sta	VDC_DH, x		; 6
 1936                        	
 1937    01:D68D  E6 EC      			inc.l	<_bp			; 6
 1938    01:D68F  D0 02      			bne	!+			; 2/4
 1939    01:D691  E6 ED      			inc.h	<_bp			; 6
 1940                        	
 1941    01:D693  C6 00      	!:		dec	<map_count		; 6
 1942    01:D695  D0 D1      			bne	!repeat-		; 4
 1943                        	
 1944    01:D697  60         	!end:		rts
 1945                        	
 1946                        			; btm horizontal (32+2 rept)
 1947                        			;
 1948                        			; 89 cycles per block * 17 -> 1513 cycles
 1949                        	
 1950    01:D698  B2 EC      	!repeat:	lda	[_bp]			; 7
 1951    01:D69A  A8         			tay				; 2
 1952                        	
 1953    01:D69B  B9 00 42   	b4000_btm_even:	lda	BLK_4000_BL_L, y	; 5
 1954    01:D69E  9D 02 02   			sta	VDC_DL, x		; 6
 1955    01:D6A1  B9 00 46   			lda	BLK_4000_BL_H, y	; 5
 1956               0001     		.if	BLKDEF_CHR_FLAG
 1957    01:D6A4  29 F3      			and	#%11110011		; 2
 1958                        		.endif
 1959    01:D6A6  1A         			inc	a			; 2
 1960    01:D6A7  9D 03 02   			sta	VDC_DH, x		; 6
 1961                        	
 1962    01:D6AA  C6 00      			dec	<map_count		; 6
 1963    01:D6AC  F0 19      			beq	!end+			; 2
 1964                        	
 1965    01:D6AE  B9 00 43   	b4000_btm_odd:	lda	BLK_4000_BR_L, y	; 5
 1966    01:D6B1  9D 02 02   			sta	VDC_DL, x		; 6
 1967    01:D6B4  B9 00 47   			lda	BLK_4000_BR_H, y	; 5
 1968               0001     		.if	BLKDEF_CHR_FLAG
 1969    01:D6B7  29 F3      			and	#%11110011		; 2
 1970                        		.endif
 1971    01:D6B9  1A         			inc	a			; 2
 1972    01:D6BA  9D 03 02   			sta	VDC_DH, x		; 6
 1973                        	
 1974    01:D6BD  E6 EC      			inc.l	<_bp			; 6
 1975    01:D6BF  D0 02      			bne	!+			; 2/4
 1976    01:D6C1  E6 ED      			inc.h	<_bp			; 6
 1977                        	
 1978    01:D6C3  C6 00      	!:		dec	<map_count		; 6
 1979    01:D6C5  D0 D1      			bne	!repeat-		; 4
 1980                        	
 1981    01:D6C7  60         	!end:		rts
 1982                        	
 1983                        			; top horizontal (32+2 rept)
 1984                        			;
 1985                        			; 89 cycles per block * 17 -> 1513 cycles
 1986                        	
 1987    01:D6C8  B2 EC      	!repeat:	lda	[_bp]			; 7
 1988    01:D6CA  A8         			tay				; 2
 1989                        	
 1990    01:D6CB  B9 00 48   	b4800_top_even:	lda	BLK_4800_TL_L, y	; 5
 1991    01:D6CE  9D 02 02   			sta	VDC_DL, x		; 6
 1992    01:D6D1  B9 00 4C   			lda	BLK_4800_TL_H, y	; 5
 1993               0001     		.if	BLKDEF_CHR_FLAG
 1994    01:D6D4  29 F3      			and	#%11110011		; 2
 1995                        		.endif
 1996    01:D6D6  1A         			inc	a			; 2
 1997    01:D6D7  9D 03 02   			sta	VDC_DH, x		; 6
 1998                        	
 1999    01:D6DA  C6 00      			dec	<map_count		; 6
 2000    01:D6DC  F0 19      			beq	!end+			; 2
 2001                        	
 2002    01:D6DE  B9 00 49   	b4800_top_odd:	lda	BLK_4800_TR_L, y	; 5
 2003    01:D6E1  9D 02 02   			sta	VDC_DL, x		; 6
 2004    01:D6E4  B9 00 4D   			lda	BLK_4800_TR_H, y	; 5
 2005               0001     		.if	BLKDEF_CHR_FLAG
 2006    01:D6E7  29 F3      			and	#%11110011		; 2
 2007                        		.endif
 2008    01:D6E9  1A         			inc	a			; 2
 2009    01:D6EA  9D 03 02   			sta	VDC_DH, x		; 6
 2010                        	
 2011    01:D6ED  E6 EC      			inc.l	<_bp			; 6
 2012    01:D6EF  D0 02      			bne	!+			; 2/4
 2013    01:D6F1  E6 ED      			inc.h	<_bp			; 6
 2014                        	
 2015    01:D6F3  C6 00      	!:		dec	<map_count		; 6
 2016    01:D6F5  D0 D1      			bne	!repeat-		; 4
 2017                        	
 2018    01:D6F7  60         	!end:		rts
 2019                        	
 2020                        			; btm horizontal (32+2 rept)
 2021                        			;
 2022                        			; 89 cycles per block * 17 -> 1513 cycles
 2023                        	
 2024    01:D6F8  B2 EC      	!repeat:	lda	[_bp]			; 7
 2025    01:D6FA  A8         			tay				; 2
 2026                        	
 2027    01:D6FB  B9 00 4A   	b4800_btm_even:	lda	BLK_4800_BL_L, y	; 5
 2028    01:D6FE  9D 02 02   			sta	VDC_DL, x		; 6
 2029    01:D701  B9 00 4E   			lda	BLK_4800_BL_H, y	; 5
 2030               0001     		.if	BLKDEF_CHR_FLAG
 2031    01:D704  29 F3      			and	#%11110011		; 2
 2032                        		.endif
 2033    01:D706  1A         			inc	a			; 2
 2034    01:D707  9D 03 02   			sta	VDC_DH, x		; 6
 2035                        	
 2036    01:D70A  C6 00      			dec	<map_count		; 6
 2037    01:D70C  F0 19      			beq	!end+			; 2
 2038                        	
 2039    01:D70E  B9 00 4B   	b4800_btm_odd:	lda	BLK_4800_BR_L, y	; 5
 2040    01:D711  9D 02 02   			sta	VDC_DL, x		; 6
 2041    01:D714  B9 00 4F   			lda	BLK_4800_BR_H, y	; 5
 2042               0001     		.if	BLKDEF_CHR_FLAG
 2043    01:D717  29 F3      			and	#%11110011		; 2
 2044                        		.endif
 2045    01:D719  1A         			inc	a			; 2
 2046    01:D71A  9D 03 02   			sta	VDC_DH, x		; 6
 2047                        	
 2048    01:D71D  E6 EC      			inc.l	<_bp			; 6
 2049    01:D71F  D0 02      			bne	!+			; 2/4
 2050    01:D721  E6 ED      			inc.h	<_bp			; 6
 2051                        	
 2052    01:D723  C6 00      	!:		dec	<map_count		; 6
 2053    01:D725  D0 D1      			bne	!repeat-		; 4
 2054                        	
 2055    01:D727  60         	!end:		rts
 2056                        	
 2057                        			; top horizontal (32+2 rept)
 2058                        			;
 2059                        			; 89 cycles per block * 17 -> 1513 cycles
 2060                        	
 2061    01:D728  B2 EC      	!repeat:	lda	[_bp]			; 7
 2062    01:D72A  A8         			tay				; 2
 2063                        	
 2064    01:D72B  B9 00 50   	b5000_top_even:	lda	BLK_5000_TL_L, y	; 5
 2065    01:D72E  9D 02 02   			sta	VDC_DL, x		; 6
 2066    01:D731  B9 00 54   			lda	BLK_5000_TL_H, y	; 5
 2067               0001     		.if	BLKDEF_CHR_FLAG
 2068    01:D734  29 F3      			and	#%11110011		; 2
 2069                        		.endif
 2070    01:D736  1A         			inc	a			; 2
 2071    01:D737  9D 03 02   			sta	VDC_DH, x		; 6
 2072                        	
 2073    01:D73A  C6 00      			dec	<map_count		; 6
 2074    01:D73C  F0 19      			beq	!end+			; 2
 2075                        	
 2076    01:D73E  B9 00 51   	b5000_top_odd:	lda	BLK_5000_TR_L, y	; 5
 2077    01:D741  9D 02 02   			sta	VDC_DL, x		; 6
 2078    01:D744  B9 00 55   			lda	BLK_5000_TR_H, y	; 5
 2079               0001     		.if	BLKDEF_CHR_FLAG
 2080    01:D747  29 F3      			and	#%11110011		; 2
 2081                        		.endif
 2082    01:D749  1A         			inc	a			; 2
 2083    01:D74A  9D 03 02   			sta	VDC_DH, x		; 6
 2084                        	
 2085    01:D74D  E6 EC      			inc.l	<_bp			; 6
 2086    01:D74F  D0 02      			bne	!+			; 2/4
 2087    01:D751  E6 ED      			inc.h	<_bp			; 6
 2088                        	
 2089    01:D753  C6 00      	!:		dec	<map_count		; 6
 2090    01:D755  D0 D1      			bne	!repeat-		; 4
 2091                        	
 2092    01:D757  60         	!end:		rts
 2093                        	
 2094                        			; btm horizontal (32+2 rept)
 2095                        			;
 2096                        			; 89 cycles per block * 17 -> 1513 cycles
 2097                        	
 2098    01:D758  B2 EC      	!repeat:	lda	[_bp]			; 7
 2099    01:D75A  A8         			tay				; 2
 2100                        	
 2101    01:D75B  B9 00 52   	b5000_btm_even:	lda	BLK_5000_BL_L, y	; 5
 2102    01:D75E  9D 02 02   			sta	VDC_DL, x		; 6
 2103    01:D761  B9 00 56   			lda	BLK_5000_BL_H, y	; 5
 2104               0001     		.if	BLKDEF_CHR_FLAG
 2105    01:D764  29 F3      			and	#%11110011		; 2
 2106                        		.endif
 2107    01:D766  1A         			inc	a			; 2
 2108    01:D767  9D 03 02   			sta	VDC_DH, x		; 6
 2109                        	
 2110    01:D76A  C6 00      			dec	<map_count		; 6
 2111    01:D76C  F0 19      			beq	!end+			; 2
 2112                        	
 2113    01:D76E  B9 00 53   	b5000_btm_odd:	lda	BLK_5000_BR_L, y	; 5
 2114    01:D771  9D 02 02   			sta	VDC_DL, x		; 6
 2115    01:D774  B9 00 57   			lda	BLK_5000_BR_H, y	; 5
 2116               0001     		.if	BLKDEF_CHR_FLAG
 2117    01:D777  29 F3      			and	#%11110011		; 2
 2118                        		.endif
 2119    01:D779  1A         			inc	a			; 2
 2120    01:D77A  9D 03 02   			sta	VDC_DH, x		; 6
 2121                        	
 2122    01:D77D  E6 EC      			inc.l	<_bp			; 6
 2123    01:D77F  D0 02      			bne	!+			; 2/4
 2124    01:D781  E6 ED      			inc.h	<_bp			; 6
 2125                        	
 2126    01:D783  C6 00      	!:		dec	<map_count		; 6
 2127    01:D785  D0 D1      			bne	!repeat-		; 4
 2128                        	
 2129    01:D787  60         	!end:		rts
 2130                        	
 2131                        			; top horizontal (32+2 rept)
 2132                        			;
 2133                        			; 89 cycles per block * 17 -> 1513 cycles
 2134                        	
 2135    01:D788  B2 EC      	!repeat:	lda	[_bp]			; 7
 2136    01:D78A  A8         			tay				; 2
 2137                        	
 2138    01:D78B  B9 00 58   	b5800_top_even:	lda	BLK_5800_TL_L, y	; 5
 2139    01:D78E  9D 02 02   			sta	VDC_DL, x		; 6
 2140    01:D791  B9 00 5C   			lda	BLK_5800_TL_H, y	; 5
 2141               0001     		.if	BLKDEF_CHR_FLAG
 2142    01:D794  29 F3      			and	#%11110011		; 2
 2143                        		.endif
 2144    01:D796  1A         			inc	a			; 2
 2145    01:D797  9D 03 02   			sta	VDC_DH, x		; 6
 2146                        	
 2147    01:D79A  C6 00      			dec	<map_count		; 6
 2148    01:D79C  F0 19      			beq	!end+			; 2
 2149                        	
 2150    01:D79E  B9 00 59   	b5800_top_odd:	lda	BLK_5800_TR_L, y	; 5
 2151    01:D7A1  9D 02 02   			sta	VDC_DL, x		; 6
 2152    01:D7A4  B9 00 5D   			lda	BLK_5800_TR_H, y	; 5
 2153               0001     		.if	BLKDEF_CHR_FLAG
 2154    01:D7A7  29 F3      			and	#%11110011		; 2
 2155                        		.endif
 2156    01:D7A9  1A         			inc	a			; 2
 2157    01:D7AA  9D 03 02   			sta	VDC_DH, x		; 6
 2158                        	
 2159    01:D7AD  E6 EC      			inc.l	<_bp			; 6
 2160    01:D7AF  D0 02      			bne	!+			; 2/4
 2161    01:D7B1  E6 ED      			inc.h	<_bp			; 6
 2162                        	
 2163    01:D7B3  C6 00      	!:		dec	<map_count		; 6
 2164    01:D7B5  D0 D1      			bne	!repeat-		; 4
 2165                        	
 2166    01:D7B7  60         	!end:		rts
 2167                        	
 2168                        			; btm horizontal (32+2 rept)
 2169                        			;
 2170                        			; 89 cycles per block * 17 -> 1513 cycles
 2171                        	
 2172    01:D7B8  B2 EC      	!repeat:	lda	[_bp]		; 7
 2173    01:D7BA  A8         			tay				; 2
 2174                        	
 2175    01:D7BB  B9 00 5A   	b5800_btm_even:	lda	BLK_5800_BL_L, y	; 5
 2176    01:D7BE  9D 02 02   			sta	VDC_DL, x		; 6
 2177    01:D7C1  B9 00 5E   			lda	BLK_5800_BL_H, y	; 5
 2178               0001     		.if	BLKDEF_CHR_FLAG
 2179    01:D7C4  29 F3      			and	#%11110011		; 2
 2180                        		.endif
 2181    01:D7C6  1A         			inc	a			; 2
 2182    01:D7C7  9D 03 02   			sta	VDC_DH, x		; 6
 2183                        	
 2184    01:D7CA  C6 00      			dec	<map_count		; 6
 2185    01:D7CC  F0 19      			beq	!end+			; 2
 2186                        	
 2187    01:D7CE  B9 00 5B   	b5800_btm_odd:	lda	BLK_5800_BR_L, y	; 5
 2188    01:D7D1  9D 02 02   			sta	VDC_DL, x		; 6
 2189    01:D7D4  B9 00 5F   			lda	BLK_5800_BR_H, y	; 5
 2190               0001     		.if	BLKDEF_CHR_FLAG
 2191    01:D7D7  29 F3      			and	#%11110011		; 2
 2192                        		.endif
 2193    01:D7D9  1A         			inc	a			; 2
 2194    01:D7DA  9D 03 02   			sta	VDC_DH, x		; 6
 2195                        	
 2196    01:D7DD  E6 EC      			inc.l	<_bp			; 6
 2197    01:D7DF  D0 02      			bne	!+			; 2/4
 2198    01:D7E1  E6 ED      			inc.h	<_bp			; 6
 2199                        	
 2200    01:D7E3  C6 00      	!:		dec	<map_count		; 6
 2201    01:D7E5  D0 D1      			bne	!repeat-		; 4
 2202                        	
 2203    01:D7E7  60         	!end:		rts
 2204                        	
 2205                        	
 2206                        	
 2207                        	; ***************************************************************************
 2208                        	; ***************************************************************************
 2209                        	;
 2210                        	; blk_col_strip - Draw a single column of CHR into the BAT.
 2211                        	;
 2212                        	
 2213    01:D7E8  20 34 E4   	blk_col_strip:	jsr	set_di_xy_mawr		; Set the BAT VRAM destination.
 2214                        	
 2215    01:D7EB  A5 FC      			lda	<map_chr_x		; Select what drawing code to
 2216    01:D7ED  4A         			lsr	a			; use depending upon even/odd
 2217    01:D7EE  A5 FE      			lda	<map_chr_y		; CHR coordinates (not BAT to
 2218    01:D7F0  29 01      			and	#1			; support unaligned drawing).
 2219    01:D7F2  2A         			rol	a
 2220    01:D7F3  0A         			asl	a			; N.B. Always leaves C clear.
 2221    01:D7F4  1D 8D 28   			ora.h	vdc_blk_addr, x		; What is the BLK data address?
 2222    01:D7F7  29 1E      			and	#%00011110		; $4000, $4800, $5000 or $5800.
 2223    01:D7F9  A8         			tay
 2224    01:D7FA  B9 07 D8   			lda.h	.jump_table, y		; Push the address of the code.
 2225    01:D7FD  48         			pha
 2226    01:D7FE  B9 06 D8   			lda.l	.jump_table, y
 2227    01:D801  48         			pha
 2228                        	
 2229    01:D802  B2 EC      			lda	[_bp]			; Get the first BLK number.
 2230    01:D804  A8         			tay
 2231                        	
 2232    01:D805  60         			rts				; Jump to the drawing code.
 2233                        	
 2234    01:D806  28 D8      	.jump_table:	dw	b4000_lhs_even - 1
 2235    01:D808  5E D8      			dw	b4000_rhs_even - 1
 2236    01:D80A  3B D8      			dw	b4000_lhs_odd - 1
 2237    01:D80C  71 D8      			dw	b4000_rhs_odd - 1
 2238                        	
 2239    01:D80E  94 D8      			dw	b4800_lhs_even - 1
 2240    01:D810  CA D8      			dw	b4800_rhs_even - 1
 2241    01:D812  A7 D8      			dw	b4800_lhs_odd - 1
 2242    01:D814  DD D8      			dw	b4800_rhs_odd - 1
 2243                        	
 2244    01:D816  00 D9      			dw	b5000_lhs_even - 1
 2245    01:D818  36 D9      			dw	b5000_rhs_even - 1
 2246    01:D81A  13 D9      			dw	b5000_lhs_odd - 1
 2247    01:D81C  49 D9      			dw	b5000_rhs_odd - 1
 2248                        	
 2249    01:D81E  6C D9      			dw	b5800_lhs_even - 1
 2250    01:D820  A2 D9      			dw	b5800_rhs_even - 1
 2251    01:D822  7F D9      			dw	b5800_lhs_odd - 1
 2252    01:D824  B5 D9      			dw	b5800_rhs_odd - 1
 2253                        	
 2254                        			; lhs vertical (28+2 rept)
 2255                        			;
 2256                        			; N.B. C is always clear on entry.
 2257                        			;
 2258                        			; 100 cycles per block * 15 -> 1500 cycles
 2259                        	
 2260    01:D826  B2 EC      	!repeat:	lda	[_bp]			; 7
 2261    01:D828  A8         			tay				; 2
 2262                        	
 2263    01:D829  B9 00 40   	b4000_lhs_even:	lda	BLK_4000_TL_L, y	; 5
 2264    01:D82C  9D 02 02   			sta	VDC_DL, x		; 6
 2265    01:D82F  B9 00 44   			lda	BLK_4000_TL_H, y	; 5
 2266               0001     		.if	BLKDEF_CHR_FLAG
 2267    01:D832  29 F3      			and	#%11110011		; 2
 2268                        		.endif
 2269    01:D834  1A         			inc	a			; 2
 2270    01:D835  9D 03 02   			sta	VDC_DH, x		; 6
 2271                        	
 2272    01:D838  C6 00      			dec	<map_count		; 6
 2273    01:D83A  F0 1F      			beq	!end+			; 2
 2274                        	
 2275    01:D83C  B9 00 42   	b4000_lhs_odd:	lda	BLK_4000_BL_L, y	; 5
 2276    01:D83F  9D 02 02   			sta	VDC_DL, x		; 6
 2277    01:D842  B9 00 46   			lda	BLK_4000_BL_H, y	; 5
 2278               0001     		.if	BLKDEF_CHR_FLAG
 2279    01:D845  29 F3      			and	#%11110011		; 2
 2280                        		.endif
 2281    01:D847  1A         			inc	a			; 2
 2282    01:D848  9D 03 02   			sta	VDC_DH, x		; 6
 2283                        	
 2284    01:D84B  BD 52 23   			lda	vdc_map_line_w, x	; 5
 2285    01:D84E  65 EC      			adc.l	<_bp			; 4
 2286    01:D850  85 EC      			sta.l	<_bp			; 4
 2287    01:D852  90 03      			bcc	!+			; 2/4
 2288    01:D854  E6 ED      			inc.h	<_bp			; 6
 2289    01:D856  18         			clc				; 2
 2290                        	
 2291    01:D857  C6 00      	!:		dec	<map_count		; 6
 2292    01:D859  D0 CB      			bne	!repeat-		; 4
 2293                        	
 2294    01:D85B  60         	!end:		rts
 2295                        	
 2296                        			; rhs vertical (28+2 rept)
 2297                        			;
 2298                        			; N.B. C is always clear on entry.
 2299                        			;
 2300                        			; 100 cycles per block * 15 -> 1500 cycles
 2301                        	
 2302    01:D85C  B2 EC      	!repeat:	lda	[_bp]			; 7
 2303    01:D85E  A8         			tay				; 2
 2304                        	
 2305    01:D85F  B9 00 41   	b4000_rhs_even:	lda	BLK_4000_TR_L, y	; 5
 2306    01:D862  9D 02 02   			sta	VDC_DL, x		; 6
 2307    01:D865  B9 00 45   			lda	BLK_4000_TR_H, y	; 5
 2308               0001     		.if	BLKDEF_CHR_FLAG
 2309    01:D868  29 F3      			and	#%11110011		; 2
 2310                        		.endif
 2311    01:D86A  1A         			inc	a			; 2
 2312    01:D86B  9D 03 02   			sta	VDC_DH, x		; 6
 2313                        	
 2314    01:D86E  C6 00      			dec	<map_count		; 6
 2315    01:D870  F0 1F      			beq	!end+			; 2
 2316                        	
 2317    01:D872  B9 00 43   	b4000_rhs_odd:	lda	BLK_4000_BR_L, y	; 5
 2318    01:D875  9D 02 02   			sta	VDC_DL, x		; 6
 2319    01:D878  B9 00 47   			lda	BLK_4000_BR_H, y	; 5
 2320               0001     		.if	BLKDEF_CHR_FLAG
 2321    01:D87B  29 F3      			and	#%11110011		; 2
 2322                        		.endif
 2323    01:D87D  1A         			inc	a			; 2
 2324    01:D87E  9D 03 02   			sta	VDC_DH, x		; 6
 2325                        	
 2326    01:D881  BD 52 23   			lda	vdc_map_line_w, x	; 5
 2327    01:D884  65 EC      			adc.l	<_bp			; 4
 2328    01:D886  85 EC      			sta.l	<_bp			; 4
 2329    01:D888  90 03      			bcc	!+			; 2/4
 2330    01:D88A  E6 ED      			inc.h	<_bp			; 6
 2331    01:D88C  18         			clc				; 2
 2332                        	
 2333    01:D88D  C6 00      	!:		dec	<map_count		; 6
 2334    01:D88F  D0 CB      			bne	!repeat-		; 4
 2335                        	
 2336    01:D891  60         	!end:		rts
 2337                        	
 2338                        			; lhs vertical (28+2 rept)
 2339                        			;
 2340                        			; N.B. C is always clear on entry.
 2341                        			;
 2342                        			; 100 cycles per block * 15 -> 1500 cycles
 2343                        	
 2344    01:D892  B2 EC      	!repeat:	lda	[_bp]			; 7
 2345    01:D894  A8         			tay				; 2
 2346                        	
 2347    01:D895  B9 00 48   	b4800_lhs_even:	lda	BLK_4800_TL_L, y	; 5
 2348    01:D898  9D 02 02   			sta	VDC_DL, x		; 6
 2349    01:D89B  B9 00 4C   			lda	BLK_4800_TL_H, y	; 5
 2350               0001     		.if	BLKDEF_CHR_FLAG
 2351    01:D89E  29 F3      			and	#%11110011		; 2
 2352                        		.endif
 2353    01:D8A0  1A         			inc	a			; 2
 2354    01:D8A1  9D 03 02   			sta	VDC_DH, x		; 6
 2355                        	
 2356    01:D8A4  C6 00      			dec	<map_count		; 6
 2357    01:D8A6  F0 1F      			beq	!end+			; 2
 2358                        	
 2359    01:D8A8  B9 00 4A   	b4800_lhs_odd:	lda	BLK_4800_BL_L, y	; 5
 2360    01:D8AB  9D 02 02   			sta	VDC_DL, x		; 6
 2361    01:D8AE  B9 00 4E   			lda	BLK_4800_BL_H, y	; 5
 2362               0001     		.if	BLKDEF_CHR_FLAG
 2363    01:D8B1  29 F3      			and	#%11110011		; 2
 2364                        		.endif
 2365    01:D8B3  1A         			inc	a			; 2
 2366    01:D8B4  9D 03 02   			sta	VDC_DH, x		; 6
 2367                        	
 2368    01:D8B7  BD 52 23   			lda	vdc_map_line_w, x	; 5
 2369    01:D8BA  65 EC      			adc.l	<_bp			; 4
 2370    01:D8BC  85 EC      			sta.l	<_bp			; 4
 2371    01:D8BE  90 03      			bcc	!+			; 2/4
 2372    01:D8C0  E6 ED      			inc.h	<_bp			; 6
 2373    01:D8C2  18         			clc				; 2
 2374                        	
 2375    01:D8C3  C6 00      	!:		dec	<map_count		; 6
 2376    01:D8C5  D0 CB      			bne	!repeat-		; 4
 2377                        	
 2378    01:D8C7  60         	!end:		rts
 2379                        	
 2380                        			; rhs vertical (28+2 rept)
 2381                        			;
 2382                        			; N.B. C is always clear on entry.
 2383                        			;
 2384                        			; 100 cycles per block * 15 -> 1500 cycles
 2385                        	
 2386    01:D8C8  B2 EC      	!repeat:	lda	[_bp]			; 7
 2387    01:D8CA  A8         			tay				; 2
 2388                        	
 2389    01:D8CB  B9 00 49   	b4800_rhs_even:	lda	BLK_4800_TR_L, y	; 5
 2390    01:D8CE  9D 02 02   			sta	VDC_DL, x		; 6
 2391    01:D8D1  B9 00 4D   			lda	BLK_4800_TR_H, y	; 5
 2392               0001     		.if	BLKDEF_CHR_FLAG
 2393    01:D8D4  29 F3      			and	#%11110011		; 2
 2394                        		.endif
 2395    01:D8D6  1A         			inc	a			; 2
 2396    01:D8D7  9D 03 02   			sta	VDC_DH, x		; 6
 2397                        	
 2398    01:D8DA  C6 00      			dec	<map_count		; 6
 2399    01:D8DC  F0 1F      			beq	!end+			; 2
 2400                        	
 2401    01:D8DE  B9 00 4B   	b4800_rhs_odd:	lda	BLK_4800_BR_L, y	; 5
 2402    01:D8E1  9D 02 02   			sta	VDC_DL, x		; 6
 2403    01:D8E4  B9 00 4F   			lda	BLK_4800_BR_H, y	; 5
 2404               0001     		.if	BLKDEF_CHR_FLAG
 2405    01:D8E7  29 F3      			and	#%11110011		; 2
 2406                        		.endif
 2407    01:D8E9  1A         			inc	a			; 2
 2408    01:D8EA  9D 03 02   			sta	VDC_DH, x		; 6
 2409                        	
 2410    01:D8ED  BD 52 23   			lda	vdc_map_line_w, x	; 5
 2411    01:D8F0  65 EC      			adc.l	<_bp			; 4
 2412    01:D8F2  85 EC      			sta.l	<_bp			; 4
 2413    01:D8F4  90 03      			bcc	!+			; 2/4
 2414    01:D8F6  E6 ED      			inc.h	<_bp			; 6
 2415    01:D8F8  18         			clc				; 2
 2416                        	
 2417    01:D8F9  C6 00      	!:		dec	<map_count		; 6
 2418    01:D8FB  D0 CB      			bne	!repeat-		; 4
 2419                        	
 2420    01:D8FD  60         	!end:		rts
 2421                        	
 2422                        			; lhs vertical (28+2 rept)
 2423                        			;
 2424                        			; N.B. C is always clear on entry.
 2425                        			;
 2426                        			; 100 cycles per block * 15 -> 1500 cycles
 2427                        	
 2428    01:D8FE  B2 EC      	!repeat:	lda	[_bp]			; 7
 2429    01:D900  A8         			tay				; 2
 2430                        	
 2431    01:D901  B9 00 50   	b5000_lhs_even:	lda	BLK_5000_TL_L, y	; 5
 2432    01:D904  9D 02 02   			sta	VDC_DL, x		; 6
 2433    01:D907  B9 00 54   			lda	BLK_5000_TL_H, y	; 5
 2434               0001     		.if	BLKDEF_CHR_FLAG
 2435    01:D90A  29 F3      			and	#%11110011		; 2
 2436                        		.endif
 2437    01:D90C  1A         			inc	a			; 2
 2438    01:D90D  9D 03 02   			sta	VDC_DH, x		; 6
 2439                        	
 2440    01:D910  C6 00      			dec	<map_count		; 6
 2441    01:D912  F0 1F      			beq	!end+			; 2
 2442                        	
 2443    01:D914  B9 00 52   	b5000_lhs_odd:	lda	BLK_5000_BL_L, y	; 5
 2444    01:D917  9D 02 02   			sta	VDC_DL, x		; 6
 2445    01:D91A  B9 00 56   			lda	BLK_5000_BL_H, y	; 5
 2446               0001     		.if	BLKDEF_CHR_FLAG
 2447    01:D91D  29 F3      			and	#%11110011		; 2
 2448                        		.endif
 2449    01:D91F  1A         			inc	a			; 2
 2450    01:D920  9D 03 02   			sta	VDC_DH, x		; 6
 2451                        	
 2452    01:D923  BD 52 23   			lda	vdc_map_line_w, x	; 5
 2453    01:D926  65 EC      			adc.l	<_bp			; 4
 2454    01:D928  85 EC      			sta.l	<_bp			; 4
 2455    01:D92A  90 03      			bcc	!+			; 2/4
 2456    01:D92C  E6 ED      			inc.h	<_bp			; 6
 2457    01:D92E  18         			clc				; 2
 2458                        	
 2459    01:D92F  C6 00      	!:		dec	<map_count		; 6
 2460    01:D931  D0 CB      			bne	!repeat-		; 4
 2461                        	
 2462    01:D933  60         	!end:		rts
 2463                        	
 2464                        			; rhs vertical (28+2 rept)
 2465                        			;
 2466                        			; N.B. C is always clear on entry.
 2467                        			;
 2468                        			; 100 cycles per block * 15 -> 1500 cycles
 2469                        	
 2470    01:D934  B2 EC      	!repeat:	lda	[_bp]			; 7
 2471    01:D936  A8         			tay				; 2
 2472                        	
 2473    01:D937  B9 00 51   	b5000_rhs_even:	lda	BLK_5000_TR_L, y	; 5
 2474    01:D93A  9D 02 02   			sta	VDC_DL, x		; 6
 2475    01:D93D  B9 00 55   			lda	BLK_5000_TR_H, y	; 5
 2476               0001     		.if	BLKDEF_CHR_FLAG
 2477    01:D940  29 F3      			and	#%11110011		; 2
 2478                        		.endif
 2479    01:D942  1A         			inc	a			; 2
 2480    01:D943  9D 03 02   			sta	VDC_DH, x		; 6
 2481                        	
 2482    01:D946  C6 00      			dec	<map_count		; 6
 2483    01:D948  F0 1F      			beq	!end+			; 2
 2484                        	
 2485    01:D94A  B9 00 53   	b5000_rhs_odd:	lda	BLK_5000_BR_L, y	; 5
 2486    01:D94D  9D 02 02   			sta	VDC_DL, x		; 6
 2487    01:D950  B9 00 57   			lda	BLK_5000_BR_H, y	; 5
 2488               0001     		.if	BLKDEF_CHR_FLAG
 2489    01:D953  29 F3      			and	#%11110011		; 2
 2490                        		.endif
 2491    01:D955  1A         			inc	a			; 2
 2492    01:D956  9D 03 02   			sta	VDC_DH, x		; 6
 2493                        	
 2494    01:D959  BD 52 23   			lda	vdc_map_line_w, x	; 5
 2495    01:D95C  65 EC      			adc.l	<_bp			; 4
 2496    01:D95E  85 EC      			sta.l	<_bp			; 4
 2497    01:D960  90 03      			bcc	!+			; 2/4
 2498    01:D962  E6 ED      			inc.h	<_bp			; 6
 2499    01:D964  18         			clc				; 2
 2500                        	
 2501    01:D965  C6 00      	!:		dec	<map_count		; 6
 2502    01:D967  D0 CB      			bne	!repeat-		; 4
 2503                        	
 2504    01:D969  60         	!end:		rts
 2505                        	
 2506                        			; lhs vertical (28+2 rept)
 2507                        			;
 2508                        			; N.B. C is always clear on entry.
 2509                        			;
 2510                        			; 100 cycles per block * 15 -> 1500 cycles
 2511                        	
 2512    01:D96A  B2 EC      	!repeat:	lda	[_bp]			; 7
 2513    01:D96C  A8         			tay				; 2
 2514                        	
 2515    01:D96D  B9 00 58   	b5800_lhs_even:	lda	BLK_5800_TL_L, y	; 5
 2516    01:D970  9D 02 02   			sta	VDC_DL, x		; 6
 2517    01:D973  B9 00 5C   			lda	BLK_5800_TL_H, y	; 5
 2518               0001     		.if	BLKDEF_CHR_FLAG
 2519    01:D976  29 F3      			and	#%11110011		; 2
 2520                        		.endif
 2521    01:D978  1A         			inc	a			; 2
 2522    01:D979  9D 03 02   			sta	VDC_DH, x		; 6
 2523                        	
 2524    01:D97C  C6 00      			dec	<map_count		; 6
 2525    01:D97E  F0 1F      			beq	!end+			; 2
 2526                        	
 2527    01:D980  B9 00 5A   	b5800_lhs_odd:	lda	BLK_5800_BL_L, y	; 5
 2528    01:D983  9D 02 02   			sta	VDC_DL, x		; 6
 2529    01:D986  B9 00 5E   			lda	BLK_5800_BL_H, y	; 5
 2530               0001     		.if	BLKDEF_CHR_FLAG
 2531    01:D989  29 F3      			and	#%11110011		; 2
 2532                        		.endif
 2533    01:D98B  1A         			inc	a			; 2
 2534    01:D98C  9D 03 02   			sta	VDC_DH, x		; 6
 2535                        	
 2536    01:D98F  BD 52 23   			lda	vdc_map_line_w, x	; 5
 2537    01:D992  65 EC      			adc.l	<_bp			; 4
 2538    01:D994  85 EC      			sta.l	<_bp			; 4
 2539    01:D996  90 03      			bcc	!+			; 2/4
 2540    01:D998  E6 ED      			inc.h	<_bp			; 6
 2541    01:D99A  18         			clc				; 2
 2542                        	
 2543    01:D99B  C6 00      	!:		dec	<map_count		; 6
 2544    01:D99D  D0 CB      			bne	!repeat-		; 4
 2545                        	
 2546    01:D99F  60         	!end:		rts
 2547                        	
 2548                        			; rhs vertical (28+2 rept)
 2549                        			;
 2550                        			; N.B. C is always clear on entry.
 2551                        			;
 2552                        			; 100 cycles per block * 15 -> 1500 cycles
 2553                        	
 2554    01:D9A0  B2 EC      	!repeat:	lda	[_bp]			; 7
 2555    01:D9A2  A8         			tay				; 2
 2556                        	
 2557    01:D9A3  B9 00 59   	b5800_rhs_even:	lda	BLK_5800_TR_L, y	; 5
 2558    01:D9A6  9D 02 02   			sta	VDC_DL, x		; 6
 2559    01:D9A9  B9 00 5D   			lda	BLK_5800_TR_H, y	; 5
 2560               0001     		.if	BLKDEF_CHR_FLAG
 2561    01:D9AC  29 F3      			and	#%11110011		; 2
 2562                        		.endif
 2563    01:D9AE  1A         			inc	a			; 2
 2564    01:D9AF  9D 03 02   			sta	VDC_DH, x		; 6
 2565                        	
 2566    01:D9B2  C6 00      			dec	<map_count		; 6
 2567    01:D9B4  F0 1F      			beq	!end+			; 2
 2568                        	
 2569    01:D9B6  B9 00 5B   	b5800_rhs_odd:	lda	BLK_5800_BR_L, y	; 5
 2570    01:D9B9  9D 02 02   			sta	VDC_DL, x		; 6
 2571    01:D9BC  B9 00 5F   			lda	BLK_5800_BR_H, y	; 5
 2572               0001     		.if	BLKDEF_CHR_FLAG
 2573    01:D9BF  29 F3      			and	#%11110011		; 2
 2574                        		.endif
 2575    01:D9C1  1A         			inc	a			; 2
 2576    01:D9C2  9D 03 02   			sta	VDC_DH, x		; 6
 2577                        	
 2578    01:D9C5  BD 52 23   			lda	vdc_map_line_w, x	; 5
 2579    01:D9C8  65 EC      			adc.l	<_bp			; 4
 2580    01:D9CA  85 EC      			sta.l	<_bp			; 4
 2581    01:D9CC  90 03      			bcc	!+			; 2/4
 2582    01:D9CE  E6 ED      			inc.h	<_bp			; 6
 2583    01:D9D0  18         			clc				; 2
 2584                        	
 2585    01:D9D1  C6 00      	!:		dec	<map_count		; 6
 2586    01:D9D3  D0 CB      			bne	!repeat-		; 4
 2587                        	
 2588    01:D9D5  60         	!end:		rts
 2589                        	
 2590                        		.endif	BLKDEF_POINTERS
 2591                        	
 2592                        		.endprocgroup	; blkmap_group
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   80                        		.else
   84                        		.endif	HUCC_USES_BLKMAP
   85                        	
   86               0001     		.ifdef	HUCC_USES_CHRMAP		; Set in hucc_chrmap.h
                             #[3]   "..\..\..\include\hucc\chrmap.asm"
   87                        			include	"chrmap.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; chrmap.asm
    5                        	;
    6                        	; A simple map system based on 8x8 characters (aka "tiles") in BAT format.
    7                        	;
    8                        	; Copyright John Brandwood 2025.
    9                        	;
   10                        	; Distributed under the Boost Software License, Version 1.0.
   11                        	; (See accompanying file LICENSE_1_0.txt or copy at
   12                        	;  http://www.boost.org/LICENSE_1_0.txt)
   13                        	;
   14                        	; ***************************************************************************
   15                        	; ***************************************************************************
   16                        	;
   17                        	; The maximum X and Y size for chrmaps is 256 characters (2048 pixels).
   18                        	;
   19                        	; The maximum total size for a chrmap is 16KBytes, which allows for maps up
   20                        	; to 256x32 tiles (2048x256 pixels).
   21                        	;
   22                        	; ***************************************************************************
   23                        	; ***************************************************************************
   24                        	
   25                        	;
   26                        	; Include dependancies ...
   27                        	;
   28                        	
   29                        			include "blkmap.asm"		; This defines the variables.
   30                        	
   31                        	;
   32                        	; Chrmaps in BAT format normally address all of VRAM from $0400..$7FFF, but
   33                        	; they can be limited to use the 32KByte of characters in VRAM $1000..$4FFF
   34                        	; which then frees up 2-bits for flag information for each character in the
   35                        	; BAT entry.
   36                        	;
   37                        	; These 2-bits are perfect for using as collision information in game maps,
   38                        	; allowing storage of states like transparent, solid, up-slope, down-slope.
   39                        	;
   40                        	; Typically this flag information is set by the map conversion tools from a
   41                        	; seperate "collision" map layer.
   42                        	;
   43                        	
   44               0000     		.ifndef	CHRMAP_BAT_FLAG
   46                        		.endif
   47                        	
   48                        	;
   49                        	;
   50                        	;
   51                        	
   52                        	
   53                        	
   54    09:DBF0             	chrmap_group	.procgroup
   55                        	
   56                        	; ***************************************************************************
   57                        	; ***************************************************************************
   58                        	;
   59                        	; _draw_bat - Draw the entire screen at the current coordinates.
   60                        	; _sgx_draw_bat - Draw the entire screen at the current coordinates.
   61                        	;
   62                        	; void __fastcall draw_bat( void );
   63                        	; void __fastcall sgx_draw_bat( void );
   64                        	;
   65                        	
   66               0001     		.if	SUPPORT_SGX
   67                        	
   68                        	_sgx_draw_bat	.proc
   74                        			.endp
   75                        		.endif
   76                        	
   77    09:DBF0             	_draw_bat	.proc
   78                        	
   79    09:DBF0  82         			clx				; Offset to PCE VDC.
   80                        	
   81    09:DBF1  43 08      			tma3				; Preserve MPR3..MPR5.
   82    09:DBF3  48         			pha
   83    09:DBF4  43 10      			tma4
   84    09:DBF6  48         			pha
   85    09:DBF7  43 20      			tma5
   86    09:DBF9  48         			pha
   87                        	
   88    09:DBFA  20 9D DC   			jsr	bat_pxl_2_chr		; Set up the draw coordinates.
   89                        	
   90    09:DBFD  A5 FC      			lda	<map_chr_x		; Reset previous X position.
   91    09:DBFF  9D 87 28   			sta	vdc_old_chr_x, x
   92                        	
   93    09:DC02  A5 FE      			lda	<map_chr_y		; Reset previous Y position,
   94    09:DC04  1A         			inc	a			; ready to draw rows upwards.
   95    09:DC05  9D 88 28   			sta	vdc_old_chr_y, x
   96                        	
   97    09:DC08  BD 50 23   			lda	vdc_map_draw_w, x	; Draw the whole screen.
   98    09:DC0B  85 FA      			sta	<map_draw_w
   99    09:DC0D  BD 51 23   			lda	vdc_map_draw_h, x
  100    09:DC10  85 FB      			sta	<map_draw_h
  101                        	
  102    09:DC12  20 80 DD   			jsr	bat_scroll_y		; Draw N row of CHR to the BAT.
  103                        	
  104    09:DC15  68         			pla				; Restore MPR3..MPR5.
  105    09:DC16  53 20      			tam5
  106    09:DC18  68         			pla
  107    09:DC19  53 10      			tam4
  108    09:DC1B  68         			pla
  109    09:DC1C  53 08      			tam3
  110                        	
  111                        			leave
         09:DC1E  4C EF FF   			jmp	leave_proc
  112                        	
  113                        			.endp
  114                        	
  115                        	
  116                        	
  117                        	; ***************************************************************************
  118                        	; ***************************************************************************
  119                        	;
  120                        	; _scroll_bat - Draw a single row of CHR into the BAT to update the edge.
  121                        	; _sgx_scroll_bat - Draw a single row of CHR into the BAT to update the edge.
  122                        	;
  123                        	; void __fastcall scroll_bat( void );
  124                        	; void __fastcall sgx_scroll_bat( void );
  125                        	;
  126                        	
  127               0001     		.if	SUPPORT_SGX
  128                        	
  129                        	_sgx_scroll_bat	.proc
  135                        			.endp
  136                        		.endif
  137                        	
  138    09:DC21             	_scroll_bat	.proc
  139                        	
  140    09:DC21  82         			clx				; Offset to PCE VDC.
  141                        	
  142    09:DC22  43 08      			tma3				; Preserve MPR3..MPR5.
  143    09:DC24  48         			pha
  144    09:DC25  43 10      			tma4
  145    09:DC27  48         			pha
  146    09:DC28  43 20      			tma5
  147    09:DC2A  48         			pha
  148                        	
  149    09:DC2B  20 9D DC   			jsr	bat_pxl_2_chr		; Set up the draw coordinates.
  150                        	
  151    09:DC2E  BD 51 23   			lda	vdc_map_draw_h, x	; Draw new LHS or RHS if needed.
  152    09:DC31  85 FB      			sta	<map_draw_h
  153                        	;		lda	#1			; bat_scroll_x only ever draws a
  154                        	;		sta	<map_draw_w		; single column.
  155    09:DC33  20 C1 DC   			jsr	bat_scroll_x
  156                        	
  157    09:DC36  BD 87 28   			lda	vdc_old_chr_x, x	; Restore map_chr_x which could
  158    09:DC39  85 FC      			sta	<map_chr_x		; be changed by bat_scroll_x.
  159                        	
  160    09:DC3B  BD 50 23   			lda	vdc_map_draw_w, x	; Draw new TOP or BTM if needed.
  161    09:DC3E  85 FA      			sta	<map_draw_w
  162    09:DC40  A9 01      			lda	#1
  163    09:DC42  85 FB      			sta	<map_draw_h
  164    09:DC44  20 80 DD   			jsr	bat_scroll_y
  165                        	
  166    09:DC47  68         			pla				; Restore MPR3..MPR5.
  167    09:DC48  53 20      			tam5
  168    09:DC4A  68         			pla
  169    09:DC4B  53 10      			tam4
  170    09:DC4D  68         			pla
  171    09:DC4E  53 08      			tam3
  172                        	
  173                        			leave
         09:DC50  4C EF FF   			jmp	leave_proc
  174                        	
  175                        			.endp
  176                        	
  177                        	
  178                        	
  179                        	; ***************************************************************************
  180                        	; ***************************************************************************
  181                        	;
  182                        	; _blit_bat - Draw a map rectangle to specific BAT coordinates.
  183                        	; _sgx_blit_bat - Draw a map rectangle to specific BAT coordinates.
  184                        	;
  185                        	; void __fastcall blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
  186                        	; void __fastcall sgx_blit_bat( unsigned char tile_x<map_bat_x>, unsigned char tile_y<map_bat_y>, unsigned char tile_w<map_draw_x>, unsigned char tile_h<map_draw_y> );
  187                        	;
  188                        	; Normally you'd just use _draw_bat() and _scroll_bat(), but for those folks
  189                        	; who really wish to take manual control, you can use this.
  190                        	;
  191                        	
  192               0001     		.if	SUPPORT_SGX
  193                        	
  194                        	_sgx_blit_bat	.proc
  200                        			.endp
  201                        		.endif
  202                        	
  203    09:DC53             	_blit_bat	.proc
  204                        	
  205    09:DC53  82         			clx				; Offset to PCE VDC.
  206                        	
  207    09:DC54  43 08      			tma3				; Preserve MPR3..MPR5.
  208    09:DC56  48         			pha
  209    09:DC57  43 10      			tma4
  210    09:DC59  48         			pha
  211    09:DC5A  43 20      			tma5
  212    09:DC5C  48         			pha
  213                        	
  214    09:DC5D  BD 58 23   			lda	vdc_map_option, x	; Preserve current map options.
  215    09:DC60  48         			pha
  216    09:DC61  09 C0      			ora	#MAP_UNALIGNED_X | MAP_UNALIGNED_Y
  217    09:DC63  9D 58 23   			sta	vdc_map_option, x
  218                        	
  219    09:DC66  20 9D DC   			jsr	bat_pxl_2_chr		; Set up the draw coordinates.
  220                        	
  221    09:DC69  A5 FA      			lda	<map_draw_w		; Are we drawing just 1 column?
  222    09:DC6B  C9 01      			cmp	#1
  223    09:DC6D  F0 1E      			beq	.draw_column
  224                        	
  225                        			; Draw N rows.
  226                        	
  227    09:DC6F  A5 FC      	.draw_rows:	lda	<map_chr_x		; Reset previous X position.
  228    09:DC71  9D 87 28   			sta	vdc_old_chr_x, x
  229                        	
  230    09:DC74  A5 FE      			lda	<map_chr_y		; Reset previous Y position,
  231    09:DC76  1A         			inc	a			; ready to draw rows upwards.
  232    09:DC77  9D 88 28   			sta	vdc_old_chr_y, x
  233                        	
  234    09:DC7A  20 80 DD   			jsr	bat_scroll_y		; Draw a row of CHR to the BAT.
  235                        	
  236                        			; Drawing completed.
  237                        	
  238    09:DC7D  68         	.finished:	pla				; Restore previous map options.
  239    09:DC7E  9D 58 23   			sta	vdc_map_option, x
  240                        	
  241    09:DC81  68         			pla				; Restore MPR3..MPR5.
  242    09:DC82  53 20      			tam5
  243    09:DC84  68         			pla
  244    09:DC85  53 10      			tam4
  245    09:DC87  68         			pla
  246    09:DC88  53 08      			tam3
  247                        	
  248                        	.exit:		leave
         09:DC8A  4C EF FF   			jmp	leave_proc
  249                        	
  250                        			; Draw 1 column.
  251                        	
  252    09:DC8D  A5 FC      	.draw_column:	lda	<map_chr_x		; Reset previous X position.
  253    09:DC8F  1A         			inc	a			; ready to draw 1 column.
  254    09:DC90  9D 87 28   			sta	vdc_old_chr_x, x
  255                        	
  256    09:DC93  A5 FE      			lda	<map_chr_y		; Reset previous Y position.
  257    09:DC95  9D 88 28   			sta	vdc_old_chr_y, x
  258                        	
  259    09:DC98  20 C1 DC   			jsr	bat_scroll_x		; Draw a single column of CHR.
  260                        	
  261    09:DC9B  80 E0      			bra	.finished
  262                        	
  263                        			.endp
  264                        	
  265                        	
  266                        	
  267                        	; ***************************************************************************
  268                        	; ***************************************************************************
  269                        	;
  270                        	
  271    09:DC9D  BD 54 23   	bat_pxl_2_chr:	lda.l	vdc_map_pxl_x, x	; Get current map X coordinate.
  272    09:DCA0  85 FC      			sta.l	<map_pxl_x
  273    09:DCA2  BD 55 23   			lda.h	vdc_map_pxl_x, x	; Xvert map_pxl_x to map_chr_x.
  274    09:DCA5  4A         			lsr	a
  275    09:DCA6  66 FC      			ror.l	<map_pxl_x
  276    09:DCA8  4A         			lsr	a
  277    09:DCA9  66 FC      			ror.l	<map_pxl_x
  278    09:DCAB  4A         			lsr	a
  279    09:DCAC  66 FC      			ror.l	<map_pxl_x		; Max map width is 256 CHR.
  280                        	
  281    09:DCAE  BD 56 23   			lda.l	vdc_map_pxl_y, x	; Get current map Y coordinate.
  282    09:DCB1  85 FE      			sta.l	<map_pxl_y
  283    09:DCB3  BD 57 23   			lda.h	vdc_map_pxl_y, x	; Xvert map_pxl_y to map_chr_y.
  284    09:DCB6  4A         			lsr	a
  285    09:DCB7  66 FE      			ror.l	<map_pxl_y
  286    09:DCB9  4A         			lsr	a
  287    09:DCBA  66 FE      			ror.l	<map_pxl_y
  288    09:DCBC  4A         			lsr	a
  289    09:DCBD  66 FE      			ror.l	<map_pxl_y		; Max map width is 256 CHR.
  290                        	
  291    09:DCBF  60         			rts
  292                        	
  293                        	
  294                        	
  295                        	; ***************************************************************************
  296                        	; ***************************************************************************
  297                        	;
  298                        	; bat_scroll_x - Update the BAT when X coordinate changes.
  299                        	;
  300                        	; N.B. This only ever draws a single column!
  301                        	;
  302                        	
  303    09:DCC0  60         	!no_change:	rts
  304                        	
  305    09:DCC1  A5 FC      	bat_scroll_x:	lda	<map_chr_x		; Compare old_x with cur_x.
  306    09:DCC3  DD 87 28   			cmp	vdc_old_chr_x, x
  307    09:DCC6  F0 F8      			beq	!no_change-		; Do nothing if no change.
  308    09:DCC8  9D 87 28   			sta	vdc_old_chr_x, x
  309    09:DCCB  30 05      			bmi	.moved			; Test the sign of the change.
  310                        	
  311    09:DCCD  18         			clc				; Draw RHS if chr_x >= old_x.
  312    09:DCCE  7D 50 23   			adc	vdc_map_draw_w, x	; Usually (SCR_WIDTH / 8) + 1.
  313    09:DCD1  3A         			dec	a
  314                        	
  315    09:DCD2  48         	.moved:		pha				; Push chr_x in map section.
  316                        	
  317    09:DCD3  3C 58 23   			bit	vdc_map_option, x	; Set bit7 to disable aligning
  318    09:DCD6  30 05      			bmi	!+			; BAT X with the map X.
  319    09:DCD8  3D 4D 23   			and	vdc_bat_x_mask, x
  320    09:DCDB  85 F8      			sta	<map_bat_x		; Save BAT X chr coordinate.
  321                        	
  322    09:DCDD  A5 FE      	!:		lda	<map_chr_y		; Y = chr_y in map section.
  323    09:DCDF  A8         			tay
  324                        	
  325    09:DCE0  3C 58 23   			bit	vdc_map_option, x	; Set bit6 to disable aligning
  326    09:DCE3  70 05      			bvs	!+			; BAT Y with the map Y.
  327    09:DCE5  3D 4E 23   			and	vdc_bat_y_mask, x
  328    09:DCE8  85 F9      			sta	<map_bat_y		; Save BAT Y chr coordinate.
  329                        	
  330               0000     		.if	FAST_MULTIPLY
  333                        		.endif
  334                        	
  335    09:DCEA  BD 52 23   	!:		lda	vdc_map_line_w, x	; Map width in CHR (0 == 256).
  336    09:DCED  D0 05      			bne	!+
  337                        	
  338    09:DCEF  64 EE      			stz.l	<map_line		; Multiply by 256 is easy!
  339    09:DCF1  98         			tya
  340    09:DCF2  80 15      			bra	.double
  341                        	
  342               0000     		.if	FAST_MULTIPLY
  354                        		.else
  355    09:DCF4  84 EF      	!:		sty.h	<map_line		; Takes 144..176 cycles.
  356    09:DCF6  A0 08      			ldy	#8
  357    09:DCF8  4A         			lsr	a
  358    09:DCF9  85 EE      			sta.l	<map_line
  359    09:DCFB  62         			cla
  360    09:DCFC  90 03      			bcc	.rotate
  361    09:DCFE  18         	.add:		clc
  362    09:DCFF  65 EF      			adc.h	<map_line
  363    09:DD01  6A         	.rotate:	ror	a
  364    09:DD02  66 EE      			ror.l	<map_line		; Lo-byte of (CHR Y * width).
  365    09:DD04  88         			dey
  366    09:DD05  B0 F7      			bcs	.add
  367    09:DD07  D0 F8      			bne	.rotate
  368                        		.endif
  369                        	
  370    09:DD09  06 EE      	.double:	asl.l	<map_line		; Lo-byte of (CHR Y * width * 2).
  371    09:DD0B  2A         			rol	a
  372    09:DD0C  A8         			tay				; Hi-byte of (CHR Y * width * 2).
  373                        	
  374    09:DD0D  BD 91 28   			lda	vdc_map_bank, x		; Put the MAP into MPR3-MPR5.
  375    09:DD10  53 08      			tam3				; Allow for 16KByte chrmap.
  376    09:DD12  1A         			inc	a
  377    09:DD13  53 10      			tam4
  378    09:DD15  1A         			inc	a
  379    09:DD16  53 20      			tam5
  380                        	
  381    09:DD18  68         			pla				; Pop chr_x in map section.
  382    09:DD19  0A         			asl	a			; 2-bytes for a BAT value.
  383    09:DD1A  90 02      			bcc	!+
  384    09:DD1C  C8         			iny				; Hi-byte of (CHR Y * width * 2).
  385    09:DD1D  18         			clc
  386    09:DD1E  65 EE      	!:		adc.l	<map_line		; Lo-byte of (CHR Y * width * 2).
  387    09:DD20  90 01      			bcc	!+
  388    09:DD22  C8         			iny
  389                        	
  390    09:DD23  18         	!:		clc				; Calc map data pointer.
  391    09:DD24  7D 8F 28   			adc.l	vdc_map_addr, x
  392    09:DD27  85 EC      			sta.l	<_bp			; Maximum map size is 16KBytes
  393    09:DD29  98         			tya				; so we don't need to consider
  394    09:DD2A  7D 90 28   			adc.h	vdc_map_addr, x		; bank overflow.
  395    09:DD2D  85 ED      			sta.h	<_bp
  396                        	
  397    09:DD2F  C2         			cly				; Calculate the map line delta
  398    09:DD30  BD 52 23   			lda	vdc_map_line_w, x	; in bytes.
  399    09:DD33  D0 01      			bne	!+
  400    09:DD35  C8         			iny
  401    09:DD36  0A         	!:		asl	a
  402    09:DD37  85 EE      			sta.l	<map_line
  403    09:DD39  98         			tya
  404    09:DD3A  2A         			rol	a
  405    09:DD3B  85 EF      			sta.h	<map_line
  406                        	
  407                        			; Draw the first part of the column.
  408                        	
  409    09:DD3D  A5 F8      	.draw_col:	lda	<map_bat_x		; Set the BAT VRAM destination
  410    09:DD3F  85 F0      			sta.l	<_di			; coordinates.
  411    09:DD41  A5 F9      			lda	<map_bat_y
  412    09:DD43  85 F1      			sta.h	<_di
  413                        	
  414    09:DD45  5D 4E 23   			eor	vdc_bat_y_mask, x	; Calc CHR before wrap.
  415    09:DD48  1A         			inc	a
  416    09:DD49  C5 FB      			cmp	<map_draw_h		; Usually (SCR_HEIGHT / 8) + 1.
  417    09:DD4B  90 02      			bcc	!+
  418    09:DD4D  A5 FB      			lda	<map_draw_h		; Maximum CHR to draw.
  419    09:DD4F  85 00      	!:		sta	<map_count		; Set number of CHR to draw.
  420    09:DD51  85 01      			sta	<map_drawn		; Preserve number of CHR drawn.
  421                        	
  422    09:DD53  A9 05      			lda	#VDC_CR			; Set VDC auto-increment from
  423    09:DD55  95 F7      			sta	<vdc_reg, x		; the BAT width, which is set
  424    09:DD57  9D 00 02   			sta	VDC_AR, x		; up by set_screen_size().
  425    09:DD5A  B5 F4      			lda	<vdc_crh, x
  426    09:DD5C  9D 03 02   			sta	VDC_DH, x
  427                        	
  428    09:DD5F  20 61 DE   			jsr	bat_col_strip		; Draw top of vertical strip.
  429                        	
  430                        			; Wrap around and draw the rest of the column (if needed).
  431                        	
  432    09:DD62  38         			sec				; Are there any more CHR that
  433    09:DD63  A5 FB      			lda	<map_draw_h		; need to be drawn?
  434    09:DD65  E5 01      			sbc	<map_drawn
  435    09:DD67  F0 0B      			beq	.done
  436                        	
  437    09:DD69  85 00      			sta	<map_count		; Set number of CHR to draw.
  438                        	
  439    09:DD6B  A5 F8      			lda	<map_bat_x		; Set the BAT VRAM destination
  440    09:DD6D  85 F0      			sta.l	<_di			; coordinates.
  441    09:DD6F  64 F1      			stz.h	<_di			; Reset 1st row to draw.
  442                        	
  443    09:DD71  20 61 DE   			jsr	bat_col_strip		; Draw btm of vertical strip.
  444                        	
  445    09:DD74  A9 05      	.done:		lda	#VDC_CR			; Set VDC auto-increment to 1.
  446    09:DD76  95 F7      			sta	<vdc_reg, x
  447    09:DD78  9D 00 02   			sta	VDC_AR, x
  448    09:DD7B  9E 03 02   			stz	VDC_DH, x
  449                        	
  450    09:DD7E  60         			rts
  451                        	
  452                        	
  453                        	
  454                        	; ***************************************************************************
  455                        	; ***************************************************************************
  456                        	;
  457                        	; bat_scroll_y - Update the BAT when Y coordinate changes.
  458                        	;
  459                        	; N.B. This draws multiple rows when called from _draw_bat or _blit_bat.
  460                        	;
  461                        	
  462    09:DD7F  60         	!no_change:	rts
  463                        	
  464    09:DD80  A5 FE      	bat_scroll_y:	lda	<map_chr_y		; Compare old_y with cur_y.
  465    09:DD82  DD 88 28   			cmp	vdc_old_chr_y, x
  466    09:DD85  F0 F8      			beq	!no_change-		; Do nothing if no change.
  467    09:DD87  9D 88 28   			sta	vdc_old_chr_y, x
  468    09:DD8A  30 05      			bmi	.moved			; Test the sign of the change.
  469                        	
  470    09:DD8C  18         			clc				; Draw bottom if chr_y >= old_y.
  471    09:DD8D  7D 51 23   			adc	vdc_map_draw_h, x	; Usually (SCR_HEIGHT / 8) + 1.
  472    09:DD90  3A         			dec	a
  473                        	
  474    09:DD91  A8         	.moved:		tay				; Y = chr_y in map section.
  475                        	
  476    09:DD92  3C 58 23   			bit	vdc_map_option, x	; Set bit6 to disable aligning
  477    09:DD95  70 05      			bvs	!+			; BAT Y with the map Y.
  478    09:DD97  3D 4E 23   			and	vdc_bat_y_mask, x
  479    09:DD9A  85 F9      			sta	<map_bat_y		; Save BAT Y chr coordinate.
  480                        	
  481    09:DD9C  3C 58 23   	!:		bit	vdc_map_option, x	; Set bit7 to disable aligning
  482    09:DD9F  30 07      			bmi	!+			; BAT X with the map X.
  483    09:DDA1  A5 FC      			lda	<map_chr_x
  484    09:DDA3  3D 4D 23   			and	vdc_bat_x_mask, x
  485    09:DDA6  85 F8      			sta	<map_bat_x		; Save BAT X chr coordinate.
  486                        	
  487               0000     		.if	FAST_MULTIPLY
  490                        		.endif
  491                        	
  492    09:DDA8  BD 52 23   	!:		lda	vdc_map_line_w, x	; Map width in CHR (0 == 256).
  493    09:DDAB  D0 05      			bne	!+
  494                        	
  495    09:DDAD  64 EE      			stz.l	<map_line		; Multiply by 256 is easy!
  496    09:DDAF  98         			tya
  497    09:DDB0  80 15      			bra	.double
  498                        	
  499               0000     		.if	FAST_MULTIPLY
  511                        		.else
  512    09:DDB2  84 EF      	!:		sty.h	<map_line		; Takes 144..176 cycles.
  513    09:DDB4  A0 08      			ldy	#8
  514    09:DDB6  4A         			lsr	a
  515    09:DDB7  85 EE      			sta.l	<map_line
  516    09:DDB9  62         			cla
  517    09:DDBA  90 03      			bcc	.rotate
  518    09:DDBC  18         	.add:		clc
  519    09:DDBD  65 EF      			adc.h	<map_line
  520    09:DDBF  6A         	.rotate:	ror	a
  521    09:DDC0  66 EE      			ror.l	<map_line		; Lo-byte of (CHR Y * width).
  522    09:DDC2  88         			dey
  523    09:DDC3  B0 F7      			bcs	.add
  524    09:DDC5  D0 F8      			bne	.rotate
  525                        		.endif
  526                        	
  527    09:DDC7  06 EE      	.double:	asl.l	<map_line		; Lo-byte of (CHR Y * width * 2).
  528    09:DDC9  2A         			rol	a
  529    09:DDCA  85 EF      			sta.h	<map_line		; Hi-byte of (CHR Y * width * 2).
  530    09:DDCC  A8         			tay
  531                        	
  532    09:DDCD  BD 91 28   			lda	vdc_map_bank, x		; Put the MAP into MPR3-MPR5.
  533    09:DDD0  53 08      			tam3				; Allow for 16KByte chrmap.
  534    09:DDD2  1A         			inc	a
  535    09:DDD3  53 10      			tam4
  536    09:DDD5  1A         			inc	a
  537    09:DDD6  53 20      			tam5
  538                        	
  539                        			; Loop to here if drawing multiple rows.
  540                        	
  541    09:DDD8  A5 FC      	.next_row:	lda	<map_chr_x		; Map CHR X coordinate.
  542    09:DDDA  0A         			asl	a			; 2-bytes for a BAT value!
  543    09:DDDB  90 02      			bcc	!+
  544    09:DDDD  C8         			iny				; Hi-byte of (CHR Y * width * 2).
  545    09:DDDE  18         			clc
  546    09:DDDF  65 EE      	!:		adc.l	<map_line		; Lo-byte of (CHR Y * width * 2).
  547    09:DDE1  90 01      			bcc	!+
  548    09:DDE3  C8         			iny
  549    09:DDE4  18         	!:		clc				; Calc map data pointer.
  550    09:DDE5  7D 8F 28   			adc.l	vdc_map_addr, x
  551    09:DDE8  85 EC      			sta.l	<_bp			; Maximum map size is 16KBytes
  552    09:DDEA  98         			tya				; so we don't need to consider
  553    09:DDEB  7D 90 28   			adc.h	vdc_map_addr, x		; bank overflow.
  554    09:DDEE  85 ED      			sta.h	<_bp
  555                        	
  556                        			; Draw the first part of the row.
  557                        	
  558    09:DDF0  A5 F9      	.draw_row:	lda	<map_bat_y		; Set the BAT VRAM destination
  559    09:DDF2  85 F1      			sta.h	<_di			; coordinates.
  560    09:DDF4  A5 F8      			lda	<map_bat_x
  561    09:DDF6  85 F0      			sta.l	<_di
  562                        	
  563    09:DDF8  5D 4D 23   			eor	vdc_bat_x_mask, x	; Calc CHR before wrap.
  564    09:DDFB  1A         			inc	a
  565    09:DDFC  C5 FA      			cmp	<map_draw_w		; Usually (SCR_WIDTH / 8) + 1.
  566    09:DDFE  90 02      			bcc	!+
  567    09:DE00  A5 FA      			lda	<map_draw_w		; Maximum CHR to draw.
  568    09:DE02  85 00      	!:		sta	<map_count		; Set number of CHR to draw.
  569    09:DE04  85 01      			sta	<map_drawn		; Preserve number of CHR drawn.
  570                        	
  571    09:DE06  20 40 DE   			jsr	bat_row_strip		; Draw lhs of horizontal strip.
  572                        	
  573                        			; Wrap around and draw the rest of the row (if needed).
  574                        	
  575    09:DE09  38         			sec				; Are there any more CHR that
  576    09:DE0A  A5 FA      			lda	<map_draw_w		; need to be drawn?
  577    09:DE0C  E5 01      			sbc	<map_drawn
  578    09:DE0E  F0 0B      			beq	.done_row
  579                        	
  580    09:DE10  85 00      			sta	<map_count		; Set number of CHR to draw.
  581                        	
  582    09:DE12  A5 F9      			lda	<map_bat_y		; Set the BAT VRAM destination
  583    09:DE14  85 F1      			sta.h	<_di			; coordinates.
  584    09:DE16  64 F0      			stz.l	<_di			; Reset 1st column to draw.
  585                        	
  586    09:DE18  20 40 DE   			jsr	bat_row_strip		; Draw rhs of horizontal strip.
  587                        	
  588    09:DE1B  C6 FB      	.done_row:	dec	<map_draw_h		; Are all desired rows drawn?
  589    09:DE1D  F0 20      			beq	.finished
  590                        	
  591    09:DE1F  A5 F9      			lda	<map_bat_y		; Move BAT Y down by 1.
  592    09:DE21  1A         			inc	a
  593    09:DE22  3D 4E 23   			and	vdc_bat_y_mask, x
  594    09:DE25  85 F9      			sta	<map_bat_y
  595                        	
  596    09:DE27  A4 EF      			ldy.h	<map_line		; Move the map line pointer to
  597    09:DE29  C8         			iny				; the next line.
  598    09:DE2A  BD 52 23   			lda	vdc_map_line_w, x
  599    09:DE2D  F0 0B      			beq	!++			; vdc_map_line_w == 0 == 256.
  600    09:DE2F  0A         			asl	a			; 2-bytes for a BAT value!
  601    09:DE30  B0 01      			bcs	!+
  602    09:DE32  88         			dey				; Fix if vdc_map_line_w <= 127.
  603    09:DE33  18         	!:		clc
  604    09:DE34  65 EE      			adc.l	<map_line
  605    09:DE36  85 EE      			sta.l	<map_line
  606    09:DE38  90 01      			bcc	!++
  607    09:DE3A  C8         	!:		iny
  608    09:DE3B  84 EF      	!:		sty.h	<map_line		; Needed for .next_row!
  609                        	
  610    09:DE3D  80 99      			bra	.next_row		; Draw next row.
  611                        	
  612    09:DE3F  60         	.finished:	rts
  613                        	
  614                        	
  615                        	
  616                        	; ***************************************************************************
  617                        	; ***************************************************************************
  618                        	;
  619                        	; bat_row_strip - Draw a single row of CHR into the BAT.
  620                        	;
  621                        	
  622    09:DE40  20 34 E4   	bat_row_strip:	jsr	set_di_xy_mawr		; Set the BAT VRAM destination.
  623                        	
  624    09:DE43  C2         			cly				; 2
  625    09:DE44  B1 EC      	.repeat:	lda	[_bp], y		; 7
  626    09:DE46  9D 02 02   			sta	VDC_DL, x		; 6
  627    09:DE49  C8         			iny				; 2
  628    09:DE4A  B1 EC      			lda	[_bp], y		; 7
  629               0000     		.if	CHRMAP_BAT_FLAG
  634                        		.endif
  635    09:DE4C  9D 03 02   			sta	VDC_DH, x		; 6
  636    09:DE4F  C8         			iny				; 2
  637                        	
  638    09:DE50  C6 00      	!:		dec	<map_count		; 6
  639    09:DE52  D0 F0      			bne	.repeat			; 4
  640                        	
  641    09:DE54  98         			tya				; 2
  642    09:DE55  F0 07      			beq	!+			; 2/4
  643    09:DE57  18         			clc				; 2
  644    09:DE58  65 EC      			adc.l	<_bp			; 4
  645    09:DE5A  85 EC      			sta.l	<_bp			; 4
  646    09:DE5C  90 02      			bcc	.done			; 2/4
  647    09:DE5E  E6 ED      	!:		inc.h	<_bp			; 6
  648                        	
  649    09:DE60  60         	.done:		rts
  650                        	
  651                        	
  652                        	
  653                        	; ***************************************************************************
  654                        	; ***************************************************************************
  655                        	;
  656                        	; bat_col_strip - Draw a single column of CHR into the BAT.
  657                        	;
  658                        	
  659    09:DE61  20 34 E4   	bat_col_strip:	jsr	set_di_xy_mawr		; Set the BAT VRAM destination.
  660                        	
  661    09:DE64  A0 01      			ldy	#1			; 2
  662    09:DE66  B2 EC      	.repeat:	lda	[_bp]			; 7
  663    09:DE68  9D 02 02   			sta	VDC_DL, x		; 6
  664    09:DE6B  B1 EC      			lda	[_bp], y		; 7
  665               0000     		.if	CHRMAP_BAT_FLAG
  670                        		.endif
  671    09:DE6D  9D 03 02   			sta	VDC_DH, x		; 6
  672                        	
  673    09:DE70  18         			clc				; 2
  674    09:DE71  A5 EE      			lda.l	<map_line		; 4
  675    09:DE73  65 EC      			adc.l	<_bp			; 4
  676    09:DE75  85 EC      			sta.l	<_bp			; 4
  677    09:DE77  A5 EF      			lda.h	<map_line		; 4
  678    09:DE79  65 ED      			adc.h	<_bp			; 4
  679    09:DE7B  85 ED      			sta.h	<_bp			; 4
  680                        	
  681    09:DE7D  C6 00      			dec	<map_count		; 6
  682    09:DE7F  D0 E5      			bne	.repeat			; 4
  683                        	
  684    09:DE81  60         			rts
  685                        	
  686                        		.endprocgroup	; chrmap_group
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   88                        		.endif	HUCC_USES_CHRMAP
   89                        	
   90               0001     		.ifdef	HUCC_USES_OLD_LINE		; Set in hucc_old_line.h
                             #[3]   "..\..\..\include\hucc\hucc-old-line.asm"
   91                        			include	"hucc-old-line.asm"
    1                        	; ***************************************************************************
    2                        	; ***************************************************************************
    3                        	;
    4                        	; hucc-old-line.asm
    5                        	;
    6                        	; Based on the original HuC and MagicKit functions by David Michel and the
    7                        	; other original HuC developers.
    8                        	;
    9                        	; Modifications copyright John Brandwood 2024-2025.
   10                        	;
   11                        	; Distributed under the Boost Software License, Version 1.0.
   12                        	; (See accompanying file LICENSE_1_0.txt or copy at
   13                        	;  http://www.boost.org/LICENSE_1_0.txt)
   14                        	;
   15                        	; ***************************************************************************
   16                        	; ***************************************************************************
   17                        	
   18                        	
   19                        	
   20                        	; ***************************************************************************
   21                        	; ***************************************************************************
   22                        	;
   23                        	; void __fastcall gfx_init( unsigned int start_vram_addr<_ax> );
   24                        	;
   25                        	; initialize graphics mode
   26                        	; - points graphics map to tiles at start_vram_addr
   27                        	
   28                        	_gfx_init.1	.proc
   73                        			.endp
   74                        	
   75                        	
   76                        	
   77                        	; ***************************************************************************
   78                        	; ***************************************************************************
   79                        	;
   80                        	; void __fastcall gfx_clear( unsigned int start_vram_addr<_di> );
   81                        	;
   82                        	; Clear the values in the graphics tiles
   83                        	; - places zeroes in graphics tiles at start_vram_addr
   84                        	
   85                        	_gfx_clear.1	.proc
  105                        			.endp
  106                        	
  107                        	
  108                        	
  109                        	; ***************************************************************************
  110                        	; ***************************************************************************
  111                        	;
  112                        	; void __fastcall gfx_line( unsigned int x1<_gfx_x1>, unsigned int y1<_gfx_y1>, unsigned int x2<_gfx_x2>, unsigned int y2<_gfx_y2>, unsigned char color<_gfx_color> );
  113                        	
  114                        	huc_gfx_line	.procgroup
  459                        			.endprocgroup	; huc_gfx_line
                             #[2]   "..\..\..\include\hucc\hucc-final.asm"
   92                        		.endif
   93                        	
   94               0000     		.ifdef	HUCC_USES_ZX0			; Set in hucc_zx0.h
   96                        		.endif
   97                        	
   98                        	
   99                        	
  100                        	; ***************************************************************************
  101                        	; ***************************************************************************
  102                        	;
  103                        	; Check that C "__zp" declarations aren't overwriting System Card variables.
  104                        	;
  105                        	
  106               20A0     			.zp
  107               0000     		.if	(* > zpg_sys_top) || (USING_PSGDRIVER && (* > zpg_psg_top))
  109                        		.endif
  110                        	
  111                        	
  112                        	
  113                        	; ***************************************************************************
  114                        	; ***************************************************************************
  115                        	;
  116                        	; Check that there isn't too much C "const" data in the ".RODATA" section.
  117                        	;
  118                        	
  119               6073     			.rodata
  120               0000     		.if	(bank(*) - _bank_base) >= (CONST_BANK + 2)
  122                        		.endif
  123               E937     			.code
                             #[1]   "main.s"

PROCEDURE LIST (in order of size):

Size: $10F9, Addr: $01:C073,      .proc _update_PLAYER
Size: $086A, Addr: $01:D16C, .procgroup blkmap_group
Size: $0414, Addr: $01:D9D6,      .proc _joypad_DIR
Size: $0390, Addr: $09:D860,      .proc huc_monofont_x
Size: $02E5, Addr: $0C:DCA0,      .proc _init_LEVEL
Size: $0292, Addr: $09:DBF0, .procgroup chrmap_group
Size: $0108, Addr: $09:DE82,      .proc read_joypads
Size: $00F1, Addr: $01:DDEA,      .proc _recenter_CAMERA
Size: $00DF, Addr: $01:DEDB, .procgroup vdc_set_mode
Size: $00D4, Addr: $02:C000,      .proc _joypad_BUTTONS
Size: $00BF, Addr: $02:C0D4, .procgroup vdc_tty_out
Size: $00A2, Addr: $02:C193,      .proc _main
Size: $0086, Addr: $02:C235,      .proc _sgx_scroll_split.5
Size: $0081, Addr: $02:C2BB,      .proc vbl_init_scroll
Size: $007A, Addr: $0C:DF85,      .proc _check_BG
Size: $0077, Addr: $02:C33C,      .proc core_main
Size: $006A, Addr: $09:DF8A, .procgroup load_vram_group
Size: $0062, Addr: $02:C3B3,      .proc _init_256x224
Size: $005E, Addr: $02:C415,      .proc _check_LADDER
Size: $0051, Addr: $02:C473,      .proc _check_WALL_TR
Size: $0051, Addr: $02:C4C4,      .proc _check_WALL_TL
Size: $0051, Addr: $02:C515,      .proc _check_WALL_BR
Size: $0051, Addr: $02:C566,      .proc _check_WALL_BL
Size: $0051, Addr: $02:C5B7,      .proc _check_FLOOR_R
Size: $0051, Addr: $02:C608,      .proc _check_FLOOR_L
Size: $004B, Addr: $02:C659, .procgroup hucc_memcmp
Size: $004B, Addr: $02:C6A4, .procgroup old_satb_group
Size: $0043, Addr: $01:DFBA, .procgroup vdc_clear_vram
Size: $0043, Addr: $02:C6EF,      .proc sgx_detect
Size: $003F, Addr: $02:C732, .procgroup load_bat_group
Size: $003E, Addr: $02:C771,      .proc _vram2vram.3
Size: $003B, Addr: $02:C7AF,      .proc init_random
Size: $002E, Addr: $02:C7EA,      .proc _scroll_BG
Size: $002B, Addr: $02:C818,      .proc _load_palette.3
Size: $001D, Addr: $02:C843,      .proc _init_PLAYER
Size: $001C, Addr: $02:C860,      .proc clear_vce
Size: $0010, Addr: $02:C87C,      .proc _init_VARIABLES
